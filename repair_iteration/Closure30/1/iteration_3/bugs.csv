bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  For(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	68	None	replace
2	[BUG]  [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  true;  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  true;  }	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	68	None	replace
3	[BUG]  [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true;  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true;  }	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	68	None	replace
4	[BUG]  [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	68	None	replace
5	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  this,  useNode,  def);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  this,  useNode,  def);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  this,  useNode,  def);	  NodeTraversal.traverse(compiler,    s,    this,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	98	None	replace
6	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  this,  def,  rValue);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  this,  def,  rValue);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  this,  def,  rValue);	  NodeTraversal.traverse(compiler,    s,    this,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	98	None	replace
7	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  this,  s);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  def,  this,  s);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  def,  this,  s);	  NodeTraversal.traverse(compiler,    s,    this,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	98	None	replace
8	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  state,  def);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  state,  def);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  state,  def);	  NodeTraversal.traverse(compiler,    s,    this,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	98	None	replace
9	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  this,  state,  def);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  this,  state,  def);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  this,  state,  def);	  NodeTraversal.traverse(compiler,    s,    this,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	98	None	replace
10	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  def);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  def);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  n,  this,  def);	  NodeTraversal.traverse(compiler,    s,    this,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	98	None	replace
11	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValu  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValu  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValu	  if(def.depends!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValu    	non-compiled	[CE]  ')'  expected	164	None	replace
12	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||	  if(def.depends!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValu    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
13	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!	  if(def.depends!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValu    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
14	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(	  if(def.depends!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValu    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
15	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValu  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValu  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValu	  if(def.depends!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValu    	non-compiled	[CE]  ')'  expected	164	None	replace
16	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  nu  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  nu  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  nu	  if(def.depends!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValu    	non-compiled	[CE]  ')'  expected	164	None	replace
17	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(def.depends!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValu  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  if(def.depends!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValu  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(def.depends!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValu	  if(def.depends!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValu    	non-compiled	[CE]  ')'  expected	164	None	replace
18	[BUG]  [BUGGY]  escaped.add(s.jsScope,  def);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s.jsScope,  def);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.jsScope,  def);	  escaped.add(s.jsScope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	84	None	replace
19	[BUG]  [BUGGY]  escaped.add(s.jsScope,  jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s.jsScope,  jsScope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.jsScope,  jsScope);	  escaped.add(s.jsScope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	84	None	replace
20	[BUG]  [BUGGY]  escaped.add(s.jsScope,  useNode);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s.jsScope,  useNode);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.jsScope,  useNode);	  escaped.add(s.jsScope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	84	None	replace
21	[BUG]  [BUGGY]  escaped.add(s.jsScope,  name);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s.jsScope,  name);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.jsScope,  name);	  escaped.add(s.jsScope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	84	None	replace
22	[BUG]  [BUGGY]  For(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  for(Var    r    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	52	None	replace
23	[BUG]  [BUGGY]  For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  for(Var    r    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	52	None	replace
24	[BUG]  [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  for(Var    r    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	52	None	replace
25	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
26	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
27	[BUG]  [BUGGY]  For(Var  s  :  s.getVar(name,  useNode))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  s.getVar(name,  useNode))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  s.getVar(name,  useNode))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	6	None	replace
28	[BUG]  [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name,  useNode);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name,  useNode);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name,  useNode);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	6	None	replace
29	[BUG]  [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||!rValue.equals(s))  {  return  false;  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||!rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||!rValue.equals(s))  {  return  false;  }	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	6	None	replace
30	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends!=  null  ||  def.depends.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends!=  null  ||  def.depends.contains(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends!=  null  ||  def.depends.contains(s.scope));	  Preconditions.checkArgument(def.depends!=    null    &&    def.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	146	None	replace
31	[BUG]  [BUGGY]  Preconditions.checkArgument(s.depends!=  null  &&  def.depends.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(s.depends!=  null  &&  def.depends.contains(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(s.depends!=  null  &&  def.depends.contains(s.scope));	  Preconditions.checkArgument(def.depends!=    null    &&    def.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	146	None	replace
32	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends  ==  null  &&  def.depends.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends  ==  null  &&  def.depends.contains(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends  ==  null  &&  def.depends.contains(s.scope));	  Preconditions.checkArgument(def.depends!=    null    &&    def.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	146	None	replace
33	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends  ==  null  ||  def.depends.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends  ==  null  ||  def.depends.contains(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends  ==  null  ||  def.depends.contains(s.scope));	  Preconditions.checkArgument(def.depends!=    null    &&    def.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	146	None	replace
34	[BUG]  [BUGGY]  Preconditions.checkArgument(des.depends!=  null  &&  def.depends.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(des.depends!=  null  &&  def.depends.contains(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(des.depends!=  null  &&  def.depends.contains(s.scope));	  Preconditions.checkArgument(def.depends!=    null    &&    def.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	146	None	replace
35	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends!=  null  &&  state.depends.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends!=  null  &&  state.depends.contains(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends!=  null  &&  state.depends.contains(s.scope));	  Preconditions.checkArgument(def.depends!=    null    &&    def.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	146	None	replace
36	[BUG]  [BUGGY]  escaped.add(s,  def,  jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s,  def,  jsScope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s,  def,  jsScope);	  escaped.add(s,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	85	None	replace
37	[BUG]  [BUGGY]  escaped.add(jsScope,  def);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(jsScope,  def);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(jsScope,  def);	  escaped.add(s,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	85	None	replace
38	[BUG]  [BUGGY]  escaped.add(def,  s);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(def,  s);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(def,  s);	  escaped.add(s,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	85	None	replace
39	[BUG]  [BUGGY]  escaped.add(s,  def,  state);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s,  def,  state);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s,  def,  state);	  escaped.add(s,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	85	None	replace
40	[BUG]  [BUGGY]  escaped.add(s,  definition);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s,  definition);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s,  definition);	  escaped.add(s,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	85	None	replace
41	[BUG]  [BUGGY]  escaped.add(s,  state.getIn().reachingDef);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s,  state.getIn().reachingDef);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s,  state.getIn().reachingDef);	  escaped.add(s,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	85	None	replace
42	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValu  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValu  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValu	  if(def.depends!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ')'  expected	127	None	replace
43	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rVal  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rVal  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rVal	  if(def.depends!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ')'  expected	127	None	replace
44	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  r  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  r  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  r	  if(def.depends!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ')'  expected	127	None	replace
45	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(def.depends!=  null)  {  if(s.scope!=  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  if(def.depends!=  null)  {  if(s.scope!=  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(def.depends!=  null)  {  if(s.scope!=  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(	  if(def.depends!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
46	[BUG]  [BUGGY]  for(Var  r  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
47	[BUG]  [BUGGY]  Var  rValue  =  def.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  def.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  def.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
48	[BUG]  [BUGGY]  For(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	3	None	replace
49	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(def))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(def))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(def))  {  return  false;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
50	[BUG]  [BUGGY]  for(Var  s  :  jsScope.getVar(name));  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  jsScope.getVar(name));  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  jsScope.getVar(name));  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }	  for(Var    s    :    s.getVar(name));    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	182	None	replace
51	[BUG]  [BUGGY]  For(Var  s  :  jsScope.getVar(name));  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  jsScope.getVar(name));  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  jsScope.getVar(name));  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }	  for(Var    s    :    s.getVar(name));    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	182	None	replace
52	[BUG]  [BUGGY]  if(jsScope!=  null)  {  for(Var  s  :  s.getVar(name));  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  for(Var  s  :  s.getVar(name));  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  for(Var  s  :  s.getVar(name));  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }	  for(Var    s    :    s.getVar(name));    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	182	None	replace
53	[BUG]  [BUGGY]  for(Var  s  :  jsScope.getVar(name));  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  jsScope.getVar(name));  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  jsScope.getVar(name));  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false	  for(Var    s    :    s.getVar(name));    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	182	None	replace
54	[BUG]  [BUGGY]  for(Var  s  :  jsScope.getVar(name));  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  jsScope.getVar(name));  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  jsScope.getVar(name));  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }	  for(Var    s    :    s.getVar(name));    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	182	None	replace
55	[BUG]  [BUGGY]  if(jsScope!=  null)  {  for(Var  s  :  s.getVar(name));  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  for(Var  s  :  s.getVar(name));  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  for(Var  s  :  s.getVar(name));  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false	  for(Var    s    :    s.getVar(name));    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	182	None	replace
56	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    def.vars)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	168	None	replace
57	[BUG]  [BUGGY]  For(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    def.vars)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	168	None	replace
58	[BUG]  [BUGGY]  for(Var  r  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    def.vars)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	168	None	replace
59	[BUG]  [BUGGY]  For(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    def.vars)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	168	None	replace
60	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  }	  if(def!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	118	None	replace
61	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValu  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValu  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValu	  if(def!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ')'  expected	118	None	replace
62	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return	  if(def!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
63	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rVal  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rVal  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rVal	  if(def!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ')'  expected	118	None	replace
64	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  state);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  def,  state);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  def,  state);	  NodeTraversal.traverse(compiler,    def,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	102	None	replace
65	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  null);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  def,  null);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  def,  null);	  NodeTraversal.traverse(compiler,    def,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	102	None	replace
66	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  escaped);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  def,  escaped);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  def,  escaped);	  NodeTraversal.traverse(compiler,    def,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	102	None	replace
67	[BUG]  [BUGGY]  Preconditions.checkArgument(s.depends!=  jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(s.depends!=  jsScope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(s.depends!=  jsScope);	  Preconditions.checkArgument(def.depends!=    jsScope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	217	None	replace
68	[BUG]  [BUGGY]  Preconditions.checkArgument(jsScope.depends!=  def);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(jsScope.depends!=  def);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(jsScope.depends!=  def);	  Preconditions.checkArgument(def.depends!=    jsScope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	217	None	replace
69	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends  ==  s.scope);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends  ==  s.scope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends  ==  s.scope);	  Preconditions.checkArgument(def.depends!=    jsScope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	217	None	replace
70	[BUG]  [BUGGY]  Preconditions.checkArgument(jsScope!=  def.depends);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(jsScope!=  def.depends);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(jsScope!=  def.depends);	  Preconditions.checkArgument(def.depends!=    jsScope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	217	None	replace
71	[BUG]  [BUGGY]  Preconditions.checkArgument(des.depends!=  jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(des.depends!=  jsScope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(des.depends!=  jsScope);	  Preconditions.checkArgument(def.depends!=    jsScope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	217	None	replace
72	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends!=  jsScope,  s.scope);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends!=  jsScope,  s.scope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends!=  jsScope,  s.scope);	  Preconditions.checkArgument(def.depends!=    jsScope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	217	None	replace
73	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  def,  new  FlowState  <  MustDef>());  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  def,  new  FlowState  <  MustDef>());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  n,  def,  new  FlowState  <  MustDef>());	  NodeTraversal.traverse(compiler,    n,    new    FlowState    <    MustDef>());    	non-compiled	[CE]  reached  end  of  file  while  parsing	58	None	replace
74	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FlowState  <  MustDef>(),  def);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FlowState  <  MustDef>(),  def);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  n,  new  FlowState  <  MustDef>(),  def);	  NodeTraversal.traverse(compiler,    n,    new    FlowState    <    MustDef>());    	non-compiled	[CE]  reached  end  of  file  while  parsing	58	None	replace
75	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  state.getAnnotation());  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  state.getAnnotation());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  n,  state.getAnnotation());	  NodeTraversal.traverse(compiler,    n,    new    FlowState    <    MustDef>());    	non-compiled	[CE]  reached  end  of  file  while  parsing	58	None	replace
76	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FlowState  <  MustDef>(),  state);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FlowState  <  MustDef>(),  state);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  n,  new  FlowState  <  MustDef>(),  state);	  NodeTraversal.traverse(compiler,    n,    new    FlowState    <    MustDef>());    	non-compiled	[CE]  reached  end  of  file  while  parsing	58	None	replace
77	[BUG]  [BUGGY]  rValue  =  s.getVar(name);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  rValue  =  s.getVar(name);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	rValue  =  s.getVar(name);	  rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	77	None	replace
78	[BUG]  [BUGGY]  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }	  rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	77	None	replace
79	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }	  rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	77	None	replace
80	[BUG]  [BUGGY]  rValue  =  jsScope.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  rValue  =  jsScope.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	rValue  =  jsScope.getVar(name);  if(rValue  ==  null)  {  return  false;  }	  rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	77	None	replace
81	[BUG]  [BUGGY]  rValue  =  s.getVar(name,  def);  if(rValue  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  rValue  =  s.getVar(name,  def);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	rValue  =  s.getVar(name,  def);  if(rValue  ==  null)  {  return  false;  }	  rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	77	None	replace
82	[BUG]  [BUGGY]  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!depends.isEmpty())  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!depends.isEmpty())  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	rValue  =  s.getVar(name);  if(rValue  ==  null  ||!depends.isEmpty())  {  return  false;  }	  rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	77	None	replace
83	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	49	None	replace
84	[BUG]  [BUGGY]  if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	49	None	replace
85	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	49	None	replace
86	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);	  Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
87	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }	  Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
88	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(s.scope))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(s.scope))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(s.scope))  {  return  false;  }	  Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
89	[BUG]  [BUGGY]  FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }	  Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
90	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s.scope))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s.scope))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s.scope))  {  return  false;  }	  Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
91	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||!rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||!rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||!rValue.equals(rValue))  {  return  false;  }	  Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
92	[BUG]  [BUGGY]  Preconditions.checkArgument(s.depends.contains(s.depends));  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(s.depends.contains(s.depends));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(s.depends.contains(s.depends));	  Preconditions.checkArgument(s.depends.contains(def.depends));    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
93	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.depends));  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.depends));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s.depends));	  Preconditions.checkArgument(s.depends.contains(def.depends));    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
94	[BUG]  [BUGGY]  Preconditions.checkArgument(resultMap.contains(s.depends));  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(resultMap.contains(s.depends));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(resultMap.contains(s.depends));	  Preconditions.checkArgument(s.depends.contains(def.depends));    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
95	[BUG]  [BUGGY]  Preconditions.checkArgument(s.depends.contains(def.depends)||  s.depends.contains(def.depends));  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(s.depends.contains(def.depends)||  s.depends.contains(def.depends));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(s.depends.contains(def.depends)||  s.depends.contains(def.depends));	  Preconditions.checkArgument(s.depends.contains(def.depends));    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
96	[BUG]  [BUGGY]  Preconditions.checkArgument(!s.depends.contains(def.depends));  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(!s.depends.contains(def.depends));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(!s.depends.contains(def.depends));	  Preconditions.checkArgument(s.depends.contains(def.depends));    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
97	[BUG]  [BUGGY]  Preconditions.checkArgument(s.depends.contains(name));  [CE]  reached  end  of  file  while  parsing  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(s.depends.contains(name));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(s.depends.contains(name));	  Preconditions.checkArgument(s.depends.contains(def.depends));    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
98	[BUG]  [BUGGY]  Preconditions.checkArgument(s.depends.contains(s.scope)||  s.depends.contains(s.depends));  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(s.depends.contains(s.scope)||  s.depends.contains(s.depends));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(s.depends.contains(s.scope)||  s.depends.contains(s.depends));	  Preconditions.checkArgument(def.depends.contains(s.scope)||    s.depends.contains(s.depends));    	non-compiled	[CE]  reached  end  of  file  while  parsing	147	None	replace
99	[BUG]  [BUGGY]  Preconditions.checkArgument(s.depends.contains(def.scope)||  s.depends.contains(s.depends));  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(s.depends.contains(def.scope)||  s.depends.contains(s.depends));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(s.depends.contains(def.scope)||  s.depends.contains(s.depends));	  Preconditions.checkArgument(def.depends.contains(s.scope)||    s.depends.contains(s.depends));    	non-compiled	[CE]  reached  end  of  file  while  parsing	147	None	replace
100	[BUG]  [BUGGY]  Preconditions.checkArgument(s.depends.contains(def)||  s.depends.contains(s.depends));  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(s.depends.contains(def)||  s.depends.contains(s.depends));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(s.depends.contains(def)||  s.depends.contains(s.depends));	  Preconditions.checkArgument(def.depends.contains(s.scope)||    s.depends.contains(s.depends));    	non-compiled	[CE]  reached  end  of  file  while  parsing	147	None	replace
101	[BUG]  [BUGGY]  Preconditions.checkArgument(s.depends.contains(def)||  s.depends.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(s.depends.contains(def)||  s.depends.contains(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(s.depends.contains(def)||  s.depends.contains(s.scope));	  Preconditions.checkArgument(def.depends.contains(s.scope)||    s.depends.contains(s.depends));    	non-compiled	[CE]  reached  end  of  file  while  parsing	147	None	replace
102	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.scope)||  def.depends.contains(s.depends));  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.scope)||  def.depends.contains(s.depends));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s.scope)||  def.depends.contains(s.depends));	  Preconditions.checkArgument(def.depends.contains(s.scope)||    s.depends.contains(s.depends));    	non-compiled	[CE]  reached  end  of  file  while  parsing	147	None	replace
103	[BUG]  [BUGGY]  Preconditions.checkArgument(resultMap.contains(s.scope)||  s.depends.contains(s.depends));  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(resultMap.contains(s.scope)||  s.depends.contains(s.depends));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(resultMap.contains(s.scope)||  s.depends.contains(s.depends));	  Preconditions.checkArgument(def.depends.contains(s.scope)||    s.depends.contains(s.depends));    	non-compiled	[CE]  reached  end  of  file  while  parsing	147	None	replace
104	[BUG]  [BUGGY]  Node  rValue  =  jsScope.getVar(name);  if(rValue!=  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  jsScope.getVar(name);  if(rValue!=  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  jsScope.getVar(name);  if(rValue!=  null)  {  return  true;  }	  Node    rValue    =    jsScope.getVar(name);    if(rValue    ==    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	153	None	replace
105	[BUG]  [BUGGY]  Node  rValue  =  jsScope.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  jsScope.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  jsScope.getVar(name);  if(rValue!=  null)  {  return  false;  }	  Node    rValue    =    jsScope.getVar(name);    if(rValue    ==    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	153	None	replace
106	[BUG]  [BUGGY]  ||  jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  ||  jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	||  jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	204	None	replace
107	[BUG]  [BUGGY]  if(jsScope!=  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	204	None	replace
108	[BUG]  [BUGGY]  Preconditions.checkArgument(!def.depends.contains(s.name));  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(!def.depends.contains(s.name));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(!def.depends.contains(s.name));	  Preconditions.checkArgument(!def.depends.contains(s));    	non-compiled	[CE]  reached  end  of  file  while  parsing	23	None	replace
109	[BUG]  [BUGGY]  Preconditions.checkArgument(!def.depends.contains(s,  s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(!def.depends.contains(s,  s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(!def.depends.contains(s,  s.scope));	  Preconditions.checkArgument(!def.depends.contains(s));    	non-compiled	[CE]  reached  end  of  file  while  parsing	23	None	replace
110	[BUG]  [BUGGY]  Preconditions.checkArgument(!s.depends.contains(def));  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(!s.depends.contains(def));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(!s.depends.contains(def));	  Preconditions.checkArgument(!def.depends.contains(s));    	non-compiled	[CE]  reached  end  of  file  while  parsing	23	None	replace
111	[BUG]  [BUGGY]  Preconditions.checkArgument(!def.depends.contains(s.scope),  s.depends);  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(!def.depends.contains(s.scope),  s.depends);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(!def.depends.contains(s.scope),  s.depends);	  Preconditions.checkArgument(!def.depends.contains(s));    	non-compiled	[CE]  reached  end  of  file  while  parsing	23	None	replace
112	[BUG]  [BUGGY]  Preconditions.checkArgument(!def.depends.contains(s.scope,  s.depends));  [CE]  reached  end  of  file  while  parsing  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(!def.depends.contains(s.scope,  s.depends));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(!def.depends.contains(s.scope,  s.depends));	  Preconditions.checkArgument(!def.depends.contains(s));    	non-compiled	[CE]  reached  end  of  file  while  parsing	23	None	replace
113	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  new  FlowState  <  MustDef>(1));  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  new  FlowState  <  MustDef>(1));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  def,  new  FlowState  <  MustDef>(1));	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>(1));    	non-compiled	[CE]  reached  end  of  file  while  parsing	207	None	replace
114	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  new  FlowState  <  MustDef>(1));  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  def,  new  FlowState  <  MustDef>(1));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  def,  new  FlowState  <  MustDef>(1));	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>(1));    	non-compiled	[CE]  reached  end  of  file  while  parsing	207	None	replace
115	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(1),  state);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(1),  state);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(1),  state);	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>(1));    	non-compiled	[CE]  reached  end  of  file  while  parsing	207	None	replace
116	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(2));  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(2));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(2));	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>(1));    	non-compiled	[CE]  reached  end  of  file  while  parsing	207	None	replace
117	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(1),  def);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(1),  def);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(1),  def);	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>(1));    	non-compiled	[CE]  reached  end  of  file  while  parsing	207	None	replace
118	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  state,  new  FlowState  <  MustDef>(1));  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  state,  new  FlowState  <  MustDef>(1));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  state,  new  FlowState  <  MustDef>(1));	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>(1));    	non-compiled	[CE]  reached  end  of  file  while  parsing	207	None	replace
119	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FlowState  <  MustDef>(1));  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FlowState  <  MustDef>(1));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  n,  new  FlowState  <  MustDef>(1));	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>(1));    	non-compiled	[CE]  reached  end  of  file  while  parsing	207	None	replace
120	[BUG]  [BUGGY]  for(Var  r  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	95	None	replace
121	[BUG]  [BUGGY]  Var  rValue  =  def.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  def.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  def.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	95	None	replace
122	[BUG]  [BUGGY]  For(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	95	None	replace
123	[BUG]  [BUGGY]  Node  rValue  =  def.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  def.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  def.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	95	None	replace
124	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue!=  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue!=  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue!=  s.getVar(name))  {  return  false;  }	  Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	54	None	replace
125	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	54	None	replace
126	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  &&  rValue!=  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  &&  rValue!=  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue  ==  null  &&  rValue!=  s.getVar(name))  {  return  false;  }	  Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	54	None	replace
127	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  >=  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  >=  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  >=  s.getVar(name))  {  return  false;  }	  Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	54	None	replace
128	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	135	None	replace
129	[BUG]  [BUGGY]  For(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	135	None	replace
130	[BUG]  [BUGGY]  Var  rValue  =  def.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  def.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  def.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	135	None	replace
131	[BUG]  [BUGGY]  For(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	135	None	replace
132	[BUG]  [BUGGY]  For(Var  s  :  def.getVars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  for(Var    s    :    def.getVars)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	171	None	replace
133	[BUG]  [BUGGY]  for(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  for(Var    s    :    def.getVars)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	171	None	replace
134	[BUG]  [BUGGY]  for(Var  r  :  def.getVars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  def.getVars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  def.getVars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  for(Var    s    :    def.getVars)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	171	None	replace
135	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name,  useNode);  if(rValue!=  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name,  useNode);  if(rValue!=  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name,  useNode);  if(rValue!=  null)  {  return  true;  }	  Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	replace
136	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name,  def);  if(rValue!=  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name,  def);  if(rValue!=  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name,  def);  if(rValue!=  null)  {  return  true;  }	  Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	replace
137	[BUG]  [BUGGY]  Node  rValue  =  jsScope.getVar(name,  s.scope);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  jsScope.getVar(name,  s.scope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  jsScope.getVar(name,  s.scope);	  Node    rValue    =    jsScope.getVar(name);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
138	[BUG]  [BUGGY]  Node  rValue  =  jsScope.getVar(name,  s);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  jsScope.getVar(name,  s);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  jsScope.getVar(name,  s);	  Node    rValue    =    jsScope.getVar(name);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
139	[BUG]  [BUGGY]  Node  rValue  =  jsScope.getVar(name)+  1;  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  jsScope.getVar(name)+  1;  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  jsScope.getVar(name)+  1;	  Node    rValue    =    jsScope.getVar(name);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
140	[BUG]  [BUGGY]  Node  rValue  =  jsScope.getVar(name,  s.type);  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  jsScope.getVar(name,  s.type);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  jsScope.getVar(name,  s.type);	  Node    rValue    =    jsScope.getVar(name);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
141	[BUG]  [BUGGY]  Node  rValue  =  s.scope.getVar(name);  [CE]  reached  end  of  file  while  parsing  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.scope.getVar(name);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.scope.getVar(name);	  Node    rValue    =    jsScope.getVar(name);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
142	[BUG]  [BUGGY]  Node  rValue  =  s.scope.getRValue();  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.scope.getRValue();  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.scope.getRValue();	  Node    rValue    =    jsScope.getRValue();    	non-compiled	[CE]  reached  end  of  file  while  parsing	70	None	replace
143	[BUG]  [BUGGY]  Node  rValue  =  s.jsScope.getRValue();  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.jsScope.getRValue();  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.jsScope.getRValue();	  Node    rValue    =    jsScope.getRValue();    	non-compiled	[CE]  reached  end  of  file  while  parsing	70	None	replace
144	[BUG]  [BUGGY]  Node  rValue  =  s.reachingDef.getRValue();  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.reachingDef.getRValue();  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.reachingDef.getRValue();	  Node    rValue    =    jsScope.getRValue();    	non-compiled	[CE]  reached  end  of  file  while  parsing	70	None	replace
145	[BUG]  [BUGGY]  Node  rValue  =  s.node.getRValue();  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.node.getRValue();  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.node.getRValue();	  Node    rValue    =    jsScope.getRValue();    	non-compiled	[CE]  reached  end  of  file  while  parsing	70	None	replace
146	[BUG]  [BUGGY]  Preconditions.checkArgument(def!=  s.scope);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def!=  s.scope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def!=  s.scope);	  Preconditions.checkArgument(s.scope!=    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	94	None	replace
147	[BUG]  [BUGGY]  Preconditions.checkArgument(s.scope  ==  def);  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(s.scope  ==  def);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(s.scope  ==  def);	  Preconditions.checkArgument(s.scope!=    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	94	None	replace
148	[BUG]  [BUGGY]  Preconditions.checkArgument(s.scope!=  scope);  [CE]  reached  end  of  file  while  parsing  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(s.scope!=  scope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(s.scope!=  scope);	  Preconditions.checkArgument(s.scope!=    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	94	None	replace
149	[BUG]  [BUGGY]  Preconditions.checkArgument(s.scope!=  null);  [CE]  reached  end  of  file  while  parsing  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(s.scope!=  null);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(s.scope!=  null);	  Preconditions.checkArgument(s.scope!=    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	94	None	replace
150	[BUG]  [BUGGY]  ||  jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  ||  jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	||  jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	191	None	replace
151	[BUG]  [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false;  }	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	191	None	replace
152	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	33	None	replace
153	[BUG]  [BUGGY]  if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	33	None	replace
154	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
155	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(cfgNode))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(cfgNode))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(cfgNode))  {  return  false;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	33	None	replace
156	[BUG]  [BUGGY]  For(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }	  for(Var    s    :    def.vars)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	176	None	replace
157	[BUG]  [BUGGY]  for(Var  r  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }	  for(Var    s    :    def.vars)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	176	None	replace
158	[BUG]  [BUGGY]  for(Var  vars  :  def.vars)  {  Var  rValue  =  vars.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  vars  :  def.vars)  {  Var  rValue  =  vars.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  vars  :  def.vars)  {  Var  rValue  =  vars.getVar(name);  if(rValue!=  null)  {  return  false;  }	  for(Var    s    :    def.vars)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	176	None	replace
159	[BUG]  [BUGGY]  for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }	  for(Var    s    :    def.vars)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	176	None	replace
160	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  state);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  state);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  def,  state);	  NodeTraversal.traverse(compiler,    s,    this,    state);    	non-compiled	[CE]  reached  end  of  file  while  parsing	212	None	replace
161	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  state);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  state);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  n,  this,  state);	  NodeTraversal.traverse(compiler,    s,    this,    state);    	non-compiled	[CE]  reached  end  of  file  while  parsing	212	None	replace
162	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  this,  useNode,  state);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  this,  useNode,  state);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  this,  useNode,  state);	  NodeTraversal.traverse(compiler,    s,    this,    state);    	non-compiled	[CE]  reached  end  of  file  while  parsing	212	None	replace
163	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue!=  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue!=  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue!=  s.getVar(name))  {  return  false;  }	  Node    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	replace
164	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue  ==  s.getVar(name))  {  return  false;  }	  Node    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	replace
165	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  Node    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	replace
166	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  &&  rValue!=  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  &&  rValue!=  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue  ==  null  &&  rValue!=  s.getVar(name))  {  return  false;  }	  Node    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	replace
167	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue!=  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue!=  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue!=  s.getVar(name))  {  return  false;  }	  Node    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	replace
168	[BUG]  [BUGGY]  ||  s.scope!=  target)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  ||  s.scope!=  target)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	||  s.scope!=  target)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }	  if(s.scope!=    target)    {    Var    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
169	[BUG]  [BUGGY]  if(s.scope!=  target)  {  Var  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  target)  {  Var  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  target)  {  Var  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  true;  }	  if(s.scope!=    target)    {    Var    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	140	None	replace
170	[BUG]  [BUGGY]  if(s.scope!=  target)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  target)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  target)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  false;  }	  if(s.scope!=    target)    {    Var    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	140	None	replace
171	[BUG]  [BUGGY]  Var  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  true;  }	  if(s.scope!=    target)    {    Var    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	140	None	replace
172	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(lhs))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
173	[BUG]  [BUGGY]  if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(lhs))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
174	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(lhs))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
175	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(lhs))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
176	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(lhs))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
177	[BUG]  [BUGGY]  For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	81	None	replace
178	[BUG]  [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	81	None	replace
179	[BUG]  [BUGGY]  For(Var  s  :  s.getVar(name,  useNode))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  s.getVar(name,  useNode))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  s.getVar(name,  useNode))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	81	None	replace
180	[BUG]  [BUGGY]  Preconditions.checkArgument(s.depends.contains(def.name));  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(s.depends.contains(def.name));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(s.depends.contains(def.name));	  Preconditions.checkArgument(def.depends.contains(s.name));    	non-compiled	[CE]  reached  end  of  file  while  parsing	225	None	replace
181	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.name)||  def.depends.contains(s.name));  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.name)||  def.depends.contains(s.name));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s.name)||  def.depends.contains(s.name));	  Preconditions.checkArgument(def.depends.contains(s.name));    	non-compiled	[CE]  reached  end  of  file  while  parsing	225	None	replace
182	[BUG]  [BUGGY]  Preconditions.checkArgument(resultMap.contains(s.name));  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(resultMap.contains(s.name));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(resultMap.contains(s.name));	  Preconditions.checkArgument(def.depends.contains(s.name));    	non-compiled	[CE]  reached  end  of  file  while  parsing	225	None	replace
183	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.name)||  s.depends.contains(s.name));  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.name)||  s.depends.contains(s.name));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s.name)||  s.depends.contains(s.name));	  Preconditions.checkArgument(def.depends.contains(s.name));    	non-compiled	[CE]  reached  end  of  file  while  parsing	225	None	replace
184	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.name,  s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.name,  s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s.name,  s.scope));	  Preconditions.checkArgument(def.depends.contains(s.name));    	non-compiled	[CE]  reached  end  of  file  while  parsing	225	None	replace
185	[BUG]  [BUGGY]  For(Var  s  :  def.getVars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  for(Var    s    :    def.getVars)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	122	None	replace
186	[BUG]  [BUGGY]  for(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  for(Var    s    :    def.getVars)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	122	None	replace
187	[BUG]  [BUGGY]  for(Var  r  :  def.getVars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  def.getVars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  def.getVars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  for(Var    s    :    def.getVars)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	122	None	replace
188	[BUG]  [BUGGY]  For(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  for(Var    s    :    def.getVars)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	122	None	replace
189	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  escaped);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  escaped);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  def,  escaped);	  NodeTraversal.traverse(compiler,    s,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	97	None	replace
190	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  s);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  def,  s);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  def,  s);	  NodeTraversal.traverse(compiler,    s,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	97	None	replace
191	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  rValue);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  rValue);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  def,  rValue);	  NodeTraversal.traverse(compiler,    s,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	97	None	replace
192	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  state);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  state);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  state);	  NodeTraversal.traverse(compiler,    s,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	97	None	replace
193	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  useNode);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  useNode);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  useNode);	  NodeTraversal.traverse(compiler,    s,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	97	None	replace
194	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  def);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  def);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  n,  def);	  NodeTraversal.traverse(compiler,    s,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	97	None	replace
195	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  false;  }	  if(jsScope!=    null)    {    Var    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
196	[BUG]  [BUGGY]  ||  jsScope!=  null)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  ||  jsScope!=  null)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	||  jsScope!=  null)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  false;  }	  if(jsScope!=    null)    {    Var    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
197	[BUG]  [BUGGY]  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  false;  }	  if(jsScope!=    null)    {    Var    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
198	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  Var  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  false;  }	  if(jsScope!=    null)    {    Var    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
199	[BUG]  [BUGGY]  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  false;  }	  if(jsScope!=    null)    {    Var    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
200	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  false;  }	  if(jsScope!=    null)    {    Var    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
201	[BUG]  [BUGGY]  FlowState  <  Var>  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  FlowState  <  Var>  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	FlowState  <  Var>  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  false;  }	  FlowState    <    Var>    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	139	None	replace
202	[BUG]  [BUGGY]  FlowState  <  Var>  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  FlowState  <  Var>  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	FlowState  <  Var>  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  true;  }	  FlowState    <    Var>    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	139	None	replace
203	[BUG]  [BUGGY]  FlowState  <  Var>  rhs  =  s.getVar(name);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  FlowState  <  Var>  rhs  =  s.getVar(name);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	FlowState  <  Var>  rhs  =  s.getVar(name);	  FlowState    <    Var>    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	139	None	replace
204	[BUG]  [BUGGY]  FlowState  <  Var>  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  FlowState  <  Var>  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	FlowState  <  Var>  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  false;  }	  FlowState    <    Var>    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	139	None	replace
205	[BUG]  [BUGGY]  FlowState  <  Var>  rhs  =  state.getIn().reachingDef.getVar(name);  if(rhs!=  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  FlowState  <  Var>  rhs  =  state.getIn().reachingDef.getVar(name);  if(rhs!=  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	FlowState  <  Var>  rhs  =  state.getIn().reachingDef.getVar(name);  if(rhs!=  null)  {  return  true;  }	  FlowState    <    Var>    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	139	None	replace
206	[BUG]  [BUGGY]  FlowState  <  Var>  rhs  =  state.getVar(name);  if(rhs!=  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  FlowState  <  Var>  rhs  =  state.getVar(name);  if(rhs!=  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	FlowState  <  Var>  rhs  =  state.getVar(name);  if(rhs!=  null)  {  return  true;  }	  FlowState    <    Var>    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	139	None	replace
207	[BUG]  [BUGGY]  Preconditions.checkArgument(s.depends!=  null  &&  def.depends.contains(s));  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(s.depends!=  null  &&  def.depends.contains(s));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(s.depends!=  null  &&  def.depends.contains(s));	  Preconditions.checkArgument(def.depends!=    null    &&    def.depends.contains(s));    	non-compiled	[CE]  reached  end  of  file  while  parsing	144	None	replace
208	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends!=  null  ||  def.depends.contains(s));  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends!=  null  ||  def.depends.contains(s));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends!=  null  ||  def.depends.contains(s));	  Preconditions.checkArgument(def.depends!=    null    &&    def.depends.contains(s));    	non-compiled	[CE]  reached  end  of  file  while  parsing	144	None	replace
209	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends  ==  null  ||  def.depends.contains(s));  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends  ==  null  ||  def.depends.contains(s));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends  ==  null  ||  def.depends.contains(s));	  Preconditions.checkArgument(def.depends!=    null    &&    def.depends.contains(s));    	non-compiled	[CE]  reached  end  of  file  while  parsing	144	None	replace
210	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends!=  null  &&  def.depends.contains(s.name));  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends!=  null  &&  def.depends.contains(s.name));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends!=  null  &&  def.depends.contains(s.name));	  Preconditions.checkArgument(def.depends!=    null    &&    def.depends.contains(s));    	non-compiled	[CE]  reached  end  of  file  while  parsing	144	None	replace
211	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(def.depends!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValu  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  if(def.depends!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValu  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(def.depends!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValu	  if(def.depends!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValu    	non-compiled	[CE]  ')'  expected	129	None	replace
212	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false  }	  if(jsScope!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false    	non-compiled	[CE]  ';'  expected	108	None	replace
213	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValu  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValu  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValu	  if(jsScope!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false    	non-compiled	[CE]  ')'  expected	108	None	replace
214	[BUG]  [BUGGY]  if(jsScope  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false	  if(jsScope!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false    	non-compiled	[CE]  ';'  expected	108	None	replace
215	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(	  if(jsScope!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
216	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return	  if(jsScope!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
217	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(s.scope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  if(s.scope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(s.scope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false	  if(jsScope!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false    	non-compiled	[CE]  ';'  expected	108	None	replace
218	[BUG]  [BUGGY]  Preconditions.checkArgument(jsScope!=  s.scope,  def);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(jsScope!=  s.scope,  def);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(jsScope!=  s.scope,  def);	  Preconditions.checkArgument(s.scope!=    jsScope,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	90	None	replace
219	[BUG]  [BUGGY]  Preconditions.checkArgument(def!=  s.scope,  jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def!=  s.scope,  jsScope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def!=  s.scope,  jsScope);	  Preconditions.checkArgument(s.scope!=    jsScope,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	90	None	replace
220	[BUG]  [BUGGY]  Preconditions.checkArgument(s.scope!=  def,  jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(s.scope!=  def,  jsScope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(s.scope!=  def,  jsScope);	  Preconditions.checkArgument(s.scope!=    jsScope,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	90	None	replace
221	[BUG]  [BUGGY]  Preconditions.checkArgument(jsScope.getVar(name)!=  s.scope,  def);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(jsScope.getVar(name)!=  s.scope,  def);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(jsScope.getVar(name)!=  s.scope,  def);	  Preconditions.checkArgument(s.scope!=    jsScope,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	90	None	replace
222	[BUG]  [BUGGY]  Preconditions.checkArgument(s.scope  ==  def,  jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(s.scope  ==  def,  jsScope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(s.scope  ==  def,  jsScope);	  Preconditions.checkArgument(s.scope!=    jsScope,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	90	None	replace
223	[BUG]  [BUGGY]  Node  rValue  =  s.getRValue(name);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getRValue(name);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getRValue(name);	  Node    rValue    =    jsScope.getRValue(name);    	non-compiled	[CE]  reached  end  of  file  while  parsing	71	None	replace
224	[BUG]  [BUGGY]  Node  rValue  =  jsScope.getRValue(name,  s.scope);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  jsScope.getRValue(name,  s.scope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  jsScope.getRValue(name,  s.scope);	  Node    rValue    =    jsScope.getRValue(name);    	non-compiled	[CE]  reached  end  of  file  while  parsing	71	None	replace
225	[BUG]  [BUGGY]  Node  rValue  =  jsScope.getRValue(name,  def);  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  jsScope.getRValue(name,  def);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  jsScope.getRValue(name,  def);	  Node    rValue    =    jsScope.getRValue(name);    	non-compiled	[CE]  reached  end  of  file  while  parsing	71	None	replace
226	[BUG]  [BUGGY]  Node  rValue  =  s.scope.getRValue(name);  [CE]  reached  end  of  file  while  parsing  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.scope.getRValue(name);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.scope.getRValue(name);	  Node    rValue    =    jsScope.getRValue(name);    	non-compiled	[CE]  reached  end  of  file  while  parsing	71	None	replace
227	[BUG]  [BUGGY]  Node  rValue  =  jsScope.getRValue(name,  s);  [CE]  reached  end  of  file  while  parsing  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  jsScope.getRValue(name,  s);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  jsScope.getRValue(name,  s);	  Node    rValue    =    jsScope.getRValue(name);    	non-compiled	[CE]  reached  end  of  file  while  parsing	71	None	replace
228	[BUG]  [BUGGY]  Node  rValue  =  jsScope.getRValue(name)+  1;  [CE]  reached  end  of  file  while  parsing  [FE]                                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  jsScope.getRValue(name)+  1;  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  jsScope.getRValue(name)+  1;	  Node    rValue    =    jsScope.getRValue(name);    	non-compiled	[CE]  reached  end  of  file  while  parsing	71	None	replace
229	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name,  def);  if(rValue!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name,  def);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name,  def);  if(rValue!=  null)  {  return  false;  }	  Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	78	None	replace
230	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name,  useNode);  if(rValue!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name,  useNode);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name,  useNode);  if(rValue!=  null)  {  return  false;  }	  Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	78	None	replace
231	[BUG]  [BUGGY]  Var  rValue  =  jsScope.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  jsScope.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  jsScope.getVar(name);  if(rValue!=  null)  {  return  false;  }	  Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	78	None	replace
232	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name,  useNode);  if(rValue  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name,  useNode);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name,  useNode);  if(rValue  ==  null)  {  return  false;  }	  Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	78	None	replace
233	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	29	None	replace
234	[BUG]  [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	29	None	replace
235	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue!=  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue!=  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue!=  s.getVar(name))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	29	None	replace
236	[BUG]  [BUGGY]  for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue!=  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue!=  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue!=  s.getVar(name))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	29	None	replace
237	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	29	None	replace
238	[BUG]  [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue!=  s.getVar(name))  {  return  true;  }  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue!=  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue!=  s.getVar(name))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	29	None	replace
239	[BUG]  [BUGGY]  Var  rValue  =  def.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  def.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  def.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	65	None	replace
240	[BUG]  [BUGGY]  for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	65	None	replace
241	[BUG]  [BUGGY]  Var  rValue  =  def.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  def.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  def.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	130	None	replace
242	[BUG]  [BUGGY]  For(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	130	None	replace
243	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }	  Node    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	64	None	replace
244	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(m))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(m))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(m))  {  return  true;  }	  Node    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	64	None	replace
245	[BUG]  [BUGGY]  Node  rValue  =  jsScope.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  jsScope.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  jsScope.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }	  Node    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	64	None	replace
246	[BUG]  [BUGGY]  For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }	  for(Var    rValue    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	206	None	replace
247	[BUG]  [BUGGY]  for(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(lhs))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(lhs))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(lhs))  {  return  false;  }	  for(Var    rValue    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	206	None	replace
248	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(s))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	161	None	replace
249	[BUG]  [BUGGY]  For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(s))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	161	None	replace
250	[BUG]  [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(s))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	161	None	replace
251	[BUG]  [BUGGY]  For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(s))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	161	None	replace
252	[BUG]  [BUGGY]  for(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(s))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	161	None	replace
253	[BUG]  [BUGGY]  ||  jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  ||  jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	||  jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	199	None	replace
254	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  new  FlowState  <  MustDef>(),  s);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  def,  new  FlowState  <  MustDef>(),  s);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  def,  new  FlowState  <  MustDef>(),  s);	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>(),    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	60	None	replace
255	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(),  def,  state);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(),  def,  state);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(),  def,  state);	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>(),    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	60	None	replace
256	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(),  definition);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(),  definition);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(),  definition);	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>(),    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	60	None	replace
257	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(),  state,  def);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(),  state,  def);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(),  state,  def);	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>(),    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	60	None	replace
258	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(),  defined);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(),  defined);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(),  defined);	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>(),    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	60	None	replace
259	[BUG]  [BUGGY]  For(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  For(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	124	None	replace
260	[BUG]  [BUGGY]  Pentru(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Pentru(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Pentru(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  For(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	124	None	replace
261	[BUG]  [BUGGY]  For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  For(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	124	None	replace
262	[BUG]  [BUGGY]  For(Var  s  :  def.getVars())  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVars())  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVars())  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  For(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	124	None	replace
263	[BUG]  [BUGGY]  For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue!=  s.getVar(name))  {  return  false;  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue!=  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue!=  s.getVar(name))  {  return  false;  }	  For(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	124	None	replace
264	[BUG]  [BUGGY]  Preconditions.checkArgument(s.depends.contains(s.scope)||  s.depends.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(s.depends.contains(s.scope)||  s.depends.contains(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(s.depends.contains(s.scope)||  s.depends.contains(s.scope));	  Preconditions.checkArgument(def.depends.contains(s.scope)||    s.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
265	[BUG]  [BUGGY]  Preconditions.checkArgument(s.depends.contains(def.scope)||  s.depends.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(s.depends.contains(def.scope)||  s.depends.contains(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(s.depends.contains(def.scope)||  s.depends.contains(s.scope));	  Preconditions.checkArgument(def.depends.contains(s.scope)||    s.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
266	[BUG]  [BUGGY]  Preconditions.checkArgument(resultMap.contains(s.scope)||  s.depends.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(resultMap.contains(s.scope)||  s.depends.contains(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(resultMap.contains(s.scope)||  s.depends.contains(s.scope));	  Preconditions.checkArgument(def.depends.contains(s.scope)||    s.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
267	[BUG]  [BUGGY]  Preconditions.checkArgument(!def.depends.contains(s.scope)||  s.depends.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(!def.depends.contains(s.scope)||  s.depends.contains(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(!def.depends.contains(s.scope)||  s.depends.contains(s.scope));	  Preconditions.checkArgument(def.depends.contains(s.scope)||    s.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
268	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  state,  new  FlowState  <  MustDef>());  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  state,  new  FlowState  <  MustDef>());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  state,  new  FlowState  <  MustDef>());	  NodeTraversal.traverse(compiler,    def,    new    FlowState    <    MustDef>());    	non-compiled	[CE]  reached  end  of  file  while  parsing	57	None	replace
269	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  useNode,  new  FlowState  <  MustDef>());  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  useNode,  new  FlowState  <  MustDef>());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  useNode,  new  FlowState  <  MustDef>());	  NodeTraversal.traverse(compiler,    def,    new    FlowState    <    MustDef>());    	non-compiled	[CE]  reached  end  of  file  while  parsing	57	None	replace
270	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  new  FlowState  <  MustDef>(),  state);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  def,  new  FlowState  <  MustDef>(),  state);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  def,  new  FlowState  <  MustDef>(),  state);	  NodeTraversal.traverse(compiler,    def,    new    FlowState    <    MustDef>());    	non-compiled	[CE]  reached  end  of  file  while  parsing	57	None	replace
271	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  state.getAnnotation(),  new  FlowState  <  MustDef>());  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  def,  state.getAnnotation(),  new  FlowState  <  MustDef>());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  def,  state.getAnnotation(),  new  FlowState  <  MustDef>());	  NodeTraversal.traverse(compiler,    def,    new    FlowState    <    MustDef>());    	non-compiled	[CE]  reached  end  of  file  while  parsing	57	None	replace
272	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  state,  new  FlowState  <  MustDef>());  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  def,  state,  new  FlowState  <  MustDef>());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  def,  state,  new  FlowState  <  MustDef>());	  NodeTraversal.traverse(compiler,    def,    new    FlowState    <    MustDef>());    	non-compiled	[CE]  reached  end  of  file  while  parsing	57	None	replace
273	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(s.scope!=  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }	  if(def!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	162	None	replace
274	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(	  if(def!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
275	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name,  useNode);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name,  useNode);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name,  useNode);	  Node    rValue    =    s.getVar(name);    	non-compiled	[CE]  reached  end  of  file  while  parsing	72	None	replace
276	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name,  def);  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name,  def);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name,  def);	  Node    rValue    =    s.getVar(name);    	non-compiled	[CE]  reached  end  of  file  while  parsing	72	None	replace
277	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name)+  1;  [CE]  reached  end  of  file  while  parsing  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name)+  1;  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name)+  1;	  Node    rValue    =    s.getVar(name);    	non-compiled	[CE]  reached  end  of  file  while  parsing	72	None	replace
278	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name,  jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name,  jsScope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name,  jsScope);	  Node    rValue    =    s.getVar(name);    	non-compiled	[CE]  reached  end  of  file  while  parsing	72	None	replace
279	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name  +  1);  [CE]  reached  end  of  file  while  parsing  [FE]                                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name  +  1);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name  +  1);	  Node    rValue    =    s.getVar(name);    	non-compiled	[CE]  reached  end  of  file  while  parsing	72	None	replace
280	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  useNode,  this);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  useNode,  this);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  useNode,  this);	  NodeTraversal.traverse(compiler,    s,    def,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	103	None	replace
281	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  null);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  null);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  def,  null);	  NodeTraversal.traverse(compiler,    s,    def,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	103	None	replace
282	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  state,  this);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  state,  this);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  state,  this);	  NodeTraversal.traverse(compiler,    s,    def,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	103	None	replace
283	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  s,  this);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  def,  s,  this);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  def,  s,  this);	  NodeTraversal.traverse(compiler,    s,    def,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	103	None	replace
284	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  def,  this);  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  def,  this);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  n,  def,  this);	  NodeTraversal.traverse(compiler,    s,    def,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	103	None	replace
285	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  state,  def,  this);  [CE]  reached  end  of  file  while  parsing  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  state,  def,  this);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  state,  def,  this);	  NodeTraversal.traverse(compiler,    s,    def,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	103	None	replace
286	[BUG]  [BUGGY]  Preconditions.checkArgument(jsScope.getVar(name)  ==  s.scope);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(jsScope.getVar(name)  ==  s.scope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(jsScope.getVar(name)  ==  s.scope);	  Preconditions.checkArgument(jsScope    ==    s.scope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	93	None	replace
287	[BUG]  [BUGGY]  Preconditions.checkState(jsScope  ==  s.scope);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkState(jsScope  ==  s.scope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkState(jsScope  ==  s.scope);	  Preconditions.checkArgument(jsScope    ==    s.scope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	93	None	replace
288	[BUG]  [BUGGY]  Preconditions.checkState(s.scope!=  jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkState(s.scope!=  jsScope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkState(s.scope!=  jsScope);	  Preconditions.checkArgument(jsScope    ==    s.scope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	93	None	replace
289	[BUG]  [BUGGY]  Preconditions.checkArgument(s.depends!=  def.depends);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(s.depends!=  def.depends);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(s.depends!=  def.depends);	  Preconditions.checkArgument(def.depends!=    s.scope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	155	None	replace
290	[BUG]  [BUGGY]  Preconditions.checkArgument(s.depends!=  def.scope);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(s.depends!=  def.scope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(s.depends!=  def.scope);	  Preconditions.checkArgument(def.depends!=    s.scope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	155	None	replace
291	[BUG]  [BUGGY]  Preconditions.checkArgument(s.depends  ==  def.depends);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(s.depends  ==  def.depends);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(s.depends  ==  def.depends);	  Preconditions.checkArgument(def.depends!=    s.scope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	155	None	replace
292	[BUG]  [BUGGY]  Preconditions.checkArgument(jsScope.depends!=  s.scope);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(jsScope.depends!=  s.scope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(jsScope.depends!=  s.scope);	  Preconditions.checkArgument(def.depends!=    s.scope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	155	None	replace
293	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends!=  s.scope,  s.depends);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends!=  s.scope,  s.depends);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends!=  s.scope,  s.depends);	  Preconditions.checkArgument(def.depends!=    s.scope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	155	None	replace
294	[BUG]  [BUGGY]  For(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    r    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	134	None	replace
295	[BUG]  [BUGGY]  For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    r    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	134	None	replace
296	[BUG]  [BUGGY]  if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
297	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
298	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	46	None	replace
299	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true	  for(Var    rValue    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	223	None	replace
300	[BUG]  [BUGGY]  for(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false	  for(Var    rValue    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	223	None	replace
301	[BUG]  [BUGGY]  For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false	  for(Var    rValue    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ')'  expected	223	None	replace
302	[BUG]  [BUGGY]  For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true	  for(Var    rValue    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ')'  expected	223	None	replace
303	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true	  for(Var    rValue    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	223	None	replace
304	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false	  for(Var    rValue    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	223	None	replace
305	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue  ==  s.getVar(name))  {  return  false;  }	  Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	50	None	replace
306	[BUG]  [BUGGY]  Node  rValue  =  s.getVarValue();  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVarValue();  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVarValue();	  Node    rValue    =    s.getRValue();    	non-compiled	[CE]  reached  end  of  file  while  parsing	69	None	replace
307	[BUG]  [BUGGY]  Node  rValue  =  s.getRValue()  +  1;  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getRValue()  +  1;  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getRValue()  +  1;	  Node    rValue    =    s.getRValue();    	non-compiled	[CE]  reached  end  of  file  while  parsing	69	None	replace
308	[BUG]  [BUGGY]  Node  rValue  =  s.getNode();  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getNode();  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getNode();	  Node    rValue    =    s.getRValue();    	non-compiled	[CE]  reached  end  of  file  while  parsing	69	None	replace
309	[BUG]  [BUGGY]  Node  rValue  =  s.getLocalValue();  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getLocalValue();  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getLocalValue();	  Node    rValue    =    s.getRValue();    	non-compiled	[CE]  reached  end  of  file  while  parsing	69	None	replace
310	[BUG]  [BUGGY]  for(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	133	None	replace
311	[BUG]  [BUGGY]  For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	133	None	replace
312	[BUG]  [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(lhs))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(lhs))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(lhs))  {  return  false;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	133	None	replace
313	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(rValue))  {  return  true;  }	  Node    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	67	None	replace
314	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||!rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||!rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||!rValue.equals(rValue))  {  return  true;  }	  Node    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	67	None	replace
315	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s.scope))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s.scope))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s.scope))  {  return  true;  }	  Node    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	67	None	replace
316	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(m))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(m))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(m))  {  return  true;  }	  Node    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	67	None	replace
317	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(s.scope))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(s.scope))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(s.scope))  {  return  true;  }	  Node    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	67	None	replace
318	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(vValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	107	None	replace
319	[BUG]  [BUGGY]  if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(vValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	107	None	replace
320	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  vValue.equals(vValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  vValue.equals(vValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  vValue.equals(vValue))  {  return  false;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(vValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	107	None	replace
321	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(vValue))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	107	None	replace
322	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  vValue.equals(vValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  vValue.equals(vValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  vValue.equals(vValue))  {  return  false;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(vValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	107	None	replace
323	[BUG]  [BUGGY]  if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(vValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(vValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(vValue))  {  return  false;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(vValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	107	None	replace
324	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	74	None	replace
325	[BUG]  [BUGGY]  ||  jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  ||  jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	||  jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
326	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	74	None	replace
327	[BUG]  [BUGGY]  ||  jsScope!=  scope)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  ||  jsScope!=  scope)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	||  jsScope!=  scope)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }	  ||    s.scope!=    jsScope)    {    Var    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
328	[BUG]  [BUGGY]  ||  jsScope!=  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  ||  jsScope!=  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	||  jsScope!=  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }	  ||    s.scope!=    jsScope)    {    Var    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
329	[BUG]  [BUGGY]  ||  jsScope!=  null)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  ||  jsScope!=  null)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	||  jsScope!=  null)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }	  ||    s.scope!=    jsScope)    {    Var    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
330	[BUG]  [BUGGY]  ||  s.scope!=  scope)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  ||  s.scope!=  scope)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	||  s.scope!=  scope)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }	  ||    s.scope!=    jsScope)    {    Var    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
331	[BUG]  [BUGGY]  ||  s.scope!=  null)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  ||  s.scope!=  null)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	||  s.scope!=  null)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }	  ||    s.scope!=    jsScope)    {    Var    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
332	[BUG]  [BUGGY]  ||  s.scope  ==  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  ||  s.scope  ==  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	||  s.scope  ==  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }	  ||    s.scope!=    jsScope)    {    Var    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
333	[BUG]  [BUGGY]  ||  s.scope!=  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  ||  s.scope!=  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	||  s.scope!=  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rhs    =    s.getVar(name);    if(rhs    ==    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	211	None	replace
334	[BUG]  [BUGGY]  if(target!=  s.scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(target!=  s.scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(target!=  s.scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }	  if(s.scope!=    target)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	175	None	replace
335	[BUG]  [BUGGY]  ||  s.scope!=  target)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  ||  s.scope!=  target)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	||  s.scope!=  target)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }	  if(s.scope!=    target)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
336	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  new  MustDef(),  s);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  def,  new  MustDef(),  s);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  def,  new  MustDef(),  s);	  NodeTraversal.traverse(compiler,    s,    new    MustDef(),    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
337	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  MustDef(),  def,  state);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  MustDef(),  def,  state);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  new  MustDef(),  def,  state);	  NodeTraversal.traverse(compiler,    s,    new    MustDef(),    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
338	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  MustDef(),  def);  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  MustDef(),  def);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  n,  new  MustDef(),  def);	  NodeTraversal.traverse(compiler,    s,    new    MustDef(),    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
339	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  MustDef(),  def,  escaped);  [CE]  reached  end  of  file  while  parsing  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  MustDef(),  def,  escaped);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  new  MustDef(),  def,  escaped);	  NodeTraversal.traverse(compiler,    s,    new    MustDef(),    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
340	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  definition,  new  MustDef(),  def);  [CE]  reached  end  of  file  while  parsing  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  definition,  new  MustDef(),  def);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  definition,  new  MustDef(),  def);	  NodeTraversal.traverse(compiler,    s,    new    MustDef(),    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
341	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  MustDef(),  def,  rValue);  [CE]  reached  end  of  file  while  parsing  [FE]                                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  MustDef(),  def,  rValue);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  new  MustDef(),  def,  rValue);	  NodeTraversal.traverse(compiler,    s,    new    MustDef(),    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
342	[BUG]  [BUGGY]  for(Var  r  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  for(Var    s    :    def.vars)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	172	None	replace
343	[BUG]  [BUGGY]  For(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  for(Var    s    :    def.vars)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	172	None	replace
344	[BUG]  [BUGGY]  for(Var  vars  :  def.vars)  {  Var  rValue  =  vars.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  vars  :  def.vars)  {  Var  rValue  =  vars.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  vars  :  def.vars)  {  Var  rValue  =  vars.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  for(Var    s    :    def.vars)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	172	None	replace
345	[BUG]  [BUGGY]  for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  for(Var    s    :    def.vars)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	172	None	replace
346	[BUG]  [BUGGY]  if(jsScope!=  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  true;  }	  if(jsScope!=    jsScope)    {    Var    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	208	None	replace
347	[BUG]  [BUGGY]  escaped.add(s.getVar(name));  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s.getVar(name));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.getVar(name));	  escaped.add(s.scope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	73	None	replace
348	[BUG]  [BUGGY]  escaped.add(s.getVar(name,  jsScope));  [CE]  reached  end  of  file  while  parsing  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s.getVar(name,  jsScope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.getVar(name,  jsScope));	  escaped.add(s.scope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	73	None	replace
349	[BUG]  [BUGGY]  escaped.add(s.scope,  jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s.scope,  jsScope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.scope,  jsScope);	  escaped.add(s.scope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	73	None	replace
350	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  }	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	219	None	replace
351	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	219	None	replace
352	[BUG]  [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  }	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	219	None	replace
353	[BUG]  [BUGGY]  ||  jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  ||  jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	||  jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false;  }	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(vValue))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	193	None	replace
354	[BUG]  [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  vValue.equals(vValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  vValue.equals(vValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  vValue.equals(vValue))  {  return  false;  }	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(vValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	193	None	replace
355	[BUG]  [BUGGY]  if(jsScope!=  jsScope)  {  Var  vValue  =  s.getVar(name);  if(vValue  ==  null  ||  vValue.equals(vValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  jsScope)  {  Var  vValue  =  s.getVar(name);  if(vValue  ==  null  ||  vValue.equals(vValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  jsScope)  {  Var  vValue  =  s.getVar(name);  if(vValue  ==  null  ||  vValue.equals(vValue))  {  return  false;  }	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(vValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	193	None	replace
356	[BUG]  [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  vValue.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  vValue.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  jsScope)  {  Var  rValue  =  vValue.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false;  }	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(vValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	193	None	replace
357	[BUG]  [BUGGY]  For(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(s))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	157	None	replace
358	[BUG]  [BUGGY]  Var  rValue  =  def.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  def.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  def.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(s))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	157	None	replace
359	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  state,  new  FlowState  <  MustDef>(),  s);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  state,  new  FlowState  <  MustDef>(),  s);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  state,  new  FlowState  <  MustDef>(),  s);	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>(),    state);    	non-compiled	[CE]  reached  end  of  file  while  parsing	61	None	replace
360	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  new  FlowState  <  MustDef>(),  state);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  new  FlowState  <  MustDef>(),  state);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  def,  new  FlowState  <  MustDef>(),  state);	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>(),    state);    	non-compiled	[CE]  reached  end  of  file  while  parsing	61	None	replace
361	[BUG]  [BUGGY]  For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    rValue    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	220	None	replace
362	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(vValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	32	None	replace
363	[BUG]  [BUGGY]  if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(vValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	32	None	replace
364	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  true  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  true	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(vValue))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	32	None	replace
365	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  vValue.equals(vValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  vValue.equals(vValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  vValue.equals(vValue))  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(vValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	32	None	replace
366	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(vValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	32	None	replace
367	[BUG]  [BUGGY]  For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true	  for(Var    rValue    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	195	None	replace
368	[BUG]  [BUGGY]  if(jsScope!=  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true;  }	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(lhs))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	203	None	replace
369	[BUG]  [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(lhs))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	203	None	replace
370	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(lhs))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	203	None	replace
371	[BUG]  [BUGGY]  for(Var  r  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    def.vars)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	132	None	replace
372	[BUG]  [BUGGY]  for(Var  var  :  def.vars)  {  Var  rValue  =  var.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  var  :  def.vars)  {  Var  rValue  =  var.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  var  :  def.vars)  {  Var  rValue  =  var.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    def.vars)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	132	None	replace
373	[BUG]  [BUGGY]  for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||!rValue.equals(s))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||!rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||!rValue.equals(s))  {  return  false;  }	  for(Var    s    :    def.vars)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	132	None	replace
374	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  def,  new  FlowState  <  MustDef>());  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  def,  new  FlowState  <  MustDef>());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  jsScope,  def,  new  FlowState  <  MustDef>());	  NodeTraversal.traverse(compiler,    jsScope,    new    FlowState    <    MustDef>());    	non-compiled	[CE]  reached  end  of  file  while  parsing	59	None	replace
375	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  new  FlowState  <  MustDef>(),  state);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  new  FlowState  <  MustDef>(),  state);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  jsScope,  new  FlowState  <  MustDef>(),  state);	  NodeTraversal.traverse(compiler,    jsScope,    new    FlowState    <    MustDef>());    	non-compiled	[CE]  reached  end  of  file  while  parsing	59	None	replace
376	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  new  FlowState  <  MustDef>(),  def);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  new  FlowState  <  MustDef>(),  def);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  jsScope,  new  FlowState  <  MustDef>(),  def);	  NodeTraversal.traverse(compiler,    jsScope,    new    FlowState    <    MustDef>());    	non-compiled	[CE]  reached  end  of  file  while  parsing	59	None	replace
377	[BUG]  [BUGGY]  Preconditions.checkArgument(!def.depends.contains(s.scope)||!def.depends.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(!def.depends.contains(s.scope)||!def.depends.contains(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(!def.depends.contains(s.scope)||!def.depends.contains(s.scope));	  Preconditions.checkArgument(!def.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
378	[BUG]  [BUGGY]  Preconditions.checkArgument(!def.depends.contains(s.jsScope));  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(!def.depends.contains(s.jsScope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(!def.depends.contains(s.jsScope));	  Preconditions.checkArgument(!def.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
379	[BUG]  [BUGGY]  Preconditions.checkArgument(!def.depends.contains(s.scope)&&!def.depends.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(!def.depends.contains(s.scope)&&!def.depends.contains(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(!def.depends.contains(s.scope)&&!def.depends.contains(s.scope));	  Preconditions.checkArgument(!def.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
380	[BUG]  [BUGGY]  Preconditions.checkState(!def.depends.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkState(!def.depends.contains(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkState(!def.depends.contains(s.scope));	  Preconditions.checkArgument(!def.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
381	[BUG]  [BUGGY]  Preconditions.checkArgument(!def.depends.contains(s.scope,  jsScope));  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(!def.depends.contains(s.scope,  jsScope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(!def.depends.contains(s.scope,  jsScope));	  Preconditions.checkArgument(!def.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
382	[BUG]  [BUGGY]  escaped.add(s.getString(),  def);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s.getString(),  def);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.getString(),  def);	  escaped.add(s.getString());    	non-compiled	[CE]  reached  end  of  file  while  parsing	185	None	replace
383	[BUG]  [BUGGY]  escaped.add(s.getString(),  name);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s.getString(),  name);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.getString(),  name);	  escaped.add(s.getString());    	non-compiled	[CE]  reached  end  of  file  while  parsing	185	None	replace
384	[BUG]  [BUGGY]  escaped.add(s.getString()  + ": ");  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s.getString()  + ": ");  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.getString()  + ": ");	  escaped.add(s.getString());    	non-compiled	[CE]  reached  end  of  file  while  parsing	185	None	replace
385	[BUG]  [BUGGY]  escaped.add(s.scope.getString());  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s.scope.getString());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.scope.getString());	  escaped.add(s.getString());    	non-compiled	[CE]  reached  end  of  file  while  parsing	185	None	replace
386	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  }	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	202	None	replace
387	[BUG]  [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  }	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	202	None	replace
388	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	202	None	replace
389	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  jsScope,  new  MustDef());  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  def,  jsScope,  new  MustDef());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  def,  jsScope,  new  MustDef());	  NodeTraversal.traverse(compiler,    def,    new    MustDef());    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
390	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  new  MustDef(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  def,  new  MustDef(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  def,  new  MustDef(s.scope));	  NodeTraversal.traverse(compiler,    def,    new    MustDef());    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
391	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  state.getDefinitions());  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  def,  state.getDefinitions());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  def,  state.getDefinitions());	  NodeTraversal.traverse(compiler,    def,    new    MustDef());    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
392	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  state.getIn());  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  def,  state.getIn());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  def,  state.getIn());	  NodeTraversal.traverse(compiler,    def,    new    MustDef());    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
393	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue!=  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue!=  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue!=  s.getVar(name))  {  return  true;  }	  Node    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	replace
394	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue  ==  s.getVar(name))  {  return  true;  }	  Node    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	replace
395	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  &&  rValue!=  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  &&  rValue!=  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue  ==  null  &&  rValue!=  s.getVar(name))  {  return  true;  }	  Node    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	replace
396	[BUG]  [BUGGY]  Preconditions.checkArgument(s.depends.contains(des.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(s.depends.contains(des.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(s.depends.contains(des.scope));	  Preconditions.checkArgument(des.depends.contains(s));    	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	replace
397	[BUG]  [BUGGY]  Preconditions.checkArgument(!des.depends.contains(s));  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(!des.depends.contains(s));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(!des.depends.contains(s));	  Preconditions.checkArgument(des.depends.contains(s));    	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	replace
398	[BUG]  [BUGGY]  Preconditions.checkArgument(des.depends.contains(s.name));  [CE]  reached  end  of  file  while  parsing  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(des.depends.contains(s.name));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(des.depends.contains(s.name));	  Preconditions.checkArgument(des.depends.contains(s));    	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	replace
399	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true	  for(Var    rValue    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	197	None	replace
400	[BUG]  [BUGGY]  for(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false	  for(Var    rValue    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	197	None	replace
401	[BUG]  [BUGGY]  For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false	  for(Var    rValue    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ')'  expected	197	None	replace
402	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true	  for(Var    rValue    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	197	None	replace
403	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false	  for(Var    rValue    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	197	None	replace
404	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name,  jsScope);  if(rValue  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name,  jsScope);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name,  jsScope);  if(rValue  ==  null)  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name,    rValue);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	200	None	replace
405	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name,  rValue);  if(rValue  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name,  rValue);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name,  rValue);  if(rValue  ==  null)  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name,    rValue);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	200	None	replace
406	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name,  jsScope);  if(rValue  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name,  jsScope);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name,  jsScope);  if(rValue  ==  null)  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name,    rValue);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	200	None	replace
407	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name,  jsScope);  if(rValue!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name,  jsScope);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name,  jsScope);  if(rValue!=  null)  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name,    rValue);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	200	None	replace
408	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name,  jsScope);  if(rValue  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name,  jsScope);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name,  jsScope);  if(rValue  ==  null)  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name,    rValue);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	200	None	replace
409	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name,  jsScope);  if(rValue!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name,  jsScope);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name,  jsScope);  if(rValue!=  null)  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name,    rValue);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	200	None	replace
410	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(s))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	221	None	replace
411	[BUG]  [BUGGY]  for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(s))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	221	None	replace
412	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(s.scope!=  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }	  if(jsScope!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	replace
413	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(s.scope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  if(s.scope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(s.scope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true	  if(jsScope!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	47	None	replace
414	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	196	None	replace
415	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(lhs))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(lhs))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(lhs))  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	196	None	replace
416	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(vValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(vValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(vValue))  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	196	None	replace
417	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	196	None	replace
418	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(null))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(null))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(null))  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	196	None	replace
419	[BUG]  [BUGGY]  For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	27	None	replace
420	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  def);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  def);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  jsScope,  def);	  NodeTraversal.traverse(compiler,    jsScope,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	100	None	replace
421	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  useNode);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  useNode);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  jsScope,  useNode);	  NodeTraversal.traverse(compiler,    jsScope,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	100	None	replace
422	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  this,  def);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  this,  def);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  jsScope,  this,  def);	  NodeTraversal.traverse(compiler,    jsScope,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	100	None	replace
423	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  jsScope,  this);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  def,  jsScope,  this);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  def,  jsScope,  this);	  NodeTraversal.traverse(compiler,    jsScope,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	100	None	replace
424	[BUG]  [BUGGY]  Preconditions.checkArgument(s.depends.contains(def)||  s.scope!=  jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(s.depends.contains(def)||  s.scope!=  jsScope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(s.depends.contains(def)||  s.scope!=  jsScope);	  Preconditions.checkArgument(def.depends.contains(s)||    s.scope!=    jsScope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	145	None	replace
425	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s)||  s.scope  ==  jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends.contains(s)||  s.scope  ==  jsScope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s)||  s.scope  ==  jsScope);	  Preconditions.checkArgument(def.depends.contains(s)||    s.scope!=    jsScope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	145	None	replace
426	[BUG]  [BUGGY]  Preconditions.checkArgument(s.depends.contains(s)||  s.scope!=  jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(s.depends.contains(s)||  s.scope!=  jsScope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(s.depends.contains(s)||  s.scope!=  jsScope);	  Preconditions.checkArgument(def.depends.contains(s)||    s.scope!=    jsScope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	145	None	replace
427	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s)||  s.scope!=  scope);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends.contains(s)||  s.scope!=  scope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s)||  s.scope!=  scope);	  Preconditions.checkArgument(def.depends.contains(s)||    s.scope!=    jsScope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	145	None	replace
428	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s)||  jsScope!=  s.scope);  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends.contains(s)||  jsScope!=  s.scope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s)||  jsScope!=  s.scope);	  Preconditions.checkArgument(def.depends.contains(s)||    s.scope!=    jsScope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	145	None	replace
429	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s)&&  s.scope!=  jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends.contains(s)&&  s.scope!=  jsScope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s)&&  s.scope!=  jsScope);	  Preconditions.checkArgument(def.depends.contains(s)||    s.scope!=    jsScope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	145	None	replace
430	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name,  useNode);  if(rValue!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name,  useNode);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name,  useNode);  if(rValue!=  null)  {  return  false;  }	  Node    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	80	None	replace
431	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name,  def);  if(rValue!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name,  def);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name,  def);  if(rValue!=  null)  {  return  false;  }	  Node    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	80	None	replace
432	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||!depends.isEmpty())  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||!depends.isEmpty())  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||!depends.isEmpty())  {  return  false;  }	  Node    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	80	None	replace
433	[BUG]  [BUGGY]  if(jsScope!=  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	218	None	replace
434	[BUG]  [BUGGY]  ||  jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  ||  jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	||  jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	218	None	replace
435	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!depends.isEmpty())  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!depends.isEmpty())  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!depends.isEmpty())  {  return  true;  }	  Node    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	111	None	replace
436	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	194	None	replace
437	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	194	None	replace
438	[BUG]  [BUGGY]  if(jsScope!=  null  ||  jsScope!=  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null  ||  jsScope!=  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null  ||  jsScope!=  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	194	None	replace
439	[BUG]  [BUGGY]  if(jsScope!=  null  ||  jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null  ||  jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null  ||  jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	194	None	replace
440	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  >=  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  >=  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  >=  s.getVar(name))  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	194	None	replace
441	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	198	None	replace
442	[BUG]  [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	198	None	replace
443	[BUG]  [BUGGY]  if(jsScope  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }	  if(def    ==    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	163	None	replace
444	[BUG]  [BUGGY]  if(jsScope  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false	  if(def    ==    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	163	None	replace
445	[BUG]  [BUGGY]  For(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }	  for(Var    r    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	181	None	replace
446	[BUG]  [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }	  for(Var    r    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	181	None	replace
447	[BUG]  [BUGGY]  escaped.add(s.name,  jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s.name,  jsScope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.name,  jsScope);	  escaped.add(s.name);    	non-compiled	[CE]  reached  end  of  file  while  parsing	87	None	replace
448	[BUG]  [BUGGY]  escaped.add(s.name,  def);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s.name,  def);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.name,  def);	  escaped.add(s.name);    	non-compiled	[CE]  reached  end  of  file  while  parsing	87	None	replace
449	[BUG]  [BUGGY]  escaped.add(s.name,  useNode);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s.name,  useNode);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.name,  useNode);	  escaped.add(s.name);    	non-compiled	[CE]  reached  end  of  file  while  parsing	87	None	replace
450	[BUG]  [BUGGY]  escaped.add(s.name,  state.getIn().reachingDef);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s.name,  state.getIn().reachingDef);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.name,  state.getIn().reachingDef);	  escaped.add(s.name);    	non-compiled	[CE]  reached  end  of  file  while  parsing	87	None	replace
451	[BUG]  [BUGGY]  escaped.put(name,  s.name);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.put(name,  s.name);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.put(name,  s.name);	  escaped.add(s.name);    	non-compiled	[CE]  reached  end  of  file  while  parsing	87	None	replace
452	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  state,  def,  new  FlowState  <  MustDef>());  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  state,  def,  new  FlowState  <  MustDef>());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  state,  def,  new  FlowState  <  MustDef>());	  NodeTraversal.traverse(compiler,    s,    state,    new    FlowState    <    MustDef>());    	non-compiled	[CE]  reached  end  of  file  while  parsing	62	None	replace
453	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  s,  new  FlowState  <  MustDef>());  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  def,  s,  new  FlowState  <  MustDef>());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  def,  s,  new  FlowState  <  MustDef>());	  NodeTraversal.traverse(compiler,    s,    state,    new    FlowState    <    MustDef>());    	non-compiled	[CE]  reached  end  of  file  while  parsing	62	None	replace
454	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  state,  new  FlowState  <  MustDef>());  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  state,  new  FlowState  <  MustDef>());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  n,  state,  new  FlowState  <  MustDef>());	  NodeTraversal.traverse(compiler,    s,    state,    new    FlowState    <    MustDef>());    	non-compiled	[CE]  reached  end  of  file  while  parsing	62	None	replace
455	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  useNode,  new  FlowState  <  MustDef>());  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  useNode,  new  FlowState  <  MustDef>());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  useNode,  new  FlowState  <  MustDef>());	  NodeTraversal.traverse(compiler,    s,    state,    new    FlowState    <    MustDef>());    	non-compiled	[CE]  reached  end  of  file  while  parsing	62	None	replace
456	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  useNode,  state,  new  FlowState  <  MustDef>());  [CE]  reached  end  of  file  while  parsing  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  useNode,  state,  new  FlowState  <  MustDef>());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  useNode,  state,  new  FlowState  <  MustDef>());	  NodeTraversal.traverse(compiler,    s,    state,    new    FlowState    <    MustDef>());    	non-compiled	[CE]  reached  end  of  file  while  parsing	62	None	replace
457	[BUG]  [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	51	None	replace
458	[BUG]  [BUGGY]  For(Var  s  :  s.getVar(name,  useNode))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  s.getVar(name,  useNode))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  s.getVar(name,  useNode))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	51	None	replace
459	[BUG]  [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue!=  s.getVar(name))  {  return  false;  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue!=  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue!=  s.getVar(name))  {  return  false;  }	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	51	None	replace
460	[BUG]  [BUGGY]  Preconditions.checkArgument(s.depends.contains(jsScope.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(s.depends.contains(jsScope.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(s.depends.contains(jsScope.scope));	  Preconditions.checkArgument(jsScope.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
461	[BUG]  [BUGGY]  Preconditions.checkArgument(s.depends.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(s.depends.contains(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(s.depends.contains(s.scope));	  Preconditions.checkArgument(jsScope.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
462	[BUG]  [BUGGY]  Preconditions.checkArgument(!s.depends.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(!s.depends.contains(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(!s.depends.contains(s.scope));	  Preconditions.checkArgument(jsScope.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
463	[BUG]  [BUGGY]  Preconditions.checkArgument(n.depends.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(n.depends.contains(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(n.depends.contains(s.scope));	  Preconditions.checkArgument(jsScope.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
464	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true	  if(def!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	125	None	replace
465	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  }	  if(def!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	125	None	replace
466	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  true  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  true	  if(def!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	125	None	replace
467	[BUG]  [BUGGY]  escaped.add(s.scope,  def,  jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s.scope,  def,  jsScope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.scope,  def,  jsScope);	  escaped.add(s.scope,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	142	None	replace
468	[BUG]  [BUGGY]  escaped.add(def,  s.scope);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(def,  s.scope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(def,  s.scope);	  escaped.add(s.scope,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	142	None	replace
469	[BUG]  [BUGGY]  escaped.add(s.scope,  definition);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s.scope,  definition);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.scope,  definition);	  escaped.add(s.scope,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	142	None	replace
470	[BUG]  [BUGGY]  escaped.add(s.scope,  def,  state);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s.scope,  def,  state);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.scope,  def,  state);	  escaped.add(s.scope,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	142	None	replace
471	[BUG]  [BUGGY]  For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	131	None	replace
472	[BUG]  [BUGGY]  for(Var  s  :  def.vars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.vars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.vars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	131	None	replace
473	[BUG]  [BUGGY]  for(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	131	None	replace
474	[BUG]  [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||!rValue.equals(s))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||!rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||!rValue.equals(s))  {  return  false;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	131	None	replace
475	[BUG]  [BUGGY]  if(jsScope  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	  if(jsScope!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	104	None	replace
476	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(s.scope!=  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	  if(jsScope!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	104	None	replace
477	[BUG]  [BUGGY]  escaped.add(s.definition,  def);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s.definition,  def);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.definition,  def);	  escaped.add(s.definition);    	non-compiled	[CE]  reached  end  of  file  while  parsing	86	None	replace
478	[BUG]  [BUGGY]  escaped.add(s.scope,  s.definition);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s.scope,  s.definition);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.scope,  s.definition);	  escaped.add(s.definition);    	non-compiled	[CE]  reached  end  of  file  while  parsing	86	None	replace
479	[BUG]  [BUGGY]  escaped.add(s.definition,  jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s.definition,  jsScope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.definition,  jsScope);	  escaped.add(s.definition);    	non-compiled	[CE]  reached  end  of  file  while  parsing	86	None	replace
480	[BUG]  [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false	  for(Var    r    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	138	None	replace
481	[BUG]  [BUGGY]  For(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true	  for(Var    r    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ')'  expected	138	None	replace
482	[BUG]  [BUGGY]  For(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false	  for(Var    r    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ')'  expected	138	None	replace
483	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(cfgNode))  {  return  true  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(cfgNode))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(cfgNode))  {  return  true	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(cfgNode))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	35	None	replace
484	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(cfgNode))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(cfgNode))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(cfgNode))  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(cfgNode))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
485	[BUG]  [BUGGY]  if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(cfgNode))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(cfgNode))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(cfgNode))  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(cfgNode))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
486	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(cfgNode))  {  return  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(cfgNode))  {  return  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(cfgNode))  {  return	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(cfgNode))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
487	[BUG]  [BUGGY]  if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(cfgNode))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(cfgNode))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(cfgNode))  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(cfgNode))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
488	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name,  def);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name,  def);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name,  def);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	  Node    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	replace
489	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }	  Node    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	replace
490	[BUG]  [BUGGY]  Node  rValue  =  jsScope.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  jsScope.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  jsScope.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	  Node    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	replace
491	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(m))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(m))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(m))  {  return  false;  }	  Node    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	replace
492	[BUG]  [BUGGY]  For(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  for(Var    r    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	216	None	replace
493	[BUG]  [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue!=  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue!=  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue!=  s.getVar(name))  {  return  true;  }	  for(Var    r    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	216	None	replace
494	[BUG]  [BUGGY]  For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  for(Var    r    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	216	None	replace
495	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	128	None	replace
496	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	128	None	replace
497	[BUG]  [BUGGY]  Node  rhs  =  jsScope.getVar(name,  s.scope);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rhs  =  jsScope.getVar(name,  s.scope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rhs  =  jsScope.getVar(name,  s.scope);	  Node    rhs    =    jsScope.getVar(name);    	non-compiled	[CE]  reached  end  of  file  while  parsing	190	None	replace
498	[BUG]  [BUGGY]  Node  rhs  =  jsScope.getVar(name,  s);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rhs  =  jsScope.getVar(name,  s);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rhs  =  jsScope.getVar(name,  s);	  Node    rhs    =    jsScope.getVar(name);    	non-compiled	[CE]  reached  end  of  file  while  parsing	190	None	replace
499	[BUG]  [BUGGY]  Node  rhs  =  s.getVar(name);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rhs  =  s.getVar(name);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rhs  =  s.getVar(name);	  Node    rhs    =    jsScope.getVar(name);    	non-compiled	[CE]  reached  end  of  file  while  parsing	190	None	replace
500	[BUG]  [BUGGY]  Node  rhs  =  jsScope.getVar(name,  s.type);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rhs  =  jsScope.getVar(name,  s.type);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rhs  =  jsScope.getVar(name,  s.type);	  Node    rhs    =    jsScope.getVar(name);    	non-compiled	[CE]  reached  end  of  file  while  parsing	190	None	replace
501	[BUG]  [BUGGY]  Node  rhs  =  jsScope.getVar(name)+  1;  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rhs  =  jsScope.getVar(name)+  1;  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rhs  =  jsScope.getVar(name)+  1;	  Node    rhs    =    jsScope.getVar(name);    	non-compiled	[CE]  reached  end  of  file  while  parsing	190	None	replace
502	[BUG]  [BUGGY]  Node  rhs  =  jsScope.getVar(name,  s.target);  [CE]  reached  end  of  file  while  parsing  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rhs  =  jsScope.getVar(name,  s.target);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rhs  =  jsScope.getVar(name,  s.target);	  Node    rhs    =    jsScope.getVar(name);    	non-compiled	[CE]  reached  end  of  file  while  parsing	190	None	replace
503	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  useNode);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  useNode);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  def,  useNode);	  NodeTraversal.traverse(compiler,    s,    this,    useNode);    	non-compiled	[CE]  reached  end  of  file  while  parsing	99	None	replace
504	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  this,  useNode);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  this,  useNode);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  def,  this,  useNode);	  NodeTraversal.traverse(compiler,    s,    this,    useNode);    	non-compiled	[CE]  reached  end  of  file  while  parsing	99	None	replace
505	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  useNode);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  useNode);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  n,  this,  useNode);	  NodeTraversal.traverse(compiler,    s,    this,    useNode);    	non-compiled	[CE]  reached  end  of  file  while  parsing	99	None	replace
506	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  state,  useNode);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  state,  useNode);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  state,  useNode);	  NodeTraversal.traverse(compiler,    s,    this,    useNode);    	non-compiled	[CE]  reached  end  of  file  while  parsing	99	None	replace
507	[BUG]  [BUGGY]  escaped.add(s.scope,  s);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s.scope,  s);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.scope,  s);	  escaped.add(s);    	non-compiled	[CE]  reached  end  of  file  while  parsing	83	None	replace
508	[BUG]  [BUGGY]  escaped.add(jsScope,  s);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(jsScope,  s);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(jsScope,  s);	  escaped.add(s);    	non-compiled	[CE]  reached  end  of  file  while  parsing	83	None	replace
509	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  definition,  def,  new  MustDef());  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  definition,  def,  new  MustDef());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  definition,  def,  new  MustDef());	  NodeTraversal.traverse(compiler,    s,    definition,    new    MustDef());    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
510	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  s,  new  MustDef());  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  def,  s,  new  MustDef());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  def,  s,  new  MustDef());	  NodeTraversal.traverse(compiler,    s,    definition,    new    MustDef());    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
511	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  definition,  new  MustDef());  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  definition,  new  MustDef());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  n,  definition,  new  MustDef());	  NodeTraversal.traverse(compiler,    s,    definition,    new    MustDef());    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
512	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  definition,  new  MustDef());  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  def,  definition,  new  MustDef());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  def,  definition,  new  MustDef());	  NodeTraversal.traverse(compiler,    s,    definition,    new    MustDef());    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
513	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  state,  new  MustDef());  [CE]  reached  end  of  file  while  parsing  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  state,  new  MustDef());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  state,  new  MustDef());	  NodeTraversal.traverse(compiler,    s,    definition,    new    MustDef());    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
514	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  definition,  def);  [CE]  reached  end  of  file  while  parsing  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  definition,  def);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  definition,  def);	  NodeTraversal.traverse(compiler,    s,    definition,    new    MustDef());    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
515	[BUG]  [BUGGY]  Var  rValue  =  jsScope.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  jsScope.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  jsScope.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }	  Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(jsScope))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	106	None	replace
516	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(jsScope))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(jsScope))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(jsScope))  {  return  false;  }	  Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(jsScope))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	106	None	replace
517	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(jsScope))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(jsScope))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(jsScope))  {  return  false;  }	  Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(jsScope))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	106	None	replace
518	[BUG]  [BUGGY]  Var  rValue  =  jsScope.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  jsScope.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  jsScope.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }	  Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(jsScope))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	106	None	replace
519	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(jsScope))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(jsScope))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(jsScope))  {  return  false;  }	  Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(jsScope))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	106	None	replace
520	[BUG]  [BUGGY]  if(jsScope  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true	  if(jsScope!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	48	None	replace
521	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(s.scope!=  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true	  if(jsScope!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	48	None	replace
522	[BUG]  [BUGGY]  Scope  s  =  s.getScope();  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Scope  s  =  s.getScope();  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Scope  s  =  s.getScope();	  Scope    s    =    jsScope.getScope();    	non-compiled	[CE]  reached  end  of  file  while  parsing	154	None	replace
523	[BUG]  [BUGGY]  Scope  s  =  jsScope.getScope(s.scope);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Scope  s  =  jsScope.getScope(s.scope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Scope  s  =  jsScope.getScope(s.scope);	  Scope    s    =    jsScope.getScope();    	non-compiled	[CE]  reached  end  of  file  while  parsing	154	None	replace
524	[BUG]  [BUGGY]  Scope  s  =  s.scope.getScope();  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Scope  s  =  s.scope.getScope();  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Scope  s  =  s.scope.getScope();	  Scope    s    =    jsScope.getScope();    	non-compiled	[CE]  reached  end  of  file  while  parsing	154	None	replace
525	[BUG]  [BUGGY]  Scope  s  =  jsScope.getScope(name);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Scope  s  =  jsScope.getScope(name);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Scope  s  =  jsScope.getScope(name);	  Scope    s    =    jsScope.getScope();    	non-compiled	[CE]  reached  end  of  file  while  parsing	154	None	replace
526	[BUG]  [BUGGY]  Scope  s  =  jsScope.getScopeOwnScope();  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Scope  s  =  jsScope.getScopeOwnScope();  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Scope  s  =  jsScope.getScopeOwnScope();	  Scope    s    =    jsScope.getScope();    	non-compiled	[CE]  reached  end  of  file  while  parsing	154	None	replace
527	[BUG]  [BUGGY]  Scope  s  =  jsScope.getScope(s.name);  [CE]  reached  end  of  file  while  parsing  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Scope  s  =  jsScope.getScope(s.name);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Scope  s  =  jsScope.getScope(s.name);	  Scope    s    =    jsScope.getScope();    	non-compiled	[CE]  reached  end  of  file  while  parsing	154	None	replace
528	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name,  useNode);  if(rValue!=  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name,  useNode);  if(rValue!=  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name,  useNode);  if(rValue!=  null)  {  return  true;  }	  Node    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	113	None	replace
529	[BUG]  [BUGGY]  for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue!=  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue!=  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue!=  s.getVar(name))  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	55	None	replace
530	[BUG]  [BUGGY]  for(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	170	None	replace
531	[BUG]  [BUGGY]  For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	166	None	replace
532	[BUG]  [BUGGY]  for(Var  s  :  def.vars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.vars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.vars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	166	None	replace
533	[BUG]  [BUGGY]  for(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	166	None	replace
534	[BUG]  [BUGGY]  Node  rValue  =  s.scope.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.scope.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.scope.getVar(name);  if(rValue  ==  null)  {  return  false;  }	  Node    rValue    =    jsScope.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	79	None	replace
535	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(def.depends!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  if(def.depends!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(def.depends!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(	  if(def.depends!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
536	[BUG]  [BUGGY]  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(	  if(def.depends!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
537	[BUG]  [BUGGY]  ||  s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  ||  s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	||  s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(	  if(def.depends!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
538	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(def.depends!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  if(def.depends!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(def.depends!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(  }	  if(def.depends!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
539	[BUG]  [BUGGY]  FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	  Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
540	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s.scope))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s.scope))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s.scope))  {  return  false;  }	  Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
541	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s.scope))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s.scope))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s.scope))  {  return  false;  }	  Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
542	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  useNode,  def);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  useNode,  def);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  useNode,  def);	  NodeTraversal.traverse(compiler,    useNode,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	180	None	replace
543	[BUG]  [BUGGY]  Traversal.traverse(compiler,  s,  this);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Traversal.traverse(compiler,  s,  this);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Traversal.traverse(compiler,  s,  this);	  NodeTraversal.traverse(compiler,    useNode,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	180	None	replace
544	[BUG]  [BUGGY]  Context.traverse(compiler,  s,  this);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Context.traverse(compiler,  s,  this);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Context.traverse(compiler,  s,  this);	  NodeTraversal.traverse(compiler,    useNode,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	180	None	replace
545	[BUG]  [BUGGY]  if(jsScope!=  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	201	None	replace
546	[BUG]  [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  true;  }	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	201	None	replace
547	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name,  useNode);  if(rValue  ==  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name,  useNode);  if(rValue  ==  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name,  useNode);  if(rValue  ==  null)  {  return  true;  }	  Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	110	None	replace
548	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  new  FlowState  <  MustDef>(resultMap));  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  def,  new  FlowState  <  MustDef>(resultMap));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  def,  new  FlowState  <  MustDef>(resultMap));	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>(resultMap));    	non-compiled	[CE]  reached  end  of  file  while  parsing	187	None	replace
549	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(jsScope,  resultMap));  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(jsScope,  resultMap));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(jsScope,  resultMap));	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>(resultMap));    	non-compiled	[CE]  reached  end  of  file  while  parsing	187	None	replace
550	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  new  FlowState  <  MustDef>(resultMap));  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  new  FlowState  <  MustDef>(resultMap));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  def,  new  FlowState  <  MustDef>(resultMap));	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>(resultMap));    	non-compiled	[CE]  reached  end  of  file  while  parsing	187	None	replace
551	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FlowState  <  MustDef>(resultMap));  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FlowState  <  MustDef>(resultMap));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  n,  new  FlowState  <  MustDef>(resultMap));	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>(resultMap));    	non-compiled	[CE]  reached  end  of  file  while  parsing	187	None	replace
552	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(state));  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(state));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(state));	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>(resultMap));    	non-compiled	[CE]  reached  end  of  file  while  parsing	187	None	replace
553	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(jsScope));  [CE]  reached  end  of  file  while  parsing  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(jsScope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(jsScope));	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>(resultMap));    	non-compiled	[CE]  reached  end  of  file  while  parsing	187	None	replace
554	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(state.getAnnotation()));  [CE]  reached  end  of  file  while  parsing  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(state.getAnnotation()));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(state.getAnnotation()));	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>(resultMap));    	non-compiled	[CE]  reached  end  of  file  while  parsing	187	None	replace
555	[BUG]  [BUGGY]  Preconditions.checkArgument(!des.depends.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(!des.depends.contains(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(!des.depends.contains(s.scope));	  Preconditions.checkArgument(des.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	replace
556	[BUG]  [BUGGY]  Preconditions.checkArgument(jsScope.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(jsScope.contains(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(jsScope.contains(s.scope));	  Preconditions.checkArgument(des.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	replace
557	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rVal  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rVal  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rVal	  if(def.depends!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ')'  expected	120	None	replace
558	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  return  true  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  return  true  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  return  true  }	  if(def.depends!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	120	None	replace
559	[BUG]  [BUGGY]  Preconditions.checkArgument(resultMap.containsKey(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(resultMap.containsKey(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(resultMap.containsKey(s.scope));	  Preconditions.checkArgument(resultMap.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
560	[BUG]  [BUGGY]  Preconditions.checkArgument(resultMap.contains(s.scope)||  resultMap.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(resultMap.contains(s.scope)||  resultMap.contains(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(resultMap.contains(s.scope)||  resultMap.contains(s.scope));	  Preconditions.checkArgument(resultMap.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
561	[BUG]  [BUGGY]  Preconditions.checkArgument(resultMap.contains(s.scope),  def);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(resultMap.contains(s.scope),  def);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(resultMap.contains(s.scope),  def);	  Preconditions.checkArgument(resultMap.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
562	[BUG]  [BUGGY]  Preconditions.checkState(resultMap.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkState(resultMap.contains(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkState(resultMap.contains(s.scope));	  Preconditions.checkArgument(resultMap.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
563	[BUG]  [BUGGY]  Preconditions.checkArgument(resultMap.get(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(resultMap.get(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(resultMap.get(s.scope));	  Preconditions.checkArgument(resultMap.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
564	[BUG]  [BUGGY]  for(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	169	None	replace
565	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(def))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(def))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(def))  {  return  false;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	169	None	replace
566	[BUG]  [BUGGY]  For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	169	None	replace
567	[BUG]  [BUGGY]  Var  rValue  =  def.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  def.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  def.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	169	None	replace
568	[BUG]  [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	169	None	replace
569	[BUG]  [BUGGY]  For(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	  for(Var    r    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	167	None	replace
570	[BUG]  [BUGGY]  For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	  for(Var    r    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	167	None	replace
571	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  state,  def,  new  FlowState  <  MustDef>());  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  state,  def,  new  FlowState  <  MustDef>());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  state,  def,  new  FlowState  <  MustDef>());	  NodeTraversal.traverse(compiler,    s,    def,    new    FlowState    <    MustDef>());    	non-compiled	[CE]  reached  end  of  file  while  parsing	56	None	replace
572	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  state.getAnnotation());  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  state.getAnnotation());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  def,  state.getAnnotation());	  NodeTraversal.traverse(compiler,    s,    def,    new    FlowState    <    MustDef>());    	non-compiled	[CE]  reached  end  of  file  while  parsing	56	None	replace
573	[BUG]  [BUGGY]  Scope  jsScope  =  s.getVar(name);  if(jsScope!=  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Scope  jsScope  =  s.getVar(name);  if(jsScope!=  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Scope  jsScope  =  s.getVar(name);  if(jsScope!=  null)  {  return  true;  }	  Scope    jsScope    =    jsScope.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	210	None	replace
574	[BUG]  [BUGGY]  Scope  jsScope  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(rhs!=  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Scope  jsScope  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(rhs!=  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Scope  jsScope  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(rhs!=  null)  {  return  true;  }	  Scope    jsScope    =    jsScope.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	210	None	replace
575	[BUG]  [BUGGY]  Scope  rhsScope  =  jsScope.getVar(name);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Scope  rhsScope  =  jsScope.getVar(name);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Scope  rhsScope  =  jsScope.getVar(name);	  Scope    jsScope    =    jsScope.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	210	None	replace
576	[BUG]  [BUGGY]  Scope  jsScope  =  s.scope.getVar(name);  if(jsScope!=  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Scope  jsScope  =  s.scope.getVar(name);  if(jsScope!=  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Scope  jsScope  =  s.scope.getVar(name);  if(jsScope!=  null)  {  return  true;  }	  Scope    jsScope    =    jsScope.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	210	None	replace
577	[BUG]  [BUGGY]  Scope  jsScope  =  jsScope.getVar(name);  if(rhs  ==  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Scope  jsScope  =  jsScope.getVar(name);  if(rhs  ==  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Scope  jsScope  =  jsScope.getVar(name);  if(rhs  ==  null)  {  return  true;  }	  Scope    jsScope    =    jsScope.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	210	None	replace
578	[BUG]  [BUGGY]  Scope  jsScope  =  jsScope.getVar(name);  if(jsScope!=  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Scope  jsScope  =  jsScope.getVar(name);  if(jsScope!=  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Scope  jsScope  =  jsScope.getVar(name);  if(jsScope!=  null)  {  return  true;  }	  Scope    jsScope    =    jsScope.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	210	None	replace
579	[BUG]  [BUGGY]  for(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	159	None	replace
580	[BUG]  [BUGGY]  for(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	159	None	replace
581	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(def))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(def))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(def))  {  return  true;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	159	None	replace
582	[BUG]  [BUGGY]  Pentru(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Pentru(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Pentru(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	159	None	replace
583	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  escaped,  new  FlowState  <  MustDef>(reachingDef,  s));  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  escaped,  new  FlowState  <  MustDef>(reachingDef,  s));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  escaped,  new  FlowState  <  MustDef>(reachingDef,  s));	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>(reachingDef,    escaped));    	non-compiled	[CE]  reached  end  of  file  while  parsing	178	None	replace
584	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  escaped,  new  FlowState  <  MustDef>(s,  s));  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  escaped,  new  FlowState  <  MustDef>(s,  s));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  escaped,  new  FlowState  <  MustDef>(s,  s));	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>(reachingDef,    escaped));    	non-compiled	[CE]  reached  end  of  file  while  parsing	178	None	replace
585	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  new  FlowState  <  MustDef>(reachingDef,  escaped));  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  def,  new  FlowState  <  MustDef>(reachingDef,  escaped));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  def,  new  FlowState  <  MustDef>(reachingDef,  escaped));	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>(reachingDef,    escaped));    	non-compiled	[CE]  reached  end  of  file  while  parsing	178	None	replace
586	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  escaped,  new  FlowState  <  MustDef>(s,achingDef));  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  escaped,  new  FlowState  <  MustDef>(s,achingDef));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  escaped,  new  FlowState  <  MustDef>(s,achingDef));	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>(reachingDef,    escaped));    	non-compiled	[CE]  reached  end  of  file  while  parsing	178	None	replace
587	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(def,  escaped));  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(def,  escaped));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(def,  escaped));	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>(reachingDef,    escaped));    	non-compiled	[CE]  reached  end  of  file  while  parsing	178	None	replace
588	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  useNode,  new  FlowState  <  MustDef>(reachingDef,  escaped));  [CE]  reached  end  of  file  while  parsing  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  useNode,  new  FlowState  <  MustDef>(reachingDef,  escaped));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  useNode,  new  FlowState  <  MustDef>(reachingDef,  escaped));	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>(reachingDef,    escaped));    	non-compiled	[CE]  reached  end  of  file  while  parsing	178	None	replace
589	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(reachingDef,  def));  [CE]  reached  end  of  file  while  parsing  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(reachingDef,  def));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(reachingDef,  def));	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>(reachingDef,    escaped));    	non-compiled	[CE]  reached  end  of  file  while  parsing	178	None	replace
590	[BUG]  [BUGGY]  For(Var  rValue  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  rValue  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  rValue  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }	  For(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	137	None	replace
591	[BUG]  [BUGGY]  Pentru(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Pentru(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Pentru(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }	  For(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	137	None	replace
592	[BUG]  [BUGGY]  For(Var  rValue  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  rValue  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  rValue  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }	  For(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	137	None	replace
593	[BUG]  [BUGGY]  For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(vValue))  {  return  true;  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(vValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(vValue))  {  return  true;  }	  For(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	137	None	replace
594	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  def,  new  MustDef());  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  def,  new  MustDef());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  n,  def,  new  MustDef());	  NodeTraversal.traverse(compiler,    s,    def,    new    MustDef());    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
595	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  useNode,  new  MustDef());  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  useNode,  new  MustDef());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  useNode,  new  MustDef());	  NodeTraversal.traverse(compiler,    s,    def,    new    MustDef());    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
596	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  state.getIn());  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  state.getIn());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  def,  state.getIn());	  NodeTraversal.traverse(compiler,    s,    def,    new    MustDef());    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
597	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  MustDef());  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  MustDef());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  rValue,  new  MustDef());	  NodeTraversal.traverse(compiler,    n,    new    MustDef());    	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	replace
598	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  MustDef(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  MustDef(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  n,  new  MustDef(s.scope));	  NodeTraversal.traverse(compiler,    n,    new    MustDef());    	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	replace
599	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.name)||  def.depends.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.name)||  def.depends.contains(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s.name)||  def.depends.contains(s.scope));	  Preconditions.checkArgument(def.depends.contains(s.scope)||    def.depends.contains(s.name));    	non-compiled	[CE]  reached  end  of  file  while  parsing	224	None	replace
600	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.scope)||  s.depends.contains(s.name));  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.scope)||  s.depends.contains(s.name));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s.scope)||  s.depends.contains(s.name));	  Preconditions.checkArgument(def.depends.contains(s.scope)||    def.depends.contains(s.name));    	non-compiled	[CE]  reached  end  of  file  while  parsing	224	None	replace
601	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.name)||  s.depends.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.name)||  s.depends.contains(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s.name)||  s.depends.contains(s.scope));	  Preconditions.checkArgument(def.depends.contains(s.scope)||    def.depends.contains(s.name));    	non-compiled	[CE]  reached  end  of  file  while  parsing	224	None	replace
602	[BUG]  [BUGGY]  Preconditions.checkArgument(des.depends.contains(s.scope)||  def.depends.contains(s.name));  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(des.depends.contains(s.scope)||  def.depends.contains(s.name));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(des.depends.contains(s.scope)||  def.depends.contains(s.name));	  Preconditions.checkArgument(def.depends.contains(s.scope)||    def.depends.contains(s.name));    	non-compiled	[CE]  reached  end  of  file  while  parsing	224	None	replace
603	[BUG]  [BUGGY]  Preconditions.checkArgument(!def.depends.contains(s.scope)||  def.depends.contains(s.name));  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(!def.depends.contains(s.scope)||  def.depends.contains(s.name));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(!def.depends.contains(s.scope)||  def.depends.contains(s.name));	  Preconditions.checkArgument(def.depends.contains(s.scope)||    def.depends.contains(s.name));    	non-compiled	[CE]  reached  end  of  file  while  parsing	224	None	replace
604	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.scope)&&  def.depends.contains(s.name));  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.scope)&&  def.depends.contains(s.name));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s.scope)&&  def.depends.contains(s.name));	  Preconditions.checkArgument(def.depends.contains(s.scope)||    def.depends.contains(s.name));    	non-compiled	[CE]  reached  end  of  file  while  parsing	224	None	replace
605	[BUG]  [BUGGY]  escaped.add(s.getName(),  def);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s.getName(),  def);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.getName(),  def);	  escaped.add(s.getName());    	non-compiled	[CE]  reached  end  of  file  while  parsing	184	None	replace
606	[BUG]  [BUGGY]  escaped.add(s.getName(),  jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s.getName(),  jsScope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.getName(),  jsScope);	  escaped.add(s.getName());    	non-compiled	[CE]  reached  end  of  file  while  parsing	184	None	replace
607	[BUG]  [BUGGY]  escaped.add(s.scope.getName());  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s.scope.getName());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.scope.getName());	  escaped.add(s.getName());    	non-compiled	[CE]  reached  end  of  file  while  parsing	184	None	replace
608	[BUG]  [BUGGY]  escaped.add(s.getLocalName());  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s.getLocalName());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.getLocalName());	  escaped.add(s.getName());    	non-compiled	[CE]  reached  end  of  file  while  parsing	184	None	replace
609	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.scope,  s.depends));  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.scope,  s.depends));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s.scope,  s.depends));	  Preconditions.checkArgument(def.depends.contains(s,    s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	226	None	replace
610	[BUG]  [BUGGY]  Preconditions.checkArgument(resultMap.contains(s,  s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(resultMap.contains(s,  s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(resultMap.contains(s,  s.scope));	  Preconditions.checkArgument(def.depends.contains(s,    s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	226	None	replace
611	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.jsScope,  s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.jsScope,  s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s.jsScope,  s.scope));	  Preconditions.checkArgument(def.depends.contains(s,    s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	226	None	replace
612	[BUG]  [BUGGY]  Preconditions.checkArgument(des.depends.contains(s,  s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(des.depends.contains(s,  s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(des.depends.contains(s,  s.scope));	  Preconditions.checkArgument(def.depends.contains(s,    s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	226	None	replace
613	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	30	None	replace
614	[BUG]  [BUGGY]  if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	30	None	replace
615	[BUG]  [BUGGY]  FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }	  Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	63	None	replace
616	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }	  Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	63	None	replace
617	[BUG]  [BUGGY]  Node  rValue  =  s.getFirstChild();  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getFirstChild();  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getFirstChild();	  Node    rValue    =    s.getLastChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	188	None	replace
618	[BUG]  [BUGGY]  Node  rValue  =  s.getNext();  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getNext();  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getNext();	  Node    rValue    =    s.getLastChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	188	None	replace
619	[BUG]  [BUGGY]  Node  rValue  =  n.getLastChild();  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  n.getLastChild();  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  n.getLastChild();	  Node    rValue    =    s.getLastChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	188	None	replace
620	[BUG]  [BUGGY]  Node  rValue  =  s.next();  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.next();  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.next();	  Node    rValue    =    s.getLastChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	188	None	replace
621	[BUG]  [BUGGY]  Node  rValue  =  s.getPreviousChild();  [CE]  reached  end  of  file  while  parsing  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getPreviousChild();  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getPreviousChild();	  Node    rValue    =    s.getLastChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	188	None	replace
622	[BUG]  [BUGGY]  Preconditions.checkArgument(def  ==  s.scope,  jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def  ==  s.scope,  jsScope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def  ==  s.scope,  jsScope);	  Preconditions.checkArgument(s.scope    ==    jsScope,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	92	None	replace
623	[BUG]  [BUGGY]  Preconditions.checkArgument(jsScope.getVar(name)  ==  s.scope,  def);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(jsScope.getVar(name)  ==  s.scope,  def);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(jsScope.getVar(name)  ==  s.scope,  def);	  Preconditions.checkArgument(s.scope    ==    jsScope,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	92	None	replace
624	[BUG]  [BUGGY]  Preconditions.checkArgument(jsScope.getVar(name),  def);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(jsScope.getVar(name),  def);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(jsScope.getVar(name),  def);	  Preconditions.checkArgument(s.scope    ==    jsScope,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	92	None	replace
625	[BUG]  [BUGGY]  For(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	82	None	replace
626	[BUG]  [BUGGY]  Var  rValue  =  def.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  def.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  def.getVar(name);  if(rValue!=  null)  {  return  false;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	82	None	replace
627	[BUG]  [BUGGY]  if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }	  if(jsScope    ==    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	192	None	replace
628	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	109	None	replace
629	[BUG]  [BUGGY]  ||  jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  ||  jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	||  jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
630	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	109	None	replace
631	[BUG]  [BUGGY]  if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(null))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(null))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(null))  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(null))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	34	None	replace
632	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(null))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(null))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(null))  {  return  false;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(null))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	34	None	replace
633	[BUG]  [BUGGY]  if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(null))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(null))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(null))  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(null))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	34	None	replace
634	[BUG]  [BUGGY]  if(jsScope!=  null  ||  jsScope.getVar(name)!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(null))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null  ||  jsScope.getVar(name)!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(null))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null  ||  jsScope.getVar(name)!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(null))  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(null))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	34	None	replace
635	[BUG]  [BUGGY]  if(jsScope!=  null  ||  jsScope.getVar(name)!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(null))  {  return  true  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null  ||  jsScope.getVar(name)!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(null))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null  ||  jsScope.getVar(name)!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(null))  {  return  true	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(null))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	34	None	replace
636	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(false))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(false))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(false))  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(null))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	34	None	replace
637	[BUG]  [BUGGY]  For(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	38	None	replace
638	[BUG]  [BUGGY]  For(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  for(Var    r    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	173	None	replace
639	[BUG]  [BUGGY]  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  true;  }	  rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	112	None	replace
640	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  true;  }	  rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	112	None	replace
641	[BUG]  [BUGGY]  rValue  =  jsScope.getVar(name);  if(rValue  ==  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  rValue  =  jsScope.getVar(name);  if(rValue  ==  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	rValue  =  jsScope.getVar(name);  if(rValue  ==  null)  {  return  true;  }	  rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	112	None	replace
642	[BUG]  [BUGGY]  Preconditions.checkArgument(jsScope.getVar(name)!=  s.scope);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(jsScope.getVar(name)!=  s.scope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(jsScope.getVar(name)!=  s.scope);	  Preconditions.checkArgument(jsScope!=    s.scope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	89	None	replace
643	[BUG]  [BUGGY]  Preconditions.checkArgument(jsScope.getVar(name,  s.scope)!=  s.scope);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(jsScope.getVar(name,  s.scope)!=  s.scope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(jsScope.getVar(name,  s.scope)!=  s.scope);	  Preconditions.checkArgument(jsScope!=    s.scope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	89	None	replace
644	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }	  if(jsScope!=    null)    {    Var    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
645	[BUG]  [BUGGY]  escaped.add(s.getValue(),  def);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s.getValue(),  def);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.getValue(),  def);	  escaped.add(s.getValue());    	non-compiled	[CE]  reached  end  of  file  while  parsing	88	None	replace
646	[BUG]  [BUGGY]  escaped.add(s.getValue(),  jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s.getValue(),  jsScope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.getValue(),  jsScope);	  escaped.add(s.getValue());    	non-compiled	[CE]  reached  end  of  file  while  parsing	88	None	replace
647	[BUG]  [BUGGY]  escaped.add(s.getValue()  +  1);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s.getValue()  +  1);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.getValue()  +  1);	  escaped.add(s.getValue());    	non-compiled	[CE]  reached  end  of  file  while  parsing	88	None	replace
648	[BUG]  [BUGGY]  escaped.add(s.getValue(),  state.getIn());  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s.getValue(),  state.getIn());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.getValue(),  state.getIn());	  escaped.add(s.getValue());    	non-compiled	[CE]  reached  end  of  file  while  parsing	88	None	replace
649	[BUG]  [BUGGY]  escaped.add(s.scope.getValue());  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s.scope.getValue());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.scope.getValue());	  escaped.add(s.getValue());    	non-compiled	[CE]  reached  end  of  file  while  parsing	88	None	replace
650	[BUG]  [BUGGY]  escaped.add(s.getValue()  +  name);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s.getValue()  +  name);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.getValue()  +  name);	  escaped.add(s.getValue());    	non-compiled	[CE]  reached  end  of  file  while  parsing	88	None	replace
651	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue  ==  s.getVar(name))  {  return  true;  }	  Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	replace
652	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  &&  rValue!=  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  &&  rValue!=  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue  ==  null  &&  rValue!=  s.getVar(name))  {  return  true;  }	  Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	replace
653	[BUG]  [BUGGY]  escaped.put(name,  s.scope);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.put(name,  s.scope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.put(name,  s.scope);	  escaped.put(name,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	141	None	replace
654	[BUG]  [BUGGY]  escaped.put(name,  s);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.put(name,  s);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.put(name,  s);	  escaped.put(name,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	141	None	replace
655	[BUG]  [BUGGY]  escaped.put(name,  s.jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.put(name,  s.jsScope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.put(name,  s.jsScope);	  escaped.put(name,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	141	None	replace
656	[BUG]  [BUGGY]  escaped.put(name,  s.toString());  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.put(name,  s.toString());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.put(name,  s.toString());	  escaped.put(name,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	141	None	replace
657	[BUG]  [BUGGY]  escaped.put(name,  s.definition);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.put(name,  s.definition);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.put(name,  s.definition);	  escaped.put(name,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	141	None	replace
658	[BUG]  [BUGGY]  escaped.put(name,  jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.put(name,  jsScope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.put(name,  jsScope);	  escaped.put(name,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	141	None	replace
659	[BUG]  [BUGGY]  for(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	121	None	replace
660	[BUG]  [BUGGY]  for(Var  s  :  def.vars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.vars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.vars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	121	None	replace
661	[BUG]  [BUGGY]  Preconditions.checkArgument(reachingDef.contains(s.jsScope));  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(reachingDef.contains(s.jsScope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(reachingDef.contains(s.jsScope));	  Preconditions.checkArgument(reachingDef.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	149	None	replace
662	[BUG]  [BUGGY]  Preconditions.checkArgument(reachingDef.containsKey(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(reachingDef.containsKey(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(reachingDef.containsKey(s.scope));	  Preconditions.checkArgument(reachingDef.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	149	None	replace
663	[BUG]  [BUGGY]  Preconditions.checkArgument(reachingDef.contains(s.scope),  def);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(reachingDef.contains(s.scope),  def);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(reachingDef.contains(s.scope),  def);	  Preconditions.checkArgument(reachingDef.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	149	None	replace
664	[BUG]  [BUGGY]  Preconditions.checkArgument(reachingDef.contains(s.name));  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(reachingDef.contains(s.name));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(reachingDef.contains(s.name));	  Preconditions.checkArgument(reachingDef.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	149	None	replace
665	[BUG]  [BUGGY]  Preconditions.checkState(reachingDef.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkState(reachingDef.contains(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkState(reachingDef.contains(s.scope));	  Preconditions.checkArgument(reachingDef.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	149	None	replace
666	[BUG]  [BUGGY]  For(Var  rValue  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  rValue  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  rValue  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }	  For(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	160	None	replace
667	[BUG]  [BUGGY]  For(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }	  For(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	160	None	replace
668	[BUG]  [BUGGY]  For(Var  s  :  def.getVars())  {  Definition  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVars())  {  Definition  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVars())  {  Definition  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }	  For(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	160	None	replace
669	[BUG]  [BUGGY]  For(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    r    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	158	None	replace
670	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  useNode,  def,  new  MustDef());  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  useNode,  def,  new  MustDef());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  useNode,  def,  new  MustDef());	  NodeTraversal.traverse(compiler,    useNode,    new    MustDef());    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
671	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfgNode,  new  MustDef());  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  cfgNode,  new  MustDef());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  cfgNode,  new  MustDef());	  NodeTraversal.traverse(compiler,    useNode,    new    MustDef());    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
672	[BUG]  [BUGGY]  escaped.add(jsScope.getVar(name));  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(jsScope.getVar(name));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(jsScope.getVar(name));	  escaped.add(jsScope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	143	None	replace
673	[BUG]  [BUGGY]  escaped.add(s,  jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s,  jsScope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s,  jsScope);	  escaped.add(jsScope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	143	None	replace
674	[BUG]  [BUGGY]  escaped.add(jsScope.getVar(name,  s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(jsScope.getVar(name,  s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(jsScope.getVar(name,  s.scope));	  escaped.add(jsScope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	143	None	replace
675	[BUG]  [BUGGY]  for(Var  r  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  for(Var    s    :    def.vars)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	123	None	replace
676	[BUG]  [BUGGY]  for(Var  vars  :  def.vars)  {  Var  rValue  =  vars.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  vars  :  def.vars)  {  Var  rValue  =  vars.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  vars  :  def.vars)  {  Var  rValue  =  vars.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  for(Var    s    :    def.vars)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	123	None	replace
677	[BUG]  [BUGGY]  for(Var  var  :  def.vars)  {  Var  rValue  =  var.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  var  :  def.vars)  {  Var  rValue  =  var.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  var  :  def.vars)  {  Var  rValue  =  var.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  for(Var    s    :    def.vars)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	123	None	replace
678	[BUG]  [BUGGY]  for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  for(Var    s    :    def.vars)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	123	None	replace
679	[BUG]  [BUGGY]  For(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  For(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	174	None	replace
680	[BUG]  [BUGGY]  Pentru(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Pentru(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Pentru(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  For(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	174	None	replace
681	[BUG]  [BUGGY]  For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  For(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	174	None	replace
682	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.rValue)||  def.depends.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.rValue)||  def.depends.contains(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s.rValue)||  def.depends.contains(s.scope));	  Preconditions.checkArgument(def.depends.contains(s.scope)||    def.depends.contains(s.rValue));    	non-compiled	[CE]  reached  end  of  file  while  parsing	148	None	replace
683	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.scope)||  s.depends.contains(s.rValue));  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.scope)||  s.depends.contains(s.rValue));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s.scope)||  s.depends.contains(s.rValue));	  Preconditions.checkArgument(def.depends.contains(s.scope)||    def.depends.contains(s.rValue));    	non-compiled	[CE]  reached  end  of  file  while  parsing	148	None	replace
684	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.scope)&&  def.depends.contains(s.rValue));  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.scope)&&  def.depends.contains(s.rValue));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s.scope)&&  def.depends.contains(s.rValue));	  Preconditions.checkArgument(def.depends.contains(s.scope)||    def.depends.contains(s.rValue));    	non-compiled	[CE]  reached  end  of  file  while  parsing	148	None	replace
685	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.name)||  def.depends.contains(s.rValue));  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.name)||  def.depends.contains(s.rValue));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s.name)||  def.depends.contains(s.rValue));	  Preconditions.checkArgument(def.depends.contains(s.scope)||    def.depends.contains(s.rValue));    	non-compiled	[CE]  reached  end  of  file  while  parsing	148	None	replace
686	[BUG]  [BUGGY]  Preconditions.checkArgument(des.depends.contains(s.scope)||  def.depends.contains(s.rValue));  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(des.depends.contains(s.scope)||  def.depends.contains(s.rValue));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(des.depends.contains(s.scope)||  def.depends.contains(s.rValue));	  Preconditions.checkArgument(def.depends.contains(s.scope)||    def.depends.contains(s.rValue));    	non-compiled	[CE]  reached  end  of  file  while  parsing	148	None	replace
687	[BUG]  [BUGGY]  Preconditions.checkArgument(!def.depends.contains(s.scope)||  def.depends.contains(s.rValue));  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(!def.depends.contains(s.scope)||  def.depends.contains(s.rValue));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(!def.depends.contains(s.scope)||  def.depends.contains(s.rValue));	  Preconditions.checkArgument(def.depends.contains(s.scope)||    def.depends.contains(s.rValue));    	non-compiled	[CE]  reached  end  of  file  while  parsing	148	None	replace
688	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||!rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||!rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||!rValue.equals(rValue))  {  return  false;  }	  Node    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
689	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(rValue))  {  return  false;  }	  Node    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
690	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s.scope))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s.scope))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s.scope))  {  return  false;  }	  Node    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
691	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(m))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(m))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(m))  {  return  false;  }	  Node    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
692	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(s.scope))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(s.scope))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(s.scope))  {  return  false;  }	  Node    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
693	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(def))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(def))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(def))  {  return  false;  }	  if(def!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	150	None	replace
694	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false;  }	  if(def!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	150	None	replace
695	[BUG]  [BUGGY]  for(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	136	None	replace
696	[BUG]  [BUGGY]  for(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	136	None	replace
697	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(def))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(def))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(def))  {  return  true;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	136	None	replace
698	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name,  def);  if(rValue  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name,  def);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name,  def);  if(rValue  ==  null)  {  return  false;  }	  Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	75	None	replace
699	[BUG]  [BUGGY]  escaped.add(s.toString()  + ": ");  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s.toString()  + ": ");  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.toString()  + ": ");	  escaped.add(s.toString());    	non-compiled	[CE]  reached  end  of  file  while  parsing	186	None	replace
700	[BUG]  [BUGGY]  escaped.add(s.scope.getVar(name));  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s.scope.getVar(name));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.scope.getVar(name));	  escaped.add(s.toString());    	non-compiled	[CE]  reached  end  of  file  while  parsing	186	None	replace
701	[BUG]  [BUGGY]  escaped.add(s.scope.toString());  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s.scope.toString());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.scope.toString());	  escaped.add(s.toString());    	non-compiled	[CE]  reached  end  of  file  while  parsing	186	None	replace
702	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }	  if(def!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	126	None	replace
703	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(def))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(def))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(def))  {  return  true;  }	  if(def!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	126	None	replace
704	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(s.scope))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(s.scope))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(s.scope))  {  return  true;  }	  Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	replace
705	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s.scope))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s.scope))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s.scope))  {  return  true;  }	  Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	replace
706	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||!rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||!rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||!rValue.equals(rValue))  {  return  true;  }	  Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	replace
707	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(s))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(s))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(s))  {  return  true;  }	  Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	replace
708	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	215	None	replace
709	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	215	None	replace
710	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	215	None	replace
711	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false  }	  if(jsScope!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    false    	non-compiled	[CE]  ';'  expected	117	None	replace
712	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(s.scope!=  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false	  if(jsScope!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    false    	non-compiled	[CE]  ';'  expected	117	None	replace
713	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(s.scope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  if(s.scope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(s.scope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false	  if(jsScope!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    false    	non-compiled	[CE]  ';'  expected	117	None	replace
714	[BUG]  [BUGGY]  FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }	  Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	replace
715	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(m))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(m))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(m))  {  return  false;  }	  Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	replace
716	[BUG]  [BUGGY]  if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(lhs))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	105	None	replace
717	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(lhs))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	105	None	replace
718	[BUG]  [BUGGY]  if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(lhs))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(lhs))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(lhs))  {  return  false;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(lhs))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	105	None	replace
719	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(lhs))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	105	None	replace
720	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.scope)&&  def.depends.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.scope)&&  def.depends.contains(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s.scope)&&  def.depends.contains(s.scope));	  Preconditions.checkArgument(def.depends.contains(s.scope)||    def.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	replace
721	[BUG]  [BUGGY]  Preconditions.checkArgument(des.depends.contains(s.scope)||  def.depends.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(des.depends.contains(s.scope)||  def.depends.contains(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(des.depends.contains(s.scope)||  def.depends.contains(s.scope));	  Preconditions.checkArgument(def.depends.contains(s.scope)||    def.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	replace
722	[BUG]  [BUGGY]  Preconditions.checkArgument(!def.depends.contains(s.scope)||  def.depends.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(!def.depends.contains(s.scope)||  def.depends.contains(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(!def.depends.contains(s.scope)||  def.depends.contains(s.scope));	  Preconditions.checkArgument(def.depends.contains(s.scope)||    def.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	replace
723	[BUG]  [BUGGY]  Preconditions.checkArgument(resultMap.contains(s.scope)||  def.depends.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(resultMap.contains(s.scope)||  def.depends.contains(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(resultMap.contains(s.scope)||  def.depends.contains(s.scope));	  Preconditions.checkArgument(def.depends.contains(s.scope)||    def.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	replace
724	[BUG]  [BUGGY]  Node  rValue  =  s.getString();  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getString();  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getString();	  Node    rValue    =    s.getParent();    	non-compiled	[CE]  reached  end  of  file  while  parsing	179	None	replace
725	[BUG]  [BUGGY]  Node  rValue  =  s.getRawParent();  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getRawParent();  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getRawParent();	  Node    rValue    =    s.getParent();    	non-compiled	[CE]  reached  end  of  file  while  parsing	179	None	replace
726	[BUG]  [BUGGY]  Node  rValue  =  s.getPrevious();  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getPrevious();  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getPrevious();	  Node    rValue    =    s.getParent();    	non-compiled	[CE]  reached  end  of  file  while  parsing	179	None	replace
727	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	214	None	replace
728	[BUG]  [BUGGY]  For(Var  s  :  s.getVar(name,  useNode))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  s.getVar(name,  useNode))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  s.getVar(name,  useNode))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	214	None	replace
729	[BUG]  [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(s))  {  return  false;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(s))  {  return  false;  }	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	214	None	replace
730	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  def,  new  MustDef());  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  def,  new  MustDef());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  jsScope,  def,  new  MustDef());	  NodeTraversal.traverse(compiler,    jsScope,    new    MustDef());    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
731	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false	  if(def!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false    	non-compiled	[CE]  ';'  expected	151	None	replace
732	[BUG]  [BUGGY]  Preconditions.checkArgument(resultMap.containsKey(s));  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(resultMap.containsKey(s));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(resultMap.containsKey(s));	  Preconditions.checkArgument(resultMap.contains(s));    	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	replace
733	[BUG]  [BUGGY]  Preconditions.checkArgument(resultMap.containsKey(s.name));  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(resultMap.containsKey(s.name));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(resultMap.containsKey(s.name));	  Preconditions.checkArgument(resultMap.contains(s));    	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	replace
734	[BUG]  [BUGGY]  Preconditions.checkArgument(resultMap.contains(s.getName()));  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(resultMap.contains(s.getName()));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(resultMap.contains(s.getName()));	  Preconditions.checkArgument(resultMap.contains(s));    	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	replace
735	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name,  def);  if(rValue  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name,  def);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name,  def);  if(rValue  ==  null)  {  return  false;  }	  Node    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	76	None	replace
736	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name,  useNode);  if(rValue  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name,  useNode);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name,  useNode);  if(rValue  ==  null)  {  return  false;  }	  Node    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	76	None	replace
737	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!depends.isEmpty())  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!depends.isEmpty())  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!depends.isEmpty())  {  return  false;  }	  Node    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	76	None	replace
738	[BUG]  [BUGGY]  Var  rValue  =  def.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  def.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  def.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	165	None	replace
739	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  if(jsScope!=  null)  {  Var  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  true;  }	  if(jsScope!=    null)    {    Var    rhs    =    s.getVar(name);    if(rhs    ==    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
740	[BUG]  [BUGGY]  ||  jsScope!=  null)  {  Var  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  ||  jsScope!=  null)  {  Var  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	||  jsScope!=  null)  {  Var  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  true;  }	  if(jsScope!=    null)    {    Var    rhs    =    s.getVar(name);    if(rhs    ==    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
741	[BUG]  [BUGGY]  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  true;  }	  if(jsScope!=    null)    {    Var    rhs    =    s.getVar(name);    if(rhs    ==    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
742	[BUG]  [BUGGY]  For(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }	  for(Var    r    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	4	None	replace
743	[BUG]  [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(lhs))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(lhs))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(lhs))  {  return  false;  }	  for(Var    r    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
744	[BUG]  [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(cfgNode))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(cfgNode))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(cfgNode))  {  return  false;  }	  for(Var    r    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
745	[BUG]  [BUGGY]  rhs  =  s.getVar(name);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  rhs  =  s.getVar(name);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	rhs  =  s.getVar(name);	  rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	209	None	replace
746	[BUG]  [BUGGY]  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  false;  }	  rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	209	None	replace
747	[BUG]  [BUGGY]  rhs  =  s.getVar(name,  useNode);  if(rhs!=  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  rhs  =  s.getVar(name,  useNode);  if(rhs!=  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	rhs  =  s.getVar(name,  useNode);  if(rhs!=  null)  {  return  true;  }	  rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	209	None	replace
748	[BUG]  [BUGGY]  Node  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }	  rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	209	None	replace
749	[BUG]  [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));	  if(def!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	119	None	replace
750	[BUG]  [BUGGY]  Scope  jsScope  =  s.getScope();  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Scope  jsScope  =  s.getScope();  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Scope  jsScope  =  s.getScope();	  Scope    jsScope    =    jsScope.getScope();    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
751	[BUG]  [BUGGY]  Scope  jsScope  =  s.scope.getScope();  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Scope  jsScope  =  s.scope.getScope();  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Scope  jsScope  =  s.scope.getScope();	  Scope    jsScope    =    jsScope.getScope();    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
752	[BUG]  [BUGGY]  Scope  jsScope  =  cfgNode.getScope();  [CE]  reached  end  of  file  while  parsing  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Scope  jsScope  =  cfgNode.getScope();  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Scope  jsScope  =  cfgNode.getScope();	  Scope    jsScope    =    jsScope.getScope();    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
753	[BUG]  [BUGGY]  Scope  jsScope  =  scope.getScope();  [CE]  reached  end  of  file  while  parsing  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Scope  jsScope  =  scope.getScope();  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Scope  jsScope  =  scope.getScope();	  Scope    jsScope    =    jsScope.getScope();    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
754	[BUG]  [BUGGY]  Scope  jsScope  =  state.getScope();  [CE]  reached  end  of  file  while  parsing  [FE]                                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Scope  jsScope  =  state.getScope();  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Scope  jsScope  =  state.getScope();	  Scope    jsScope    =    jsScope.getScope();    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
755	[BUG]  [BUGGY]  Scope  jsScope  =  s.node.getScope();  [CE]  reached  end  of  file  while  parsing  [FE]                                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Scope  jsScope  =  s.node.getScope();  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Scope  jsScope  =  s.node.getScope();	  Scope    jsScope    =    jsScope.getScope();    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
756	[BUG]  [BUGGY]  Scope  jsScope  =  n.getScope();  [CE]  reached  end  of  file  while  parsing  [FE]                                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Scope  jsScope  =  n.getScope();  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Scope  jsScope  =  n.getScope();	  Scope    jsScope    =    jsScope.getScope();    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
757	[BUG]  [BUGGY]  Var  rhs  =  s.getVar(name);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rhs  =  s.getVar(name);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rhs  =  s.getVar(name);	  Var    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
758	[BUG]  [BUGGY]  Var  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  false;  }	  Var    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
759	[BUG]  [BUGGY]  Var  rhs  =  s.getVar(name,  useNode);  if(rhs!=  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rhs  =  s.getVar(name,  useNode);  if(rhs!=  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rhs  =  s.getVar(name,  useNode);  if(rhs!=  null)  {  return  true;  }	  Var    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
760	[BUG]  [BUGGY]  Var  rhs  =  s.getVar(name,  def);  if(rhs!=  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rhs  =  s.getVar(name,  def);  if(rhs!=  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rhs  =  s.getVar(name,  def);  if(rhs!=  null)  {  return  true;  }	  Var    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
761	[BUG]  [BUGGY]  For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	177	None	replace
762	[BUG]  [BUGGY]  Pentru(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Pentru(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Pentru(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	177	None	replace
763	[BUG]  [BUGGY]  for(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	177	None	replace
764	[BUG]  [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	177	None	replace
765	[BUG]  [BUGGY]  if(def!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	74	None	replace
766	[BUG]  [BUGGY]  if(def  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	74	None	replace
767	[BUG]  [BUGGY]  if(def  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	74	None	replace
768	[BUG]  [BUGGY]  Node  rValue  =  jsScope.getVar(name);  if(rValue  >=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  jsScope.getVar(name);  if(rValue  >=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  jsScope.getVar(name);  if(rValue  >=  null)  {  return  false;  }	  Node    rValue    =    jsScope.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	79	None	replace
769	[BUG]  [BUGGY]  Scope  jsScope  =  def.getScope();  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Scope  jsScope  =  def.getScope();  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Scope  jsScope  =  def.getScope();	  Scope    jsScope    =    jsScope.getScope();    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
770	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(null))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(null))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(null))  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(null))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	34	None	replace
771	[BUG]  [BUGGY]  if(def!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(null))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(null))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(null))  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(null))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	34	None	replace
772	[BUG]  [BUGGY]  if(def  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(null))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(null))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(null))  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(null))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	34	None	replace
773	[BUG]  [BUGGY]  if(s.scope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(null))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(null))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(null))  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(null))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	34	None	replace
774	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(null))  {  return  true  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(null))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(null))  {  return  true	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(null))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	34	None	replace
775	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(null))  {  return  true  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(null))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(null))  {  return  true	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(null))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	34	None	replace
776	[BUG]  [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	194	None	replace
777	[BUG]  [BUGGY]  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	194	None	replace
778	[BUG]  [BUGGY]  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	194	None	replace
779	[BUG]  [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	194	None	replace
780	[BUG]  [BUGGY]  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	194	None	replace
781	[BUG]  [BUGGY]  if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true	  if(def!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	119	None	replace
782	[BUG]  [BUGGY]  if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }	  if(def!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	119	None	replace
783	[BUG]  [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return	  if(def!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
784	[BUG]  [BUGGY]  if(def!=  null)  {  if(s.scope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def!=  null)  {  if(s.scope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  if(s.scope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true	  if(def!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	119	None	replace
785	[BUG]  [BUGGY]  Scope  jsScope  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Scope  jsScope  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Scope  jsScope  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }	  Scope    jsScope    =    jsScope.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	210	None	replace
786	[BUG]  [BUGGY]  Scope  jsScope  =  s.scope.getVar(name);  if(rhs!=  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Scope  jsScope  =  s.scope.getVar(name);  if(rhs!=  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Scope  jsScope  =  s.scope.getVar(name);  if(rhs!=  null)  {  return  true;  }	  Scope    jsScope    =    jsScope.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	210	None	replace
787	[BUG]  [BUGGY]  rhsScope  =  jsScope.getVar(name);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  rhsScope  =  jsScope.getVar(name);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	rhsScope  =  jsScope.getVar(name);	  Scope    jsScope    =    jsScope.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	210	None	replace
788	[BUG]  [BUGGY]  for(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	131	None	replace
789	[BUG]  [BUGGY]  for(Var  s  :  def.reachingDef.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.reachingDef.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.reachingDef.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	131	None	replace
790	[BUG]  [BUGGY]  For(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	131	None	replace
791	[BUG]  [BUGGY]  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	215	None	replace
792	[BUG]  [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	215	None	replace
793	[BUG]  [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	215	None	replace
794	[BUG]  [BUGGY]  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	215	None	replace
795	[BUG]  [BUGGY]  if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	215	None	replace
796	[BUG]  [BUGGY]  if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	215	None	replace
797	[BUG]  [BUGGY]  Preconditions.checkArgument(des.depends.contains(s.scope),  def);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(des.depends.contains(s.scope),  def);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(des.depends.contains(s.scope),  def);	  Preconditions.checkArgument(des.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	replace
798	[BUG]  [BUGGY]  Preconditions.checkArgument(compiler.depends.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(compiler.depends.contains(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(compiler.depends.contains(s.scope));	  Preconditions.checkArgument(jsScope.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
799	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(cfgNode))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(cfgNode))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(cfgNode))  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(cfgNode))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
800	[BUG]  [BUGGY]  if(def!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(cfgNode))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(cfgNode))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(cfgNode))  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(cfgNode))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
801	[BUG]  [BUGGY]  if(def  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(cfgNode))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(cfgNode))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(cfgNode))  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(cfgNode))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
802	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(cfgNode))  {  return  true  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(cfgNode))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(cfgNode))  {  return  true	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(cfgNode))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	35	None	replace
803	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(cfgNode))  {  return  true  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(cfgNode))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(cfgNode))  {  return  true	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(cfgNode))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	35	None	replace
804	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue!=  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue!=  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue!=  s.getVar(name))  {  return  true;  }	  Node    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	replace
805	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  >=  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  >=  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  >=  s.getVar(name))  {  return  true;  }	  Node    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	replace
806	[BUG]  [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false	  if(jsScope!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	115	None	replace
807	[BUG]  [BUGGY]  if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false	  if(jsScope!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	115	None	replace
808	[BUG]  [BUGGY]  if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return	  if(jsScope!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
809	[BUG]  [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValu  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValu  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValu	  if(jsScope!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	115	None	replace
810	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(rValue))  {  return  true;  }	  Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	replace
811	[BUG]  [BUGGY]  FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(rValue))  {  return  true;  }	  Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	replace
812	[BUG]  [BUGGY]  FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }	  Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	replace
813	[BUG]  [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValu  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValu  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValu	  if(def.depends!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValu    	non-compiled	[CE]  ')'  expected	129	None	replace
814	[BUG]  [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValu  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValu  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValu	  if(def.depends!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValu    	non-compiled	[CE]  ')'  expected	129	None	replace
815	[BUG]  [BUGGY]  if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValu  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValu  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValu	  if(def.depends!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValu    	non-compiled	[CE]  ')'  expected	129	None	replace
816	[BUG]  [BUGGY]  if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValu  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValu  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValu	  if(def.depends!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValu    	non-compiled	[CE]  ')'  expected	129	None	replace
817	[BUG]  [BUGGY]  DefinitionDefinition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  DefinitionDefinition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	DefinitionDefinition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));	  if(def.depends!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValu    	non-compiled	[CE]  reached  end  of  file  while  parsing	129	None	replace
818	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfgNode,  this);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  cfgNode,  this);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  cfgNode,  this);	  NodeTraversal.traverse(compiler,    useNode,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	180	None	replace
819	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aNode,  this);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  aNode,  this);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  aNode,  this);	  NodeTraversal.traverse(compiler,    useNode,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	180	None	replace
820	[BUG]  [BUGGY]  for(Var  s  :  def.reachingDef.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.reachingDef.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.reachingDef.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	82	None	replace
821	[BUG]  [BUGGY]  for(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	82	None	replace
822	[BUG]  [BUGGY]  for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	82	None	replace
823	[BUG]  [BUGGY]  For(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }	  For(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	160	None	replace
824	[BUG]  [BUGGY]  For(Var  s  :  def.getVars())  {  Definition  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVars())  {  Definition  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVars())  {  Definition  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true	  For(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	160	None	replace
825	[BUG]  [BUGGY]  Pentru(Var  s  :  def.getVars())  {  Definition  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Pentru(Var  s  :  def.getVars())  {  Definition  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Pentru(Var  s  :  def.getVars())  {  Definition  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }	  For(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	160	None	replace
826	[BUG]  [BUGGY]  For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true	  For(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	160	None	replace
827	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  n,  new  FlowState  <  MustDef>());  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  def,  n,  new  FlowState  <  MustDef>());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  def,  n,  new  FlowState  <  MustDef>());	  NodeTraversal.traverse(compiler,    def,    new    FlowState    <    MustDef>());    	non-compiled	[CE]  reached  end  of  file  while  parsing	57	None	replace
828	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue!=  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue!=  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue!=  s.getVar(name))  {  return  false;  }	  Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	54	None	replace
829	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue!=  s.getVar(name  +  1))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue!=  s.getVar(name  +  1))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue!=  s.getVar(name  +  1))  {  return  false;  }	  Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	54	None	replace
830	[BUG]  [BUGGY]  for(Var  s  :  def.getVars())  {  Definition  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.getVars())  {  Definition  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVars())  {  Definition  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	169	None	replace
831	[BUG]  [BUGGY]  for(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	169	None	replace
832	[BUG]  [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(desc))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(desc))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(desc))  {  return  false;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	169	None	replace
833	[BUG]  [BUGGY]  for(Var  s  :  def.reachingDef.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.reachingDef.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.reachingDef.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	169	None	replace
834	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	201	None	replace
835	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends!=  null  &&!def.depends.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends!=  null  &&!def.depends.contains(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends!=  null  &&!def.depends.contains(s.scope));	  Preconditions.checkArgument(!def.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
836	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends  ==  null  &&!def.depends.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends  ==  null  &&!def.depends.contains(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends  ==  null  &&!def.depends.contains(s.scope));	  Preconditions.checkArgument(!def.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
837	[BUG]  [BUGGY]  Preconditions.checkArgument(!def.depends.contains(s.scope)||!def.depends.contains(s.name));  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(!def.depends.contains(s.scope)||!def.depends.contains(s.name));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(!def.depends.contains(s.scope)||!def.depends.contains(s.name));	  Preconditions.checkArgument(!def.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
838	[BUG]  [BUGGY]  Preconditions.checkArgument(!def.depends.contains(s.scope)||  def.depends.contains(s.depends));  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(!def.depends.contains(s.scope)||  def.depends.contains(s.depends));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(!def.depends.contains(s.scope)||  def.depends.contains(s.depends));	  Preconditions.checkArgument(!def.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
839	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  false);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  def,  false);	  NodeTraversal.traverse(compiler,    s,    def,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	103	None	replace
840	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  scope);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  scope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  def,  scope);	  NodeTraversal.traverse(compiler,    s,    def,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	103	None	replace
841	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	128	None	replace
842	[BUG]  [BUGGY]  if(s.scope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	128	None	replace
843	[BUG]  [BUGGY]  if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	128	None	replace
844	[BUG]  [BUGGY]  if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	128	None	replace
845	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name,  s.scope);  if(rValue  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name,  s.scope);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name,  s.scope);  if(rValue  ==  null)  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name,    rValue);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	200	None	replace
846	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name,  def);  if(rValue  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name,  def);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name,  def);  if(rValue  ==  null)  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name,    rValue);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	200	None	replace
847	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name,  s.scope);  if(rValue  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name,  s.scope);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name,  s.scope);  if(rValue  ==  null)  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name,    rValue);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	200	None	replace
848	[BUG]  [BUGGY]  for(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
849	[BUG]  [BUGGY]  For(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	3	None	replace
850	[BUG]  [BUGGY]  for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(desc))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(desc))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(desc))  {  return  false;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
851	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name,  useNode);  if(rValue  ==  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name,  useNode);  if(rValue  ==  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name,  useNode);  if(rValue  ==  null)  {  return  true;  }	  Node    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	111	None	replace
852	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootNode,  new  FlowState  <  MustDef>(reachingDef,  escaped));  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  rootNode,  new  FlowState  <  MustDef>(reachingDef,  escaped));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  rootNode,  new  FlowState  <  MustDef>(reachingDef,  escaped));	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>(reachingDef,    escaped));    	non-compiled	[CE]  reached  end  of  file  while  parsing	178	None	replace
853	[BUG]  [BUGGY]  escaped.add(s.getVar(name),  s.getName());  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s.getVar(name),  s.getName());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.getVar(name),  s.getName());	  escaped.add(s.getName());    	non-compiled	[CE]  reached  end  of  file  while  parsing	184	None	replace
854	[BUG]  [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false  }	  if(jsScope!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    false    	non-compiled	[CE]  ';'  expected	117	None	replace
855	[BUG]  [BUGGY]  if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false  }	  if(jsScope!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    false    	non-compiled	[CE]  ';'  expected	117	None	replace
856	[BUG]  [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	55	None	replace
857	[BUG]  [BUGGY]  for(Var  s  :  def.getVars)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.getVars)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVars)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	55	None	replace
858	[BUG]  [BUGGY]  if(def!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	33	None	replace
859	[BUG]  [BUGGY]  if(def  ==  null)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def  ==  null)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def  ==  null)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	33	None	replace
860	[BUG]  [BUGGY]  if(def  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	33	None	replace
861	[BUG]  [BUGGY]  if(def  ==  null)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def  ==  null)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def  ==  null)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
862	[BUG]  [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(s))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	221	None	replace
863	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends!=  null  &&  def.depends.containsKey(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends!=  null  &&  def.depends.containsKey(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends!=  null  &&  def.depends.containsKey(s.scope));	  Preconditions.checkArgument(def.depends!=    null    &&    def.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	146	None	replace
864	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends!=  null  &&  defaults.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends!=  null  &&  defaults.contains(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends!=  null  &&  defaults.contains(s.scope));	  Preconditions.checkArgument(def.depends!=    null    &&    def.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	146	None	replace
865	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	219	None	replace
866	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  }	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	219	None	replace
867	[BUG]  [BUGGY]  if(jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	219	None	replace
868	[BUG]  [BUGGY]  if(jsScope!=  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	219	None	replace
869	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(vValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	107	None	replace
870	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  vValue  =  s.getVar(name);  if(vValue  ==  null  ||  vValue.equals(vValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  Var  vValue  =  s.getVar(name);  if(vValue  ==  null  ||  vValue.equals(vValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  vValue  =  s.getVar(name);  if(vValue  ==  null  ||  vValue.equals(vValue))  {  return  false;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(vValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	107	None	replace
871	[BUG]  [BUGGY]  if(vValue!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(vValue!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(vValue!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(vValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	107	None	replace
872	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  vValue.equals(vValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  vValue.equals(vValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  vValue.equals(vValue))  {  return  false;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(vValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	107	None	replace
873	[BUG]  [BUGGY]  if(def  ==  null)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def  ==  null)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def  ==  null)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(vValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	107	None	replace
874	[BUG]  [BUGGY]  if(def!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(vValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	107	None	replace
875	[BUG]  [BUGGY]  For(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	51	None	replace
876	[BUG]  [BUGGY]  For(Var  s  :  s.scope.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  s.scope.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  s.scope.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	51	None	replace
877	[BUG]  [BUGGY]  For(Var  s  :  s.scope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  s.scope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  s.scope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	51	None	replace
878	[BUG]  [BUGGY]  for(Var  rValue  :  s.scope.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  rValue  :  s.scope.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  rValue  :  s.scope.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true	  for(Var    rValue    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	197	None	replace
879	[BUG]  [BUGGY]  for(Var  r  :  s.getVar(name,  useNode))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  s.getVar(name,  useNode))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  s.getVar(name,  useNode))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }	  for(Var    r    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
880	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue!=  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue!=  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue!=  s.getVar(name))  {  return  true;  }	  Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	replace
881	[BUG]  [BUGGY]  FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	replace
882	[BUG]  [BUGGY]  for(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	65	None	replace
883	[BUG]  [BUGGY]  For(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	65	None	replace
884	[BUG]  [BUGGY]  for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	65	None	replace
885	[BUG]  [BUGGY]  escaped.add(s.jsScope.getVar(name));  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s.jsScope.getVar(name));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.jsScope.getVar(name));	  escaped.add(s.jsScope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	84	None	replace
886	[BUG]  [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true	  for(Var    r    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	158	None	replace
887	[BUG]  [BUGGY]  For(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true	  for(Var    r    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	158	None	replace
888	[BUG]  [BUGGY]  FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  true;  }	  Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	110	None	replace
889	[BUG]  [BUGGY]  FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  true;  }	  Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	110	None	replace
890	[BUG]  [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true  }	  for(Var    r    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	138	None	replace
891	[BUG]  [BUGGY]  Preconditions.checkArgument(def  ==  jsScope,  s.scope);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def  ==  jsScope,  s.scope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def  ==  jsScope,  s.scope);	  Preconditions.checkArgument(s.scope    ==    jsScope,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	92	None	replace
892	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs  >=  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs  >=  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs  >=  null)  {  return  true;  }	  if(jsScope!=    null)    {    Var    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
893	[BUG]  [BUGGY]  ||  s.scope!=  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  ||  s.scope!=  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	||  s.scope!=  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true	  ||    s.scope!=    jsScope)    {    Var    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
894	[BUG]  [BUGGY]  ||  s.scope  ==  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  ||  s.scope  ==  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	||  s.scope  ==  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true	  ||    s.scope!=    jsScope)    {    Var    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
895	[BUG]  [BUGGY]  for(Var  s  :  def.reachingDef.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.reachingDef.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.reachingDef.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	177	None	replace
896	[BUG]  [BUGGY]  for(Var  s  :  def.getVars())  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.getVars())  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVars())  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	177	None	replace
897	[BUG]  [BUGGY]  for(Var  s  :  def.vars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.vars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.vars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	177	None	replace
898	[BUG]  [BUGGY]  for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(s))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    def.vars)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	132	None	replace
899	[BUG]  [BUGGY]  for(Var  var  :  def.vars)  {  Var  rValue  =  vars.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  var  :  def.vars)  {  Var  rValue  =  vars.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  var  :  def.vars)  {  Var  rValue  =  vars.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    def.vars)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	132	None	replace
900	[BUG]  [BUGGY]  for(Var  s  :  def.getVars())  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.getVars())  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVars())  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	133	None	replace
901	[BUG]  [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(desc))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(desc))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(desc))  {  return  false;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	133	None	replace
902	[BUG]  [BUGGY]  Node  rValue  =  s.getfirstChild();  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getfirstChild();  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getfirstChild();	  Node    rValue    =    s.getLastChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	188	None	replace
903	[BUG]  [BUGGY]  Node  rValue  =  s.getLastChild().getString();  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getLastChild().getString();  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getLastChild().getString();	  Node    rValue    =    s.getLastChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	188	None	replace
904	[BUG]  [BUGGY]  if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true	  if(def!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	125	None	replace
905	[BUG]  [BUGGY]  if(def!=  null)  {  if(s.scope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def!=  null)  {  if(s.scope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  if(s.scope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true	  if(def!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	125	None	replace
906	[BUG]  [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return	  if(def!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
907	[BUG]  [BUGGY]  if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false	  if(def!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	125	None	replace
908	[BUG]  [BUGGY]  if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return	  if(def!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
909	[BUG]  [BUGGY]  Scope  s  =  jsScope.getVar(name);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Scope  s  =  jsScope.getVar(name);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Scope  s  =  jsScope.getVar(name);	  if(s.scope!=    jsScope)    {    Var    rhs    =    s.getVar(name);    if(rhs    ==    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	211	None	replace
910	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rhs    =    s.getVar(name);    if(rhs    ==    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	211	None	replace
911	[BUG]  [BUGGY]  if(def!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	109	None	replace
912	[BUG]  [BUGGY]  if(def  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	109	None	replace
913	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(),  useNode);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(),  useNode);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(),  useNode);	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>(),    state);    	non-compiled	[CE]  reached  end  of  file  while  parsing	61	None	replace
914	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.scope,  def));  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.scope,  def));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s.scope,  def));	  Preconditions.checkArgument(def.depends.contains(s,    s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	226	None	replace
915	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s,  jsScope));  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends.contains(s,  jsScope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s,  jsScope));	  Preconditions.checkArgument(def.depends.contains(s,    s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	226	None	replace
916	[BUG]  [BUGGY]  Preconditions.checkArgument(reachingDef.contains(s,  s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(reachingDef.contains(s,  s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(reachingDef.contains(s,  s.scope));	  Preconditions.checkArgument(def.depends.contains(s,    s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	226	None	replace
917	[BUG]  [BUGGY]  for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	135	None	replace
918	[BUG]  [BUGGY]  for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	135	None	replace
919	[BUG]  [BUGGY]  for(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	135	None	replace
920	[BUG]  [BUGGY]  for(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	95	None	replace
921	[BUG]  [BUGGY]  For(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	95	None	replace
922	[BUG]  [BUGGY]  for(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	159	None	replace
923	[BUG]  [BUGGY]  for(Var  s  :  def.getVars())  {  Definition  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.getVars())  {  Definition  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVars())  {  Definition  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	159	None	replace
924	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }	  Node    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	64	None	replace
925	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }	  Node    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	67	None	replace
926	[BUG]  [BUGGY]  Node  rValue  =  jsScope.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  jsScope.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  jsScope.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }	  Node    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	67	None	replace
927	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(lhs))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	105	None	replace
928	[BUG]  [BUGGY]  if(lhs!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(lhs!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(lhs!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(lhs))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	105	None	replace
929	[BUG]  [BUGGY]  if(def!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(lhs))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	105	None	replace
930	[BUG]  [BUGGY]  if(def  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(lhs))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	105	None	replace
931	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(lhs))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	105	None	replace
932	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(lhs))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(lhs))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(lhs))  {  return  false;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(lhs))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	105	None	replace
933	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  useNode);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  useNode);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  n,  useNode);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	101	None	replace
934	[BUG]  [BUGGY]  Node  rValue  =  jsScope.getVar(name,  s.target);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  jsScope.getVar(name,  s.target);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  jsScope.getVar(name,  s.target);	  Node    rValue    =    jsScope.getVar(name);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
935	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(3));  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(3));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(3));	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>(1));    	non-compiled	[CE]  reached  end  of  file  while  parsing	207	None	replace
936	[BUG]  [BUGGY]  if(jsScope!=  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false;  }	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(vValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	193	None	replace
937	[BUG]  [BUGGY]  if(jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false;  }	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(vValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	193	None	replace
938	[BUG]  [BUGGY]  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	196	None	replace
939	[BUG]  [BUGGY]  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	196	None	replace
940	[BUG]  [BUGGY]  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValu  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValu  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValu	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	196	None	replace
941	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	196	None	replace
942	[BUG]  [BUGGY]  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	196	None	replace
943	[BUG]  [BUGGY]  For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	27	None	replace
944	[BUG]  [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	27	None	replace
945	[BUG]  [BUGGY]  For(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	27	None	replace
946	[BUG]  [BUGGY]  Scope  scope  =  jsScope.getScope();  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Scope  scope  =  jsScope.getScope();  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Scope  scope  =  jsScope.getScope();	  if(jsScope!=    jsScope)    {    Var    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	208	None	replace
947	[BUG]  [BUGGY]  For(Var  s  :  def.reachingDef.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.reachingDef.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.reachingDef.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  For(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	124	None	replace
948	[BUG]  [BUGGY]  For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false	  For(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	124	None	replace
949	[BUG]  [BUGGY]  Preconditions.checkState(s.scope  ==  jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkState(s.scope  ==  jsScope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkState(s.scope  ==  jsScope);	  Preconditions.checkArgument(jsScope    ==    s.scope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	93	None	replace
950	[BUG]  [BUGGY]  Preconditions.checkArgument(s.scope  >=  jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(s.scope  >=  jsScope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(s.scope  >=  jsScope);	  Preconditions.checkArgument(jsScope    ==    s.scope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	93	None	replace
951	[BUG]  [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true	  for(Var    r    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	216	None	replace
952	[BUG]  [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true	  for(Var    r    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	173	None	replace
953	[BUG]  [BUGGY]  for(Var  r  :  s.scope.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  s.scope.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  s.scope.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  for(Var    r    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	173	None	replace
954	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }	  rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	209	None	replace
955	[BUG]  [BUGGY]  rhs  =  jsScope.getVar(name);  if(rhs!=  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  rhs  =  jsScope.getVar(name);  if(rhs!=  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	rhs  =  jsScope.getVar(name);  if(rhs!=  null)  {  return  true;  }	  rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	209	None	replace
956	[BUG]  [BUGGY]  for(Var  var  :  def.vars)  {  Var  rValue  =  vars.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  var  :  def.vars)  {  Var  rValue  =  vars.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  var  :  def.vars)  {  Var  rValue  =  vars.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  for(Var    s    :    def.vars)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	123	None	replace
957	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.scope)||  def.depends.contains(s.parent));  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.scope)||  def.depends.contains(s.parent));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s.scope)||  def.depends.contains(s.parent));	  Preconditions.checkArgument(def.depends.contains(s.scope)||    def.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	replace
958	[BUG]  [BUGGY]  for(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	38	None	replace
959	[BUG]  [BUGGY]  For(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	38	None	replace
960	[BUG]  [BUGGY]  for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(desc))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(desc))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(desc))  {  return  false;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	38	None	replace
961	[BUG]  [BUGGY]  for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(s))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	157	None	replace
962	[BUG]  [BUGGY]  for(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(s))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	157	None	replace
963	[BUG]  [BUGGY]  for(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true	  for(Var    s    :    def.getVars)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	171	None	replace
964	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(lhs))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(lhs))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(lhs))  {  return  false;  }	  Node    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	replace
965	[BUG]  [BUGGY]  Pentru(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Pentru(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Pentru(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  For(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	174	None	replace
966	[BUG]  [BUGGY]  For(Var  s  :  def.reachingDef.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.reachingDef.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.reachingDef.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  For(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	174	None	replace
967	[BUG]  [BUGGY]  For(Var  s  :  def.getVars())  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVars())  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVars())  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  For(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	174	None	replace
968	[BUG]  [BUGGY]  For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true	  For(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	174	None	replace
969	[BUG]  [BUGGY]  if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	  if(def!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	150	None	replace
970	[BUG]  [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(	  if(def!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
971	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  n,  new  MustDef());  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  def,  n,  new  MustDef());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  def,  n,  new  MustDef());	  NodeTraversal.traverse(compiler,    def,    new    MustDef());    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
972	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  s.scope,  new  MustDef());  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  def,  s.scope,  new  MustDef());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  def,  s.scope,  new  MustDef());	  NodeTraversal.traverse(compiler,    def,    new    MustDef());    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
973	[BUG]  [BUGGY]  For(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	68	None	replace
974	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(lhs))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
975	[BUG]  [BUGGY]  if(def!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(lhs))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
976	[BUG]  [BUGGY]  if(def  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(lhs))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
977	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(lhs))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
978	[BUG]  [BUGGY]  for(Var  r  :  s.scope.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  s.scope.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  s.scope.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  for(Var    r    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	52	None	replace
979	[BUG]  [BUGGY]  for(Var  r  :  s.getVar(name,  useNode))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  s.getVar(name,  useNode))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  s.getVar(name,  useNode))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  for(Var    r    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	52	None	replace
980	[BUG]  [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false	  for(Var    r    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	52	None	replace
981	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  useNode,  def);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  useNode,  def);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  useNode,  def);	  NodeTraversal.traverse(compiler,    s,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	97	None	replace
982	[BUG]  [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(s))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	222	None	replace
983	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s)||  s.scope!=  useNode);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends.contains(s)||  s.scope!=  useNode);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s)||  s.scope!=  useNode);	  Preconditions.checkArgument(def.depends.contains(s)||    s.scope!=    jsScope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	145	None	replace
984	[BUG]  [BUGGY]  Preconditions.checkArgument(des.depends.contains(s)||  s.scope!=  jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(des.depends.contains(s)||  s.scope!=  jsScope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(des.depends.contains(s)||  s.scope!=  jsScope);	  Preconditions.checkArgument(def.depends.contains(s)||    s.scope!=    jsScope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	145	None	replace
985	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  new  MustDefJoin());  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  new  MustDefJoin());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  def,  new  MustDefJoin());	  NodeTraversal.traverse(compiler,    s,    def,    new    MustDef());    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
986	[BUG]  [BUGGY]  for(Var  s  :  def.vars)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.vars)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.vars)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }	  for(Var    s    :    s.getVar(name));    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	182	None	replace
987	[BUG]  [BUGGY]  for(Var  s  :  def.getVar(name));  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.getVar(name));  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVar(name));  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }	  for(Var    s    :    s.getVar(name));    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	182	None	replace
988	[BUG]  [BUGGY]  for(Var  s  :  def.jsScope.getVar(name));  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.jsScope.getVar(name));  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.jsScope.getVar(name));  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }	  for(Var    s    :    s.getVar(name));    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	182	None	replace
989	[BUG]  [BUGGY]  for(Var  s  :  def.node.getVar(name));  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.node.getVar(name));  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.node.getVar(name));  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }	  for(Var    s    :    s.getVar(name));    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	182	None	replace
990	[BUG]  [BUGGY]  for(Var  s  :  def.jsScope.getVar(name));  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.jsScope.getVar(name));  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.jsScope.getVar(name));  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false	  for(Var    s    :    s.getVar(name));    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	182	None	replace
991	[BUG]  [BUGGY]  Variable  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Variable  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Variable  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }	  Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	63	None	replace
992	[BUG]  [BUGGY]  for(Var  var  :  def.vars)  {  Var  rValue  =  vars.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  var  :  def.vars)  {  Var  rValue  =  vars.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  var  :  def.vars)  {  Var  rValue  =  vars.getVar(name);  if(rValue!=  null)  {  return  false;  }	  for(Var    s    :    def.vars)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	176	None	replace
993	[BUG]  [BUGGY]  Preconditions.checkArgument(n.depends.contains(def));  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(n.depends.contains(def));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(n.depends.contains(def));	  Preconditions.checkArgument(s.depends.contains(def));    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
994	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.scope)||  def.depends.contains(s.name),  useNode);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.scope)||  def.depends.contains(s.name),  useNode);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s.scope)||  def.depends.contains(s.name),  useNode);	  Preconditions.checkArgument(def.depends.contains(s.scope)||    def.depends.contains(s.name));    	non-compiled	[CE]  reached  end  of  file  while  parsing	224	None	replace
995	[BUG]  [BUGGY]  Preconditions.checkArgument(s.depends!=  def);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(s.depends!=  def);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(s.depends!=  def);	  Preconditions.checkArgument(def.depends!=    s.scope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	155	None	replace
996	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends!=  s.scope,  def);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends!=  s.scope,  def);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends!=  s.scope,  def);	  Preconditions.checkArgument(def.depends!=    s.scope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	155	None	replace
997	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends  ==  null  &&  def.depends.contains(s));  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends  ==  null  &&  def.depends.contains(s));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends  ==  null  &&  def.depends.contains(s));	  Preconditions.checkArgument(def.depends!=    null    &&    def.depends.contains(s));    	non-compiled	[CE]  reached  end  of  file  while  parsing	144	None	replace
998	[BUG]  [BUGGY]  for(Var  var  :  def.vars)  {  Var  rValue  =  vars.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  var  :  def.vars)  {  Var  rValue  =  vars.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  var  :  def.vars)  {  Var  rValue  =  vars.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  for(Var    s    :    def.vars)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	172	None	replace
999	[BUG]  [BUGGY]  For(Var  var  :  def.vars)  {  Var  rValue  =  vars.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  var  :  def.vars)  {  Var  rValue  =  vars.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  var  :  def.vars)  {  Var  rValue  =  vars.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  for(Var    s    :    def.vars)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	172	None	replace
1000	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  MustDef(s.scope),  new  MustDef());  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  new  MustDef(s.scope),  new  MustDef());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  new  MustDef(s.scope),  new  MustDef());	  NodeTraversal.traverse(compiler,    useNode,    new    MustDef());    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
1001	[BUG]  [BUGGY]  if(target!=  s.scope)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(target!=  s.scope)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(target!=  s.scope)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  true;  }	  if(s.scope!=    target)    {    Var    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	140	None	replace
1002	[BUG]  [BUGGY]  if(target!=  s.scope)  {  Var  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(target!=  s.scope)  {  Var  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(target!=  s.scope)  {  Var  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  true;  }	  if(s.scope!=    target)    {    Var    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	140	None	replace
1003	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(),  def,  escaped);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(),  def,  escaped);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(),  def,  escaped);	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>(),    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	60	None	replace
1004	[BUG]  [BUGGY]  FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }	  Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	75	None	replace
1005	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  >=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  >=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue  >=  null)  {  return  false;  }	  Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	75	None	replace
1006	[BUG]  [BUGGY]  for(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	165	None	replace
1007	[BUG]  [BUGGY]  For(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	165	None	replace
1008	[BUG]  [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValu  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValu  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValu	  if(def.depends!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValu    	non-compiled	[CE]  ')'  expected	164	None	replace
1009	[BUG]  [BUGGY]  if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValu  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValu  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValu	  if(def.depends!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValu    	non-compiled	[CE]  ')'  expected	164	None	replace
1010	[BUG]  [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||	  if(def.depends!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValu    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
1011	[BUG]  [BUGGY]  if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValu  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValu  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValu	  if(def.depends!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValu    	non-compiled	[CE]  ')'  expected	164	None	replace
1012	[BUG]  [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!	  if(def.depends!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValu    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
1013	[BUG]  [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false  }	  if(jsScope!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false    	non-compiled	[CE]  ';'  expected	108	None	replace
1014	[BUG]  [BUGGY]  if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false  }	  if(jsScope!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false    	non-compiled	[CE]  ';'  expected	108	None	replace
1015	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(def));  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(def));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(def));	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>(resultMap));    	non-compiled	[CE]  reached  end  of  file  while  parsing	187	None	replace
1016	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(def,  resultMap));  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(def,  resultMap));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(def,  resultMap));	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>(resultMap));    	non-compiled	[CE]  reached  end  of  file  while  parsing	187	None	replace
1017	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(reachingDef));  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(reachingDef));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(reachingDef));	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>(resultMap));    	non-compiled	[CE]  reached  end  of  file  while  parsing	187	None	replace
1018	[BUG]  [BUGGY]  for(Var  var  :  def.vars)  {  Var  rValue  =  vars.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  var  :  def.vars)  {  Var  rValue  =  vars.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  var  :  def.vars)  {  Var  rValue  =  vars.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    def.vars)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	168	None	replace
1019	[BUG]  [BUGGY]  For(Var  s  :  def.vars)  {  Definition  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.vars)  {  Definition  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.vars)  {  Definition  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    def.vars)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	168	None	replace
1020	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(rValue))  {  return  false;  }	  Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
1021	[BUG]  [BUGGY]  FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(rValue))  {  return  false;  }	  Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
1022	[BUG]  [BUGGY]  rValue  =  s.getVar(name,  useNode);  if(rValue  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  rValue  =  s.getVar(name,  useNode);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	rValue  =  s.getVar(name,  useNode);  if(rValue  ==  null)  {  return  false;  }	  rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	77	None	replace
1023	[BUG]  [BUGGY]  FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	50	None	replace
1024	[BUG]  [BUGGY]  for(Var  s  :  def.reachingDef.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.reachingDef.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.reachingDef.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	121	None	replace
1025	[BUG]  [BUGGY]  for(Var  s  :  def.getVars)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.getVars)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVars)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	replace
1026	[BUG]  [BUGGY]  For(Var  s  :  s.scope.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  s.scope.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  s.scope.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	81	None	replace
1027	[BUG]  [BUGGY]  For(Var  s  :  s.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  s.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  s.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	81	None	replace
1028	[BUG]  [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	214	None	replace
1029	[BUG]  [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name,  def);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name,  def);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name,  def);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	214	None	replace
1030	[BUG]  [BUGGY]  Node  rValue  =  s.scope.getVar(name);  if(rValue  ==  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.scope.getVar(name);  if(rValue  ==  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.scope.getVar(name);  if(rValue  ==  null)  {  return  true;  }	  Node    rValue    =    jsScope.getVar(name);    if(rValue    ==    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	153	None	replace
1031	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  MustDef(),  useNode);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  MustDef(),  useNode);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  new  MustDef(),  useNode);	  NodeTraversal.traverse(compiler,    s,    new    MustDef(),    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
1032	[BUG]  [BUGGY]  FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(jsScope))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(jsScope))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(jsScope))  {  return  false;  }	  Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(jsScope))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	106	None	replace
1033	[BUG]  [BUGGY]  Preconditions.checkArgument(resultMap.contains(s.scope)||  def.depends!=  null);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(resultMap.contains(s.scope)||  def.depends!=  null);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(resultMap.contains(s.scope)||  def.depends!=  null);	  Preconditions.checkArgument(resultMap.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
1034	[BUG]  [BUGGY]  Preconditions.checkArgument(resultMap.contains(s.scope)||  def.depends  ==  null);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(resultMap.contains(s.scope)||  def.depends  ==  null);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(resultMap.contains(s.scope)||  def.depends  ==  null);	  Preconditions.checkArgument(resultMap.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
1035	[BUG]  [BUGGY]  escaped.put(name,  s.definitionNode);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.put(name,  s.definitionNode);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.put(name,  s.definitionNode);	  escaped.put(name,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	141	None	replace
1036	[BUG]  [BUGGY]  escaped.put(name,  s.reachingDef);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.put(name,  s.reachingDef);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.put(name,  s.reachingDef);	  escaped.put(name,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	141	None	replace
1037	[BUG]  [BUGGY]  if(def!=  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def!=  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	204	None	replace
1038	[BUG]  [BUGGY]  escaped.add(desc,  def);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(desc,  def);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(desc,  def);	  escaped.add(s,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	85	None	replace
1039	[BUG]  [BUGGY]  for(Var  s  :  def.reachingDef.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.reachingDef.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.reachingDef.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	166	None	replace
1040	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aNode,  jsScope,  this);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  aNode,  jsScope,  this);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  aNode,  jsScope,  this);	  NodeTraversal.traverse(compiler,    jsScope,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	100	None	replace
1041	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfgNode,  jsScope,  this);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  cfgNode,  jsScope,  this);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  cfgNode,  jsScope,  this);	  NodeTraversal.traverse(compiler,    jsScope,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	100	None	replace
1042	[BUG]  [BUGGY]  Scope  s  =  jsScope.getScope(s);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Scope  s  =  jsScope.getScope(s);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Scope  s  =  jsScope.getScope(s);	  Scope    s    =    jsScope.getScope();    	non-compiled	[CE]  reached  end  of  file  while  parsing	154	None	replace
1043	[BUG]  [BUGGY]  Scope  s  =  jsScope.getVar(s.scope);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Scope  s  =  jsScope.getVar(s.scope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Scope  s  =  jsScope.getVar(s.scope);	  Scope    s    =    jsScope.getScope();    	non-compiled	[CE]  reached  end  of  file  while  parsing	154	None	replace
1044	[BUG]  [BUGGY]  For(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	198	None	replace
1045	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.lhs)||  def.depends.contains(s.rValue));  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.lhs)||  def.depends.contains(s.rValue));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s.lhs)||  def.depends.contains(s.rValue));	  Preconditions.checkArgument(def.depends.contains(s.scope)||    def.depends.contains(s.rValue));    	non-compiled	[CE]  reached  end  of  file  while  parsing	148	None	replace
1046	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.node)||  def.depends.contains(s.rValue));  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.node)||  def.depends.contains(s.rValue));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s.node)||  def.depends.contains(s.rValue));	  Preconditions.checkArgument(def.depends.contains(s.scope)||    def.depends.contains(s.rValue));    	non-compiled	[CE]  reached  end  of  file  while  parsing	148	None	replace
1047	[BUG]  [BUGGY]  if(def!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	49	None	replace
1048	[BUG]  [BUGGY]  if(def  ==  null)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def  ==  null)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def  ==  null)  {  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	49	None	replace
1049	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.scope)&&  s.depends.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.scope)&&  s.depends.contains(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s.scope)&&  s.depends.contains(s.scope));	  Preconditions.checkArgument(def.depends.contains(s.scope)||    s.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
1050	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.scope)||  state.depends.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.scope)||  state.depends.contains(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s.scope)||  state.depends.contains(s.scope));	  Preconditions.checkArgument(def.depends.contains(s.scope)||    s.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
1051	[BUG]  [BUGGY]  if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(	  if(def.depends!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
1052	[BUG]  [BUGGY]  if(!def.depends.contains(name))  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValu  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(!def.depends.contains(name))  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValu  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(!def.depends.contains(name))  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValu	  if(def.depends!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(    	non-compiled	[CE]  ')'  expected	152	None	replace
1053	[BUG]  [BUGGY]  if(jsScope!=  null)  {  if(s.depends!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  if(s.depends!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  if(s.depends!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(	  if(def.depends!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
1054	[BUG]  [BUGGY]  escaped.add(s.scope,  useNode);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s.scope,  useNode);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.scope,  useNode);	  escaped.add(s.definition);    	non-compiled	[CE]  reached  end  of  file  while  parsing	86	None	replace
1055	[BUG]  [BUGGY]  escaped.add(def.definition);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(def.definition);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(def.definition);	  escaped.add(s.definition);    	non-compiled	[CE]  reached  end  of  file  while  parsing	86	None	replace
1056	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  this,  def,  escaped);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  this,  def,  escaped);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  this,  def,  escaped);	  NodeTraversal.traverse(compiler,    s,    this,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	98	None	replace
1057	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  true  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs  ==  null)  {  return  true	  if(jsScope!=    null)    {    Var    rhs    =    s.getVar(name);    if(rhs    ==    null)    {    return    true;    }    	non-compiled	[CE]  ';'  expected	11	None	replace
1058	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  this,  escaped);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  def,  this,  escaped);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  def,  this,  escaped);	  NodeTraversal.traverse(compiler,    def,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	102	None	replace
1059	[BUG]  [BUGGY]  escaped.add(s.scope.getVar(name),  s.toString());  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s.scope.getVar(name),  s.toString());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.scope.getVar(name),  s.toString());	  escaped.add(s.toString());    	non-compiled	[CE]  reached  end  of  file  while  parsing	186	None	replace
1060	[BUG]  [BUGGY]  escaped.add(s.scope.getVar(name,  s.toString()));  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s.scope.getVar(name,  s.toString()));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.scope.getVar(name,  s.toString()));	  escaped.add(s.toString());    	non-compiled	[CE]  reached  end  of  file  while  parsing	186	None	replace
1061	[BUG]  [BUGGY]  escaped.add(s.scope.getVar(name).toString());  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s.scope.getVar(name).toString());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.scope.getVar(name).toString());	  escaped.add(s.toString());    	non-compiled	[CE]  reached  end  of  file  while  parsing	186	None	replace
1062	[BUG]  [BUGGY]  escaped.add(def.toString());  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(def.toString());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(def.toString());	  escaped.add(s.toString());    	non-compiled	[CE]  reached  end  of  file  while  parsing	186	None	replace
1063	[BUG]  [BUGGY]  for(Var  r  :  s.scope.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  s.scope.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  s.scope.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }	  for(Var    r    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	181	None	replace
1064	[BUG]  [BUGGY]  if(jsScope!=  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	202	None	replace
1065	[BUG]  [BUGGY]  escaped.put(s.scope,  jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.put(s.scope,  jsScope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.put(s.scope,  jsScope);	  escaped.add(jsScope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	143	None	replace
1066	[BUG]  [BUGGY]  for(Var  s  :  def.reachingDef.getVars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.reachingDef.getVars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.reachingDef.getVars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  for(Var    s    :    def.getVars)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	122	None	replace
1067	[BUG]  [BUGGY]  for(Var  rValue  :  s.scope.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  rValue  :  s.scope.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  rValue  :  s.scope.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true	  for(Var    rValue    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	223	None	replace
1068	[BUG]  [BUGGY]  FlowState  <  Var>  rhs  =  state.getIn().reachingDef.get(s.scope);  if(rhs!=  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  FlowState  <  Var>  rhs  =  state.getIn().reachingDef.get(s.scope);  if(rhs!=  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	FlowState  <  Var>  rhs  =  state.getIn().reachingDef.get(s.scope);  if(rhs!=  null)  {  return  true;  }	  FlowState    <    Var>    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	139	None	replace
1069	[BUG]  [BUGGY]  if(def!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
1070	[BUG]  [BUGGY]  if(def  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
1071	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  >=  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  >=  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  >=  s.getVar(name))  {  return  false;  }	  Node    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	replace
1072	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  this,  useNode);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  def,  this,  useNode);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  def,  this,  useNode);	  NodeTraversal.traverse(compiler,    s,    this,    useNode);    	non-compiled	[CE]  reached  end  of  file  while  parsing	99	None	replace
1073	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  this,  state);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  this,  state);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  def,  this,  state);	  NodeTraversal.traverse(compiler,    s,    this,    state);    	non-compiled	[CE]  reached  end  of  file  while  parsing	212	None	replace
1074	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  this,  state);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  def,  this,  state);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  def,  this,  state);	  NodeTraversal.traverse(compiler,    s,    this,    state);    	non-compiled	[CE]  reached  end  of  file  while  parsing	212	None	replace
1075	[BUG]  [BUGGY]  Preconditions.checkArgument(def!=  jsScope,  s.scope);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def!=  jsScope,  s.scope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def!=  jsScope,  s.scope);	  Preconditions.checkArgument(s.scope!=    jsScope,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	90	None	replace
1076	[BUG]  [BUGGY]  Preconditions.checkArgument(def!=  s.scope,  def);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def!=  s.scope,  def);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def!=  s.scope,  def);	  Preconditions.checkArgument(s.scope!=    jsScope,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	90	None	replace
1077	[BUG]  [BUGGY]  Variable  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Variable  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Variable  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }	  Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
1078	[BUG]  [BUGGY]  for(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	136	None	replace
1079	[BUG]  [BUGGY]  for(Var  s  :  def.getVars())  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.getVars())  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVars())  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	136	None	replace
1080	[BUG]  [BUGGY]  Preconditions.checkArgument(s.depends!=  null  &&  s.depends.contains(def.depends));  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(s.depends!=  null  &&  s.depends.contains(def.depends));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(s.depends!=  null  &&  s.depends.contains(def.depends));	  Preconditions.checkArgument(s.depends.contains(def.depends));    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
1081	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(vValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	32	None	replace
1082	[BUG]  [BUGGY]  if(vValue!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(vValue!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(vValue!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(vValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	32	None	replace
1083	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  vValue  =  s.getVar(name);  if(vValue  ==  null  ||  vValue.equals(vValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  Var  vValue  =  s.getVar(name);  if(vValue  ==  null  ||  vValue.equals(vValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  vValue  =  s.getVar(name);  if(vValue  ==  null  ||  vValue.equals(vValue))  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(vValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	32	None	replace
1084	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  vValue.equals(vValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  vValue.equals(vValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  vValue.equals(vValue))  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(vValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	32	None	replace
1085	[BUG]  [BUGGY]  if(def!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(vValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	32	None	replace
1086	[BUG]  [BUGGY]  Preconditions.checkArgument(def  ==  s.scope);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def  ==  s.scope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def  ==  s.scope);	  Preconditions.checkArgument(s.scope!=    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	94	None	replace
1087	[BUG]  [BUGGY]  Preconditions.checkArgument(des.scope!=  s.scope);  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(des.scope!=  s.scope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(des.scope!=  s.scope);	  Preconditions.checkArgument(s.scope!=    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	94	None	replace
1088	[BUG]  [BUGGY]  Preconditions.checkArgument(desc!=  s.scope);  [CE]  reached  end  of  file  while  parsing  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(desc!=  s.scope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(desc!=  s.scope);	  Preconditions.checkArgument(s.scope!=    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	94	None	replace
1089	[BUG]  [BUGGY]  if(jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	199	None	replace
1090	[BUG]  [BUGGY]  if(jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	199	None	replace
1091	[BUG]  [BUGGY]  Preconditions.checkArgument(def.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.contains(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.contains(s.scope));	  Preconditions.checkArgument(reachingDef.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	149	None	replace
1092	[BUG]  [BUGGY]  Preconditions.checkArgument(reachingDef.contains(s.scope,  def));  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(reachingDef.contains(s.scope,  def));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(reachingDef.contains(s.scope,  def));	  Preconditions.checkArgument(reachingDef.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	149	None	replace
1093	[BUG]  [BUGGY]  Node  rValue  =  s.getGrandparent();  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getGrandparent();  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getGrandparent();	  Node    rValue    =    s.getParent();    	non-compiled	[CE]  reached  end  of  file  while  parsing	179	None	replace
1094	[BUG]  [BUGGY]  Node  rValue  =  s.getPrefix();  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getPrefix();  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getPrefix();	  Node    rValue    =    s.getParent();    	non-compiled	[CE]  reached  end  of  file  while  parsing	179	None	replace
1095	[BUG]  [BUGGY]  escaped.add(s.scope,  s.name);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s.scope,  s.name);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.scope,  s.name);	  escaped.add(s.name);    	non-compiled	[CE]  reached  end  of  file  while  parsing	87	None	replace
1096	[BUG]  [BUGGY]  escaped.add(def.name);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(def.name);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(def.name);	  escaped.add(s.name);    	non-compiled	[CE]  reached  end  of  file  while  parsing	87	None	replace
1097	[BUG]  [BUGGY]  For(Var  s  :  def.getVars())  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVars())  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVars())  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }	  For(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	137	None	replace
1098	[BUG]  [BUGGY]  For(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }	  For(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	137	None	replace
1099	[BUG]  [BUGGY]  For(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.depends)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }	  For(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	137	None	replace
1100	[BUG]  [BUGGY]  For(Var  s  :  def.getVars())  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVars())  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVars())  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true	  For(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	137	None	replace
1101	[BUG]  [BUGGY]  Pentru(Var  s  :  def.getVars())  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Pentru(Var  s  :  def.getVars())  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Pentru(Var  s  :  def.getVars())  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }	  For(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	137	None	replace
1102	[BUG]  [BUGGY]  For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true	  For(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	137	None	replace
1103	[BUG]  [BUGGY]  for(Var  s  :  def.getVars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.getVars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
1104	[BUG]  [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	6	None	replace
1105	[BUG]  [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name,  def);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name,  def);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name,  def);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	6	None	replace
1106	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs  >=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs  >=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Var  rhs  =  s.getVar(name);  if(rhs  >=  null)  {  return  false;  }	  if(jsScope!=    null)    {    Var    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
1107	[BUG]  [BUGGY]  Preconditions.checkArgument(reachingDef.contains(s));  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(reachingDef.contains(s));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(reachingDef.contains(s));	  Preconditions.checkArgument(resultMap.contains(s));    	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	replace
1108	[BUG]  [BUGGY]  if(def!=  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def!=  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	191	None	replace
1109	[BUG]  [BUGGY]  if(def!=  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def!=  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	191	None	replace
1110	[BUG]  [BUGGY]  if(def!=  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def!=  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	191	None	replace
1111	[BUG]  [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	29	None	replace
1112	[BUG]  [BUGGY]  for(Var  s  :  def.getVars)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.getVars)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVars)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	29	None	replace
1113	[BUG]  [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	29	None	replace
1114	[BUG]  [BUGGY]  FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue!=  null  ||!rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue!=  null  ||!rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue!=  null  ||!rValue.equals(rValue))  {  return  false;  }	  Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	replace
1115	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.contains(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.contains(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.contains(rValue))  {  return  false;  }	  Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	replace
1116	[BUG]  [BUGGY]  Variable  rValue  =  s.getVar(name);  if(rValue!=  null  ||!rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Variable  rValue  =  s.getVar(name);  if(rValue!=  null  ||!rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Variable  rValue  =  s.getVar(name);  if(rValue!=  null  ||!rValue.equals(rValue))  {  return  false;  }	  Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	replace
1117	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends!=  null  &&!def.depends.contains(s));  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends!=  null  &&!def.depends.contains(s));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends!=  null  &&!def.depends.contains(s));	  Preconditions.checkArgument(!def.depends.contains(s));    	non-compiled	[CE]  reached  end  of  file  while  parsing	23	None	replace
1118	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends  ==  null  &&!def.depends.contains(s));  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends  ==  null  &&!def.depends.contains(s));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends  ==  null  &&!def.depends.contains(s));	  Preconditions.checkArgument(!def.depends.contains(s));    	non-compiled	[CE]  reached  end  of  file  while  parsing	23	None	replace
1119	[BUG]  [BUGGY]  Preconditions.checkArgument(!def.depends.contains(s)||!def.depends.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(!def.depends.contains(s)||!def.depends.contains(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(!def.depends.contains(s)||!def.depends.contains(s.scope));	  Preconditions.checkArgument(!def.depends.contains(s));    	non-compiled	[CE]  reached  end  of  file  while  parsing	23	None	replace
1120	[BUG]  [BUGGY]  Node  rhs  =  s.scope.getVar(name);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rhs  =  s.scope.getVar(name);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rhs  =  s.scope.getVar(name);	  Node    rhs    =    jsScope.getVar(name);    	non-compiled	[CE]  reached  end  of  file  while  parsing	190	None	replace
1121	[BUG]  [BUGGY]  if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }	  if(def!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	126	None	replace
1122	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.scope)&&  s.depends.contains(s.depends));  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.scope)&&  s.depends.contains(s.depends));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s.scope)&&  s.depends.contains(s.depends));	  Preconditions.checkArgument(def.depends.contains(s.scope)||    s.depends.contains(s.depends));    	non-compiled	[CE]  reached  end  of  file  while  parsing	147	None	replace
1123	[BUG]  [BUGGY]  Preconditions.checkArgument(des.depends.contains(s.scope)||  def.depends.contains(s.depends));  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(des.depends.contains(s.scope)||  def.depends.contains(s.depends));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(des.depends.contains(s.scope)||  def.depends.contains(s.depends));	  Preconditions.checkArgument(def.depends.contains(s.scope)||    s.depends.contains(s.depends));    	non-compiled	[CE]  reached  end  of  file  while  parsing	147	None	replace
1124	[BUG]  [BUGGY]  FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	FlowState  <  Var>  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	218	None	replace
1125	[BUG]  [BUGGY]  for(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	130	None	replace
1126	[BUG]  [BUGGY]  For(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVar(name))  {  Definition  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	130	None	replace
1127	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.name)||  s.scope!=  jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.name)||  s.scope!=  jsScope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s.name)||  s.scope!=  jsScope);	  Preconditions.checkArgument(def.depends.contains(s.name));    	non-compiled	[CE]  reached  end  of  file  while  parsing	225	None	replace
1128	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.name)||  state.getIn().reachingDef.contains(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.name)||  state.getIn().reachingDef.contains(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s.name)||  state.getIn().reachingDef.contains(s.scope));	  Preconditions.checkArgument(def.depends.contains(s.name));    	non-compiled	[CE]  reached  end  of  file  while  parsing	225	None	replace
1129	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.name),  s.scope);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.name),  s.scope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s.name),  s.scope);	  Preconditions.checkArgument(def.depends.contains(s.name));    	non-compiled	[CE]  reached  end  of  file  while  parsing	225	None	replace
1130	[BUG]  [BUGGY]  if(def!=  null)  {  if(s.scope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def!=  null)  {  if(s.scope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  if(s.scope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false	  if(def!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false    	non-compiled	[CE]  ';'  expected	151	None	replace
1131	[BUG]  [BUGGY]  if(def!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	30	None	replace
1132	[BUG]  [BUGGY]  if(def  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	30	None	replace
1133	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }	  Node    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
1134	[BUG]  [BUGGY]  Node  rValue  =  jsScope.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  jsScope.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  jsScope.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }	  Node    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
1135	[BUG]  [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false;  }	  for(Var    r    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	167	None	replace
1136	[BUG]  [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false	  for(Var    r    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	167	None	replace
1137	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends  ==  jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends  ==  jsScope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends  ==  jsScope);	  Preconditions.checkArgument(def.depends!=    jsScope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	217	None	replace
1138	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends!=  s.scope,  jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends!=  s.scope,  jsScope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends!=  s.scope,  jsScope);	  Preconditions.checkArgument(def.depends!=    jsScope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	217	None	replace
1139	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends  ==  s.scope,  jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends  ==  s.scope,  jsScope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends  ==  s.scope,  jsScope);	  Preconditions.checkArgument(def.depends!=    jsScope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	217	None	replace
1140	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends  >=  s.scope);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends  >=  s.scope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends  >=  s.scope);	  Preconditions.checkArgument(def.depends!=    jsScope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	217	None	replace
1141	[BUG]  [BUGGY]  for(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  for(Var    r    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	173	None	replace
1142	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  d,  new  MustDef());  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  d,  new  MustDef());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  d,  new  MustDef());	  NodeTraversal.traverse(compiler,    useNode,    new    MustDef());    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
1143	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(exp,  escaped));  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(exp,  escaped));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(exp,  escaped));	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>(reachingDef,    escaped));    	non-compiled	[CE]  reached  end  of  file  while  parsing	178	None	replace
1144	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(escape,  escaped));  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(escape,  escaped));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(escape,  escaped));	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>(reachingDef,    escaped));    	non-compiled	[CE]  reached  end  of  file  while  parsing	178	None	replace
1145	[BUG]  [BUGGY]  if(jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true;  }	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(lhs))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	203	None	replace
1146	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true;  }	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(lhs))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	203	None	replace
1147	[BUG]  [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name,  rValue);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name,  rValue);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name,  rValue);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true;  }	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(lhs))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	203	None	replace
1148	[BUG]  [BUGGY]  escaped.add(s.name,  s.scope,  def);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s.name,  s.scope,  def);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.name,  s.scope,  def);	  escaped.add(s.scope,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	142	None	replace
1149	[BUG]  [BUGGY]  Variable  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Variable  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Variable  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }	  Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	78	None	replace
1150	[BUG]  [BUGGY]  rhs  =  s.getScope().getVar(name);  if(rhs!=  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  rhs  =  s.getScope().getVar(name);  if(rhs!=  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	rhs  =  s.getScope().getVar(name);  if(rhs!=  null)  {  return  true;  }	  rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	209	None	replace
1151	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true	  for(Var    r    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	138	None	replace
1152	[BUG]  [BUGGY]  if(def!=  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def!=  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }	  if(def!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	119	None	replace
1153	[BUG]  [BUGGY]  if(def!=  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def!=  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true	  if(def!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	119	None	replace
1154	[BUG]  [BUGGY]  Scope  s  =  jsScope.getScopeRoot(s);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Scope  s  =  jsScope.getScopeRoot(s);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Scope  s  =  jsScope.getScopeRoot(s);	  Scope    s    =    jsScope.getScope();    	non-compiled	[CE]  reached  end  of  file  while  parsing	154	None	replace
1155	[BUG]  [BUGGY]  if(jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	218	None	replace
1156	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false  }	  if(jsScope!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    false    	non-compiled	[CE]  ';'  expected	117	None	replace
1157	[BUG]  [BUGGY]  if(jsScope  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValu  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValu  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValu	  if(jsScope!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    false    	non-compiled	[CE]  ')'  expected	117	None	replace
1158	[BUG]  [BUGGY]  Node  rValue  =  s.removeFirstChild();  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.removeFirstChild();  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.removeFirstChild();	  Node    rValue    =    s.getLastChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	188	None	replace
1159	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!depends.hasChildren())  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!depends.hasChildren())  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!depends.hasChildren())  {  return  false;  }	  Node    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	76	None	replace
1160	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!depends.hasNext())  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!depends.hasNext())  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!depends.hasNext())  {  return  false;  }	  Node    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	76	None	replace
1161	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!depends.contains(s.scope))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!depends.contains(s.scope))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!depends.contains(s.scope))  {  return  false;  }	  Node    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	76	None	replace
1162	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.isEmpty())  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.isEmpty())  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.isEmpty())  {  return  false;  }	  Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	54	None	replace
1163	[BUG]  [BUGGY]  Preconditions.checkArgument(def  ==  jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def  ==  jsScope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def  ==  jsScope);	  Preconditions.checkArgument(s.scope    ==    jsScope,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	92	None	replace
1164	[BUG]  [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	196	None	replace
1165	[BUG]  [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	196	None	replace
1166	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  s);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  s);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  n,  this,  s);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	101	None	replace
1167	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  s.scope);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  s.scope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  n,  this,  s.scope);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	101	None	replace
1168	[BUG]  [BUGGY]  For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  >=  s.getVar(name))  {  return  false;  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  >=  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  >=  s.getVar(name))  {  return  false;  }	  For(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	124	None	replace
1169	[BUG]  [BUGGY]  For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue  ==  s.getVar(name))  {  return  false;  }	  For(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	124	None	replace
1170	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  d,  this);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  d,  this);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  d,  this);	  NodeTraversal.traverse(compiler,    useNode,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	180	None	replace
1171	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  e,  this);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  e,  this);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  e,  this);	  NodeTraversal.traverse(compiler,    useNode,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	180	None	replace
1172	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!depends.hasChildren())  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!depends.hasChildren())  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!depends.hasChildren())  {  return  true;  }	  Node    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	111	None	replace
1173	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  target,  useNode);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  target,  useNode);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  target,  useNode);	  NodeTraversal.traverse(compiler,    s,    this,    useNode);    	non-compiled	[CE]  reached  end  of  file  while  parsing	99	None	replace
1174	[BUG]  [BUGGY]  for(Var  rValue  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  rValue  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  rValue  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	159	None	replace
1175	[BUG]  [BUGGY]  for(Var  r  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	159	None	replace
1176	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(0));  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(0));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(0));	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>(1));    	non-compiled	[CE]  reached  end  of  file  while  parsing	207	None	replace
1177	[BUG]  [BUGGY]  if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	109	None	replace
1178	[BUG]  [BUGGY]  Preconditions.checkArgument(s.isScope()  ||  s.scope  ==  jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(s.isScope()  ||  s.scope  ==  jsScope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(s.isScope()  ||  s.scope  ==  jsScope);	  Preconditions.checkArgument(s.scope    ==    jsScope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	91	None	replace
1179	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  def,  this);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  def,  this);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  jsScope,  def,  this);	  NodeTraversal.traverse(compiler,    def,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	102	None	replace
1180	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  def,  jsScope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  def,  jsScope);	  NodeTraversal.traverse(compiler,    def,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	102	None	replace
1181	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Node  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	  Node    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	replace
1182	[BUG]  [BUGGY]  For(Var  rValue  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  rValue  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  rValue  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true	  For(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	160	None	replace
1183	[BUG]  [BUGGY]  For(Var  rValue  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  rValue  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  rValue  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	  For(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	160	None	replace
1184	[BUG]  [BUGGY]  for(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  for(Var    r    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	52	None	replace
1185	[BUG]  [BUGGY]  For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	6	None	replace
1186	[BUG]  [BUGGY]  For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	6	None	replace
1187	[BUG]  [BUGGY]  For(Var  s  :  s.getVar(name).reachingDef)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  s.getVar(name).reachingDef)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  s.getVar(name).reachingDef)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	6	None	replace
1188	[BUG]  [BUGGY]  for(Var  rValue  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  rValue  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  rValue  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	95	None	replace
1189	[BUG]  [BUGGY]  for(Var  rValue  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  rValue  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  rValue  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	95	None	replace
1190	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.node,  s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.node,  s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s.node,  s.scope));	  Preconditions.checkArgument(def.depends.contains(s,    s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	226	None	replace
1191	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.rValue,  s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.rValue,  s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s.rValue,  s.scope));	  Preconditions.checkArgument(def.depends.contains(s,    s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	226	None	replace
1192	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.var,  s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.var,  s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s.var,  s.scope));	  Preconditions.checkArgument(def.depends.contains(s,    s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	226	None	replace
1193	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.scope,  s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.scope,  s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s.scope,  s.scope));	  Preconditions.checkArgument(def.depends.contains(s,    s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	226	None	replace
1194	[BUG]  [BUGGY]  if(s.scope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	33	None	replace
1195	[BUG]  [BUGGY]  for(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(r))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(r))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(r))  {  return  true;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(s))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	161	None	replace
1196	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  state,  new  FlowState  <  MustDef>(),  def);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  state,  new  FlowState  <  MustDef>(),  def);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  state,  new  FlowState  <  MustDef>(),  def);	  NodeTraversal.traverse(compiler,    s,    state,    new    FlowState    <    MustDef>());    	non-compiled	[CE]  reached  end  of  file  while  parsing	62	None	replace
1197	[BUG]  [BUGGY]  Scope  jsScope  =  jsScope.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Scope  jsScope  =  jsScope.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Scope  jsScope  =  jsScope.getVar(name);  if(rValue  ==  null)  {  return  false;  }	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	199	None	replace
1198	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(state.reachingDef));  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(state.reachingDef));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(state.reachingDef));	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>(resultMap));    	non-compiled	[CE]  reached  end  of  file  while  parsing	187	None	replace
1199	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(s.scope));	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>(resultMap));    	non-compiled	[CE]  reached  end  of  file  while  parsing	187	None	replace
1200	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(resultMap),  def);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(resultMap),  def);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(resultMap),  def);	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>(resultMap));    	non-compiled	[CE]  reached  end  of  file  while  parsing	187	None	replace
1201	[BUG]  [BUGGY]  if(jsScope!=  jsScope)  {  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValu  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  jsScope)  {  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValu  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  jsScope)  {  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValu	  if(def.depends!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValu    	non-compiled	[CE]  ')'  expected	164	None	replace
1202	[BUG]  [BUGGY]  if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||	  if(def.depends!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValu    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
1203	[BUG]  [BUGGY]  for(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }	  for(Var    r    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	181	None	replace
1204	[BUG]  [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name,  rValue);  if(rValue!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name,  rValue);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name,  rValue);  if(rValue!=  null)  {  return  false;  }	  for(Var    r    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	181	None	replace
1205	[BUG]  [BUGGY]  if(def  ==  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def  ==  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def  ==  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	  if(jsScope!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	104	None	replace
1206	[BUG]  [BUGGY]  if(jsScope  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValu  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValu  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValu	  if(jsScope!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	104	None	replace
1207	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.scope)||  s.scope!=  jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.scope)||  s.scope!=  jsScope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s.scope)||  s.scope!=  jsScope);	  Preconditions.checkArgument(def.depends.contains(s)||    s.scope!=    jsScope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	145	None	replace
1208	[BUG]  [BUGGY]  Preconditions.checkArgument(jsScope.depends.contains(s.name));  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(jsScope.depends.contains(s.name));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(jsScope.depends.contains(s.name));	  Preconditions.checkArgument(jsScope.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
1209	[BUG]  [BUGGY]  Node  rValue  =  s.getValue();  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getValue();  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getValue();	  Node    rValue    =    s.getRValue();    	non-compiled	[CE]  reached  end  of  file  while  parsing	69	None	replace
1210	[BUG]  [BUGGY]  Node  rValue  =  s.getLValue();  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getLValue();  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getLValue();	  Node    rValue    =    s.getRValue();    	non-compiled	[CE]  reached  end  of  file  while  parsing	69	None	replace
1211	[BUG]  [BUGGY]  Node  rValue  =  s.getObj();  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getObj();  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getObj();	  Node    rValue    =    s.getRValue();    	non-compiled	[CE]  reached  end  of  file  while  parsing	69	None	replace
1212	[BUG]  [BUGGY]  for(Var  r  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	38	None	replace
1213	[BUG]  [BUGGY]  for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	38	None	replace
1214	[BUG]  [BUGGY]  for(Var  r  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(r))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(r))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(r))  {  return  false;  }	  for(Var    s    :    def.vars)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	168	None	replace
1215	[BUG]  [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  }	  if(def!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	118	None	replace
1216	[BUG]  [BUGGY]  for(Var  r  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(r))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(r))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(r))  {  return  true;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(s))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	157	None	replace
1217	[BUG]  [BUGGY]  Scope  jsScope  =  jsScope.getVar(name);  if(rhs!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Scope  jsScope  =  jsScope.getVar(name);  if(rhs!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Scope  jsScope  =  jsScope.getVar(name);  if(rhs!=  null)  {  return  false;  }	  Scope    jsScope    =    jsScope.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	210	None	replace
1218	[BUG]  [BUGGY]  Scope  jsScope  =  jsScope.getVar(name);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Scope  jsScope  =  jsScope.getVar(name);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Scope  jsScope  =  jsScope.getVar(name);	  Scope    jsScope    =    jsScope.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	210	None	replace
1219	[BUG]  [BUGGY]  Scope  jsScope  =  jsScope.getVar(name);  if(rhs  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Scope  jsScope  =  jsScope.getVar(name);  if(rhs  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Scope  jsScope  =  jsScope.getVar(name);  if(rhs  ==  null)  {  return  false;  }	  Scope    jsScope    =    jsScope.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	210	None	replace
1220	[BUG]  [BUGGY]  Scope  jsScope  =  jsScope.getVar(name,  s.scope);  if(rhs!=  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Scope  jsScope  =  jsScope.getVar(name,  s.scope);  if(rhs!=  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Scope  jsScope  =  jsScope.getVar(name,  s.scope);  if(rhs!=  null)  {  return  true;  }	  Scope    jsScope    =    jsScope.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	210	None	replace
1221	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  new  MustDef(s.scope),  new  MustDef());  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  def,  new  MustDef(s.scope),  new  MustDef());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  def,  new  MustDef(s.scope),  new  MustDef());	  NodeTraversal.traverse(compiler,    def,    new    MustDef());    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
1222	[BUG]  [BUGGY]  if(jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  true;  }	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	189	None	replace
1223	[BUG]  [BUGGY]  Scope  jsScope  =  jsScope.getVar(name);  if(rValue  ==  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Scope  jsScope  =  jsScope.getVar(name);  if(rValue  ==  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Scope  jsScope  =  jsScope.getVar(name);  if(rValue  ==  null)  {  return  true;  }	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	189	None	replace
1224	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(cfgNode))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(cfgNode))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(cfgNode))  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(cfgNode))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
1225	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  cfgNode.getVar(name);  if(rValue  ==  null  ||  rValue.equals(cfgNode))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  cfgNode.getVar(name);  if(rValue  ==  null  ||  rValue.equals(cfgNode))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  cfgNode.getVar(name);  if(rValue  ==  null  ||  rValue.equals(cfgNode))  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(cfgNode))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
1226	[BUG]  [BUGGY]  For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(s))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	222	None	replace
1227	[BUG]  [BUGGY]  For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(s))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	222	None	replace
1228	[BUG]  [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue  ==  s.getVar(name))  {  return  true;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	170	None	replace
1229	[BUG]  [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	215	None	replace
1230	[BUG]  [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	215	None	replace
1231	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	215	None	replace
1232	[BUG]  [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	215	None	replace
1233	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name,  def);  if(rValue!=  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name,  def);  if(rValue!=  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name,  def);  if(rValue!=  null)  {  return  true;  }	  Node    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	113	None	replace
1234	[BUG]  [BUGGY]  Node  rValue  =  n.getVar(name);  if(rValue!=  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  n.getVar(name);  if(rValue!=  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  n.getVar(name);  if(rValue!=  null)  {  return  true;  }	  Node    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	113	None	replace
1235	[BUG]  [BUGGY]  for(Var  r  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(s))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    def.vars)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	132	None	replace
1236	[BUG]  [BUGGY]  For(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(s))  {  return  false;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    def.vars)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	132	None	replace
1237	[BUG]  [BUGGY]  if(jsScope!=  jsScope)  {  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  nu  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  jsScope)  {  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  nu  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  jsScope)  {  if(def.depends!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  nu	  if(def.depends!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ')'  expected	120	None	replace
1238	[BUG]  [BUGGY]  for(Var  r  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	65	None	replace
1239	[BUG]  [BUGGY]  for(Var  rValue  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  rValue  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  rValue  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	65	None	replace
1240	[BUG]  [BUGGY]  if(lhs!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(lhs!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(lhs!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(lhs))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
1241	[BUG]  [BUGGY]  Node  rhs  =  jsScope.getVar(name,  s.cloneTree);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rhs  =  jsScope.getVar(name,  s.cloneTree);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rhs  =  jsScope.getVar(name,  s.cloneTree);	  Node    rhs    =    jsScope.getVar(name);    	non-compiled	[CE]  reached  end  of  file  while  parsing	190	None	replace
1242	[BUG]  [BUGGY]  Node  rhs  =  jsScope.getVar(name,  s.reachingDef);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rhs  =  jsScope.getVar(name,  s.reachingDef);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rhs  =  jsScope.getVar(name,  s.reachingDef);	  Node    rhs    =    jsScope.getVar(name);    	non-compiled	[CE]  reached  end  of  file  while  parsing	190	None	replace
1243	[BUG]  [BUGGY]  Preconditions.checkArgument(resultMap.contains(s.scope)||  resultMap.contains(s.rValue));  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(resultMap.contains(s.scope)||  resultMap.contains(s.rValue));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(resultMap.contains(s.scope)||  resultMap.contains(s.rValue));	  Preconditions.checkArgument(resultMap.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
1244	[BUG]  [BUGGY]  Preconditions.checkArgument(resultMap.contains(s.scope,  def));  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(resultMap.contains(s.scope,  def));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(resultMap.contains(s.scope,  def));	  Preconditions.checkArgument(resultMap.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
1245	[BUG]  [BUGGY]  Preconditions.checkArgument(resultMap.contains(s.scope)||  resultMap.contains(s.name));  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(resultMap.contains(s.scope)||  resultMap.contains(s.name));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(resultMap.contains(s.scope)||  resultMap.contains(s.name));	  Preconditions.checkArgument(resultMap.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
1246	[BUG]  [BUGGY]  if(jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	202	None	replace
1247	[BUG]  [BUGGY]  ||  jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  ||  jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	||  jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  illegal  start  of  expression	202	None	replace
1248	[BUG]  [BUGGY]  Pentru(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Pentru(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Pentru(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }	  for(Var    s    :    def.vars)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	176	None	replace
1249	[BUG]  [BUGGY]  For(Var  r  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  r  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  r  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }	  for(Var    s    :    def.vars)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	176	None	replace
1250	[BUG]  [BUGGY]  if(def  ==  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def  ==  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def  ==  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true;  }	  if(jsScope!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	replace
1251	[BUG]  [BUGGY]  if(def  ==  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def  ==  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def  ==  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true	  if(jsScope!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	47	None	replace
1252	[BUG]  [BUGGY]  if(s.scope  ==  target)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope  ==  target)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope  ==  target)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }	  if(s.scope!=    target)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	175	None	replace
1253	[BUG]  [BUGGY]  if(s.scope  ==  target)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope  ==  target)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope  ==  target)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }	  if(s.scope!=    target)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	175	None	replace
1254	[BUG]  [BUGGY]  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!depends.isEmpty())  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!depends.isEmpty())  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	rValue  =  s.getVar(name);  if(rValue  ==  null  ||!depends.isEmpty())  {  return  true;  }	  rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	112	None	replace
1255	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends!=  null  &&  s.depends.contains(def.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends!=  null  &&  s.depends.contains(def.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends!=  null  &&  s.depends.contains(def.scope));	  Preconditions.checkArgument(def.depends!=    null    &&    def.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	146	None	replace
1256	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends!=  null  &&  s.depends.contains(def.depends));  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends!=  null  &&  s.depends.contains(def.depends));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends!=  null  &&  s.depends.contains(def.depends));	  Preconditions.checkArgument(def.depends!=    null    &&    def.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	146	None	replace
1257	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends!=  null  &&  def.depends.contains(s.scope,  s.name));  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends!=  null  &&  def.depends.contains(s.scope,  s.name));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends!=  null  &&  def.depends.contains(s.scope,  s.name));	  Preconditions.checkArgument(def.depends!=    null    &&    def.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	146	None	replace
1258	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  jsScope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  def,  jsScope);	  NodeTraversal.traverse(compiler,    s,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	97	None	replace
1259	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  ed);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  ed);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  def,  ed);	  NodeTraversal.traverse(compiler,    s,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	97	None	replace
1260	[BUG]  [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(	  if(def.depends!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
1261	[BUG]  [BUGGY]  rValue  ==  null  ||  rValue.equals(  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  rValue  ==  null  ||  rValue.equals(  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	rValue  ==  null  ||  rValue.equals(	  if(def.depends!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
1262	[BUG]  [BUGGY]  if(jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(	  if(def.depends!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
1263	[BUG]  [BUGGY]  if(def.depends!=  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def.depends!=  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def.depends!=  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(	  if(def.depends!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
1264	[BUG]  [BUGGY]  if(def!=  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def!=  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true	  if(def!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	125	None	replace
1265	[BUG]  [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true  }	  if(def!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	125	None	replace
1266	[BUG]  [BUGGY]  Node  rValue  =  jsScope.getVar(name,  s.cloneTree);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  jsScope.getVar(name,  s.cloneTree);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  jsScope.getVar(name,  s.cloneTree);	  Node    rValue    =    jsScope.getVar(name);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
1267	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  jsScope,  new  FlowState  <  MustDef>());  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  def,  jsScope,  new  FlowState  <  MustDef>());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  def,  jsScope,  new  FlowState  <  MustDef>());	  NodeTraversal.traverse(compiler,    def,    new    FlowState    <    MustDef>());    	non-compiled	[CE]  reached  end  of  file  while  parsing	57	None	replace
1268	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(),  def,  jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(),  def,  jsScope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  new  FlowState  <  MustDef>(),  def,  jsScope);	  NodeTraversal.traverse(compiler,    s,    new    FlowState    <    MustDef>(),    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	60	None	replace
1269	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(null))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(null))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(null))  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(null))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	34	None	replace
1270	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(def))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(def))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(def))  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(null))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	34	None	replace
1271	[BUG]  [BUGGY]  ||  jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  ||  jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	||  jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }	  if(jsScope    ==    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	205	None	replace
1272	[BUG]  [BUGGY]  if(jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||!rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||!rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||!rValue.equals(rValue))  {  return  false;  }	  if(jsScope    ==    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	205	None	replace
1273	[BUG]  [BUGGY]  Preconditions.checkArgument(reachingDef.contains(s.scope)||  reachingDef.contains(s.rValue));  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(reachingDef.contains(s.scope)||  reachingDef.contains(s.rValue));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(reachingDef.contains(s.scope)||  reachingDef.contains(s.rValue));	  Preconditions.checkArgument(reachingDef.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	149	None	replace
1274	[BUG]  [BUGGY]  Preconditions.checkArgument(reachingDef.contains(s.path));  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(reachingDef.contains(s.path));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(reachingDef.contains(s.path));	  Preconditions.checkArgument(reachingDef.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	149	None	replace
1275	[BUG]  [BUGGY]  Preconditions.checkArgument(reachingDef.contains(s.root));  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(reachingDef.contains(s.root));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(reachingDef.contains(s.root));	  Preconditions.checkArgument(reachingDef.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	149	None	replace
1276	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  Node    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	replace
1277	[BUG]  [BUGGY]  for(Var  r  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	82	None	replace
1278	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends!=  s.depends);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends!=  s.depends);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends!=  s.depends);	  Preconditions.checkArgument(def.depends!=    jsScope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	217	None	replace
1279	[BUG]  [BUGGY]  Preconditions.checkArgument(!def.depends.contains(s.scope)||!def.depends.contains(s.rValue));  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(!def.depends.contains(s.scope)||!def.depends.contains(s.rValue));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(!def.depends.contains(s.scope)||!def.depends.contains(s.rValue));	  Preconditions.checkArgument(!def.depends.contains(s.scope));    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
1280	[BUG]  [BUGGY]  For(Var  rValue  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  rValue  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  rValue  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  For(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	174	None	replace
1281	[BUG]  [BUGGY]  For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue  ==  s.getVar(name))  {  return  true;  }	  For(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	174	None	replace
1282	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!depends.isEmpty())  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!depends.isEmpty())  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!depends.isEmpty())  {  return  true;  }	  Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	110	None	replace
1283	[BUG]  [BUGGY]  FlowState  <  Var>  rhs  =  s.getVar(name,  def);  if(rhs!=  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  FlowState  <  Var>  rhs  =  s.getVar(name,  def);  if(rhs!=  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	FlowState  <  Var>  rhs  =  s.getVar(name,  def);  if(rhs!=  null)  {  return  true;  }	  FlowState    <    Var>    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	139	None	replace
1284	[BUG]  [BUGGY]  FlowState  <  Var>  rhs  =  jsScope.getVar(name);  if(rhs!=  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  FlowState  <  Var>  rhs  =  jsScope.getVar(name);  if(rhs!=  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	FlowState  <  Var>  rhs  =  jsScope.getVar(name);  if(rhs!=  null)  {  return  true;  }	  FlowState    <    Var>    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	139	None	replace
1285	[BUG]  [BUGGY]  FlowState  <  Var>  rhs  =  s.reachingDef.getVar(name);  if(rhs!=  null)  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  FlowState  <  Var>  rhs  =  s.reachingDef.getVar(name);  if(rhs!=  null)  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	FlowState  <  Var>  rhs  =  s.reachingDef.getVar(name);  if(rhs!=  null)  {  return  true;  }	  FlowState    <    Var>    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	139	None	replace
1286	[BUG]  [BUGGY]  For(Var  s  :  s.getVar(name,  def))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  s.getVar(name,  def))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  s.getVar(name,  def))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	51	None	replace
1287	[BUG]  [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name,  def);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name,  def);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name,  def);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	51	None	replace
1288	[BUG]  [BUGGY]  For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	51	None	replace
1289	[BUG]  [BUGGY]  if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	74	None	replace
1290	[BUG]  [BUGGY]  if(s.scope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	74	None	replace
1291	[BUG]  [BUGGY]  for(Var  r  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue  ==  s.getVar(name))  {  return  true;  }	  for(Var    s    :    def.vars)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	172	None	replace
1292	[BUG]  [BUGGY]  for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue  ==  s.getVar(name))  {  return  true;  }	  for(Var    s    :    def.vars)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	172	None	replace
1293	[BUG]  [BUGGY]  if(def.vars!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def.vars!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def.vars!=  null)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  for(Var    s    :    def.vars)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	172	None	replace
1294	[BUG]  [BUGGY]  for(Var  rValue  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  rValue  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  rValue  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	169	None	replace
1295	[BUG]  [BUGGY]  Preconditions.checkArgument(n.depends.contains(s));  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(n.depends.contains(s));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(n.depends.contains(s));	  Preconditions.checkArgument(des.depends.contains(s));    	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	replace
1296	[BUG]  [BUGGY]  if(lhs  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(lhs  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(lhs  ==  null)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(lhs))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	105	None	replace
1297	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(lhs))  {  return  false;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(lhs))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	105	None	replace
1298	[BUG]  [BUGGY]  for(Var  s  :  def.getVars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.getVars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue  ==  s.getVar(name))  {  return  false;  }	  for(Var    s    :    def.getVars)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	122	None	replace
1299	[BUG]  [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	replace
1300	[BUG]  [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(r))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(r))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(r))  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	replace
1301	[BUG]  [BUGGY]  Preconditions.checkArgument(jsScope!=  def);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(jsScope!=  def);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(jsScope!=  def);	  Preconditions.checkArgument(s.scope!=    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	94	None	replace
1302	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(s.scope!=    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	94	None	replace
1303	[BUG]  [BUGGY]  Preconditions.checkState(def!=  s.scope);  [CE]  reached  end  of  file  while  parsing  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkState(def!=  s.scope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkState(def!=  s.scope);	  Preconditions.checkArgument(s.scope!=    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	94	None	replace
1304	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  reached  end  of  file  while  parsing  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  Preconditions.checkArgument(s.scope!=    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	94	None	replace
1305	[BUG]  [BUGGY]  For(Var  rValue  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  rValue  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  rValue  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true	  For(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	137	None	replace
1306	[BUG]  [BUGGY]  For(Var  rValue  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  rValue  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  rValue  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;	  For(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	137	None	replace
1307	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  MustDef(),  def,  jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  new  MustDef(),  def,  jsScope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  new  MustDef(),  def,  jsScope);	  NodeTraversal.traverse(compiler,    s,    new    MustDef(),    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
1308	[BUG]  [BUGGY]  Node  rValue  =  jsScope.getRValue(name,  s.cloneTree());  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  jsScope.getRValue(name,  s.cloneTree());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  jsScope.getRValue(name,  s.cloneTree());	  Node    rValue    =    jsScope.getRValue(name);    	non-compiled	[CE]  reached  end  of  file  while  parsing	71	None	replace
1309	[BUG]  [BUGGY]  Node  rValue  =  jsScope.getRValue(name,  s.type);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  jsScope.getRValue(name,  s.type);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  jsScope.getRValue(name,  s.type);	  Node    rValue    =    jsScope.getRValue(name);    	non-compiled	[CE]  reached  end  of  file  while  parsing	71	None	replace
1310	[BUG]  [BUGGY]  Object  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Object  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Object  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }	  Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	replace
1311	[BUG]  [BUGGY]  for(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(r))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(r))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(r))  {  return  true;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	135	None	replace
1312	[BUG]  [BUGGY]  for(Var  r  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	135	None	replace
1313	[BUG]  [BUGGY]  for(Var  r  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(r))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(r))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(r))  {  return  true;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	135	None	replace
1314	[BUG]  [BUGGY]  if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def  ==  null)  {  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  }	  if(jsScope!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	48	None	replace
1315	[BUG]  [BUGGY]  for(Var  s  :  def.getVars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.getVars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue  ==  s.getVar(name))  {  return  true;  }	  for(Var    s    :    def.getVars)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	171	None	replace
1316	[BUG]  [BUGGY]  for(Var  r  :  def.getVars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  def.getVars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  def.getVars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue  ==  s.getVar(name))  {  return  true;  }	  for(Var    s    :    def.getVars)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	171	None	replace
1317	[BUG]  [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	194	None	replace
1318	[BUG]  [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  >=  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  >=  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  >=  s.getVar(name))  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	194	None	replace
1319	[BUG]  [BUGGY]  Preconditions.checkArgument(resultMap.contains(s.path));  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(resultMap.contains(s.path));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(resultMap.contains(s.path));	  Preconditions.checkArgument(resultMap.contains(s));    	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	replace
1320	[BUG]  [BUGGY]  Preconditions.checkArgument(resultMap.contains(s.desc));  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(resultMap.contains(s.desc));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(resultMap.contains(s.desc));	  Preconditions.checkArgument(resultMap.contains(s));    	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	replace
1321	[BUG]  [BUGGY]  for(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue  ==  s.getVar(name))  {  return  true;  }	  for(Var    r    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue    ==    s.getVar(name))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	216	None	replace
1322	[BUG]  [BUGGY]  escaped.add(s.scope,  s.jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.add(s.scope,  s.jsScope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.add(s.scope,  s.jsScope);	  escaped.add(s.jsScope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	84	None	replace
1323	[BUG]  [BUGGY]  if(def!=  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def!=  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }	  if(def!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	126	None	replace
1324	[BUG]  [BUGGY]  escaped.put(name,  s.cloneTree());  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.put(name,  s.cloneTree());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.put(name,  s.cloneTree());	  escaped.put(name,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	141	None	replace
1325	[BUG]  [BUGGY]  escaped.put(name,  s.node);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  escaped.put(name,  s.node);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	escaped.put(name,  s.node);	  escaped.put(name,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	141	None	replace
1326	[BUG]  [BUGGY]  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!depends.hasChildren())  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!depends.hasChildren())  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	rValue  =  s.getVar(name);  if(rValue  ==  null  ||!depends.hasChildren())  {  return  false;  }	  rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	77	None	replace
1327	[BUG]  [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false  }	  if(def!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false    	non-compiled	[CE]  ';'  expected	151	None	replace
1328	[BUG]  [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false	  if(def!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false    	non-compiled	[CE]  ';'  expected	151	None	replace
1329	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  this,  escaped);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  this,  escaped);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  def,  this,  escaped);	  NodeTraversal.traverse(compiler,    s,    def,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	103	None	replace
1330	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  this,  rValue);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  this,  rValue);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  def,  this,  rValue);	  NodeTraversal.traverse(compiler,    s,    def,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	103	None	replace
1331	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  Node    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	replace
1332	[BUG]  [BUGGY]  for(Var  rValue  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  rValue  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  rValue  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	133	None	replace
1333	[BUG]  [BUGGY]  if(def!=  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def!=  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def!=  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false	  if(def!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	162	None	replace
1334	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  new  MustDef(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  new  MustDef(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  jsScope,  new  MustDef(s.scope));	  NodeTraversal.traverse(compiler,    jsScope,    new    MustDef());    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
1335	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  new  MustDef(s.scope),  new  MustDef());  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  new  MustDef(s.scope),  new  MustDef());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  jsScope,  new  MustDef(s.scope),  new  MustDef());	  NodeTraversal.traverse(compiler,    jsScope,    new    MustDef());    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
1336	[BUG]  [BUGGY]  if(def  ==  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def  ==  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def  ==  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false;  }	  if(jsScope!=    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	replace
1337	[BUG]  [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name,  def);  if(rValue!=  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name,  def);  if(rValue!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name,  def);  if(rValue!=  null)  {  return  false;  }	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	81	None	replace
1338	[BUG]  [BUGGY]  For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null)  {  return  false;  }	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	81	None	replace
1339	[BUG]  [BUGGY]  if(s.scope!=  null)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  null)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  null)  {  Var  rhs  =  s.getVar(name);  if(rhs!=  null)  {  return  false;  }	  if(jsScope!=    null)    {    Var    rhs    =    s.getVar(name);    if(rhs!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
1340	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  this,  def,  jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  this,  def,  jsScope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  this,  def,  jsScope);	  NodeTraversal.traverse(compiler,    s,    this,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	98	None	replace
1341	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  this,  def,  cfgNode);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  this,  def,  cfgNode);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  this,  def,  cfgNode);	  NodeTraversal.traverse(compiler,    s,    this,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	98	None	replace
1342	[BUG]  [BUGGY]  For(Var  s  :  jsScope.getVar(name));  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  s  :  jsScope.getVar(name));  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  s  :  jsScope.getVar(name));  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null)  {  return  false	  for(Var    s    :    s.getVar(name));    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	182	None	replace
1343	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name).reachingDef;  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name).reachingDef;  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name).reachingDef;	  Node    rValue    =    s.getVar(name);    	non-compiled	[CE]  reached  end  of  file  while  parsing	72	None	replace
1344	[BUG]  [BUGGY]  for(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(r))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(r))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(r))  {  return  false;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	166	None	replace
1345	[BUG]  [BUGGY]  if(def  ==  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def  ==  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def  ==  null)  {  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  false	  if(def    ==    null)    {    if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	163	None	replace
1346	[BUG]  [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
1347	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
1348	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  for(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
1349	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.alias)||  def.depends.contains(s.name));  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.alias)||  def.depends.contains(s.name));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s.alias)||  def.depends.contains(s.name));	  Preconditions.checkArgument(def.depends.contains(s.scope)||    def.depends.contains(s.name));    	non-compiled	[CE]  reached  end  of  file  while  parsing	224	None	replace
1350	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.scope)||  def.depends.contains(s.name,  s.rValue));  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends.contains(s.scope)||  def.depends.contains(s.name,  s.rValue));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends.contains(s.scope)||  def.depends.contains(s.name,  s.rValue));	  Preconditions.checkArgument(def.depends.contains(s.scope)||    def.depends.contains(s.name));    	non-compiled	[CE]  reached  end  of  file  while  parsing	224	None	replace
1351	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!depends.isEmpty())  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!depends.isEmpty())  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!depends.isEmpty())  {  return  false;  }	  Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	75	None	replace
1352	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!depends.hasChildren())  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!depends.hasChildren())  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!depends.hasChildren())  {  return  false;  }	  Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	75	None	replace
1353	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!ref.depends.contains(s.scope))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!ref.depends.contains(s.scope))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!ref.depends.contains(s.scope))  {  return  false;  }	  Var    rValue    =    s.getVar(name);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	75	None	replace
1354	[BUG]  [BUGGY]  if(jsScope  ==  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope  ==  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope  ==  scope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  false;  }	  if(jsScope    ==    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	192	None	replace
1355	[BUG]  [BUGGY]  if(jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }	  if(jsScope    ==    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	192	None	replace
1356	[BUG]  [BUGGY]  if(jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope  ==  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	201	None	replace
1357	[BUG]  [BUGGY]  for(Var  rValue  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  rValue  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  rValue  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  false;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
1358	[BUG]  [BUGGY]  Scope.Var  jsScope  =  s.getScope();  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Scope.Var  jsScope  =  s.getScope();  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Scope.Var  jsScope  =  s.getScope();	  Scope    jsScope    =    jsScope.getScope();    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
1359	[BUG]  [BUGGY]  Object  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Object  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Object  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(rValue))  {  return  true;  }	  Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	63	None	replace
1360	[BUG]  [BUGGY]  for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue  ==  s.getVar(name))  {  return  false;  }	  for(Var    s    :    def.vars)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	123	None	replace
1361	[BUG]  [BUGGY]  for(Var  r  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue  ==  s.getVar(name))  {  return  false;  }	  for(Var    s    :    def.vars)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	123	None	replace
1362	[BUG]  [BUGGY]  For(Var  r  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  r  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  r  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  for(Var    s    :    def.vars)    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	123	None	replace
1363	[BUG]  [BUGGY]  Preconditions.checkArgument(def!=  jsScope);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def!=  jsScope);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def!=  jsScope);	  Preconditions.checkArgument(s.scope!=    jsScope,    def);    	non-compiled	[CE]  reached  end  of  file  while  parsing	90	None	replace
1364	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true;  }	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	198	None	replace
1365	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  true	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	198	None	replace
1366	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  For(Var  s  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return	  For(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	198	None	replace
1367	[BUG]  [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||!depends.hasChildren())  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||!depends.hasChildren())  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  s.getVar(name);  if(rValue!=  null  ||!depends.hasChildren())  {  return  false;  }	  Node    rValue    =    s.getVar(name);    if(rValue!=    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	80	None	replace
1368	[BUG]  [BUGGY]  For(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  For(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	For(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	136	None	replace
1369	[BUG]  [BUGGY]  for(Var  r  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  def.vars)  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	136	None	replace
1370	[BUG]  [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(s.scope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(s))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	221	None	replace
1371	[BUG]  [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(r))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(r))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(r))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(s))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	221	None	replace
1372	[BUG]  [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(s))  {  return  true;  }	  for(Var    s    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(s))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	221	None	replace
1373	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  declaration,  new  FlowState  <  MustDef>());  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  declaration,  new  FlowState  <  MustDef>());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  declaration,  new  FlowState  <  MustDef>());	  NodeTraversal.traverse(compiler,    s,    def,    new    FlowState    <    MustDef>());    	non-compiled	[CE]  reached  end  of  file  while  parsing	56	None	replace
1374	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  new  FlowState  <  MustDef>(),  escaped);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  new  FlowState  <  MustDef>(),  escaped);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  def,  new  FlowState  <  MustDef>(),  escaped);	  NodeTraversal.traverse(compiler,    s,    def,    new    FlowState    <    MustDef>());    	non-compiled	[CE]  reached  end  of  file  while  parsing	56	None	replace
1375	[BUG]  [BUGGY]  ||  jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  ||  jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	||  jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||!rValue.equals(rValue))  {  return  true	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||!rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  illegal  start  of  expression	219	None	replace
1376	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  vValue  =  s.getVar(name);  if(rValue  ==  null  ||  vValue.equals(vValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  Var  vValue  =  s.getVar(name);  if(rValue  ==  null  ||  vValue.equals(vValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  vValue  =  s.getVar(name);  if(rValue  ==  null  ||  vValue.equals(vValue))  {  return  false;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(vValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	107	None	replace
1377	[BUG]  [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(s))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	131	None	replace
1378	[BUG]  [BUGGY]  for(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(r))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(r))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(r))  {  return  false;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	131	None	replace
1379	[BUG]  [BUGGY]  if(jsScope!=  jsScope)  {  Var  vValue  =  s.getVar(name);  if(rValue  ==  null  ||  vValue.equals(vValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  jsScope)  {  Var  vValue  =  s.getVar(name);  if(rValue  ==  null  ||  vValue.equals(vValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  jsScope)  {  Var  vValue  =  s.getVar(name);  if(rValue  ==  null  ||  vValue.equals(vValue))  {  return  false;  }	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(vValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	193	None	replace
1380	[BUG]  [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Var  rValue  =  s.getVar(name);  if(rValue  ==  null  ||  rValue.equals(vValue))  {  return  false;  }	  if(jsScope!=    jsScope)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(vValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	193	None	replace
1381	[BUG]  [BUGGY]  Variable  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(rValue))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Variable  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(rValue))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Variable  rValue  =  s.getVar(name);  if(rValue!=  null  &&  rValue.equals(rValue))  {  return  false;  }	  Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
1382	[BUG]  [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name,  rValue);  if(rValue  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name,  rValue);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name,  rValue);  if(rValue  ==  null)  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name,    rValue);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	200	None	replace
1383	[BUG]  [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name,  def);  if(rValue  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name,  def);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  jsScope)  {  Var  rValue  =  s.getVar(name,  def);  if(rValue  ==  null)  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name,    rValue);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	200	None	replace
1384	[BUG]  [BUGGY]  Node  rValue  =  jsScope.getVar(name,  s);  if(rValue  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Node  rValue  =  jsScope.getVar(name,  s);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Node  rValue  =  jsScope.getVar(name,  s);  if(rValue  ==  null)  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name,    rValue);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	200	None	replace
1385	[BUG]  [BUGGY]  FlowState  <  Var>  rValue  =  s.getVar(name,  jsScope);  if(rValue  ==  null)  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  FlowState  <  Var>  rValue  =  s.getVar(name,  jsScope);  if(rValue  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	FlowState  <  Var>  rValue  =  s.getVar(name,  jsScope);  if(rValue  ==  null)  {  return  false;  }	  if(s.scope!=    jsScope)    {    Var    rValue    =    s.getVar(name,    rValue);    if(rValue    ==    null)    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	200	None	replace
1386	[BUG]  [BUGGY]  for(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  rValue  :  s.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(rValue))  {  return  true  }	  for(Var    rValue    :    s.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(rValue))    {    return    true    	non-compiled	[CE]  ';'  expected	197	None	replace
1387	[BUG]  [BUGGY]  if(def.depends!=  null)  {  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(def.depends!=  null)  {  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(def.depends!=  null)  {  for(Var  s  :  def.getVars())  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue  ==  s.getVar(name))  {  return  false;  }	  for(Var    s    :    def.getVars())    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue    ==    s.getVar(name))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	121	None	replace
1388	[BUG]  [BUGGY]  if(jsScope!=  null)  {  Var  vValue  =  s.getVar(name);  if(rValue  ==  null  ||  vValue.equals(vValue))  {  return  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  if(jsScope!=  null)  {  Var  vValue  =  s.getVar(name);  if(rValue  ==  null  ||  vValue.equals(vValue))  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	if(jsScope!=  null)  {  Var  vValue  =  s.getVar(name);  if(rValue  ==  null  ||  vValue.equals(vValue))  {  return  true;  }	  if(jsScope!=    null)    {    Var    rValue    =    s.getVar(name);    if(rValue    ==    null    ||    rValue.equals(vValue))    {    return    true;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	32	None	replace
1389	[BUG]  [BUGGY]  Preconditions.checkArgument(def.depends!=  s.scope  ||  def.depends!=  s.depends);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  Preconditions.checkArgument(def.depends!=  s.scope  ||  def.depends!=  s.depends);  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	Preconditions.checkArgument(def.depends!=  s.scope  ||  def.depends!=  s.depends);	  Preconditions.checkArgument(def.depends!=    s.scope);    	non-compiled	[CE]  reached  end  of  file  while  parsing	155	None	replace
1390	[BUG]  [BUGGY]  for(Var  r  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  for(Var  r  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	for(Var  r  :  def.getVar(name))  {  Var  rValue  =  s.getVar(name);  if(rValue!=  null  ||  rValue.equals(s))  {  return  false;  }	  for(Var    s    :    def.getVar(name))    {    Var    rValue    =    s.getVar(name);    if(rValue!=    null    ||    rValue.equals(s))    {    return    false;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	130	None	replace
1391	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  MustDef(s.scope),  new  MustDef());  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  MustDef(s.scope),  new  MustDef());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  n,  new  MustDef(s.scope),  new  MustDef());	  NodeTraversal.traverse(compiler,    n,    new    MustDef());    	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	replace
1392	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  new  MustDef(s.scope));  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  new  MustDef(s.scope));  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  def,  new  MustDef(s.scope));	  NodeTraversal.traverse(compiler,    s,    def,    new    MustDef());    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
1393	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  new  MustDef(s.scope),  new  MustDef());  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  new  MustDef(s.scope),  new  MustDef());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  def,  new  MustDef(s.scope),  new  MustDef());	  NodeTraversal.traverse(compiler,    s,    def,    new    MustDef());    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
1394	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  new  MustDefReachingDef());  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionFailedError      [CONTEXT]      boolean  dependsOnOuterScopeVars(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  for  (Var  s  :  def.depends)  {  if  (s.scope  !=  jsScope)  {  return  true;  }      [BUGGY]  NodeTraversal.traverse(compiler,  s,  def,  new  MustDefReachingDef());  [BUGGY]      return  false;  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  dependsOnOuterScopeVars  [RETURN_TYPE]  boolean  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Var  s  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.4472135954999579	435	435	3	replace	NodeTraversal.traverse(compiler,  s,  def,  new  MustDefReachingDef());	  NodeTraversal.traverse(compiler,    s,    def,    new    MustDef());    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
