bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.getVar(name));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  state.getIn().reachingDef.get(def.getVar(name));  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.getVar(name));	  return    def.getDefinitions();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
2	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.getName());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  state.getIn().reachingDef.get(def.getName());  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.getName());	  return    def.getDefinitions();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
3	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  state.getIn().reachingDef.get(def);  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def);	  return    def.getDefinitions();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
4	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.getDefinitions());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  state.getIn().reachingDef.get(def.getDefinitions());  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.getDefinitions());	  return    def.getDefinitions();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
5	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.getValue());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  state.getIn().reachingDef.get(def.getValue());  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.getValue());	  return    def.getDefinitions();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
6	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.getLocalName());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  state.getIn().reachingDef.get(def.getLocalName());  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.getLocalName());	  return    def.getDefinitions();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
7	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.getJoin());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  state.getIn().reachingDef.get(def.getJoin());  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.getJoin());	  return    def.getJoin();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
8	[BUG]  [BUGGY]  return  def.getReachingDef();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  def.getReachingDef();  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getReachingDef();	  return    def.getJoin();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
9	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name));  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name));	  return    def.getJoin();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
10	[BUG]  [BUGGY]  return  def.jsScope.getVar(name);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  def.jsScope.getVar(name);  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.jsScope.getVar(name);	  return    def.jsScope;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
11	[BUG]  [BUGGY]  return  def.getVar(name,  jsScope);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  def.getVar(name,  jsScope);  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getVar(name,  jsScope);	  return    def.jsScope;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
12	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.jsScope);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  state.getIn().reachingDef.get(def.jsScope);  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.jsScope);	  return    def.jsScope;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
13	[BUG]  [BUGGY]  return  def.jsScope.getVar(name,  jsScope);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  def.jsScope.getVar(name,  jsScope);  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.jsScope.getVar(name,  jsScope);	  return    def.jsScope;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
14	[BUG]  [BUGGY]  return  def  ==  null?  null  :  def.node;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  def  ==  null?  null  :  def.node;  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def  ==  null?  null  :  def.node;	  return    def.node    ==    null?    null    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
15	[BUG]  [BUGGY]  return  def.node!=  null?  null  :  def.node;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  def.node!=  null?  null  :  def.node;  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.node!=  null?  null  :  def.node;	  return    def.node    ==    null?    null    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
16	[BUG]  [BUGGY]  return  def!=  null?  null  :  def.node;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  def!=  null?  null  :  def.node;  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def!=  null?  null  :  def.node;	  return    def.node    ==    null?    null    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
17	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.getDeclaration());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  state.getIn().reachingDef.get(def.getDeclaration());  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.getDeclaration());	  return    def.getDeclaration();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
18	[BUG]  [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));	  return    def.getDeclaration();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
19	[BUG]  [BUGGY]  return  state.getIn().reachingDef.getVar(name);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  state.getIn().reachingDef.getVar(name);  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.getVar(name);	  return    def.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
20	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def);  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name),  def);	  return    def.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
21	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(desc.getVar(name));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  state.getIn().reachingDef.get(desc.getVar(name));  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(desc.getVar(name));	  return    def.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
22	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(name);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  state.getIn().reachingDef.get(name);  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(name);	  return    def;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
23	[BUG]  [BUGGY]  return  def.invoke(jsScope,  n);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  def.invoke(jsScope,  n);  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.invoke(jsScope,  n);	  return    def;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
24	[BUG]  [BUGGY]  return  def.invoke(jsScope,  cfgNode,  useNode);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  def.invoke(jsScope,  cfgNode,  useNode);  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.invoke(jsScope,  cfgNode,  useNode);	  return    def;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
25	[BUG]  [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(name);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(name);  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	Definition  def  =  state.getIn().reachingDef.get(name);	  return    def.getDefinition();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
26	[BUG]  [BUGGY]  return  def.node  >=  null?  null  :  def.node;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  def.node  >=  null?  null  :  def.node;  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.node  >=  null?  null  :  def.node;	  return    def.node    <    null?    null    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
27	[BUG]  [BUGGY]  return  def.node  ==  node?  null  :  def.node;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  def.node  ==  node?  null  :  def.node;  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.node  ==  node?  null  :  def.node;	  return    def.node    <    node?    null    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
28	[BUG]  [BUGGY]  return  def.node!=  node?  null  :  def.node;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  def.node!=  node?  null  :  def.node;  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.node!=  node?  null  :  def.node;	  return    def.node    <    node?    null    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
29	[BUG]  [BUGGY]  return  def.node  >=  node?  null  :  def.node;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  def.node  >=  node?  null  :  def.node;  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.node  >=  node?  null  :  def.node;	  return    def.node    <    node?    null    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
30	[BUG]  [BUGGY]  return  definition  ==  null?  def.node  :  definition;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  definition  ==  null?  def.node  :  definition;  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  definition  ==  null?  def.node  :  definition;	  return    def.node    ==    null?    definition    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
31	[BUG]  [BUGGY]  return  def.node!=  null?  definition  :  def.node;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  def.node!=  null?  definition  :  def.node;  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.node!=  null?  definition  :  def.node;	  return    def.node    ==    null?    definition    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
32	[BUG]  [BUGGY]  return  def  ==  null?  definition  :  def.node;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  def  ==  null?  definition  :  def.node;  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def  ==  null?  definition  :  def.node;	  return    def.node    ==    null?    definition    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
33	[BUG]  [BUGGY]  return  def!=  null?  definition  :  def.node;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  def!=  null?  definition  :  def.node;  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def!=  null?  definition  :  def.node;	  return    def.node    ==    null?    definition    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
34	[BUG]  [BUGGY]  return  declaration  ==  null?  definition  :  def.node;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  declaration  ==  null?  definition  :  def.node;  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  declaration  ==  null?  definition  :  def.node;	  return    def.node    ==    null?    definition    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
35	[BUG]  [BUGGY]  return  state.getIn().reachingDef;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  state.getIn().reachingDef;  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef;	  return    def.reachingDef;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
36	[BUG]  [BUGGY]  return  def.definition;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  def.definition;  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.definition;	  return    def.reachingDef;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
37	[BUG]  [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  return  def;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  return  def;  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  return  def;	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
38	[BUG]  [BUGGY]  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	def  =  state.getIn().reachingDef.get(jsScope.getVar(name));	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
39	[BUG]  [BUGGY]  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  return  def;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  return  def;  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  return  def;	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
40	[BUG]  [BUGGY]  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def  ==  null)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def  ==  null)  {  return  null;  }  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def  ==  null)  {  return  null;  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
41	[BUG]  [BUGGY]  return  def.reachingDef.get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  def.reachingDef.get(jsScope.getVar(name));  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.reachingDef.get(jsScope.getVar(name));	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
42	[BUG]  [BUGGY]  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def!=  null)  {  return  def;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def!=  null)  {  return  def;  }  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def!=  null)  {  return  def;  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
43	[BUG]  [BUGGY]  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def  ==  null)  {  return  def;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def  ==  null)  {  return  def;  }  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def  ==  null)  {  return  def;  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
44	[BUG]  [BUGGY]  return  def.getReachingDefinition();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  def.getReachingDefinition();  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getReachingDefinition();	  return    def.getDefinitions();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
45	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.toString());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  state.getIn().reachingDef.get(def.toString());  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.toString());	  return    def.getDefinitions();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
46	[BUG]  [BUGGY]  return  def.cloneTree();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  def.cloneTree();  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.cloneTree();	  return    def;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
47	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  useNode));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  useNode));  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name,  useNode));	  return    def;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
48	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  useNode);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  useNode);  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name),  useNode);	  return    def;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
49	[BUG]  [BUGGY]  return  def.getVar(name,  useNode);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  def.getVar(name,  useNode);  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getVar(name,  useNode);	  return    def.reachingDef;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
50	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.getDefinition());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  state.getIn().reachingDef.get(def.getDefinition());  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.getDefinition());	  return    def.getDefinition();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
51	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name);  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name);	  return    def.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
52	[BUG]  [BUGGY]  return  def.reachingDef.getJoin();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  def.reachingDef.getJoin();  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.reachingDef.getJoin();	  return    def.getJoin();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
53	[BUG]  [BUGGY]  return  definition  ==  null?  def.node  :  def.node;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  definition  ==  null?  def.node  :  def.node;  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  definition  ==  null?  def.node  :  def.node;	  return    def.node    ==    null?    definition    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
54	[BUG]  [BUGGY]  return  def.getDefinitions().getJoin();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  def.getDefinitions().getJoin();  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().getJoin();	  return    def.getJoin();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
55	[BUG]  [BUGGY]  return  def.getFunction();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  def.getFunction();  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getFunction();	  return    def.getJoin();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
56	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name).getDeclaration());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name).getDeclaration());  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name).getDeclaration());	  return    def.getDeclaration();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
57	[BUG]  [BUGGY]  escaped.add(def);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  escaped.add(def);  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	escaped.add(def);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
58	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name).toString());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name).toString());  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name).toString());	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
59	[BUG]  [BUGGY]  return  jsScope.getVar(name);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  jsScope.getVar(name);  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  jsScope.getVar(name);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
60	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  def));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  def));  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name,  def));	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
61	[BUG]  [BUGGY]  return  def.getDefinitions().get(name);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  def.getDefinitions().get(name);  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().get(name);	  return    def.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
62	[BUG]  [BUGGY]  return  def.getDefinitions().jsScope;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  def.getDefinitions().jsScope;  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().jsScope;	  return    def.jsScope;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
63	[BUG]  [BUGGY]  return  def.getScope();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  def.getScope();  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getScope();	  return    def.jsScope;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
64	[BUG]  [BUGGY]  return  def.node  ==  null  ||  def.node  ==  null?  null  :  def.node;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  def.node  ==  null  ||  def.node  ==  null?  null  :  def.node;  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.node  ==  null  ||  def.node  ==  null?  null  :  def.node;	  return    def.node    ==    null?    null    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
65	[BUG]  [BUGGY]  return  def.invoke(jsScope,  name);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  def.invoke(jsScope,  name);  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.invoke(jsScope,  name);	  return    def.reachingDef;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
66	[BUG]  [BUGGY]  return  def.invoke(jsScope,  n,  useNode);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  def.invoke(jsScope,  n,  useNode);  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.invoke(jsScope,  n,  useNode);	  return    def.reachingDef;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
67	[BUG]  [BUGGY]  return  def.getDefinitions().reachingDef;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  def.getDefinitions().reachingDef;  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().reachingDef;	  return    def.reachingDef;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
68	[BUG]  [BUGGY]  return  def.invoke(jsScope,  n,  name);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  def.invoke(jsScope,  n,  name);  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.invoke(jsScope,  n,  name);	  return    def.reachingDef;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
69	[BUG]  [BUGGY]  return  def.invoke(jsScope,  cfgNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  def.invoke(jsScope,  cfgNode);  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.invoke(jsScope,  cfgNode);	  return    def.reachingDef;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
70	[BUG]  [BUGGY]  return  def.getDefinitions().toArray(new  Definition[def.size()  ]);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  def.getDefinitions().toArray(new  Definition[def.size()  ]);  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().toArray(new  Definition[def.size()  ]);	  return    def.getDefinitions();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
71	[BUG]  [BUGGY]  return  def.getDefinitions().iterator().next();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  def.getDefinitions().iterator().next();  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().iterator().next();	  return    def.getDefinitions();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
72	[BUG]  [BUGGY]  return  def.getDefinitions().toArray(new  Definition[def.getDefinitions().size()  ]);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  def.getDefinitions().toArray(new  Definition[def.getDefinitions().size()  ]);  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().toArray(new  Definition[def.getDefinitions().size()  ]);	  return    def.getDefinitions();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
73	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name).getDefinitions();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name).getDefinitions();  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name).getDefinitions();	  return    def.getDefinitions();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
74	[BUG]  [BUGGY]  return  definition  ==  null?  def.node  :  def;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  definition  ==  null?  def.node  :  def;  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  definition  ==  null?  def.node  :  def;	  return    def.node    ==    null?    definition    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
75	[BUG]  [BUGGY]  return  def.node  ==  null?  declaration  :  def.node;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  def.node  ==  null?  declaration  :  def.node;  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.node  ==  null?  declaration  :  def.node;	  return    def.node    ==    null?    definition    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
76	[BUG]  [BUGGY]  return  def.initializingDef;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  def.initializingDef;  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.initializingDef;	  return    def;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
77	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name).getDefinition());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name).getDefinition());  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name).getDefinition());	  return    def.getDefinition();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
78	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def.getDefinition());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {    [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def.getDefinition());  [BUGGY]    }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name),  def.getDefinition());	  return    def.getDefinition();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
