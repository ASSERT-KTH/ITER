bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  def;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {  [BUGGY]  return  def;  [BUGGY]  }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def;	return  def.node;  	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
2	[BUG]  [BUGGY]  return  def.getVar(name);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {  [BUGGY]  return  def.getVar(name);  [BUGGY]  }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getVar(name);	return  def.node;  	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
3	[BUG]  [BUGGY]  return  def.reachingDef;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {  [BUGGY]  return  def.reachingDef;  [BUGGY]  }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.reachingDef;	return  def.node;  	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
4	[BUG]  [BUGGY]  return  def.jsScope;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {  [BUGGY]  return  def.jsScope;  [BUGGY]  }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.jsScope;	return  def.node;  	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
5	[BUG]  [BUGGY]  return  def.getDefinition();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {  [BUGGY]  return  def.getDefinition();  [BUGGY]  }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinition();	return  def.node;  	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
6	[BUG]  [BUGGY]  return  def.getJoin();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError  [CONTEXT]  Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {  [BUGGY]  return  def.getJoin();  [BUGGY]  }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getJoin();	return  def.node;  	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
7	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]                AssertionFailedError  [CONTEXT]  Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {  [BUGGY]    [BUGGY]  }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	  	return  def.node;  	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
8	[BUG]  [BUGGY]  return  def.getDeclaration();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {  [BUGGY]  return  def.getDeclaration();  [BUGGY]  }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDeclaration();	return  def.node;  	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
9	[BUG]  [BUGGY]  return  def.getDefinitions();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {  [BUGGY]  return  def.getDefinitions();  [BUGGY]  }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions();	return  def.node;  	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
10	[BUG]  [BUGGY]  return  def.node  ==  null?  null  :  def.node;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {  [BUGGY]  return  def.node  ==  null?  null  :  def.node;  [BUGGY]  }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.node  ==  null?  null  :  def.node;	return  def.node;  	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
11	[BUG]  [BUGGY]  return  def.node  <  null?  null  :  def.node;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {  [BUGGY]  return  def.node  <  null?  null  :  def.node;  [BUGGY]  }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.node  <  null?  null  :  def.node;	return  def.node;  	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
12	[BUG]  [BUGGY]  return  def.node  <  node?  null  :  def.node;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {  [BUGGY]  return  def.node  <  node?  null  :  def.node;  [BUGGY]  }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.node  <  node?  null  :  def.node;	return  def.node;  	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
13	[BUG]  [BUGGY]  return  def.node  ==  null?  definition  :  def.node;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {  [BUGGY]  return  def.node  ==  null?  definition  :  def.node;  [BUGGY]  }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.node  ==  null?  definition  :  def.node;	return  def.node;  	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
