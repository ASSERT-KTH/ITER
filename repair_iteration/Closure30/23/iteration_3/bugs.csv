bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def,  n.getDefinition());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def,  n.getDefinition());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name),  def,  n.getDefinition());	  return    state.getIn().reachingDef.get(jsScope.getVar(name),    def.getDefinition());    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
2	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  n.getDefinition());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  n.getDefinition());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name),  n.getDefinition());	  return    state.getIn().reachingDef.get(jsScope.getVar(name),    def.getDefinition());    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
3	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  useNode.getDefinition());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  useNode.getDefinition());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name),  useNode.getDefinition());	  return    state.getIn().reachingDef.get(jsScope.getVar(name),    def.getDefinition());    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
4	[BUG]  [BUGGY]  return  def.getIn().reachingDef.get(jsScope.getVar(name),  state.getDefinition());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getIn().reachingDef.get(jsScope.getVar(name),  state.getDefinition());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getIn().reachingDef.get(jsScope.getVar(name),  state.getDefinition());	  return    state.getIn().reachingDef.get(jsScope.getVar(name),    def.getDefinition());    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
5	[BUG]  [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name),  useNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name),  useNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name),  useNode);	  Definition    def    =    state.getIn().reachingDef.get(jsScope.getVar(name));    return    def;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
6	[BUG]  [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name,  useNode));  return  def;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name,  useNode));  return  def;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name,  useNode));  return  def;	  Definition    def    =    state.getIn().reachingDef.get(jsScope.getVar(name));    return    def;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
7	[BUG]  [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name,  useNode));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name,  useNode));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name,  useNode));	  Definition    def    =    state.getIn().reachingDef.get(jsScope.getVar(name));    return    def;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
8	[BUG]  [BUGGY]  return  state.getIn().reachingDef.invoke(jsScope,  cfgNode,  useNode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.invoke(jsScope,  cfgNode,  useNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.invoke(jsScope,  cfgNode,  useNode);	  return    def.invoke(jsScope,    cfgNode,    useNode);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
9	[BUG]  [BUGGY]  return  def.invoke(jsScope,  name,  cfgNode,  useNode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.invoke(jsScope,  name,  cfgNode,  useNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.invoke(jsScope,  name,  cfgNode,  useNode);	  return    def.invoke(jsScope,    cfgNode,    useNode);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
10	[BUG]  [BUGGY]  return  jsScope.invoke(def,  cfgNode,  useNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  jsScope.invoke(def,  cfgNode,  useNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  jsScope.invoke(def,  cfgNode,  useNode);	  return    def.invoke(jsScope,    cfgNode,    useNode);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
11	[BUG]  [BUGGY]  return  cfgNode.invoke(jsScope,  def,  useNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  cfgNode.invoke(jsScope,  def,  useNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  cfgNode.invoke(jsScope,  def,  useNode);	  return    def.invoke(jsScope,    cfgNode,    useNode);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
12	[BUG]  [BUGGY]  return  def.invoke(jsScope,  aNode,  useNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.invoke(jsScope,  aNode,  useNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.invoke(jsScope,  aNode,  useNode);	  return    def.invoke(jsScope,    cfgNode,    useNode);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
13	[BUG]  [BUGGY]  return  state.getIn().reachingDef.invoke(jsScope,  cfgNode,  def);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.invoke(jsScope,  cfgNode,  def);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.invoke(jsScope,  cfgNode,  def);	  return    def.invoke(jsScope,    cfgNode,    useNode);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
14	[BUG]  [BUGGY]  return  jsScope.invoke(n,  cfgNode,  def);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  jsScope.invoke(n,  cfgNode,  def);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  jsScope.invoke(n,  cfgNode,  def);	  return    def.invoke(jsScope,    cfgNode,    useNode);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
15	[BUG]  [BUGGY]  return  def.clone();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.clone();  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.clone();	  return    def.cloneTree();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
16	[BUG]  [BUGGY]  return  state.getIn().reachingDef.cloneTree();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.cloneTree();  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.cloneTree();	  return    def.cloneTree();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
17	[BUG]  [BUGGY]  return  def.getVar(name).cloneTree();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getVar(name).cloneTree();  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getVar(name).cloneTree();	  return    def.cloneTree();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
18	[BUG]  [BUGGY]  return  def.cloneTree(jsScope);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.cloneTree(jsScope);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.cloneTree(jsScope);	  return    def.cloneTree();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
19	[BUG]  [BUGGY]  return  def.cloneDefinition();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.cloneDefinition();  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.cloneDefinition();	  return    def.cloneTree();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
20	[BUG]  [BUGGY]  return  jsScope.getScope();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  jsScope.getScope();  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  jsScope.getScope();	  return    def.getScope();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
21	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.getScope());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(def.getScope());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.getScope());	  return    def.getScope();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
22	[BUG]  [BUGGY]  return  def  ==  null  ||  def.node!=  null?  null  :  def.node;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def  ==  null  ||  def.node!=  null?  null  :  def.node;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def  ==  null  ||  def.node!=  null?  null  :  def.node;	  return    def!=    null?    null    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
23	[BUG]  [BUGGY]  return  def  >=  null?  null  :  def.node;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def  >=  null?  null  :  def.node;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def  >=  null?  null  :  def.node;	  return    def!=    null?    null    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
24	[BUG]  [BUGGY]  return  jsScope.getVar(name,  def);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  jsScope.getVar(name,  def);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  jsScope.getVar(name,  def);	  return    def.jsScope.getVar(name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
25	[BUG]  [BUGGY]  return  state.getIn().reachingDef.getVar(name,  jsScope);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.getVar(name,  jsScope);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.getVar(name,  jsScope);	  return    def.jsScope.getVar(name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
26	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  jsScope));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  jsScope));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name,  jsScope));	  return    def.jsScope.getVar(name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
27	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  jsScope);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  jsScope);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name),  jsScope);	  return    def.jsScope.getVar(name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
28	[BUG]  [BUGGY]  return  state.getIn().jsScope.getVar(name,  jsScope);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().jsScope.getVar(name,  jsScope);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().jsScope.getVar(name,  jsScope);	  return    def.jsScope.getVar(name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
29	[BUG]  [BUGGY]  return  def.jsScope.getVar(name,  jsScope).reachingDef;  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.jsScope.getVar(name,  jsScope).reachingDef;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.jsScope.getVar(name,  jsScope).reachingDef;	  return    def.jsScope.getVar(name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
30	[BUG]  [BUGGY]  return  def.getIn().reachingDef.get(state.getDefinition());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getIn().reachingDef.get(state.getDefinition());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getIn().reachingDef.get(state.getDefinition());	  return    state.getIn().reachingDef.get(def.getDefinition());    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
31	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  def.getDefinition()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  def.getDefinition()));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name,  def.getDefinition()));	  return    state.getIn().reachingDef.get(def.getDefinition());    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
32	[BUG]  [BUGGY]  def  =  state.getIn().reachingDef.get(jsScope.getVar(name),  useNode);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  def  =  state.getIn().reachingDef.get(jsScope.getVar(name),  useNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	def  =  state.getIn().reachingDef.get(jsScope.getVar(name),  useNode);	  def    =    state.getIn().reachingDef.get(jsScope.getVar(name));    return    def;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
33	[BUG]  [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name),  n);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name),  n);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name),  n);	  Definition    def    =    state.getIn().reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
34	[BUG]  [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name),  cfgNode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name),  cfgNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name),  cfgNode);	  Definition    def    =    state.getIn().reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
35	[BUG]  [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name)+  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name)+  1);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name)+  1);	  Definition    def    =    state.getIn().reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
36	[BUG]  [BUGGY]  Definition  def  =  jsScope.getIn().reachingDef.get(state.getVar(name));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  Definition  def  =  jsScope.getIn().reachingDef.get(state.getVar(name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	Definition  def  =  jsScope.getIn().reachingDef.get(state.getVar(name));	  Definition    def    =    state.getIn().reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
37	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def.getDefinitions());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def.getDefinitions());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name),  def.getDefinitions());	  return    state.getIn().reachingDef.get(def.getDefinitions());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
38	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name).getDefinitions());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name).getDefinitions());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name).getDefinitions());	  return    state.getIn().reachingDef.get(def.getDefinitions());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
39	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.getDefinitions(),  n);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(def.getDefinitions(),  n);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.getDefinitions(),  n);	  return    state.getIn().reachingDef.get(def.getDefinitions());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
40	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.getDefinitions(),  jsScope);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(def.getDefinitions(),  jsScope);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.getDefinitions(),  jsScope);	  return    state.getIn().reachingDef.get(def.getDefinitions());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
41	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.getDefinitions(),  useNode);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(def.getDefinitions(),  useNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.getDefinitions(),  useNode);	  return    state.getIn().reachingDef.get(def.getDefinitions());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
42	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getLocalName(name));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getLocalName(name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getLocalName(name));	  return    state.getIn().reachingDef.get(def.getLocalName());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
43	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def.getLocalName());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def.getLocalName());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name),  def.getLocalName());	  return    state.getIn().reachingDef.get(def.getLocalName());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
44	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name).getLocalName());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name).getLocalName());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name).getLocalName());	  return    state.getIn().reachingDef.get(def.getLocalName());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
45	[BUG]  [BUGGY]  return  def.getIn().reachingDef.get(state.getLocalName());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getIn().reachingDef.get(state.getLocalName());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getIn().reachingDef.get(state.getLocalName());	  return    state.getIn().reachingDef.get(def.getLocalName());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
46	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getNameNode(name));  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getNameNode(name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getNameNode(name));	  return    state.getIn().reachingDef.get(def.getLocalName());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
47	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def,  def);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def,  def);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name),  def,  def);	  return    state.getIn().reachingDef.get(jsScope.getVar(name),    def);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
48	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def,  n);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def,  n);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name),  def,  n);	  return    state.getIn().reachingDef.get(jsScope.getVar(name),    def);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
49	[BUG]  [BUGGY]  return  jsScope.getIn().reachingDef.get(jsScope.getVar(name),  def);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  jsScope.getIn().reachingDef.get(jsScope.getVar(name),  def);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  jsScope.getIn().reachingDef.get(jsScope.getVar(name),  def);	  return    state.getIn().reachingDef.get(jsScope.getVar(name),    def);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
50	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def,  cfgNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def,  cfgNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name),  def,  cfgNode);	  return    state.getIn().reachingDef.get(jsScope.getVar(name),    def);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
51	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def,  jsScope);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(def,  jsScope);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def,  jsScope);	  return    state.getIn().reachingDef.get(def);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
52	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  def);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  def);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name,  def);	  return    state.getIn().reachingDef.get(jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
53	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  useNode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  useNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name,  useNode);	  return    state.getIn().reachingDef.get(jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
54	[BUG]  [BUGGY]  return  jsScope.getIn().reachingDef.get(state.getVar(name));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  jsScope.getIn().reachingDef.get(state.getVar(name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  jsScope.getIn().reachingDef.get(state.getVar(name));	  return    state.getIn().reachingDef.get(jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
55	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.getReachingDef());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(def.getReachingDef());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.getReachingDef());	  return    def.getReachingDef();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
56	[BUG]  [BUGGY]  return  def.getDefinitions().toArray(new  Definition[def.size()  +  1]);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getDefinitions().toArray(new  Definition[def.size()  +  1]);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().toArray(new  Definition[def.size()  +  1]);	  return    def.getDefinitions().toArray(new    Definition[def.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
57	[BUG]  [BUGGY]  return  def.getDefinitions().toArray(new  Definition[def.size()  -  1]);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getDefinitions().toArray(new  Definition[def.size()  -  1]);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().toArray(new  Definition[def.size()  -  1]);	  return    def.getDefinitions().toArray(new    Definition[def.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
58	[BUG]  [BUGGY]  return  state.getIn().reachingDef.toArray(new  Definition[def.size()  ]);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.toArray(new  Definition[def.size()  ]);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.toArray(new  Definition[def.size()  ]);	  return    def.getDefinitions().toArray(new    Definition[def.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
59	[BUG]  [BUGGY]  return  def.getDefinitions().toArray(new  Definition[def.size()  ],  state.getIn().reachingDef);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getDefinitions().toArray(new  Definition[def.size()  ],  state.getIn().reachingDef);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().toArray(new  Definition[def.size()  ],  state.getIn().reachingDef);	  return    def.getDefinitions().toArray(new    Definition[def.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
60	[BUG]  [BUGGY]  return  state.getDefinitions().toArray(new  Definition[def.size()  ]);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getDefinitions().toArray(new  Definition[def.size()  ]);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getDefinitions().toArray(new  Definition[def.size()  ]);	  return    def.getDefinitions().toArray(new    Definition[def.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
61	[BUG]  [BUGGY]  return  n.getDefinitions().toArray(new  Definition[def.size()  ]);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  n.getDefinitions().toArray(new  Definition[def.size()  ]);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  n.getDefinitions().toArray(new  Definition[def.size()  ]);	  return    def.getDefinitions().toArray(new    Definition[def.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
62	[BUG]  [BUGGY]  return  def.getIn().reachingDef.get(state.getIn().reachingDef.get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getIn().reachingDef.get(state.getIn().reachingDef.get(jsScope.getVar(name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getIn().reachingDef.get(state.getIn().reachingDef.get(jsScope.getVar(name));	  return    state.getIn().reachingDef.get(def.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
63	[BUG]  [BUGGY]  return  def.reachingDef.get(state.getIn().reachingDef.get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.reachingDef.get(state.getIn().reachingDef.get(jsScope.getVar(name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.reachingDef.get(state.getIn().reachingDef.get(jsScope.getVar(name));	  return    state.getIn().reachingDef.get(def.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
64	[BUG]  [BUGGY]  return  def.getIn().reachingDef.get(state.getIn().jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getIn().reachingDef.get(state.getIn().jsScope.getVar(name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getIn().reachingDef.get(state.getIn().jsScope.getVar(name));	  return    state.getIn().reachingDef.get(def.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
65	[BUG]  [BUGGY]  return  jsScope.getIn().reachingDef.get(def.getVar(name));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  jsScope.getIn().reachingDef.get(def.getVar(name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  jsScope.getIn().reachingDef.get(def.getVar(name));	  return    state.getIn().reachingDef.get(def.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
66	[BUG]  [BUGGY]  return  def.getIn().reachingDef.get(def.getVar(name));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getIn().reachingDef.get(def.getVar(name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getIn().reachingDef.get(def.getVar(name));	  return    state.getIn().reachingDef.get(def.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
67	[BUG]  [BUGGY]  return  n.getIn().reachingDef.get(def.getVar(name));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  n.getIn().reachingDef.get(def.getVar(name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  n.getIn().reachingDef.get(def.getVar(name));	  return    state.getIn().reachingDef.get(def.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
68	[BUG]  [BUGGY]  return  def.reachingDef.get(jsScope.getVar(name),  state.getIn());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.reachingDef.get(jsScope.getVar(name),  state.getIn());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.reachingDef.get(jsScope.getVar(name),  state.getIn());	  return    def.reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
69	[BUG]  [BUGGY]  return  def.reachingDef.get(jsScope.getVar(name),  state.getIn().reachingDef);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.reachingDef.get(jsScope.getVar(name),  state.getIn().reachingDef);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.reachingDef.get(jsScope.getVar(name),  state.getIn().reachingDef);	  return    def.reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
70	[BUG]  [BUGGY]  return  def.reachingDef.get(jsScope.getVar(name,  useNode));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.reachingDef.get(jsScope.getVar(name,  useNode));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.reachingDef.get(jsScope.getVar(name,  useNode));	  return    def.reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
71	[BUG]  [BUGGY]  return  def.reachingDef.get(jsScope.getVar(name),  n);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.reachingDef.get(jsScope.getVar(name),  n);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.reachingDef.get(jsScope.getVar(name),  n);	  return    def.reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
72	[BUG]  [BUGGY]  return  jsScope.getReachingDef().get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  jsScope.getReachingDef().get(jsScope.getVar(name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  jsScope.getReachingDef().get(jsScope.getVar(name));	  return    def.reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
73	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def.getDeclaration());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def.getDeclaration());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name),  def.getDeclaration());	  return    state.getIn().reachingDef.get(jsScope.getVar(name).getDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
74	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name).getDeclaration(),  def);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name).getDeclaration(),  def);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name).getDeclaration(),  def);	  return    state.getIn().reachingDef.get(jsScope.getVar(name).getDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
75	[BUG]  [BUGGY]  return  jsScope.getIn().reachingDef.get(jsScope.getVar(name).getDeclaration());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  jsScope.getIn().reachingDef.get(jsScope.getVar(name).getDeclaration());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  jsScope.getIn().reachingDef.get(jsScope.getVar(name).getDeclaration());	  return    state.getIn().reachingDef.get(jsScope.getVar(name).getDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
76	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def).getDeclaration());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def).getDeclaration());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name),  def).getDeclaration());	  return    state.getIn().reachingDef.get(jsScope.getVar(name).getDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
77	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  useNode).getDeclaration());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  useNode).getDeclaration());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name,  useNode).getDeclaration());	  return    state.getIn().reachingDef.get(jsScope.getVar(name).getDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
78	[BUG]  [BUGGY]  def  =  state.getIn().reachingDef.get(jsScope.getVar(name),  n);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  def  =  state.getIn().reachingDef.get(jsScope.getVar(name),  n);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	def  =  state.getIn().reachingDef.get(jsScope.getVar(name),  n);	  def    =    state.getIn().reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
79	[BUG]  [BUGGY]  def  =  state.getIn().reachingDef.get(jsScope.getVar(name,  useNode));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  def  =  state.getIn().reachingDef.get(jsScope.getVar(name,  useNode));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	def  =  state.getIn().reachingDef.get(jsScope.getVar(name,  useNode));	  def    =    state.getIn().reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
80	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name)+  1);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name)+  1);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name)+  1);	  return    state.getIn().reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
81	[BUG]  [BUGGY]  return  jsScope.getIn().reachingDef.get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  jsScope.getIn().reachingDef.get(jsScope.getVar(name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  jsScope.getIn().reachingDef.get(jsScope.getVar(name));	  return    state.getIn().reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
82	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  n));  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  n));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name,  n));	  return    state.getIn().reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
83	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(name.toString());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(name.toString());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(name.toString());	  return    state.getIn().reachingDef.get(def.toString());    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
84	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def.toString());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def.toString());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name),  def.toString());	  return    state.getIn().reachingDef.get(def.toString());    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
85	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.toString(),  jsScope);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(def.toString(),  jsScope);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.toString(),  jsScope);	  return    state.getIn().reachingDef.get(def.toString());    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
86	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.toString(),  n);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(def.toString(),  n);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.toString(),  n);	  return    state.getIn().reachingDef.get(def.toString());    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
87	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.getReachingDefinition());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(def.getReachingDefinition());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.getReachingDefinition());	  return    def.getReachingDefinition();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
88	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  useNode),  def);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  useNode),  def);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name,  useNode),  def);	  return    state.getIn().reachingDef.get(jsScope.getVar(name,    useNode));    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
89	[BUG]  [BUGGY]  return  jsScope.getIn().reachingDef.get(jsScope.getVar(name,  def));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  jsScope.getIn().reachingDef.get(jsScope.getVar(name,  def));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  jsScope.getIn().reachingDef.get(jsScope.getVar(name,  def));	  return    state.getIn().reachingDef.get(jsScope.getVar(name,    useNode));    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
90	[BUG]  [BUGGY]  return  jsScope.getIn().reachingDef.get(jsScope.getVar(name,  useNode));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  jsScope.getIn().reachingDef.get(jsScope.getVar(name,  useNode));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  jsScope.getIn().reachingDef.get(jsScope.getVar(name,  useNode));	  return    state.getIn().reachingDef.get(jsScope.getVar(name,    useNode));    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
91	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  useNode)+  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  useNode)+  1);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name,  useNode)+  1);	  return    state.getIn().reachingDef.get(jsScope.getVar(name,    useNode));    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
92	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getDeclaration());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getDeclaration());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getDeclaration());	  return    state.getIn().reachingDef.get(def.getDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
93	[BUG]  [BUGGY]  return  def.getIn().reachingDef.get(state.getDeclaration());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getIn().reachingDef.get(state.getDeclaration());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getIn().reachingDef.get(state.getDeclaration());	  return    state.getIn().reachingDef.get(def.getDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
94	[BUG]  [BUGGY]  return  declaration  ==  null?  definition  :  declaration.node;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  declaration  ==  null?  definition  :  declaration.node;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  declaration  ==  null?  definition  :  declaration.node;	  return    declaration    ==    null?    definition    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
95	[BUG]  [BUGGY]  return  definition  ==  null?  definition  :  def.node;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  definition  ==  null?  definition  :  def.node;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  definition  ==  null?  definition  :  def.node;	  return    declaration    ==    null?    definition    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
96	[BUG]  [BUGGY]  return  def  ==  null?  declaration  :  def.node;  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def  ==  null?  declaration  :  def.node;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def  ==  null?  declaration  :  def.node;	  return    declaration    ==    null?    definition    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
97	[BUG]  [BUGGY]  return  definition!=  null?  def.node  :  definition;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  definition!=  null?  def.node  :  definition;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  definition!=  null?  def.node  :  definition;	  return    def.node!=    null?    definition    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
98	[BUG]  [BUGGY]  return  node  ==  def?  null  :  def.node;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  node  ==  def?  null  :  def.node;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  node  ==  def?  null  :  def.node;	  return    def.node    >=    node?    null    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
99	[BUG]  [BUGGY]  return  node  ==  def.node?  null  :  def.node;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  node  ==  def.node?  null  :  def.node;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  node  ==  def.node?  null  :  def.node;	  return    def.node    ==    node?    null    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
100	[BUG]  [BUGGY]  return  def.node  ==  n?  null  :  def.node;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.node  ==  n?  null  :  def.node;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.node  ==  n?  null  :  def.node;	  return    def.node    ==    node?    null    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
101	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getName(name));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getName(name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getName(name));	  return    state.getIn().reachingDef.get(def.getName());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
102	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def.getName());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def.getName());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name),  def.getName());	  return    state.getIn().reachingDef.get(def.getName());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
103	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name).getName());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name).getName());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name).getName());	  return    state.getIn().reachingDef.get(def.getName());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
104	[BUG]  [BUGGY]  return  def.getIn().reachingDef.get(state.getName());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getIn().reachingDef.get(state.getName());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getIn().reachingDef.get(state.getName());	  return    state.getIn().reachingDef.get(def.getName());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
105	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getLocalVar(name));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getLocalVar(name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getLocalVar(name));	  return    state.getIn().reachingDef.get(name);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
106	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(JsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(JsScope.getVar(name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(JsScope.getVar(name));	  return    state.getIn().reachingDef.get(name);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
107	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def,  useNode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def,  useNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name),  def,  useNode);	  return    state.getIn().reachingDef.get(jsScope.getVar(name),    useNode);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
108	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  def),  useNode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  def),  useNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name,  def),  useNode);	  return    state.getIn().reachingDef.get(jsScope.getVar(name),    useNode);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
109	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  n);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  n);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name),  n);	  return    state.getIn().reachingDef.get(jsScope.getVar(name),    useNode);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
110	[BUG]  [BUGGY]  return  state.getDefinitions().iterator().next();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getDefinitions().iterator().next();  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getDefinitions().iterator().next();	  return    def.getDefinitions().iterator().next();    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
111	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.getDefinitions().iterator().next();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(def.getDefinitions().iterator().next();  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.getDefinitions().iterator().next();	  return    def.getDefinitions().iterator().next();    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
112	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.getDefinitions().iterator().next());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(def.getDefinitions().iterator().next());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.getDefinitions().iterator().next());	  return    def.getDefinitions().iterator().next();    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
113	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.getDefinitions()).iterator().next();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(def.getDefinitions()).iterator().next();  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.getDefinitions()).iterator().next();	  return    def.getDefinitions().iterator().next();    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
114	[BUG]  [BUGGY]  return  n.getDefinitions().iterator().next();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  n.getDefinitions().iterator().next();  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  n.getDefinitions().iterator().next();	  return    def.getDefinitions().iterator().next();    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
115	[BUG]  [BUGGY]  return  def.getDefinitions().entrySet().iterator().next();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getDefinitions().entrySet().iterator().next();  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().entrySet().iterator().next();	  return    def.getDefinitions().iterator().next();    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
116	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.getDefinitions().get(name);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(def.getDefinitions().get(name);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.getDefinitions().get(name);	  return    def.getDefinitions().get(name);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
117	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.getDefinitions().get(name));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(def.getDefinitions().get(name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.getDefinitions().get(name));	  return    def.getDefinitions().get(name);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
118	[BUG]  [BUGGY]  return  def.getIn().reachingDef.get(desc.getVar(name));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getIn().reachingDef.get(desc.getVar(name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getIn().reachingDef.get(desc.getVar(name));	  return    state.getIn().reachingDef.get(desc.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
119	[BUG]  [BUGGY]  return  def.getIn().reachingDef.get(state.getIn().reachingDef.get(desc.getVar(name));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getIn().reachingDef.get(state.getIn().reachingDef.get(desc.getVar(name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getIn().reachingDef.get(state.getIn().reachingDef.get(desc.getVar(name));	  return    state.getIn().reachingDef.get(desc.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
120	[BUG]  [BUGGY]  return  jsScope.getIn().reachingDef.get(desc.getVar(name));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  jsScope.getIn().reachingDef.get(desc.getVar(name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  jsScope.getIn().reachingDef.get(desc.getVar(name));	  return    state.getIn().reachingDef.get(desc.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
121	[BUG]  [BUGGY]  return  def.reachingDef.get(desc.getVar(name));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.reachingDef.get(desc.getVar(name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.reachingDef.get(desc.getVar(name));	  return    state.getIn().reachingDef.get(desc.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
122	[BUG]  [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope,  name);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope,  name);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	Definition  def  =  state.getIn().reachingDef.get(jsScope,  name);	  Definition    def    =    state.getIn().reachingDef.get(name);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
123	[BUG]  [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getLocalVar(name));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getLocalVar(name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	Definition  def  =  state.getIn().reachingDef.get(jsScope.getLocalVar(name));	  Definition    def    =    state.getIn().reachingDef.get(name);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
124	[BUG]  [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getName(name));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getName(name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	Definition  def  =  state.getIn().reachingDef.get(jsScope.getName(name));	  Definition    def    =    state.getIn().reachingDef.get(name);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
125	[BUG]  [BUGGY]  return  def.getDefinitions().toArray(new  Definition[def.getDefinitions().size()  +  1]);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getDefinitions().toArray(new  Definition[def.getDefinitions().size()  +  1]);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().toArray(new  Definition[def.getDefinitions().size()  +  1]);	  return    def.getDefinitions().toArray(new    Definition[def.getDefinitions().size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
126	[BUG]  [BUGGY]  return  def.getDefinitions().toArray(new  Definition[def.getDefinitions().size()  -  1]);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getDefinitions().toArray(new  Definition[def.getDefinitions().size()  -  1]);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().toArray(new  Definition[def.getDefinitions().size()  -  1]);	  return    def.getDefinitions().toArray(new    Definition[def.getDefinitions().size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
127	[BUG]  [BUGGY]  return  state.getIn().reachingDef.toArray(new  Definition[def.getDefinitions().size()  ]);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.toArray(new  Definition[def.getDefinitions().size()  ]);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.toArray(new  Definition[def.getDefinitions().size()  ]);	  return    def.getDefinitions().toArray(new    Definition[def.getDefinitions().size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
128	[BUG]  [BUGGY]  return  def.getDefinitions().toArray(new  Definition[def.getDefinitions().size()  ],  state.getIn().reachingDef);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getDefinitions().toArray(new  Definition[def.getDefinitions().size()  ],  state.getIn().reachingDef);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().toArray(new  Definition[def.getDefinitions().size()  ],  state.getIn().reachingDef);	  return    def.getDefinitions().toArray(new    Definition[def.getDefinitions().size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
129	[BUG]  [BUGGY]  return  def.getDefinitions().toArray(new  Definition[def.getDefinitions().size()  +  2]);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getDefinitions().toArray(new  Definition[def.getDefinitions().size()  +  2]);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().toArray(new  Definition[def.getDefinitions().size()  +  2]);	  return    def.getDefinitions().toArray(new    Definition[def.getDefinitions().size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
130	[BUG]  [BUGGY]  return  definition.getDefinitions().toArray(new  Definition[def.getDefinitions().size()  ]);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  definition.getDefinitions().toArray(new  Definition[def.getDefinitions().size()  ]);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  definition.getDefinitions().toArray(new  Definition[def.getDefinitions().size()  ]);	  return    def.getDefinitions().toArray(new    Definition[def.getDefinitions().size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
131	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def.getDefinitions();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def.getDefinitions();  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name),  def.getDefinitions();	  return    state.getIn().reachingDef.get(jsScope.getVar(name).getDefinitions();    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
132	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def).getDefinitions();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def).getDefinitions();  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name),  def).getDefinitions();	  return    state.getIn().reachingDef.get(jsScope.getVar(name).getDefinitions();    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
133	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name).getDefinitions(),  def);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name).getDefinitions(),  def);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name).getDefinitions(),  def);	  return    state.getIn().reachingDef.get(jsScope.getVar(name).getDefinitions();    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
134	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name).getDefinitions(),  def;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name).getDefinitions(),  def;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name).getDefinitions(),  def;	  return    state.getIn().reachingDef.get(jsScope.getVar(name).getDefinitions();    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
135	[BUG]  [BUGGY]  return  jsScope.getIn().reachingDef.get(jsScope.getVar(name).getDefinitions();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  jsScope.getIn().reachingDef.get(jsScope.getVar(name).getDefinitions();  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  jsScope.getIn().reachingDef.get(jsScope.getVar(name).getDefinitions();	  return    state.getIn().reachingDef.get(jsScope.getVar(name).getDefinitions();    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
136	[BUG]  [BUGGY]  return  def.getVar(name,  state.getIn().reachingDef.get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getVar(name,  state.getIn().reachingDef.get(jsScope.getVar(name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getVar(name,  state.getIn().reachingDef.get(jsScope.getVar(name));	  return    def.getVar(name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
137	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name).toString(),  def);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name).toString(),  def);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name).toString(),  def);	  return    state.getIn().reachingDef.get(jsScope.getVar(name).toString());    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
138	[BUG]  [BUGGY]  return  jsScope.getIn().reachingDef.get(jsScope.getVar(name).toString());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  jsScope.getIn().reachingDef.get(jsScope.getVar(name).toString());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  jsScope.getIn().reachingDef.get(jsScope.getVar(name).toString());	  return    state.getIn().reachingDef.get(jsScope.getVar(name).toString());    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
139	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  useNode).toString());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  useNode).toString());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name,  useNode).toString());	  return    state.getIn().reachingDef.get(jsScope.getVar(name).toString());    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
140	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name)).toString();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name)).toString();  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name)).toString();	  return    state.getIn().reachingDef.get(jsScope.getVar(name).toString());    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
141	[BUG]  [BUGGY]  return  def.reachingDef.get(name);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.reachingDef.get(name);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.reachingDef.get(name);	  return    def.reachingDef.getJoin();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
142	[BUG]  [BUGGY]  return  state.getIn().reachingDef.getJoin();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.getJoin();  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.getJoin();	  return    def.reachingDef.getJoin();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
143	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getJoin(name));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getJoin(name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getJoin(name));	  return    state.getIn().reachingDef.get(def.getJoin());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
144	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def.getJoin());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def.getJoin());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name),  def.getJoin());	  return    state.getIn().reachingDef.get(def.getJoin());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
145	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name).getJoin());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name).getJoin());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name).getJoin());	  return    state.getIn().reachingDef.get(def.getJoin());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
146	[BUG]  [BUGGY]  return  def.getIn().reachingDef.get(state.getJoin());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getIn().reachingDef.get(state.getJoin());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getIn().reachingDef.get(state.getJoin());	  return    state.getIn().reachingDef.get(def.getJoin());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
147	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.getJoin(),  n);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(def.getJoin(),  n);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.getJoin(),  n);	  return    state.getIn().reachingDef.get(def.getJoin());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
148	[BUG]  [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def  ==  null)  {  return  def;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def  ==  null)  {  return  def;  }  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def  ==  null)  {  return  def;  }	  def    =    state.getIn().reachingDef.get(jsScope.getVar(name));    if(def    ==    null)    {    return    def;    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
149	[BUG]  [BUGGY]  def  =  state.getIn().reachingDef.get(jsScope.getVar(name),  useNode);  if(def  ==  null)  {  return  def;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  def  =  state.getIn().reachingDef.get(jsScope.getVar(name),  useNode);  if(def  ==  null)  {  return  def;  }  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	def  =  state.getIn().reachingDef.get(jsScope.getVar(name),  useNode);  if(def  ==  null)  {  return  def;  }	  def    =    state.getIn().reachingDef.get(jsScope.getVar(name));    if(def    ==    null)    {    return    def;    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
150	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name).getDefinition(),  def);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name).getDefinition(),  def);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name).getDefinition(),  def);	  return    state.getIn().reachingDef.get(jsScope.getVar(name).getDefinition());    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
151	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def).getDefinition();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def).getDefinition();  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name),  def).getDefinition();	  return    state.getIn().reachingDef.get(jsScope.getVar(name).getDefinition());    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
152	[BUG]  [BUGGY]  return  jsScope.getIn().reachingDef.get(jsScope.getVar(name).getDefinition());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  jsScope.getIn().reachingDef.get(jsScope.getVar(name).getDefinition());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  jsScope.getIn().reachingDef.get(jsScope.getVar(name).getDefinition());	  return    state.getIn().reachingDef.get(jsScope.getVar(name).getDefinition());    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
153	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name)).getDefinition();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name)).getDefinition();  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name)).getDefinition();	  return    state.getIn().reachingDef.get(jsScope.getVar(name).getDefinition());    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
154	[BUG]  [BUGGY]  return  def.initializingDef  &&  state.getIn().reachingDef.get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.initializingDef  &&  state.getIn().reachingDef.get(jsScope.getVar(name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.initializingDef  &&  state.getIn().reachingDef.get(jsScope.getVar(name));	  return    def.initializingDef;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
155	[BUG]  [BUGGY]  return  def.initializingDef  &&  state.getIn().reachingDef.get(name);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.initializingDef  &&  state.getIn().reachingDef.get(name);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.initializingDef  &&  state.getIn().reachingDef.get(name);	  return    def.initializingDef;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
156	[BUG]  [BUGGY]  return  def.initializingDef  +  state.getIn().reachingDef.get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.initializingDef  +  state.getIn().reachingDef.get(jsScope.getVar(name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.initializingDef  +  state.getIn().reachingDef.get(jsScope.getVar(name));	  return    def.initializingDef;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
157	[BUG]  [BUGGY]  return  def.initializingDef,  state.getIn().reachingDef;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.initializingDef,  state.getIn().reachingDef;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.initializingDef,  state.getIn().reachingDef;	  return    def.initializingDef;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
158	[BUG]  [BUGGY]  return  def.initializingDef  +  state.getIn().reachingDef.get(name);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.initializingDef  +  state.getIn().reachingDef.get(name);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.initializingDef  +  state.getIn().reachingDef.get(name);	  return    def.initializingDef;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
159	[BUG]  [BUGGY]  return  def.initializingDef  &&  state.getIn().reachingDef.contains(name);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.initializingDef  &&  state.getIn().reachingDef.contains(name);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.initializingDef  &&  state.getIn().reachingDef.contains(name);	  return    def.initializingDef;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
160	[BUG]  [BUGGY]  return  def  ==  null?  null  :  def.reachingDef;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def  ==  null?  null  :  def.reachingDef;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def  ==  null?  null  :  def.reachingDef;	  return    def    ==    null?    null    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
161	[BUG]  [BUGGY]  return  state.getIn().reachingDef.invoke(jsScope,  name);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.invoke(jsScope,  name);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.invoke(jsScope,  name);	  return    def.invoke(jsScope,    name);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
162	[BUG]  [BUGGY]  return  def.invoke(jsScope,  useNode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.invoke(jsScope,  useNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.invoke(jsScope,  useNode);	  return    def.invoke(jsScope,    name);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
163	[BUG]  [BUGGY]  return  def.invoke(jsScope,  name,  state);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.invoke(jsScope,  name,  state);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.invoke(jsScope,  name,  state);	  return    def.invoke(jsScope,    name);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
164	[BUG]  [BUGGY]  return  jsScope.invoke(def,  name);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  jsScope.invoke(def,  name);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  jsScope.invoke(def,  name);	  return    def.invoke(jsScope,    name);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
165	[BUG]  [BUGGY]  return  state.invoke(jsScope,  name);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.invoke(jsScope,  name);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.invoke(jsScope,  name);	  return    def.invoke(jsScope,    name);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
166	[BUG]  [BUGGY]  return  def.invoke(jsScope,  name,  cfgNode);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.invoke(jsScope,  name,  cfgNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.invoke(jsScope,  name,  cfgNode);	  return    def.invoke(jsScope,    name);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
167	[BUG]  [BUGGY]  return  def.getDefinitions().jsScope.getVar(name);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getDefinitions().jsScope.getVar(name);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().jsScope.getVar(name);	  return    def.getDefinitions().jsScope;    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
168	[BUG]  [BUGGY]  return  jsScope.getDefinitions().jsScope;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  jsScope.getDefinitions().jsScope;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  jsScope.getDefinitions().jsScope;	  return    def.getDefinitions().jsScope;    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
169	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.getDefinitions().jsScope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(def.getDefinitions().jsScope);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.getDefinitions().jsScope);	  return    def.getDefinitions().jsScope;    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
170	[BUG]  [BUGGY]  return  def.getDefinitions().jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getDefinitions().jsScope.getVar(name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().jsScope.getVar(name));	  return    def.getDefinitions().jsScope;    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
171	[BUG]  [BUGGY]  return  def.getDefinitions().removingDef;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getDefinitions().removingDef;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().removingDef;	  return    def.getDefinitions().reachingDef;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
172	[BUG]  [BUGGY]  return  state.getDefinitions().reachingDef;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getDefinitions().reachingDef;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getDefinitions().reachingDef;	  return    def.getDefinitions().reachingDef;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
173	[BUG]  [BUGGY]  return  n.getDefinitions().reachingDef;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  n.getDefinitions().reachingDef;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  n.getDefinitions().reachingDef;	  return    def.getDefinitions().reachingDef;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
174	[BUG]  [BUGGY]  return  def.getDefinitions().definitionDef;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getDefinitions().definitionDef;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().definitionDef;	  return    def.getDefinitions().reachingDef;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
175	[BUG]  [BUGGY]  return  def.getDefinitions().missingDef;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getDefinitions().missingDef;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().missingDef;	  return    def.getDefinitions().reachingDef;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
176	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.getFunction());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(def.getFunction());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.getFunction());	  return    def.getFunction();    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
177	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.getString());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(def.getString());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.getString());	  return    def.getFunction();    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
178	[BUG]  [BUGGY]  return  jsScope.getIn().reachingDef.get(def.jsScope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  jsScope.getIn().reachingDef.get(def.jsScope);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  jsScope.getIn().reachingDef.get(def.jsScope);	  return    state.getIn().reachingDef.get(def.jsScope);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
179	[BUG]  [BUGGY]  return  def.getIn().reachingDef.get(state.jsScope);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getIn().reachingDef.get(state.jsScope);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getIn().reachingDef.get(state.jsScope);	  return    state.getIn().reachingDef.get(def.jsScope);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
180	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name).jsScope);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name).jsScope);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name).jsScope);	  return    state.getIn().reachingDef.get(def.jsScope);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
181	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope,  def.jsScope);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope,  def.jsScope);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope,  def.jsScope);	  return    state.getIn().reachingDef.get(def.jsScope);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
182	[BUG]  [BUGGY]  return  State.getIn().reachingDef.get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  State.getIn().reachingDef.get(jsScope.getVar(name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  State.getIn().reachingDef.get(jsScope.getVar(name));	  return    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
183	[BUG]  [BUGGY]  return  node!=  def?  null  :  def.node;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  node!=  def?  null  :  def.node;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  node!=  def?  null  :  def.node;	  return    def.node!=    node?    null    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
184	[BUG]  [BUGGY]  return  def.node  ==  null  &&  def.node  ==  null?  null  :  def.node;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.node  ==  null  &&  def.node  ==  null?  null  :  def.node;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.node  ==  null  &&  def.node  ==  null?  null  :  def.node;	  return    def.node    ==    null    ||    def.node    ==    null?    null    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
185	[BUG]  [BUGGY]  return  def.node  ==  null  ||  def.node!=  null?  null  :  def.node;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.node  ==  null  ||  def.node!=  null?  null  :  def.node;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.node  ==  null  ||  def.node!=  null?  null  :  def.node;	  return    def.node    ==    null    ||    def.node    ==    null?    null    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
186	[BUG]  [BUGGY]  return  def.node!=  null  ||  def.node  ==  null?  null  :  def.node;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.node!=  null  ||  def.node  ==  null?  null  :  def.node;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.node!=  null  ||  def.node  ==  null?  null  :  def.node;	  return    def.node    ==    null    ||    def.node    ==    null?    null    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
187	[BUG]  [BUGGY]  return  def  ==  null  ||  def.node  ==  null?  null  :  def.node;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def  ==  null  ||  def.node  ==  null?  null  :  def.node;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def  ==  null  ||  def.node  ==  null?  null  :  def.node;	  return    def.node    ==    null    ||    def.node    ==    null?    null    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
188	[BUG]  [BUGGY]  return  n.invoke(jsScope,  def,  useNode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  n.invoke(jsScope,  def,  useNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  n.invoke(jsScope,  def,  useNode);	  return    def.invoke(jsScope,    n,    useNode);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
189	[BUG]  [BUGGY]  return  def.invoke(jsScope,  name,  useNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.invoke(jsScope,  name,  useNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.invoke(jsScope,  name,  useNode);	  return    def.invoke(jsScope,    n,    useNode);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
190	[BUG]  [BUGGY]  return  state.getIn().reachingDef.invoke(jsScope,  name,  useNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.invoke(jsScope,  name,  useNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.invoke(jsScope,  name,  useNode);	  return    def.invoke(jsScope,    n,    useNode);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
191	[BUG]  [BUGGY]  return  def.invoke(jsScope,  name,  n);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.invoke(jsScope,  name,  n);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.invoke(jsScope,  name,  n);	  return    def.invoke(jsScope,    n,    useNode);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
192	[BUG]  [BUGGY]  return  n.invoke(jsScope,  name,  useNode);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  n.invoke(jsScope,  name,  useNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  n.invoke(jsScope,  name,  useNode);	  return    def.invoke(jsScope,    n,    useNode);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
193	[BUG]  [BUGGY]  return  state.getIn().reachingDef.invoke(jsScope,  n,  useNode);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.invoke(jsScope,  n,  useNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.invoke(jsScope,  n,  useNode);	  return    def.invoke(jsScope,    n,    useNode);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
194	[BUG]  [BUGGY]  return  state.getIn().reachingDef.invoke(jsScope,  n,  def);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.invoke(jsScope,  n,  def);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.invoke(jsScope,  n,  def);	  return    def.invoke(jsScope,    n,    useNode);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
195	[BUG]  [BUGGY]  return  def  ==  null?  def.node  :  definition;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def  ==  null?  def.node  :  definition;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def  ==  null?  def.node  :  definition;	  return    definition    ==    null?    def.node    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
196	[BUG]  [BUGGY]  return  def!=  null?  def.node  :  definition;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def!=  null?  def.node  :  definition;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def!=  null?  def.node  :  definition;	  return    definition    ==    null?    def.node    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
197	[BUG]  [BUGGY]  return  def.node  ==  null?  def.node  :  definition;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.node  ==  null?  def.node  :  definition;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.node  ==  null?  def.node  :  definition;	  return    definition    ==    null?    def.node    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
198	[BUG]  [BUGGY]  return  definition  ==  null?  def.node  :  Definition.newInstance();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  definition  ==  null?  def.node  :  Definition.newInstance();  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  definition  ==  null?  def.node  :  Definition.newInstance();	  return    definition    ==    null?    def.node    :    definition;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
199	[BUG]  [BUGGY]  return  definition  ==  null?  def.reachingDef  :  definition;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  definition  ==  null?  def.reachingDef  :  definition;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  definition  ==  null?  def.reachingDef  :  definition;	  return    definition    ==    null?    def.node    :    definition;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
200	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.getDefinitions().getJoin());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(def.getDefinitions().getJoin());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.getDefinitions().getJoin());	  return    def.getDefinitions().getJoin();    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
201	[BUG]  [BUGGY]  return  def.getDefinitions().getVar(name);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getDefinitions().getVar(name);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().getVar(name);	  return    def.getDefinitions().getJoin();    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
202	[BUG]  [BUGGY]  return  def.getDefinitions().getVar(name).getJoin();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getDefinitions().getVar(name).getJoin();  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().getVar(name).getJoin();	  return    def.getDefinitions().getJoin();    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
203	[BUG]  [BUGGY]  return  state.getDefinitions().getJoin();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getDefinitions().getJoin();  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getDefinitions().getJoin();	  return    def.getDefinitions().getJoin();    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
204	[BUG]  [BUGGY]  return  def.getDefinitions().getJoin(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getDefinitions().getJoin(jsScope.getVar(name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().getJoin(jsScope.getVar(name));	  return    def.getDefinitions().getJoin();    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
205	[BUG]  [BUGGY]  return  def.getDefinitions().getJoin(n);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getDefinitions().getJoin(n);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().getJoin(n);	  return    def.getDefinitions().getJoin();    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
206	[BUG]  [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def  ==  null)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def  ==  null)  {  return  null;  }  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def  ==  null)  {  return  null;  }	  def    =    state.getIn().reachingDef.get(jsScope.getVar(name));    if(def    ==    null)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
207	[BUG]  [BUGGY]  def  =  state.getIn().reachingDef.get(jsScope.getVar(name),  useNode);  if(def  ==  null)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  def  =  state.getIn().reachingDef.get(jsScope.getVar(name),  useNode);  if(def  ==  null)  {  return  null;  }  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	def  =  state.getIn().reachingDef.get(jsScope.getVar(name),  useNode);  if(def  ==  null)  {  return  null;  }	  def    =    state.getIn().reachingDef.get(jsScope.getVar(name));    if(def    ==    null)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
208	[BUG]  [BUGGY]  Definition  desef  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(desef  ==  null)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  Definition  desef  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(desef  ==  null)  {  return  null;  }  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	Definition  desef  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(desef  ==  null)  {  return  null;  }	  def    =    state.getIn().reachingDef.get(jsScope.getVar(name));    if(def    ==    null)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
209	[BUG]  [BUGGY]  definition  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def  ==  null)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  definition  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def  ==  null)  {  return  null;  }  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	definition  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def  ==  null)  {  return  null;  }	  def    =    state.getIn().reachingDef.get(jsScope.getVar(name));    if(def    ==    null)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
210	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def.getValue());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def.getValue());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name),  def.getValue());	  return    state.getIn().reachingDef.get(def.getValue());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
211	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name).getValue());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name).getValue());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name).getValue());	  return    state.getIn().reachingDef.get(def.getValue());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
212	[BUG]  [BUGGY]  return  def.getIn().reachingDef.get(state.getValue());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getIn().reachingDef.get(state.getValue());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getIn().reachingDef.get(state.getValue());	  return    state.getIn().reachingDef.get(def.getValue());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
213	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.getValue(),  useNode);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(def.getValue(),  useNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.getValue(),  useNode);	  return    state.getIn().reachingDef.get(def.getValue());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
214	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.getValue(),  def);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(def.getValue(),  def);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.getValue(),  def);	  return    state.getIn().reachingDef.get(def.getValue());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
215	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(def.jsScope.getVar(name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.jsScope.getVar(name));	  return    def.jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
216	[BUG]  [BUGGY]  return  def.jsScope.getVar(name,  state.getIn().reachingDef);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.jsScope.getVar(name,  state.getIn().reachingDef);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.jsScope.getVar(name,  state.getIn().reachingDef);	  return    def.jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
217	[BUG]  [BUGGY]  return  state.getIn().reachingDef.invoke(jsScope,  cfgNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.invoke(jsScope,  cfgNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.invoke(jsScope,  cfgNode);	  return    def.invoke(jsScope,    cfgNode);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
218	[BUG]  [BUGGY]  return  cfgNode.invoke(jsScope,  def);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  cfgNode.invoke(jsScope,  def);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  cfgNode.invoke(jsScope,  def);	  return    def.invoke(jsScope,    cfgNode);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
219	[BUG]  [BUGGY]  return  jsScope.invoke(def,  cfgNode);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  jsScope.invoke(def,  cfgNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  jsScope.invoke(def,  cfgNode);	  return    def.invoke(jsScope,    cfgNode);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
220	[BUG]  [BUGGY]  return  def.invoke(jsScope,  cfgNode,  state);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.invoke(jsScope,  cfgNode,  state);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.invoke(jsScope,  cfgNode,  state);	  return    def.invoke(jsScope,    cfgNode);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
221	[BUG]  [BUGGY]  return  state.invoke(jsScope,  cfgNode);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.invoke(jsScope,  cfgNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.invoke(jsScope,  cfgNode);	  return    def.invoke(jsScope,    cfgNode);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
222	[BUG]  [BUGGY]  return  def.invoke(jsScope,  aNode,  cfgNode);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.invoke(jsScope,  aNode,  cfgNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.invoke(jsScope,  aNode,  cfgNode);	  return    def.invoke(jsScope,    cfgNode);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
223	[BUG]  [BUGGY]  return  def.getDefinition(name);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getDefinition(name);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinition(name);	  return    def.definition;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
224	[BUG]  [BUGGY]  return  def.getVar(name).definition;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getVar(name).definition;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getVar(name).definition;	  return    def.definition;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
225	[BUG]  [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def!=  null)  {  return  def;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def!=  null)  {  return  def;  }  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def!=  null)  {  return  def;  }	  def    =    state.getIn().reachingDef.get(jsScope.getVar(name));    if(def!=    null)    {    return    def;    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
226	[BUG]  [BUGGY]  def  =  state.getIn().reachingDef.get(jsScope.getVar(name),  useNode);  if(def!=  null)  {  return  def;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  def  =  state.getIn().reachingDef.get(jsScope.getVar(name),  useNode);  if(def!=  null)  {  return  def;  }  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	def  =  state.getIn().reachingDef.get(jsScope.getVar(name),  useNode);  if(def!=  null)  {  return  def;  }	  def    =    state.getIn().reachingDef.get(jsScope.getVar(name));    if(def!=    null)    {    return    def;    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
227	[BUG]  [BUGGY]  escaped.add(defJoin);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  escaped.add(defJoin);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	escaped.add(defJoin);	  escaped.add(def);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
228	[BUG]  [BUGGY]  escaped.add(defJoin,  def);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  escaped.add(defJoin,  def);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	escaped.add(defJoin,  def);	  escaped.add(def);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
229	[BUG]  [BUGGY]  escaped.add(def,  state);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  escaped.add(def,  state);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	escaped.add(def,  state);	  escaped.add(def);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
230	[BUG]  [BUGGY]  escaped.add(def,  jsScope);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  escaped.add(def,  jsScope);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	escaped.add(def,  jsScope);	  escaped.add(def);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
231	[BUG]  [BUGGY]  escaped.put(name,  def);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  escaped.put(name,  def);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	escaped.put(name,  def);	  escaped.add(def);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
232	[BUG]  [BUGGY]  return  definition!=  null?  def  :  def.node;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  definition!=  null?  def  :  def.node;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  definition!=  null?  def  :  def.node;	  return    def!=    null?    definition    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
233	[BUG]  [BUGGY]  return  definition!=  null?  definition  :  def.node;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  definition!=  null?  definition  :  def.node;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  definition!=  null?  definition  :  def.node;	  return    def!=    null?    definition    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
234	[BUG]  [BUGGY]  return  definition  ==  null?  def  :  def.node;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  definition  ==  null?  def  :  def.node;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  definition  ==  null?  def  :  def.node;	  return    def!=    null?    definition    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
235	[BUG]  [BUGGY]  return  declaration  ==  null?  def.node  :  declaration;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  declaration  ==  null?  def.node  :  declaration;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  declaration  ==  null?  def.node  :  declaration;	  return    def.node    ==    null?    declaration    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
236	[BUG]  [BUGGY]  return  declaration  ==  null?  def.node  :  def.node;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  declaration  ==  null?  def.node  :  def.node;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  declaration  ==  null?  def.node  :  def.node;	  return    def.node    ==    null?    declaration    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
237	[BUG]  [BUGGY]  return  def.node!=  null?  declaration  :  def.node;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.node!=  null?  declaration  :  def.node;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.node!=  null?  declaration  :  def.node;	  return    def.node    ==    null?    declaration    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
238	[BUG]  [BUGGY]  return  declaration  ==  null?  def.node  :  definition;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  declaration  ==  null?  def.node  :  definition;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  declaration  ==  null?  def.node  :  definition;	  return    def.node    ==    null?    declaration    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
239	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  definition));  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  definition));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name,  definition));	  return    state.getIn().reachingDef.get(jsScope.getVar(name,    def));    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
240	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  define));  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  define));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name,  define));	  return    state.getIn().reachingDef.get(jsScope.getVar(name,    def));    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
241	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  def),  def);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  def),  def);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name,  def),  def);	  return    state.getIn().reachingDef.get(jsScope.getVar(name,    def));    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
242	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  def),  n);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  def),  n);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name,  def),  n);	  return    state.getIn().reachingDef.get(jsScope.getVar(name,    def));    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
243	[BUG]  [BUGGY]  return  def  ==  null?  definition  :  def.reachingDef;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def  ==  null?  definition  :  def.reachingDef;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def  ==  null?  definition  :  def.reachingDef;	  return    def    ==    null?    definition    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
244	[BUG]  [BUGGY]  return  def  ==  null?  definition.node  :  def;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def  ==  null?  definition.node  :  def;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def  ==  null?  definition.node  :  def;	  return    definition    ==    null?    def.node    :    def;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
245	[BUG]  [BUGGY]  return  def!=  null?  definition.node  :  def;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def!=  null?  definition.node  :  def;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def!=  null?  definition.node  :  def;	  return    definition    ==    null?    def.node    :    def;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
246	[BUG]  [BUGGY]  return  n.invoke(jsScope,  def);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  n.invoke(jsScope,  def);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  n.invoke(jsScope,  def);	  return    def.invoke(jsScope,    n);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
247	[BUG]  [BUGGY]  return  def.invoke(jsScope,  n,  state);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.invoke(jsScope,  n,  state);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.invoke(jsScope,  n,  state);	  return    def.invoke(jsScope,    n);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
248	[BUG]  [BUGGY]  return  state.getIn().reachingDef.invoke(jsScope,  n);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.invoke(jsScope,  n);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.invoke(jsScope,  n);	  return    def.invoke(jsScope,    n);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
249	[BUG]  [BUGGY]  return  jsScope.invoke(def,  n);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  jsScope.invoke(def,  n);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  jsScope.invoke(def,  n);	  return    def.invoke(jsScope,    n);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
250	[BUG]  [BUGGY]  return  state.invoke(jsScope,  n);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.invoke(jsScope,  n);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.invoke(jsScope,  n);	  return    def.invoke(jsScope,    n);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
251	[BUG]  [BUGGY]  return  def.invoke(jsScope,  n,  state.getIn());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.invoke(jsScope,  n,  state.getIn());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.invoke(jsScope,  n,  state.getIn());	  return    def.invoke(jsScope,    n);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
252	[BUG]  [BUGGY]  return  n.invoke(jsScope,  def,  name);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  n.invoke(jsScope,  def,  name);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  n.invoke(jsScope,  def,  name);	  return    def.invoke(jsScope,    n,    name);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
253	[BUG]  [BUGGY]  return  state.getIn().reachingDef.invoke(jsScope,  name,  def);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.invoke(jsScope,  name,  def);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.invoke(jsScope,  name,  def);	  return    def.invoke(jsScope,    n,    name);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
254	[BUG]  [BUGGY]  return  state.getIn().reachingDef.invoke(jsScope,  n,  name);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.invoke(jsScope,  n,  name);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.invoke(jsScope,  n,  name);	  return    def.invoke(jsScope,    n,    name);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
255	[BUG]  [BUGGY]  return  jsScope.invoke(def,  n,  name);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  jsScope.invoke(def,  n,  name);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  jsScope.invoke(def,  n,  name);	  return    def.invoke(jsScope,    n,    name);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
256	[BUG]  [BUGGY]  return  state.getIn().reachingDef.invoke(jsScope,  name,  n);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.invoke(jsScope,  name,  n);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.invoke(jsScope,  name,  n);	  return    def.invoke(jsScope,    n,    name);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
257	[BUG]  [BUGGY]  return  state.getIn().reachingDef.getVar(name,  useNode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.getVar(name,  useNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.getVar(name,  useNode);	  return    def.getVar(name,    useNode);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
258	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.getVar(name,  useNode));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(def.getVar(name,  useNode));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.getVar(name,  useNode));	  return    def.getVar(name,    useNode);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
259	[BUG]  [BUGGY]  return  state.getIn().reachingDef.getVar(name,  def);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.getVar(name,  def);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.getVar(name,  def);	  return    def.getVar(name,    useNode);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
260	[BUG]  [BUGGY]  return  jsScope.getIn().reachingDef.getVar(name);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  jsScope.getIn().reachingDef.getVar(name);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  jsScope.getIn().reachingDef.getVar(name);	  return    state.getIn().reachingDef.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
261	[BUG]  [BUGGY]  return  def.getIn().reachingDef.getVar(name);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getIn().reachingDef.getVar(name);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getIn().reachingDef.getVar(name);	  return    state.getIn().reachingDef.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
262	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.getLocalName(),  useNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(def.getLocalName(),  useNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.getLocalName(),  useNode);	  return    state.getIn().reachingDef.get(def.getLocalName());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
263	[BUG]  [BUGGY]  return  n.invoke(def,  jsScope,  name);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  n.invoke(def,  jsScope,  name);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  n.invoke(def,  jsScope,  name);	  return    def.invoke(jsScope,    n,    name);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
264	[BUG]  [BUGGY]  return  jsScope.invoke(def,  n,  useNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  jsScope.invoke(def,  n,  useNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  jsScope.invoke(def,  n,  useNode);	  return    def.invoke(jsScope,    n,    name);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
265	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def,  n);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(def,  n);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def,  n);	  return    state.getIn().reachingDef.get(def);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
266	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(defJoin);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(defJoin);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(defJoin);	  return    state.getIn().reachingDef.get(def);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
267	[BUG]  [BUGGY]  return  def  ==  null?  def.node  :  def;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def  ==  null?  def.node  :  def;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def  ==  null?  def.node  :  def;	  return    definition    ==    null?    def.node    :    definition;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
268	[BUG]  [BUGGY]  return  definition  ==  null?  def.node  :  defaultDef;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  definition  ==  null?  def.node  :  defaultDef;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  definition  ==  null?  def.node  :  defaultDef;	  return    definition    ==    null?    def.node    :    definition;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
269	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  useNode).getDefinition());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  useNode).getDefinition());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name,  useNode).getDefinition());	  return    state.getIn().reachingDef.get(jsScope.getVar(name).getDefinition());    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
270	[BUG]  [BUGGY]  return  declaration  ==  null?  def.node  :  def;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  declaration  ==  null?  def.node  :  def;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  declaration  ==  null?  def.node  :  def;	  return    def.node    ==    null?    declaration    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
271	[BUG]  [BUGGY]  DefinitionDefinition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def!=  null)  {  return  def;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  DefinitionDefinition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def!=  null)  {  return  def;  }  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	DefinitionDefinition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def!=  null)  {  return  def;  }	  def    =    state.getIn().reachingDef.get(jsScope.getVar(name));    if(def!=    null)    {    return    def;    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
272	[BUG]  [BUGGY]  Definition  <  MustDef>  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def  ==  null)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  Definition  <  MustDef>  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def  ==  null)  {  return  null;  }  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	Definition  <  MustDef>  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def  ==  null)  {  return  null;  }	  def    =    state.getIn().reachingDef.get(jsScope.getVar(name));    if(def    ==    null)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
273	[BUG]  [BUGGY]  escaped.add(defJoin1);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  escaped.add(defJoin1);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	escaped.add(defJoin1);	  escaped.add(def);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
274	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.cloneTree());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(def.cloneTree());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.cloneTree());	  return    state.getIn().reachingDef.get(def.getDefinition());    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
275	[BUG]  [BUGGY]  return  def  ==  null?  definition  :  def.node  +  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def  ==  null?  definition  :  def.node  +  1;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def  ==  null?  definition  :  def.node  +  1;	  return    def    ==    null?    definition    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
276	[BUG]  [BUGGY]  return  def  ==  null?  def.node  :  def.node;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def  ==  null?  def.node  :  def.node;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def  ==  null?  def.node  :  def.node;	  return    definition    ==    null?    def.node    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
277	[BUG]  [BUGGY]  return  def!=  null?  def.node  :  def.node;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def!=  null?  def.node  :  def.node;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def!=  null?  def.node  :  def.node;	  return    definition    ==    null?    def.node    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
278	[BUG]  [BUGGY]  return  def  ==  null?  def.node  :  def.reachingDef;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def  ==  null?  def.node  :  def.reachingDef;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def  ==  null?  def.node  :  def.reachingDef;	  return    definition    ==    null?    def.node    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
279	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def).getDeclaration();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def).getDeclaration();  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name),  def).getDeclaration();	  return    state.getIn().reachingDef.get(jsScope.getVar(name).getDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
280	[BUG]  [BUGGY]  return  def.invoke(jsScope,  aNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.invoke(jsScope,  aNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.invoke(jsScope,  aNode);	  return    def.invoke(jsScope,    cfgNode);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
281	[BUG]  [BUGGY]  return  def.getReachingDef().toArray(new  Definition[def.getDefinitions().size()  ]);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getReachingDef().toArray(new  Definition[def.getDefinitions().size()  ]);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getReachingDef().toArray(new  Definition[def.getDefinitions().size()  ]);	  return    def.getDefinitions().toArray(new    Definition[def.getDefinitions().size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
282	[BUG]  [BUGGY]  return  n.getDefinitions().toArray(new  Definition[def.getDefinitions().size()  ]);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  n.getDefinitions().toArray(new  Definition[def.getDefinitions().size()  ]);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  n.getDefinitions().toArray(new  Definition[def.getDefinitions().size()  ]);	  return    def.getDefinitions().toArray(new    Definition[def.getDefinitions().size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
283	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.jsScope,  name);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(def.jsScope,  name);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.jsScope,  name);	  return    state.getIn().reachingDef.get(def.jsScope);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
284	[BUG]  [BUGGY]  return  def.getIn().reachingDef.get(def.jsScope);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getIn().reachingDef.get(def.jsScope);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getIn().reachingDef.get(def.jsScope);	  return    state.getIn().reachingDef.get(def.jsScope);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
285	[BUG]  [BUGGY]  Return  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  Return  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	Return  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));	  return    state.getIn().reachingDef.get(desc.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
286	[BUG]  [BUGGY]  return  def.node!=  null  &&  def.node  ==  null?  null  :  def.node;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.node!=  null  &&  def.node  ==  null?  null  :  def.node;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.node!=  null  &&  def.node  ==  null?  null  :  def.node;	  return    def.node    ==    null    ||    def.node    ==    null?    null    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
287	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.getVar(name),  useNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(def.getVar(name),  useNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.getVar(name),  useNode);	  return    def.getScope();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
288	[BUG]  [BUGGY]  return  definition!=  null?  def.node  :  def.node;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  definition!=  null?  def.node  :  def.node;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  definition!=  null?  def.node  :  def.node;	  return    def.node!=    null?    definition    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
289	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def.cloneTree());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def.cloneTree());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name),  def.cloneTree());	  return    state.getIn().reachingDef.get(jsScope.getVar(name),    def.getDefinition());    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
290	[BUG]  [BUGGY]  return  def.reachingDef.cloneTree();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.reachingDef.cloneTree();  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.reachingDef.cloneTree();	  return    def.cloneTree();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
291	[BUG]  [BUGGY]  return  def.reachingDef.clone();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.reachingDef.clone();  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.reachingDef.clone();	  return    def.cloneTree();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
292	[BUG]  [BUGGY]  return  def.cloneNode();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.cloneNode();  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.cloneNode();	  return    def.cloneTree();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
293	[BUG]  [BUGGY]  return  def.jsScope.getVar(name,  useNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.jsScope.getVar(name,  useNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.jsScope.getVar(name,  useNode);	  return    def.jsScope.getVar(name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
294	[BUG]  [BUGGY]  return  def.reachingDef.getVar(name,  jsScope);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.reachingDef.getVar(name,  jsScope);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.reachingDef.getVar(name,  jsScope);	  return    def.jsScope.getVar(name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
295	[BUG]  [BUGGY]  DefinitionDefinition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def  ==  null)  {  return  def;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  DefinitionDefinition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def  ==  null)  {  return  def;  }  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	DefinitionDefinition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def  ==  null)  {  return  def;  }	  def    =    state.getIn().reachingDef.get(jsScope.getVar(name));    if(def    ==    null)    {    return    def;    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
296	[BUG]  [BUGGY]  return  state.getIn().reachingDef.invoke(jsScope,  name,  n,  useNode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.invoke(jsScope,  name,  n,  useNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.invoke(jsScope,  name,  n,  useNode);	  return    def.invoke(jsScope,    n,    useNode);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
297	[BUG]  [BUGGY]  return  n.invoke(def,  jsScope,  useNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  n.invoke(def,  jsScope,  useNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  n.invoke(def,  jsScope,  useNode);	  return    def.invoke(jsScope,    n,    useNode);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
298	[BUG]  [BUGGY]  return  def.invoke(jsScope,  n,  useNode,  state);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.invoke(jsScope,  n,  useNode,  state);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.invoke(jsScope,  n,  useNode,  state);	  return    def.invoke(jsScope,    n,    useNode);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
299	[BUG]  [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(def);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(def);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	Definition  def  =  state.getIn().reachingDef.get(def);	  Definition    def    =    state.getIn().reachingDef.get(name);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
300	[BUG]  [BUGGY]  return  n.invoke(def,  jsScope);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  n.invoke(def,  jsScope);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  n.invoke(def,  jsScope);	  return    def.invoke(jsScope,    n);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
301	[BUG]  [BUGGY]  return  def.invoke(n,  jsScope);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.invoke(n,  jsScope);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.invoke(n,  jsScope);	  return    def.invoke(jsScope,    n);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
302	[BUG]  [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name),  jsScope);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name),  jsScope);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name),  jsScope);	  Definition    def    =    state.getIn().reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
303	[BUG]  [BUGGY]  return  def.getDefinitions().jsScope.getVar(name,  useNode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getDefinitions().jsScope.getVar(name,  useNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().jsScope.getVar(name,  useNode);	  return    def.getDefinitions().jsScope;    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
304	[BUG]  [BUGGY]  return  def  ==  null?  null  :  def.definition;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def  ==  null?  null  :  def.definition;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def  ==  null?  null  :  def.definition;	  return    def    ==    null?    null    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
305	[BUG]  [BUGGY]  return  def.getDefinitions().reachingDef  &&  state.getIn().reachingDef.get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getDefinitions().reachingDef  &&  state.getIn().reachingDef.get(jsScope.getVar(name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().reachingDef  &&  state.getIn().reachingDef.get(jsScope.getVar(name));	  return    def.getDefinitions().reachingDef;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
306	[BUG]  [BUGGY]  return  def.getDefinitions().reachingDef  &&  state.getIn().reachingDef.get(jsScope.getVar(name),  useNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getDefinitions().reachingDef  &&  state.getIn().reachingDef.get(jsScope.getVar(name),  useNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().reachingDef  &&  state.getIn().reachingDef.get(jsScope.getVar(name),  useNode);	  return    def.getDefinitions().reachingDef;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
307	[BUG]  [BUGGY]  return  def.getDefinitions().reachingDef  &&  state.getIn().reachingDef.get(jsScope.getVar(name,  useNode));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getDefinitions().reachingDef  &&  state.getIn().reachingDef.get(jsScope.getVar(name,  useNode));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().reachingDef  &&  state.getIn().reachingDef.get(jsScope.getVar(name,  useNode));	  return    def.getDefinitions().reachingDef;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
308	[BUG]  [BUGGY]  return  def.getDefinitions().reachingDef  &&  state.getIn().reachingDef.get(name);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getDefinitions().reachingDef  &&  state.getIn().reachingDef.get(name);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().reachingDef  &&  state.getIn().reachingDef.get(name);	  return    def.getDefinitions().reachingDef;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
309	[BUG]  [BUGGY]  return  def.getDefinitions().reachingDef  -  state.getIn().reachingDef;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getDefinitions().reachingDef  -  state.getIn().reachingDef;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().reachingDef  -  state.getIn().reachingDef;	  return    def.getDefinitions().reachingDef;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
310	[BUG]  [BUGGY]  return  node  >=  def?  null  :  def.node;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  node  >=  def?  null  :  def.node;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  node  >=  def?  null  :  def.node;	  return    def.node    >=    node?    null    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
311	[BUG]  [BUGGY]  return  def.getDefinitions().reachingDef.getJoin();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getDefinitions().reachingDef.getJoin();  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().reachingDef.getJoin();	  return    def.getDefinitions().getJoin();    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
312	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  useNode).getDefinitions();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  useNode).getDefinitions();  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name,  useNode).getDefinitions();	  return    state.getIn().reachingDef.get(jsScope.getVar(name).getDefinitions();    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
313	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name)).getDefinitions();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name)).getDefinitions();  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name)).getDefinitions();	  return    state.getIn().reachingDef.get(jsScope.getVar(name).getDefinitions();    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
314	[BUG]  [BUGGY]  return  jsScope.getIn().reachingDef.get(jsScope.getVar(name),  def.getDefinitions();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  jsScope.getIn().reachingDef.get(jsScope.getVar(name),  def.getDefinitions();  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  jsScope.getIn().reachingDef.get(jsScope.getVar(name),  def.getDefinitions();	  return    state.getIn().reachingDef.get(jsScope.getVar(name).getDefinitions();    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
315	[BUG]  [BUGGY]  return  def.reachingDef.get(jsScope.getVar(name),  useNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.reachingDef.get(jsScope.getVar(name),  useNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.reachingDef.get(jsScope.getVar(name),  useNode);	  return    def.reachingDef.getJoin();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
316	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.getName(),  useNode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(def.getName(),  useNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.getName(),  useNode);	  return    state.getIn().reachingDef.get(def.getName());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
317	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.getName(),  def);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(def.getName(),  def);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.getName(),  def);	  return    state.getIn().reachingDef.get(def.getName());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
318	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.getDeclaration(),  useNode);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(def.getDeclaration(),  useNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.getDeclaration(),  useNode);	  return    state.getIn().reachingDef.get(def.getDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
319	[BUG]  [BUGGY]  return  def.reachingDef.get(jsScope.getVar(name)+  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.reachingDef.get(jsScope.getVar(name)+  1);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.reachingDef.get(jsScope.getVar(name)+  1);	  return    def.reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
320	[BUG]  [BUGGY]  return  def.getVar(name,  n);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getVar(name,  n);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getVar(name,  n);	  return    def.getVar(name,    useNode);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
321	[BUG]  [BUGGY]  return  def!=  null?  null  :  def.reachingDef;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def!=  null?  null  :  def.reachingDef;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def!=  null?  null  :  def.reachingDef;	  return    def!=    null?    null    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
322	[BUG]  [BUGGY]  return  def  [Delete]  null?  null  :  def.node;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def  [Delete]  null?  null  :  def.node;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def  [Delete]  null?  null  :  def.node;	  return    def!=    null?    null    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
323	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.getJoin(),  useNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(def.getJoin(),  useNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.getJoin(),  useNode);	  return    state.getIn().reachingDef.get(def.getJoin());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
324	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.getJoin(),  def);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(def.getJoin(),  def);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.getJoin(),  def);	  return    state.getIn().reachingDef.get(def.getJoin());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
325	[BUG]  [BUGGY]  return  def.getDefinition(def);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getDefinition(def);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinition(def);	  return    def.definition;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
326	[BUG]  [BUGGY]  return  def.initializingDef  &&  state.getIn().reachingDef.get(jsScope.getVar(name),  useNode);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.initializingDef  &&  state.getIn().reachingDef.get(jsScope.getVar(name),  useNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.initializingDef  &&  state.getIn().reachingDef.get(jsScope.getVar(name),  useNode);	  return    def.initializingDef;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
327	[BUG]  [BUGGY]  return  def.initializingDef  &&  state.getIn().reachingDef.get(jsScope.getVar(name,  useNode));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.initializingDef  &&  state.getIn().reachingDef.get(jsScope.getVar(name,  useNode));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.initializingDef  &&  state.getIn().reachingDef.get(jsScope.getVar(name,  useNode));	  return    def.initializingDef;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
328	[BUG]  [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  return  def.initializingDef;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  return  def.initializingDef;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  return  def.initializingDef;	  return    def.initializingDef;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
329	[BUG]  [BUGGY]  return  def.getIn().reachingDef.get(def.getValue());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getIn().reachingDef.get(def.getValue());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getIn().reachingDef.get(def.getValue());	  return    state.getIn().reachingDef.get(def.getValue());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
330	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.toString(),  useNode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(def.toString(),  useNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.toString(),  useNode);	  return    state.getIn().reachingDef.get(def.toString());    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
331	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.toString(),  def);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(def.toString(),  def);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.toString(),  def);	  return    state.getIn().reachingDef.get(def.toString());    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
332	[BUG]  [BUGGY]  return  def.getIn().reachingDef.get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getIn().reachingDef.get(jsScope.getVar(name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getIn().reachingDef.get(jsScope.getVar(name));	  return    state.getIn().reachingDef.get(def.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
333	[BUG]  [BUGGY]  return  def.reachingDef.get(def.getVar(name));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.reachingDef.get(def.getVar(name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.reachingDef.get(def.getVar(name));	  return    state.getIn().reachingDef.get(def.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
334	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def).toString();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def).toString();  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name),  def).toString();	  return    state.getIn().reachingDef.get(jsScope.getVar(name).toString());    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
335	[BUG]  [BUGGY]  return  state.getIn().reachingDef.invoke(jsScope,  name,  cfgNode,  useNode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.invoke(jsScope,  name,  cfgNode,  useNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.invoke(jsScope,  name,  cfgNode,  useNode);	  return    def.invoke(jsScope,    cfgNode,    useNode);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
336	[BUG]  [BUGGY]  return  def.invoke(jsScope,  cfgNode,  name);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.invoke(jsScope,  cfgNode,  name);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.invoke(jsScope,  cfgNode,  name);	  return    def.invoke(jsScope,    cfgNode,    useNode);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
337	[BUG]  [BUGGY]  return  def!=  null?  null  :  def.getDefinitions().toArray(new  Definition[def.size()  ]);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def!=  null?  null  :  def.getDefinitions().toArray(new  Definition[def.size()  ]);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def!=  null?  null  :  def.getDefinitions().toArray(new  Definition[def.size()  ]);	  return    def.getDefinitions().toArray(new    Definition[def.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
338	[BUG]  [BUGGY]  return  def.getDefinitions().toArray(new  Definition[def.size()  ],  useNode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getDefinitions().toArray(new  Definition[def.size()  ],  useNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().toArray(new  Definition[def.size()  ],  useNode);	  return    def.getDefinitions().toArray(new    Definition[def.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
339	[BUG]  [BUGGY]  return  declaration!=  null?  definition  :  def.node;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  declaration!=  null?  definition  :  def.node;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  declaration!=  null?  definition  :  def.node;	  return    declaration    ==    null?    definition    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
340	[BUG]  [BUGGY]  return  declaration  ==  null?  definition  :  def.reachingDef;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  declaration  ==  null?  definition  :  def.reachingDef;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  declaration  ==  null?  definition  :  def.reachingDef;	  return    declaration    ==    null?    definition    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
341	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.getDefinitions(),  def);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(def.getDefinitions(),  def);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.getDefinitions(),  def);	  return    state.getIn().reachingDef.get(def.getDefinitions());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
342	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def,  name);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(def,  name);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def,  name);	  return    state.getIn().reachingDef.get(name);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
343	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  def.getValue()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  def.getValue()));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name,  def.getValue()));	  return    state.getIn().reachingDef.get(def.getValue());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
344	[BUG]  [BUGGY]  return  def.getVar(name,  jsScope).reachingDef;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getVar(name,  jsScope).reachingDef;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getVar(name,  jsScope).reachingDef;	  return    def.getVar(name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
345	[BUG]  [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name).toString());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name).toString());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name).toString());	  Definition    def    =    state.getIn().reachingDef.get(name);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
346	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name).toLowerCase());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name).toLowerCase());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name).toLowerCase());	  return    state.getIn().reachingDef.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
347	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  def.jsScope));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  def.jsScope));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name,  def.jsScope));	  return    state.getIn().reachingDef.get(def.jsScope);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
348	[BUG]  [BUGGY]  return  def.reachingDef.get(state.getIn().reachingDef);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.reachingDef.get(state.getIn().reachingDef);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.reachingDef.get(state.getIn().reachingDef);	  return    state.getIn().reachingDef.get(def.jsScope);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
349	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  def).toString());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  def).toString());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name,  def).toString());	  return    state.getIn().reachingDef.get(jsScope.getVar(name).toString());    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
350	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  def.getLocalName()));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  def.getLocalName()));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name,  def.getLocalName()));	  return    state.getIn().reachingDef.get(def.getLocalName());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
351	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  def.getDefinitions()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  def.getDefinitions()));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name,  def.getDefinitions()));	  return    state.getIn().reachingDef.get(def.getDefinitions());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
352	[BUG]  [BUGGY]  return  jsScope.getVar(name).reachingDef;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  jsScope.getVar(name).reachingDef;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  jsScope.getVar(name).reachingDef;	  return    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
353	[BUG]  [BUGGY]  return  jsScope.getVar(name)+  state.getIn().reachingDef.get(def);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  jsScope.getVar(name)+  state.getIn().reachingDef.get(def);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  jsScope.getVar(name)+  state.getIn().reachingDef.get(def);	  return    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
354	[BUG]  [BUGGY]  return  jsScope.getDeepestCommonDependencyInclusive(def);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  jsScope.getDeepestCommonDependencyInclusive(def);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  jsScope.getDeepestCommonDependencyInclusive(def);	  return    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
355	[BUG]  [BUGGY]  return  def!=  null?  null  :  def.node,  state.getIn().reachingDef;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def!=  null?  null  :  def.node,  state.getIn().reachingDef;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def!=  null?  null  :  def.node,  state.getIn().reachingDef;	  return    def!=    null?    null    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
356	[BUG]  [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name,  jsScope));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name,  jsScope));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name,  jsScope));	  Definition    def    =    state.getIn().reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
357	[BUG]  [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name,  n));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name,  n));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name,  n));	  Definition    def    =    state.getIn().reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
358	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def  -  1);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name),  def  -  1);	  return    state.getIn().reachingDef.get(jsScope.getVar(name),    def);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
359	[BUG]  [BUGGY]  return  def  ==  null?  null  :  def.reachingDef.get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def  ==  null?  null  :  def.reachingDef.get(jsScope.getVar(name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def  ==  null?  null  :  def.reachingDef.get(jsScope.getVar(name));	  return    state.getIn().reachingDef.get(def.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
360	[BUG]  [BUGGY]  return  def!=  null?  null  :  def.reachingDef.get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def!=  null?  null  :  def.reachingDef.get(jsScope.getVar(name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def!=  null?  null  :  def.reachingDef.get(jsScope.getVar(name));	  return    state.getIn().reachingDef.get(def.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
361	[BUG]  [BUGGY]  return  n.getIn().reachingDef.get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  n.getIn().reachingDef.get(jsScope.getVar(name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  n.getIn().reachingDef.get(jsScope.getVar(name));	  return    state.getIn().reachingDef.get(def.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
362	[BUG]  [BUGGY]  Definition  <?>  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def  ==  null)  {  return  def;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  Definition  <?>  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def  ==  null)  {  return  def;  }  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	Definition  <?>  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def  ==  null)  {  return  def;  }	  def    =    state.getIn().reachingDef.get(jsScope.getVar(name));    if(def    ==    null)    {    return    def;    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
363	[BUG]  [BUGGY]  Definition  <  MustDef>  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def  ==  null)  {  return  def;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  Definition  <  MustDef>  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def  ==  null)  {  return  def;  }  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	Definition  <  MustDef>  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def  ==  null)  {  return  def;  }	  def    =    state.getIn().reachingDef.get(jsScope.getVar(name));    if(def    ==    null)    {    return    def;    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
364	[BUG]  [BUGGY]  def  =  state.getIn().reachingDef.get(jsScope.getVar(name),  n);  if(def  ==  null)  {  return  def;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  def  =  state.getIn().reachingDef.get(jsScope.getVar(name),  n);  if(def  ==  null)  {  return  def;  }  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	def  =  state.getIn().reachingDef.get(jsScope.getVar(name),  n);  if(def  ==  null)  {  return  def;  }	  def    =    state.getIn().reachingDef.get(jsScope.getVar(name));    if(def    ==    null)    {    return    def;    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
365	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  def.toString()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  def.toString()));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name,  def.toString()));	  return    state.getIn().reachingDef.get(def.toString());    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
366	[BUG]  [BUGGY]  return  def.invoke(n,  name);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.invoke(n,  name);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.invoke(n,  name);	  return    def.invoke(jsScope,    name);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
367	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  def).reachingDef);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  def).reachingDef);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name,  def).reachingDef);	  return    state.getIn().reachingDef.get(jsScope.getVar(name,    def));    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
368	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  def)+  1);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  def)+  1);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name,  def)+  1);	  return    state.getIn().reachingDef.get(jsScope.getVar(name,    def));    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
369	[BUG]  [BUGGY]  return  def.getDefinitions().reachingDef.get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getDefinitions().reachingDef.get(jsScope.getVar(name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().reachingDef.get(jsScope.getVar(name));	  return    def.getDefinitions().reachingDef;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
370	[BUG]  [BUGGY]  return  def.getDefinitions().reachingDef.get(jsScope.getVar(name).toString());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getDefinitions().reachingDef.get(jsScope.getVar(name).toString());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().reachingDef.get(jsScope.getVar(name).toString());	  return    def.getDefinitions().reachingDef;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
371	[BUG]  [BUGGY]  return  def.reachingDef.get(jsScope.getVar(name).getJoin();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.reachingDef.get(jsScope.getVar(name).getJoin();  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.reachingDef.get(jsScope.getVar(name).getJoin();	  return    def.reachingDef.getJoin();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
372	[BUG]  [BUGGY]  return  def.reachingDef.get(jsScope.getVar(name)).getJoin();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.reachingDef.get(jsScope.getVar(name)).getJoin();  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.reachingDef.get(jsScope.getVar(name)).getJoin();	  return    def.reachingDef.getJoin();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
373	[BUG]  [BUGGY]  return  def.reachingDef.get(jsScope.getVar(name).getJoin());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.reachingDef.get(jsScope.getVar(name).getJoin());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.reachingDef.get(jsScope.getVar(name).getJoin());	  return    def.reachingDef.getJoin();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
374	[BUG]  [BUGGY]  return  def.reachingDef.get(jsScope.getVar(name).toString());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.reachingDef.get(jsScope.getVar(name).toString());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.reachingDef.get(jsScope.getVar(name).toString());	  return    def.reachingDef.getJoin();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
375	[BUG]  [BUGGY]  return  def.reachingDef.get(jsScope.getVar(name),  def.reachingDef);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.reachingDef.get(jsScope.getVar(name),  def.reachingDef);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.reachingDef.get(jsScope.getVar(name),  def.reachingDef);	  return    def.reachingDef.getJoin();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
376	[BUG]  [BUGGY]  return  def.invoke(jsScope,  n,  def);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.invoke(jsScope,  n,  def);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.invoke(jsScope,  n,  def);	  return    def.invoke(jsScope,    n,    name);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
377	[BUG]  [BUGGY]  return  def.invoke(n,  jsScope,  name);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.invoke(n,  jsScope,  name);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.invoke(n,  jsScope,  name);	  return    def.invoke(jsScope,    n,    name);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
378	[BUG]  [BUGGY]  return  def.invoke(jsScope,  n,  name,  state);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.invoke(jsScope,  n,  name,  state);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.invoke(jsScope,  n,  name,  state);	  return    def.invoke(jsScope,    n,    name);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
379	[BUG]  [BUGGY]  return  def.definition  ==  null?  null  :  def.definition;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.definition  ==  null?  null  :  def.definition;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.definition  ==  null?  null  :  def.definition;	  return    def.definition;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
380	[BUG]  [BUGGY]  return  def.definition  ==  null?  definition  :  def.definition;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.definition  ==  null?  definition  :  def.definition;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.definition  ==  null?  definition  :  def.definition;	  return    def.definition;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
381	[BUG]  [BUGGY]  return  def.definition!=  null?  def.definition  :  defaultDef;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.definition!=  null?  def.definition  :  defaultDef;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.definition!=  null?  def.definition  :  defaultDef;	  return    def.definition;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
382	[BUG]  [BUGGY]  return  def.definition  ==  null?  false  :  def.definition;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.definition  ==  null?  false  :  def.definition;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.definition  ==  null?  false  :  def.definition;	  return    def.definition;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
383	[BUG]  [BUGGY]  return  def.definition!=  null?  def.definition  :  definition;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.definition!=  null?  def.definition  :  definition;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.definition!=  null?  def.definition  :  definition;	  return    def.definition;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
384	[BUG]  [BUGGY]  return  def.definition!=  null?  definition  :  def.definition;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.definition!=  null?  definition  :  def.definition;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.definition!=  null?  definition  :  def.definition;	  return    def.definition;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
385	[BUG]  [BUGGY]  return  def.getType()  ==  Token.FUNCTION?  null  :  def.cloneTree();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getType()  ==  Token.FUNCTION?  null  :  def.cloneTree();  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getType()  ==  Token.FUNCTION?  null  :  def.cloneTree();	  return    def.cloneTree();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
386	[BUG]  [BUGGY]  return  def.getType()  ==  Token.FUNCTION?  DEF  :  def.cloneTree();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getType()  ==  Token.FUNCTION?  DEF  :  def.cloneTree();  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getType()  ==  Token.FUNCTION?  DEF  :  def.cloneTree();	  return    def.cloneTree();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
387	[BUG]  [BUGGY]  escaped.add(def).append(JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstant  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  escaped.add(def).append(JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstant  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	escaped.add(def).append(JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstant	  escaped.add(def);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
388	[BUG]  [BUGGY]  escaped.add(def).append(JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  escaped.add(def).append(JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	escaped.add(def).append(JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants	  escaped.add(def);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
389	[BUG]  [BUGGY]  escaped.add(def).append(JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.J  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  escaped.add(def).append(JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.J  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	escaped.add(def).append(JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.J	  escaped.add(def);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
390	[BUG]  [BUGGY]  escaped.add(def).append(JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinCon  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  escaped.add(def).append(JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinCon  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	escaped.add(def).append(JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinCon	  escaped.add(def);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
391	[BUG]  [BUGGY]  escaped.add(def).append(JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.Join  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  escaped.add(def).append(JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.Join  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	escaped.add(def).append(JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.JoinConstants.Join	  escaped.add(def);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
392	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  def.getDeclaration()));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  def.getDeclaration()));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name,  def.getDeclaration()));	  return    state.getIn().reachingDef.get(def.getDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
393	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(def.getDeclaration(),  n);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(def.getDeclaration(),  n);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(def.getDeclaration(),  n);	  return    state.getIn().reachingDef.get(def.getDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
394	[BUG]  [BUGGY]  return  def  ==  null?  null  :  def.node,  state.getIn().reachingDef;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def  ==  null?  null  :  def.node,  state.getIn().reachingDef;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def  ==  null?  null  :  def.node,  state.getIn().reachingDef;	  return    def    ==    null?    null    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
395	[BUG]  [BUGGY]  return  def  ==  null?  null  :  def.node  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def  ==  null?  null  :  def.node  +  1;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def  ==  null?  null  :  def.node  +  1;	  return    def    ==    null?    null    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
396	[BUG]  [BUGGY]  return  def.getIn().reachingDef.get(jsScope.getVar(name,  useNode));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getIn().reachingDef.get(jsScope.getVar(name,  useNode));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getIn().reachingDef.get(jsScope.getVar(name,  useNode));	  return    state.getIn().reachingDef.get(jsScope.getVar(name,    useNode));    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
397	[BUG]  [BUGGY]  return  n.getAnnotation().reachingDef.get(jsScope.getVar(name,  useNode));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  n.getAnnotation().reachingDef.get(jsScope.getVar(name,  useNode));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  n.getAnnotation().reachingDef.get(jsScope.getVar(name,  useNode));	  return    state.getIn().reachingDef.get(jsScope.getVar(name,    useNode));    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
398	[BUG]  [BUGGY]  return  def!=  null?  def  :  def.node;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def!=  null?  def  :  def.node;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def!=  null?  def  :  def.node;	  return    def!=    null?    definition    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
399	[BUG]  [BUGGY]  return  def.invoke(jsScope,  n,  this);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.invoke(jsScope,  n,  this);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.invoke(jsScope,  n,  this);	  return    def.invoke(jsScope,    n);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
400	[BUG]  [BUGGY]  return  def.getDefinitions().toArray(new  Definition[def.size()  -  2]);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getDefinitions().toArray(new  Definition[def.size()  -  2]);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().toArray(new  Definition[def.size()  -  2]);	  return    def.getDefinitions().toArray(new    Definition[def.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
401	[BUG]  [BUGGY]  return  def.getDefinitions().size()  >  0?  def.getDefinitions().iterator().next()  :  state.getIn().reachingDef.get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getDefinitions().size()  >  0?  def.getDefinitions().iterator().next()  :  state.getIn().reachingDef.get(jsScope.getVar(name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().size()  >  0?  def.getDefinitions().iterator().next()  :  state.getIn().reachingDef.get(jsScope.getVar(name));	  return    def.getDefinitions().iterator().next();    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
402	[BUG]  [BUGGY]  return  def.getDefinitions().size()  >  0?  def.getDefinitions().iterator().next()  :  null;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getDefinitions().size()  >  0?  def.getDefinitions().iterator().next()  :  null;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().size()  >  0?  def.getDefinitions().iterator().next()  :  null;	  return    def.getDefinitions().iterator().next();    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
403	[BUG]  [BUGGY]  return  def.getDefinitions().size()  >  0?  def.getDefinitions().get(0):  def.getDefinitions().iterator().next();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getDefinitions().size()  >  0?  def.getDefinitions().get(0):  def.getDefinitions().iterator().next();  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().size()  >  0?  def.getDefinitions().get(0):  def.getDefinitions().iterator().next();	  return    def.getDefinitions().iterator().next();    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
404	[BUG]  [BUGGY]  return  def.getDefinitions().size()  >  0?  def.getDefinitions().iterator().next()  :  state.getIn().reachingDef.get(jsScope.getVar(name),  useNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getDefinitions().size()  >  0?  def.getDefinitions().iterator().next()  :  state.getIn().reachingDef.get(jsScope.getVar(name),  useNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().size()  >  0?  def.getDefinitions().iterator().next()  :  state.getIn().reachingDef.get(jsScope.getVar(name),  useNode);	  return    def.getDefinitions().iterator().next();    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
405	[BUG]  [BUGGY]  return  definition!=  null?  def.node  :  def;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  definition!=  null?  def.node  :  def;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  definition!=  null?  def.node  :  def;	  return    def.node!=    null?    definition    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
406	[BUG]  [BUGGY]  return  def.invoke(jsScope,  cfgNode,  n);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.invoke(jsScope,  cfgNode,  n);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.invoke(jsScope,  cfgNode,  n);	  return    def.invoke(jsScope,    cfgNode,    useNode);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
407	[BUG]  [BUGGY]  return  def.invoke(jsScope,  cfgNode,  aNode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.invoke(jsScope,  cfgNode,  aNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.invoke(jsScope,  cfgNode,  aNode);	  return    def.invoke(jsScope,    cfgNode,    useNode);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
408	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  def.getName()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  def.getName()));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name,  def.getName()));	  return    state.getIn().reachingDef.get(def.getName());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
409	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  name));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name,  name));	  return    state.getIn().reachingDef.get(def.getName());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
410	[BUG]  [BUGGY]  return  def.getDefinitions().getAllDefinitions().getJoin();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getDefinitions().getAllDefinitions().getJoin();  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().getAllDefinitions().getJoin();	  return    def.getDefinitions().getJoin();    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
411	[BUG]  [BUGGY]  return  jsScope.getIn().reachingDef.get(jsScope.getVar(name).getDefinition(),  def);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  jsScope.getIn().reachingDef.get(jsScope.getVar(name).getDefinition(),  def);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  jsScope.getIn().reachingDef.get(jsScope.getVar(name).getDefinition(),  def);	  return    state.getIn().reachingDef.get(jsScope.getVar(name).getDefinition());    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
412	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  def).getDefinition());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  def).getDefinition());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name,  def).getDefinition());	  return    state.getIn().reachingDef.get(jsScope.getVar(name).getDefinition());    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
413	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def).getDefinition());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name),  def).getDefinition());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name),  def).getDefinition());	  return    state.getIn().reachingDef.get(jsScope.getVar(name).getDefinition());    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
414	[BUG]  [BUGGY]  return  def.getDefinitions().get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getDefinitions().get(jsScope.getVar(name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().get(jsScope.getVar(name));	  return    def.getDefinitions().get(name);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
415	[BUG]  [BUGGY]  return  def.getDefinitions().get(name,  n);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getDefinitions().get(name,  n);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().get(name,  n);	  return    def.getDefinitions().get(name);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
416	[BUG]  [BUGGY]  return  def.getDefinitions().get(name,  jsScope);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getDefinitions().get(name,  jsScope);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().get(name,  jsScope);	  return    def.getDefinitions().get(name);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
417	[BUG]  [BUGGY]  return  def.getDefinitions().get(name  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getDefinitions().get(name  +  1);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().get(name  +  1);	  return    def.getDefinitions().get(name);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
418	[BUG]  [BUGGY]  return  def.getDefinitions().toArray(new  Definition[def.getDefinitions().size()  -  2]);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getDefinitions().toArray(new  Definition[def.getDefinitions().size()  -  2]);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().toArray(new  Definition[def.getDefinitions().size()  -  2]);	  return    def.getDefinitions().toArray(new    Definition[def.getDefinitions().size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
419	[BUG]  [BUGGY]  Definition  <?>  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def  ==  null)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  Definition  <?>  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def  ==  null)  {  return  null;  }  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	Definition  <?>  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def  ==  null)  {  return  null;  }	  def    =    state.getIn().reachingDef.get(jsScope.getVar(name));    if(def    ==    null)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
420	[BUG]  [BUGGY]  Definition  <  Object>  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def  ==  null)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  Definition  <  Object>  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def  ==  null)  {  return  null;  }  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	Definition  <  Object>  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def  ==  null)  {  return  null;  }	  def    =    state.getIn().reachingDef.get(jsScope.getVar(name));    if(def    ==    null)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
421	[BUG]  [BUGGY]  return  def.invoke(jsScope,  n,  this,  useNode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.invoke(jsScope,  n,  this,  useNode);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.invoke(jsScope,  n,  this,  useNode);	  return    def.invoke(jsScope,    n,    useNode);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
422	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  def.getJoin()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name,  def.getJoin()));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name,  def.getJoin()));	  return    state.getIn().reachingDef.get(def.getJoin());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
423	[BUG]  [BUGGY]  return  def.getReachingDef().get(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getReachingDef().get(jsScope.getVar(name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getReachingDef().get(jsScope.getVar(name));	  return    def.getReachingDef();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
424	[BUG]  [BUGGY]  return  def.getReachingDef(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getReachingDef(jsScope.getVar(name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getReachingDef(jsScope.getVar(name));	  return    def.getReachingDef();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
425	[BUG]  [BUGGY]  return  def.invoke(cfgNode,  jsScope);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.invoke(cfgNode,  jsScope);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.invoke(cfgNode,  jsScope);	  return    def.invoke(jsScope,    cfgNode);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
426	[BUG]  [BUGGY]  return  def.invoke(jsScope,  cfgNode,  null);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.invoke(jsScope,  cfgNode,  null);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.invoke(jsScope,  cfgNode,  null);	  return    def.invoke(jsScope,    cfgNode);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
427	[BUG]  [BUGGY]  return  cfgNode.invoke(def,  jsScope);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  cfgNode.invoke(def,  jsScope);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  cfgNode.invoke(def,  jsScope);	  return    def.invoke(jsScope,    cfgNode);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
428	[BUG]  [BUGGY]  return  definition  ==  null?  def.node  :  declaration;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  definition  ==  null?  def.node  :  declaration;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  definition  ==  null?  def.node  :  declaration;	  return    declaration    ==    null?    definition    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
429	[BUG]  [BUGGY]  return  def.jsScope.getVar(name,  n);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.jsScope.getVar(name,  n);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.jsScope.getVar(name,  n);	  return    def.jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
430	[BUG]  [BUGGY]  return  def.jsScope.getVar(name).reachingDef;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.jsScope.getVar(name).reachingDef;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.jsScope.getVar(name).reachingDef;	  return    def.jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
431	[BUG]  [BUGGY]  return  def.getDefinitions().jsScope,  jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getDefinitions().jsScope,  jsScope.getVar(name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().jsScope,  jsScope.getVar(name));	  return    def.getDefinitions().jsScope;    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
432	[BUG]  [BUGGY]  return  def.getDefinitions().jsScope.getVar(name).jsScope;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getDefinitions().jsScope.getVar(name).jsScope;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getDefinitions().jsScope.getVar(name).jsScope;	  return    def.getDefinitions().jsScope;    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
433	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope,  name);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope,  name);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope,  name);	  return    state.getIn().reachingDef.get(def);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
434	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name).reachingDef);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name).reachingDef);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name).reachingDef);	  return    state.getIn().reachingDef.get(def);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
435	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name)).reachingDef;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name)).reachingDef;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name)).reachingDef;	  return    state.getIn().reachingDef;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
436	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name).reachingDef;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name).reachingDef;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name).reachingDef;	  return    state.getIn().reachingDef;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
437	[BUG]  [BUGGY]  return  def  ==  null?  def.node  :  declaration;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def  ==  null?  def.node  :  declaration;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def  ==  null?  def.node  :  declaration;	  return    definition    ==    null?    def.node    :    def;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
438	[BUG]  [BUGGY]  return  def.reachingDef.get(jsScope.getVar(name,  n));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.reachingDef.get(jsScope.getVar(name,  n));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.reachingDef.get(jsScope.getVar(name,  n));	  return    def.reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
439	[BUG]  [BUGGY]  return  def.reachingDef.get(jsScope.getVar(name,  state.getIn()));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.reachingDef.get(jsScope.getVar(name,  state.getIn()));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.reachingDef.get(jsScope.getVar(name,  state.getIn()));	  return    def.reachingDef.get(jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
440	[BUG]  [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name).getReachingDefinition());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  state.getIn().reachingDef.get(jsScope.getVar(name).getReachingDefinition());  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  state.getIn().reachingDef.get(jsScope.getVar(name).getReachingDefinition());	  return    def.getReachingDefinition();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
441	[BUG]  [BUGGY]  return  def.getReachingDefinition(jsScope);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getReachingDefinition(jsScope);  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getReachingDefinition(jsScope);	  return    def.getReachingDefinition();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
442	[BUG]  [BUGGY]  return  def.getReachingDefinition().withJoin(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.getReachingDefinition().withJoin(jsScope.getVar(name));  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.getReachingDefinition().withJoin(jsScope.getVar(name));	  return    def.getReachingDefinition();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
443	[BUG]  [BUGGY]  Definition  <?>  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def!=  null)  {  return  def;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  Definition  <?>  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def!=  null)  {  return  def;  }  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	Definition  <?>  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def!=  null)  {  return  def;  }	  def    =    state.getIn().reachingDef.get(jsScope.getVar(name));    if(def!=    null)    {    return    def;    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
444	[BUG]  [BUGGY]  Definition  <  Object>  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def!=  null)  {  return  def;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  Definition  <  Object>  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def!=  null)  {  return  def;  }  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	Definition  <  Object>  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if(def!=  null)  {  return  def;  }	  def    =    state.getIn().reachingDef.get(jsScope.getVar(name));    if(def!=    null)    {    return    def;    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
445	[BUG]  [BUGGY]  return  def.node  ==  node?  null  :  def.node  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      Node  getDef(String  name,  Node  useNode)  {  Preconditions.checkArgument(getCfg().hasNode(useNode));  GraphNode<Node,  Branch>  n  =  getCfg().getNode(useNode);  FlowState<MustDef>  state  =  n.getAnnotation();  Definition  def  =  state.getIn().reachingDef.get(jsScope.getVar(name));  if  (def  ==  null)  {  return  null;  }  else  {      [BUGGY]  return  def.node  ==  node?  null  :  def.node  +  1;  [BUGGY]      }  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  getDef  [RETURN_TYPE]  Node  String  name  Node  useNode  [VARIABLES]  AbstractCompiler  compiler  FlowState  state  Set  depends  escaped  boolean  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  parent  rValue  rhs  target  useNode  Definition  def  GraphNode  n  String  name  Map  reachingDef  resultMap  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.23570226039551584	421	421	3	replace	return  def.node  ==  node?  null  :  def.node  +  1;	  return    def.node    ==    node?    null    :    def.node;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
