bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineVar(c))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.canInlineVar(c))  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineVar(c))  {	  if(c.canInline()    ||    c.canInlineCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
2	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(c.canInline()    ||    c.canInlineCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
3	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineNode)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.canInlineNode)  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineNode)  {	  if(c.canInline()    ||    c.canInlineCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
4	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  ||  t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  ||  t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode  ||  t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION)  {	  if(c.canInline()    ||    c.canInlineCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
5	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.VAR)  {	  if(c.canInline()    ||    c.canInlineCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
6	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode())  {	  if(c.canInline()    ||    c.canInlineBlock())    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
7	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineCfgNode())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineCfgNode())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineCfgNode())  {	  if(c.canInline()    ||    c.canInlineBlock())    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
8	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineVar(t.getScopeRoot()))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineVar(t.getScopeRoot()))  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineVar(t.getScopeRoot()))  {	  if(c.canInline()    ||    c.canInlineBlock())    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
9	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineVariable())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineVariable())  {	  if(c.canInline()    ||    c.canInlineBlock())    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
10	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineVar(c))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineVar(c))  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineVar(c))  {	  if(c.canInline()    ||    c.canInlineBlock())    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
11	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlinePath())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlinePath())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlinePath())  {	  if(c.canInline()    ||    c.canInlineBlock())    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
12	[BUG]  [BUGGY]  if(!c.canInline()  &&  c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(!c.canInline()  &&  c.inlineVariable())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  &&  c.inlineVariable())  {	  if(c.canInline()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
13	[BUG]  [BUGGY]  if(c.canInlineCfgNode()  &&  c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInlineCfgNode()  &&  c.inlineVariable())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInlineCfgNode()  &&  c.inlineVariable())  {	  if(c.canInline()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
14	[BUG]  [BUGGY]  if(c.isInline()  &&  c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.isInline()  &&  c.inlineVariable())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.isInline()  &&  c.inlineVariable())  {	  if(c.canInline()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
15	[BUG]  [BUGGY]  if(c.inline()  ||  c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.inline()  ||  c.inlineVariable())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inline()  ||  c.inlineVariable())  {	  if(c.canInline()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
16	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineChildren())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.canInlineChildren())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineChildren())  {	  if(c.canInline()    ||    c.canInlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
17	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineParent())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.canInlineParent())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineParent())  {	  if(c.canInline()    ||    c.canInlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
18	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePath())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.canInlinePath())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePath())  {	  if(c.canInline()    ||    c.canInlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
19	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineFunction())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.canInlineFunction())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineFunction())  {	  if(c.canInline()    ||    c.canInlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
20	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineReturn())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.canInlineReturn())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineReturn())  {	  if(c.canInline()    ||    c.canInlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
21	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlineCfgNode())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.inlineCfgNode())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlineCfgNode())  {	  if(c.canInline()    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
22	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlineChildren())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.inlineChildren())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlineChildren())  {	  if(c.canInline()    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
23	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlineNode())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.inlineNode())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlineNode())  {	  if(c.canInline()    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
24	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlineCharacters())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.inlineCharacters())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlineCharacters())  {	  if(c.canInline()    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
25	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlinePath())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.inlinePath())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlinePath())  {	  if(c.canInline()    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
26	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlineVariable()  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.inlineVariable()  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlineVariable()  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(c.canInline()    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
27	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInline()  ||!c.canInline())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.canInline()  ||!c.canInline())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInline()  ||!c.canInline())  {	  if(c.canInline()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
28	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInline())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInline())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInline()  ||  c.canInline())  {	  if(c.canInline()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
29	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInlineChildren())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInlineChildren())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInline()  ||  c.canInlineChildren())  {	  if(c.canInline()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
30	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInlineCfgNode())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInlineCfgNode())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInline()  ||  c.canInlineCfgNode())  {	  if(c.canInline()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
31	[BUG]  [BUGGY]  if(!c.canInline()  ||!c.canInline())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(!c.canInline()  ||!c.canInline())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  ||!c.canInline())  {	  if(c.canInline()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
32	[BUG]  [BUGGY]  if(c.canInline()  &&!c.canInline())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  &&!c.canInline())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&!c.canInline())  {	  if(c.canInline()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
33	[BUG]  [BUGGY]  if(c.canInline()  ||!c.canInline()  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||!c.canInline()  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||!c.canInline()  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(c.canInline()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
34	[BUG]  [BUGGY]  if(c.canInline()  ||!c.canInlineCfgNode())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||!c.canInlineCfgNode())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||!c.canInlineCfgNode())  {	  if(c.canInline()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
35	[BUG]  [BUGGY]  if(c.canInline()  ||!c.canInline()  ||!c.canInline())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||!c.canInline()  ||!c.canInline())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||!c.canInline()  ||!c.canInline())  {	  if(c.canInline()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
36	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineVar(t.getScopeRoot()))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineVar(t.getScopeRoot()))  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineVar(t.getScopeRoot()))  {	  if(c.canInline()    ||    c.canInlinePlaceholder())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
37	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineVariable())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineVariable())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineVariable())  {	  if(c.canInline()    ||    c.canInlinePlaceholder())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
38	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineCfgNode())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineCfgNode())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineCfgNode())  {	  if(c.canInline()    ||    c.canInlinePlaceholder())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
39	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineVar(c))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineVar(c))  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineVar(c))  {	  if(c.canInline()    ||    c.canInlinePlaceholder())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
40	[BUG]  [BUGGY]  if(c.canInline()  &&  c.canInlinePlaceholder())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  &&  c.canInlinePlaceholder())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.canInlinePlaceholder())  {	  if(c.canInline()    ||    c.canInlinePlaceholder())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
41	[BUG]  [BUGGY]  if(c.inlineCfgNode())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.inlineCfgNode())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineCfgNode())  {	  if(c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
42	[BUG]  [BUGGY]  if(c.inlineChildren())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.inlineChildren())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineChildren())  {	  if(c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
43	[BUG]  [BUGGY]  if(c.inlineVariable()  ||  c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.inlineVariable()  ||  c.inlineVariable())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineVariable()  ||  c.inlineVariable())  {	  if(c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
44	[BUG]  [BUGGY]  if(c.inlineCfgNode()  ||  c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.inlineCfgNode()  ||  c.inlineVariable())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineCfgNode()  ||  c.inlineVariable())  {	  if(c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
45	[BUG]  [BUGGY]  if(c.inlineChildren()  ||  c.inlineChildren())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.inlineChildren()  ||  c.inlineChildren())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineChildren()  ||  c.inlineChildren())  {	  if(c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
46	[BUG]  [BUGGY]  if(c.inlineNode())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.inlineNode())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineNode())  {	  if(c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
47	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(c);  reachingUses.addChildToFront(c);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  NodeUtil.copyCurrentStructure(c);  reachingUses.addChildToFront(c);  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.copyCurrentStructure(c);  reachingUses.addChildToFront(c);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
48	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  NodeUtil.mayHaveSideEffects(c,  reachingUses);  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.mayHaveSideEffects(c,  reachingUses);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
49	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(c,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  NodeUtil.copyCurrentStructure(c,  reachingUses);  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.copyCurrentStructure(c,  reachingUses);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
50	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses);  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
51	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(c);  reachingUses.addChildToBack(c);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  NodeUtil.copyCurrentStructure(c);  reachingUses.addChildToBack(c);  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.copyCurrentStructure(c);  reachingUses.addChildToBack(c);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
52	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  NodeUtil.mayHaveSideEffects(c);  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.mayHaveSideEffects(c);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
53	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(c);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  NodeUtil.copyCurrentStructure(c);  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.copyCurrentStructure(c);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
54	[BUG]  [BUGGY]  if(c.canInline()  &&  c.canInlineVariable())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  &&  c.canInlineVariable())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.canInlineVariable())  {	  if(c.canInline()    ||    c.canInlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
55	[BUG]  [BUGGY]  if(c.canInline()  &&  c.canInlineCfgNode)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  &&  c.canInlineCfgNode)  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.canInlineCfgNode)  {	  if(c.canInline()    ||    c.canInlineCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
56	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePrettyPrinter)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.canInlinePrettyPrinter)  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePrettyPrinter)  {	  if(c.canInline()    ||    c.canInlineCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
57	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  =  false)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  =  false)  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode  =  false)  {	  if(c.canInline()    ||    c.canInlineCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
58	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineDeclaration())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.canInlineDeclaration())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineDeclaration())  {	  if(c.canInline()    ||    c.canInlineCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
59	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineFunctionDeclaration)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.canInlineFunctionDeclaration)  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineFunctionDeclaration)  {	  if(c.canInline()    ||    c.canInlineCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
60	[BUG]  [BUGGY]  if(c.inlineVariable()  ||!c.canInline())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.inlineVariable()  ||!c.canInline())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineVariable()  ||!c.canInline())  {	  if(c.canInline()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
61	[BUG]  [BUGGY]  if(c.isInline()  ||!c.canInline())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.isInline()  ||!c.canInline())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.isInline()  ||!c.canInline())  {	  if(c.canInline()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
62	[BUG]  [BUGGY]  if(c.canInline()  &&  c.canInlineBlock())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  &&  c.canInlineBlock())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.canInlineBlock())  {	  if(c.canInline()    ||    c.canInlineBlock())    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
63	[BUG]  [BUGGY]  if(!c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(!c.inlineVariable())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.inlineVariable())  {	  if(c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
64	[BUG]  [BUGGY]  if(c.inlineFunction())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.inlineFunction())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineFunction())  {	  if(c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
65	[BUG]  [BUGGY]  if(c.inlineIfNotFound())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.inlineIfNotFound())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineIfNotFound())  {	  if(c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
66	[BUG]  [BUGGY]  if(c.inlineInline())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.inlineInline())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineInline())  {	  if(c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
67	[BUG]  [BUGGY]  if(c.canInline()  &&  c.canInline())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  &&  c.canInline())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.canInline())  {	  if(c.canInline()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
68	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
69	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
70	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
71	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates());  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates());	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
72	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
73	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(v.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(v.getScopeRoot().getLastChild());  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(v.getScopeRoot().getLastChild());	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
74	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlineFunction())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.inlineFunction())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlineFunction())  {	  if(c.canInline()    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
75	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineChildren())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineChildren())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineChildren())  {	  if(c.canInline()    ||    c.canInlinePlaceholder())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
76	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineDeclaration())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineDeclaration())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineDeclaration())  {	  if(c.canInline()    ||    c.canInlinePlaceholder())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
77	[BUG]  [BUGGY]  if(c!=  null  &&  c.canInline()  &&  c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c!=  null  &&  c.canInline()  &&  c.inlineVariable())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c!=  null  &&  c.canInline()  &&  c.inlineVariable())  {	  if(c.canInline()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
78	[BUG]  [BUGGY]  if(c.canInline()  &&  c.inlineCfgNode())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  &&  c.inlineCfgNode())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.inlineCfgNode())  {	  if(c.canInline()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
79	[BUG]  [BUGGY]  if(c.canInline()  &&  c.inlinePrettyPrinter())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  &&  c.inlinePrettyPrinter())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.inlinePrettyPrinter())  {	  if(c.canInline()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
80	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePathNode)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.canInlinePathNode)  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePathNode)  {	  if(c.canInline()    ||    c.canInlineCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
81	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCopyNode)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.canInlineCopyNode)  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCopyNode)  {	  if(c.canInline()    ||    c.canInlineCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
82	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  ||  c.canInlinePath())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  ||  c.canInlinePath())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode  ||  c.canInlinePath())  {	  if(c.canInline()    ||    c.canInlineCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
83	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.add(c);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.add(c);  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.add(c);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
84	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.inline(c);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.inline(c);  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.inline(c);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
85	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.addAll(c);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.addAll(c);  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.addAll(c);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
86	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlinePlaceholder())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlinePlaceholder())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlinePlaceholder())  {	  if(c.canInline()    ||    c.canInlinePlaceholder())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
87	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineCharacters())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineCharacters())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineCharacters())  {	  if(c.canInline()    ||    c.canInlinePlaceholder())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
88	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineParent())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineParent())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineParent())  {	  if(c.canInline()    ||    c.canInlinePlaceholder())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
89	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineBlock())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineBlock())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineBlock())  {	  if(c.canInline()    ||    c.canInlinePlaceholder())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
90	[BUG]  [BUGGY]  if(c.canInlineDeclaration()  &&  c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInlineDeclaration()  &&  c.inlineVariable())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInlineDeclaration()  &&  c.inlineVariable())  {	  if(c.canInline()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
91	[BUG]  [BUGGY]  if(c.canInlineBlock()  &&  c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInlineBlock()  &&  c.inlineVariable())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInlineBlock()  &&  c.inlineVariable())  {	  if(c.canInline()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
92	[BUG]  [BUGGY]  if(c.inline()  ||!c.canInline())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.inline()  ||!c.canInline())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inline()  ||!c.canInline())  {	  if(c.canInline()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
93	[BUG]  [BUGGY]  if(c.canInline()  ||!c.canInlineBlock())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||!c.canInlineBlock())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||!c.canInlineBlock())  {	  if(c.canInline()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
94	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canHaveSideEffects())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canHaveSideEffects())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canHaveSideEffects())  {	  if(c.canInline()    ||    c.canInlineBlock())    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
95	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlinePlaceholder())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlinePlaceholder())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlinePlaceholder())  {	  if(c.canInline()    ||    c.canInlineBlock())    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
96	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineParent())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineParent())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineParent())  {	  if(c.canInline()    ||    c.canInlineBlock())    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
97	[BUG]  [BUGGY]  if(c.inline()  ||  c.inline())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.inline()  ||  c.inline())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inline()  ||  c.inline())  {	  if(c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
98	[BUG]  [BUGGY]  if(c.inlinePath())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.inlinePath())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlinePath())  {	  if(c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
99	[BUG]  [BUGGY]  if(c.inlineCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.inlineCfgNode)  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineCfgNode)  {	  if(c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
100	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canHaveSideEffects())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canHaveSideEffects())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInline()  ||  c.canHaveSideEffects())  {	  if(c.canInline()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
101	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInlineBlock())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInlineBlock())  {  [BUGGY]    c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInline()  ||  c.canInlineBlock())  {	  if(c.canInline()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
