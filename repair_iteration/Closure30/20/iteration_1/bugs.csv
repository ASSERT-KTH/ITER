bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInline())  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  [BUGGY]  if(c.canInline()  ||  c.canInline())  {  [BUGGY]  c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInline())  {	if  (c.canInline())  {  	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
2	[BUG]  [BUGGY]  if(c.canInline()  &&  c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  [BUGGY]  if(c.canInline()  &&  c.inlineVariable())  {  [BUGGY]  c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.inlineVariable())  {	if  (c.canInline())  {  	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
3	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  [BUGGY]  if(c.canInline()  ||  c.inlineVariable())  {  [BUGGY]  c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlineVariable())  {	if  (c.canInline())  {  	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
4	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineVariable())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  [BUGGY]  if(c.canInline()  ||  c.canInlineVariable())  {  [BUGGY]  c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineVariable())  {	if  (c.canInline())  {  	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
5	[BUG]  [BUGGY]  if(c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  [BUGGY]  if(c.inlineVariable())  {  [BUGGY]  c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineVariable())  {	if  (c.canInline())  {  	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
6	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]              AssertionFailedError  [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  [BUGGY]    [BUGGY]  c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	  	if  (c.canInline())  {  	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
7	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode)  {  [BUGGY]  c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode)  {	if  (c.canInline())  {  	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
8	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder())  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder())  {  [BUGGY]  c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder())  {	if  (c.canInline())  {  	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
9	[BUG]  [BUGGY]  if(c.canInline()  ||!c.canInline())  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  [BUGGY]  if(c.canInline()  ||!c.canInline())  {  [BUGGY]  c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||!c.canInline())  {	if  (c.canInline())  {  	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
10	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock())  {  [BUGGY]  c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock())  {	if  (c.canInline())  {  	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
