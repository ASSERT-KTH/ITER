bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(!c.canInline()  &&!c.canInline())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  &&!c.canInline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  &&!c.canInline())  {	  if(!c.canInline()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
2	[BUG]  [BUGGY]  if(!c.canInlineVar(varName)||!c.canInline())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInlineVar(varName)||!c.canInline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInlineVar(varName)||!c.canInline())  {	  if(!c.canInline()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
3	[BUG]  [BUGGY]  if(!c.isInline()  &&!c.canInline())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.isInline()  &&!c.canInline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.isInline()  &&!c.canInline())  {	  if(!c.canInline()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
4	[BUG]  [BUGGY]  if(!c.inline()  &&!c.canInline())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.inline()  &&!c.canInline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.inline()  &&!c.canInline())  {	  if(!c.canInline()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
5	[BUG]  [BUGGY]  if(!c.canInline()  &&!c.canInline()  ||!c.canInline())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  &&!c.canInline()  ||!c.canInline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  &&!c.canInline()  ||!c.canInline())  {	  if(!c.canInline()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
6	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(v.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(v.getScopeRoot().getLastChild());  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(v.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(v.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
7	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(v.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(v.getScopeRoot().getFirstChild());  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(v.getScopeRoot().getFirstChild());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(v.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
8	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(v.getScopeRoot().getLastChild(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(v.getScopeRoot().getLastChild(),  reachingUses);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(v.getScopeRoot().getLastChild(),  reachingUses);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(v.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
9	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(v.getScopeRoot().getLastChild(),  c);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(v.getScopeRoot().getLastChild(),  c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(v.getScopeRoot().getLastChild(),  c);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(v.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
10	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  v,  new  GatherCandiates()).traverse(v.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  v,  new  GatherCandiates()).traverse(v.getScopeRoot().getLastChild());  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  v,  new  GatherCandiates()).traverse(v.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(v.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
11	[BUG]  [BUGGY]  if(c.inlineNode()  ||  c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineNode()  ||  c.inlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineNode()  ||  c.inlineVariable())  {	  if(c.inlineVariable()    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
12	[BUG]  [BUGGY]  if(c.inlineFunction()  ||  c.inlineFunction())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineFunction()  ||  c.inlineFunction())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineFunction()  ||  c.inlineFunction())  {	  if(c.inlineVariable()    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
13	[BUG]  [BUGGY]  if(c.inlineVariable()  ||  c.inlineNode())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineVariable()  ||  c.inlineNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineVariable()  ||  c.inlineNode())  {	  if(c.inlineVariable()    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
14	[BUG]  [BUGGY]  if(c.inlineParent()  ||  c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineParent()  ||  c.inlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineParent()  ||  c.inlineVariable())  {	  if(c.inlineVariable()    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
15	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineChildren()  ||  c.canInlineCfgNode())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineChildren()  ||  c.canInlineCfgNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineChildren()  ||  c.canInlineCfgNode())  {	  if(c.canInline()    ||    c.canInlineChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
16	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineChildren()  ||  c.canInlineVars())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineChildren()  ||  c.canInlineVars())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineChildren()  ||  c.canInlineVars())  {	  if(c.canInline()    ||    c.canInlineChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
17	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineChildren()  ||  c.canInlineParent())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineChildren()  ||  c.canInlineParent())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineChildren()  ||  c.canInlineParent())  {	  if(c.canInline()    ||    c.canInlineChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
18	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineChildren()  ||  c.canInlinePath())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineChildren()  ||  c.canInlinePath())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineChildren()  ||  c.canInlinePath())  {	  if(c.canInline()    ||    c.canInlineChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
19	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePath()  ||  c.canInlineBlock()  ||  c.canInlinePath())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePath()  ||  c.canInlineBlock()  ||  c.canInlinePath())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePath()  ||  c.canInlineBlock()  ||  c.canInlinePath())  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlinePath())    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
20	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePath()  ||  c.canInlineBlock())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePath()  ||  c.canInlineBlock())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePath()  ||  c.canInlineBlock())  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlinePath())    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
21	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineFunction())  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineFunction())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineFunction())  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlinePath())    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
22	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePathNode  ||  c.canInlineCfgNode)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePathNode  ||  c.canInlineCfgNode)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePathNode  ||  c.canInlineCfgNode)  {	  if(c.canInline()    ||    c.canInlinePathNode)    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
23	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePathNode,  reachingUses)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePathNode,  reachingUses)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePathNode,  reachingUses)  {	  if(c.canInline()    ||    c.canInlinePathNode)    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
24	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePathNode  ||  c.canInlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePathNode  ||  c.canInlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePathNode  ||  c.canInlineVariable())  {	  if(c.canInline()    ||    c.canInlinePathNode)    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
25	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineParentNode)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineParentNode)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineParentNode)  {	  if(c.canInline()    ||    c.canInlinePathNode)    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
26	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePathNode  =  true)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePathNode  =  true)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePathNode  =  true)  {	  if(c.canInline()    ||    c.canInlinePathNode)    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
27	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  =  true)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  =  true)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode  =  true)  {	  if(c.canInline()    ||    c.canInlineCfgNode    =    false)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
28	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  ==  false)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  ==  false)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode  ==  false)  {	  if(c.canInline()    ||    c.canInlineCfgNode    =    false)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
29	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode!=  false)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode!=  false)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode!=  false)  {	  if(c.canInline()    ||    c.canInlineCfgNode    =    false)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
30	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  >  false)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  >  false)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode  >  false)  {	  if(c.canInline()    ||    c.canInlineCfgNode    =    false)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
31	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  <  false)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  <  false)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode  <  false)  {	  if(c.canInline()    ||    c.canInlineCfgNode    =    false)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
32	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  >=  false)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  >=  false)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode  >=  false)  {	  if(c.canInline()    ||    c.canInlineCfgNode    =    false)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
33	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  &&  t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  &&  t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode  &&  t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION)  {	  if(c.canInline()    ||    c.canInlineCfgNode    ||    t.getScopeRoot().getLastChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
34	[BUG]  [BUGGY]  if(c.canInline()  &&  c.canInlineCfgNode  ||  t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.canInlineCfgNode  ||  t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.canInlineCfgNode  ||  t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION)  {	  if(c.canInline()    ||    c.canInlineCfgNode    ||    t.getScopeRoot().getLastChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
35	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  ||  c.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  ||  c.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode  ||  c.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION)  {	  if(c.canInline()    ||    c.canInlineCfgNode    ||    t.getScopeRoot().getLastChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
36	[BUG]  [BUGGY]  if(t.canInline()  ||  c.canInlineCfgNode  ||  c.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(t.canInline()  ||  c.canInlineCfgNode  ||  c.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(t.canInline()  ||  c.canInlineCfgNode  ||  c.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION)  {	  if(c.canInline()    ||    c.canInlineCfgNode    ||    t.getScopeRoot().getLastChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
37	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  ||  c.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  ||  c.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode  ||  c.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(c.canInline()    ||    c.canInlineCfgNode    ||    t.getScopeRoot().getLastChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
38	[BUG]  [BUGGY]  if(!c.canInline()  &&  c.canInlineCfgNode  ||  t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  &&  c.canInlineCfgNode  ||  t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  &&  c.canInlineCfgNode  ||  t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION)  {	  if(c.canInline()    ||    c.canInlineCfgNode    ||    t.getScopeRoot().getLastChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
39	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  &&  t.getScopeRoot().getLastChild().getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  &&  t.getScopeRoot().getLastChild().getType()!=  Token.FUNCTION)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode  &&  t.getScopeRoot().getLastChild().getType()!=  Token.FUNCTION)  {	  if(c.canInline()    ||    c.canInlineCfgNode    ||    t.getScopeRoot().getLastChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
40	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getLastChild());  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.inline(c);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
41	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getFirstChild());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.inline(c);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
42	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  reachingUses.inline(c);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  reachingUses.inline(c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  reachingUses.inline(c);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.inline(c);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
43	[BUG]  [BUGGY]  reachingUses.inline(c);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  reachingUses.inline(c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	reachingUses.inline(c);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.inline(c);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
44	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.inline(c);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.inline(c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.inline(c);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.inline(c);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
45	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  reachingUses);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.inline(c);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
46	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.inline(c);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.inline(c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.inline(c);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.inline(c);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
47	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlinePath()  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlinePath()  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlinePath()  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(c.canInline()    ||    c.inlinePath())    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
48	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlinePath()  ||  t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlinePath()  ||  t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlinePath()  ||  t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION)  {	  if(c.canInline()    ||    c.inlinePath())    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
49	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlineVar(c))  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlineVar(c))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlineVar(c))  {	  if(c.canInline()    ||    c.inlinePath())    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
50	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlinePath()  ||  t.getScopeRoot().getLastChild().getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlinePath()  ||  t.getScopeRoot().getLastChild().getType()  ==  Token.VAR)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlinePath()  ||  t.getScopeRoot().getLastChild().getType()  ==  Token.VAR)  {	  if(c.canInline()    ||    c.inlinePath())    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
51	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  numUseWithinUseCfgNode);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses,  numUseWithinUseCfgNode);	  NodeTraversal.traverse(compiler,    cfg,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
52	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses,  c);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses,  c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  reachingUses,  c);	  NodeTraversal.traverse(compiler,    cfg,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
53	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses,  cfg);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses,  cfg);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  reachingUses,  cfg);	  NodeTraversal.traverse(compiler,    cfg,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
54	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  null);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  null);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses,  null);	  NodeTraversal.traverse(compiler,    cfg,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
55	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  reachingDef);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses,  reachingDef);	  NodeTraversal.traverse(compiler,    cfg,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
56	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  true);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  true);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses,  true);	  NodeTraversal.traverse(compiler,    cfg,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
57	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  startingCfgNode);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  startingCfgNode);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses,  startingCfgNode);	  NodeTraversal.traverse(compiler,    cfg,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
58	[BUG]  [BUGGY]  if(c.inlineVars())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineVars())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineVars())  {	  if(c.inlineFunction())    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
59	[BUG]  [BUGGY]  if(!c.inlineFunction())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.inlineFunction())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.inlineFunction())  {	  if(c.inlineFunction())    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
60	[BUG]  [BUGGY]  if(c.inlineVar(c))  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineVar(c))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineVar(c))  {	  if(c.inlineFunction())    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
61	[BUG]  [BUGGY]  if(c.inlineVar())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineVar())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineVar())  {	  if(c.inlineFunction())    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
62	[BUG]  [BUGGY]  if(c.inlineVar(varName))  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineVar(varName))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineVar(varName))  {	  if(c.inlineFunction())    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
63	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePath()  ||  c.canInlineCfgNode())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePath()  ||  c.canInlineCfgNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePath()  ||  c.canInlineCfgNode())  {	  if(c.canInline()    ||    c.canInlinePath())    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
64	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePath()  ||  c.canInlineVar(t.getScopeRoot()))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePath()  ||  c.canInlineVar(t.getScopeRoot()))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePath()  ||  c.canInlineVar(t.getScopeRoot()))  {	  if(c.canInline()    ||    c.canInlinePath())    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
65	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePath()  ||  c.canInlineParent())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePath()  ||  c.canInlineParent())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePath()  ||  c.canInlineParent())  {	  if(c.canInline()    ||    c.canInlinePath())    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
66	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePath()  ||  c.canInlineChildren())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePath()  ||  c.canInlineChildren())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePath()  ||  c.canInlineChildren())  {	  if(c.canInline()    ||    c.canInlinePath())    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
67	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePath()  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePath()  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePath()  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(c.canInline()    ||    c.canInlinePath())    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
68	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlineVars())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlineVars())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlineVars())  {	  if(c.canInline()    ||    c.inlineChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
69	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlineChildren()  ||  c.isVarDeclaration())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlineChildren()  ||  c.isVarDeclaration())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlineChildren()  ||  c.isVarDeclaration())  {	  if(c.canInline()    ||    c.inlineChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
70	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlineChildren()  ||  c.isVarArgs())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlineChildren()  ||  c.isVarArgs())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlineChildren()  ||  c.isVarArgs())  {	  if(c.canInline()    ||    c.inlineChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
71	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  reachingUses).traverse(t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  reachingUses).traverse(t.getScopeRoot().getLastChild());  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  c,  reachingUses).traverse(t.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    c,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
72	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());	  NodeTraversal.traverse(compiler,    c,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
73	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  reachingUses,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  reachingUses,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  c,  reachingUses,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    c,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
74	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  reachingUses);	  NodeTraversal.traverse(compiler,    c,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
75	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  reachingUses),  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  reachingUses),  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  c,  reachingUses),  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    c,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
76	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  n,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    c,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
77	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlinePath(t.getScopeRoot()))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlinePath(t.getScopeRoot()))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlinePath(t.getScopeRoot()))  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlineVar(t.getScopeRoot()))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
78	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineFunction(t.getScopeRoot()))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineFunction(t.getScopeRoot()))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineFunction(t.getScopeRoot()))  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlineVar(t.getScopeRoot()))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
79	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineCfgNode(t.getScopeRoot()))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineCfgNode(t.getScopeRoot()))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineCfgNode(t.getScopeRoot()))  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlineVar(t.getScopeRoot()))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
80	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineReturn(t.getScopeRoot()))  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineReturn(t.getScopeRoot()))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineReturn(t.getScopeRoot()))  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlineVar(t.getScopeRoot()))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
81	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineLineVar(t.getScopeRoot()))  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineLineVar(t.getScopeRoot()))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineLineVar(t.getScopeRoot()))  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlineVar(t.getScopeRoot()))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
82	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineVar(t.getScopeRoot())&&  c.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineVar(t.getScopeRoot())&&  c.isEmpty())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineVar(t.getScopeRoot())&&  c.isEmpty())  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlineVar(t.getScopeRoot()))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
83	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineChildren()  ||  c.canInlineCfgNode  ||  c.canInlinePath())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineChildren()  ||  c.canInlineCfgNode  ||  c.canInlinePath())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineChildren()  ||  c.canInlineCfgNode  ||  c.canInlinePath())  {	  if(c.canInline()    ||    c.canInlineCfgNode    ||    c.canInlinePath())    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
84	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  &&  c.canInlinePath())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  &&  c.canInlinePath())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode  &&  c.canInlinePath())  {	  if(c.canInline()    ||    c.canInlineCfgNode    ||    c.canInlinePath())    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
85	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePath()  ||  c.canInlineCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePath()  ||  c.canInlineCfgNode)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePath()  ||  c.canInlineCfgNode)  {	  if(c.canInline()    ||    c.canInlineCfgNode    ||    c.canInlinePath())    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
86	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  ||  c.canInlineParent())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  ||  c.canInlineParent())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode  ||  c.canInlineParent())  {	  if(c.canInline()    ||    c.canInlineCfgNode    ||    c.canInlinePath())    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
87	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  ||  c.canInlineFile())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  ||  c.canInlineFile())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode  ||  c.canInlineFile())  {	  if(c.canInline()    ||    c.canInlineCfgNode    ||    c.canInlinePath())    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
88	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  numUseWithinUseCfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  numUseWithinUseCfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  numUseWithinUseCfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
89	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(c.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(c.getScopeRoot().getFirstChild());  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(c.getScopeRoot().getFirstChild());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
90	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(c.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(c.getScopeRoot().getLastChild());  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(c.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
91	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlineBlock()  ||  c.canHaveSideEffects())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlineBlock()  ||  c.canHaveSideEffects())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlineBlock()  ||  c.canHaveSideEffects())  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canHaveSideEffects())    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
92	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.mayHaveSideEffects())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.mayHaveSideEffects())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.mayHaveSideEffects())  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canHaveSideEffects())    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
93	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canHaveSideEffects()  ||  c.canHaveSideEffects())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canHaveSideEffects()  ||  c.canHaveSideEffects())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canHaveSideEffects()  ||  c.canHaveSideEffects())  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canHaveSideEffects())    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
94	[BUG]  [BUGGY]  if(!c.canInline()  ||  c.canInlineBlock()  ||  c.canHaveSideEffects())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  ||  c.canInlineBlock()  ||  c.canHaveSideEffects())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  ||  c.canInlineBlock()  ||  c.canHaveSideEffects())  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canHaveSideEffects())    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
95	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBase()  ||  c.canHaveSideEffects())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBase()  ||  c.canHaveSideEffects())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBase()  ||  c.canHaveSideEffects())  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canHaveSideEffects())    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
96	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canHaveSideEffects()  ||  c.mayHaveSideEffects())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canHaveSideEffects()  ||  c.mayHaveSideEffects())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canHaveSideEffects()  ||  c.mayHaveSideEffects())  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canHaveSideEffects())    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
97	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlinePlaceholder()  ||  c.canInlineCharacters())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlinePlaceholder()  ||  c.canInlineCharacters())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlinePlaceholder()  ||  c.canInlineCharacters())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineCharacters())    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
98	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCharacters()  ||  c.canInlinePlaceholder())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCharacters()  ||  c.canInlinePlaceholder())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCharacters()  ||  c.canInlinePlaceholder())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineCharacters())    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
99	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineChildren()  ||  c.canInlineCharacters())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineChildren()  ||  c.canInlineCharacters())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineChildren()  ||  c.canInlineCharacters())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineCharacters())    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
100	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  &&  c.canInlineCharacters())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  &&  c.canInlineCharacters())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  &&  c.canInlineCharacters())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineCharacters())    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
101	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineLineCharacters())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineLineCharacters())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineLineCharacters())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineCharacters())    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
102	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineVars())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineVars())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineVars())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineCharacters())    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
103	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(c,  reachingUses,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.copyCurrentStructure(c,  reachingUses,  numUseWithinUseCfgNode);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.copyCurrentStructure(c,  reachingUses,  numUseWithinUseCfgNode);	  NodeUtil.copyCurrentStructure(c,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
104	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(c,  reachingUses,  c);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.copyCurrentStructure(c,  reachingUses,  c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.copyCurrentStructure(c,  reachingUses,  c);	  NodeUtil.copyCurrentStructure(c,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
105	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(c,  numUseWithinUseCfgNode,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.copyCurrentStructure(c,  numUseWithinUseCfgNode,  reachingUses);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.copyCurrentStructure(c,  numUseWithinUseCfgNode,  reachingUses);	  NodeUtil.copyCurrentStructure(c,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
106	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(c,  reachingUses,  cfg);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.copyCurrentStructure(c,  reachingUses,  cfg);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.copyCurrentStructure(c,  reachingUses,  cfg);	  NodeUtil.copyCurrentStructure(c,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
107	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(c,  reachingUses,  n);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.copyCurrentStructure(c,  reachingUses,  n);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.copyCurrentStructure(c,  reachingUses,  n);	  NodeUtil.copyCurrentStructure(c,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
108	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(c,  reachingUses,  startingDef);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.copyCurrentStructure(c,  reachingUses,  startingDef);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.copyCurrentStructure(c,  reachingUses,  startingDef);	  NodeUtil.copyCurrentStructure(c,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
109	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(c,  reachingUses,  candidate);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.copyCurrentStructure(c,  reachingUses,  candidate);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.copyCurrentStructure(c,  reachingUses,  candidate);	  NodeUtil.copyCurrentStructure(c,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
110	[BUG]  [BUGGY]  NodeUtil.inlineSideEffects(c,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.inlineSideEffects(c,  reachingUses);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.inlineSideEffects(c,  reachingUses);	  NodeUtil.mayHaveSideEffects(c);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
111	[BUG]  [BUGGY]  NodeUtil.inlineCandidate(c,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.inlineCandidate(c,  reachingUses);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.inlineCandidate(c,  reachingUses);	  NodeUtil.mayHaveSideEffects(c);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
112	[BUG]  [BUGGY]  NodeUtil.removeChild(c);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.removeChild(c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.removeChild(c);	  NodeUtil.mayHaveSideEffects(c);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
113	[BUG]  [BUGGY]  NodeUtil.inlineCfgNode(c,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.inlineCfgNode(c,  reachingUses);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.inlineCfgNode(c,  reachingUses);	  NodeUtil.mayHaveSideEffects(c);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
114	[BUG]  [BUGGY]  NodeUtil.removeChild(c,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.removeChild(c,  reachingUses);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.removeChild(c,  reachingUses);	  NodeUtil.mayHaveSideEffects(c);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
115	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineReturn()  ||  c.canHaveSideEffects())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineReturn()  ||  c.canHaveSideEffects())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineReturn()  ||  c.canHaveSideEffects())  {	  if(c.canInline()    ||    c.canInlineReturn())    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
116	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineVar(t.getScopeRoot()))  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineVar(t.getScopeRoot()))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineVar(t.getScopeRoot()))  {	  if(c.canInline()    ||    c.canInlineReturn())    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
117	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCopyNode  ||  c.canInlineCfgNode)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCopyNode  ||  c.canInlineCfgNode)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCopyNode  ||  c.canInlineCfgNode)  {	  if(c.canInline()    ||    c.canInlineCopyNode)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
118	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCopyNode  ||  c.canInlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCopyNode  ||  c.canInlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCopyNode  ||  c.canInlineVariable())  {	  if(c.canInline()    ||    c.canInlineCopyNode)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
119	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCopyNode  =  false)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCopyNode  =  false)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCopyNode  =  false)  {	  if(c.canInline()    ||    c.canInlineCopyNode)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
120	[BUG]  [BUGGY]  if(!c.inlineIfNotFound())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.inlineIfNotFound())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.inlineIfNotFound())  {	  if(c.inlineIfNotFound())    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
121	[BUG]  [BUGGY]  if(c.inlineIfNotFound()  &&  numUseWithinUseCfgNode  >  0)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineIfNotFound()  &&  numUseWithinUseCfgNode  >  0)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineIfNotFound()  &&  numUseWithinUseCfgNode  >  0)  {	  if(c.inlineIfNotFound())    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
122	[BUG]  [BUGGY]  if(c.inlineIfNotFound()  ||  c.inlineIfNotFound())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineIfNotFound()  ||  c.inlineIfNotFound())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineIfNotFound()  ||  c.inlineIfNotFound())  {	  if(c.inlineIfNotFound())    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
123	[BUG]  [BUGGY]  if(c.inlineIfNotFound()  &&  numUseWithinUseCfgNode  >  1)  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineIfNotFound()  &&  numUseWithinUseCfgNode  >  1)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineIfNotFound()  &&  numUseWithinUseCfgNode  >  1)  {	  if(c.inlineIfNotFound())    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
124	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlineVariable()  ||  c.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlineVariable()  ||  c.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlineVariable()  ||  c.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(c.canInline()    ||    c.inlineVariable()    ||    t.getScopeRoot().getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
125	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlineVariable()  ||  c.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlineVariable()  ||  c.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlineVariable()  ||  c.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION)  {	  if(c.canInline()    ||    c.inlineVariable()    ||    t.getScopeRoot().getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
126	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlineVariable()  ||  t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlineVariable()  ||  t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlineVariable()  ||  t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION)  {	  if(c.canInline()    ||    c.inlineVariable()    ||    t.getScopeRoot().getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
127	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlineVariable()  &&  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlineVariable()  &&  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlineVariable()  &&  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(c.canInline()    ||    c.inlineVariable()    ||    t.getScopeRoot().getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
128	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlineVariable()  ||  c.getScopeRoot().getFirstChild().getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlineVariable()  ||  c.getScopeRoot().getFirstChild().getType()!=  Token.FUNCTION)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlineVariable()  ||  c.getScopeRoot().getFirstChild().getType()!=  Token.FUNCTION)  {	  if(c.canInline()    ||    c.inlineVariable()    ||    t.getScopeRoot().getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
129	[BUG]  [BUGGY]  if(c.canInline()  &&  c.inlineVariable()  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.inlineVariable()  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.inlineVariable()  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(c.canInline()    ||    c.inlineVariable()    ||    t.getScopeRoot().getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
130	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineParent()  ||  c.canInlineCfgNode())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineParent()  ||  c.canInlineCfgNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineParent()  ||  c.canInlineCfgNode())  {	  if(c.canInline()    ||    c.canInlineParent())    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
131	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineParent()  ||  c.canInlineChildren())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineParent()  ||  c.canInlineChildren())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineParent()  ||  c.canInlineChildren())  {	  if(c.canInline()    ||    c.canInlineParent())    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
132	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineParent()  ||  c.canInlinePath())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineParent()  ||  c.canInlinePath())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineParent()  ||  c.canInlinePath())  {	  if(c.canInline()    ||    c.canInlineParent())    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
133	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlineBlock())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlineBlock())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlineBlock())  {	  if(c.canInline()    ||    c.canInline()    ||    c.canInlineBlock())    {    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
134	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineBlock())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineBlock())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineBlock())  {	  if(c.canInline()    ||    c.canInline()    ||    c.canInlineBlock())    {    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
135	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlineBlock())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlineBlock())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlineBlock())  {	  if(c.canInline()    ||    c.canInline()    ||    c.canInlineBlock())    {    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
136	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInlineBase())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInlineBase())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInline()  ||  c.canInlineBase())  {	  if(c.canInline()    ||    c.canInline()    ||    c.canInlineBlock())    {    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
137	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInlinePath())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInlinePath())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInline()  ||  c.canInlinePath())  {	  if(c.canInline()    ||    c.canInline()    ||    c.canInlineBlock())    {    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
138	[BUG]  [BUGGY]  if(!c.canInline()  &&  c.canInline())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  &&  c.canInline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  &&  c.canInline())  {	  if(c.canInline()    &&    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
139	[BUG]  [BUGGY]  if(c.isInline()  &&  c.canInline())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.isInline()  &&  c.canInline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.isInline()  &&  c.canInline())  {	  if(c.canInline()    &&    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
140	[BUG]  [BUGGY]  if(c.canInline()  &&  c.canInline()  ||  c.canInline())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.canInline()  ||  c.canInline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.canInline()  ||  c.canInline())  {	  if(c.canInline()    &&    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
141	[BUG]  [BUGGY]  if(c.inline()  ||  c.canInline())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inline()  ||  c.canInline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inline()  ||  c.canInline())  {	  if(c.canInline()    &&    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
142	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlinePlaceholder()  ||  c.canInlineVariable())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlinePlaceholder()  ||  c.canInlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlinePlaceholder()  ||  c.canInlineVariable())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
143	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineChildren()  ||  c.canInlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineChildren()  ||  c.canInlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineChildren()  ||  c.canInlineVariable())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
144	[BUG]  [BUGGY]  if(c.inlineVariable()  &&!c.canInline())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineVariable()  &&!c.canInline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineVariable()  &&!c.canInline())  {	  if(c.inlineVariable()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
145	[BUG]  [BUGGY]  if(!c.inlineVariable()  ||!c.canInline())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.inlineVariable()  ||!c.canInline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.inlineVariable()  ||!c.canInline())  {	  if(c.inlineVariable()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
146	[BUG]  [BUGGY]  if(c.inlineVariable()  ||!c.canInlineCfgNode())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineVariable()  ||!c.canInlineCfgNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineVariable()  ||!c.canInlineCfgNode())  {	  if(c.inlineVariable()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
147	[BUG]  [BUGGY]  if(c.inlineVariable()  ||!c.isInline())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineVariable()  ||!c.isInline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineVariable()  ||!c.isInline())  {	  if(c.inlineVariable()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
148	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlineFunction()  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlineFunction()  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlineFunction()  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(c.canInline()    ||    c.inlineFunction())    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
149	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlineVar(varName))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlineVar(varName))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlineVar(varName))  {	  if(c.canInline()    ||    c.inlineFunction())    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
150	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineFunction()  ||  c.canInlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineFunction()  ||  c.canInlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineFunction()  ||  c.canInlineVariable())  {	  if(c.canInline()    ||    c.canInlineFunction())    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
151	[BUG]  [BUGGY]  if(!c.inlineNode())  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.inlineNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.inlineNode())  {	  if(c.inlineNode())    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
152	[BUG]  [BUGGY]  if(c.inlineNode()  ||  c.inlineNode())  {  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineNode()  ||  c.inlineNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineNode()  ||  c.inlineNode())  {	  if(c.inlineNode())    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
153	[BUG]  [BUGGY]  if(!c.canInline()  &&  c.canInlineBlock())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  &&  c.canInlineBlock())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  &&  c.canInlineBlock())  {	  if(c.canInline()    &&    c.canInlineBlock())    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
154	[BUG]  [BUGGY]  if(c.canInlineBlock()  ||  c.canInlineBlock())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInlineBlock()  ||  c.canInlineBlock())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInlineBlock()  ||  c.canInlineBlock())  {	  if(c.canInline()    &&    c.canInlineBlock())    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
155	[BUG]  [BUGGY]  if(c.inline()  ||  c.canInlineBlock())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inline()  ||  c.canInlineBlock())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inline()  ||  c.canInlineBlock())  {	  if(c.canInline()    &&    c.canInlineBlock())    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
156	[BUG]  [BUGGY]  if(c.canInline()  &&  c.canInlineBlock()  &&  t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.canInlineBlock()  &&  t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.canInlineBlock()  &&  t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION)  {	  if(c.canInline()    &&    c.canInlineBlock())    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
157	[BUG]  [BUGGY]  if(c.canInline()  &&  c.canInlineBlock()  &&  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.canInlineBlock()  &&  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.canInlineBlock()  &&  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(c.canInline()    &&    c.canInlineBlock())    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
158	[BUG]  [BUGGY]  reachingUses.addChildToBack(c);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  reachingUses.addChildToBack(c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	reachingUses.addChildToBack(c);	  NodeUtil.copyCurrentStructure(c);    reachingUses.addChildToBack(c);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
159	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(cfg);  reachingUses.addChildToBack(c);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.copyCurrentStructure(cfg);  reachingUses.addChildToBack(c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.copyCurrentStructure(cfg);  reachingUses.addChildToBack(c);	  NodeUtil.copyCurrentStructure(c);    reachingUses.addChildToBack(c);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
160	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(c,  reachingUses);  reachingUses.addChildToBack(c);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.copyCurrentStructure(c,  reachingUses);  reachingUses.addChildToBack(c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.copyCurrentStructure(c,  reachingUses);  reachingUses.addChildToBack(c);	  NodeUtil.copyCurrentStructure(c);    reachingUses.addChildToBack(c);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
161	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(cfg,  c);  reachingUses.addChildToBack(c);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.copyCurrentStructure(cfg,  c);  reachingUses.addChildToBack(c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.copyCurrentStructure(cfg,  c);  reachingUses.addChildToBack(c);	  NodeUtil.copyCurrentStructure(c);    reachingUses.addChildToBack(c);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
162	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(c),  reachingUses.addChildToBack(c);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.copyCurrentStructure(c),  reachingUses.addChildToBack(c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.copyCurrentStructure(c),  reachingUses.addChildToBack(c);	  NodeUtil.copyCurrentStructure(c);    reachingUses.addChildToBack(c);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
163	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(c);  reachingUses.addChildToBack(c,  c);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.copyCurrentStructure(c);  reachingUses.addChildToBack(c,  c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.copyCurrentStructure(c);  reachingUses.addChildToBack(c,  c);	  NodeUtil.copyCurrentStructure(c);    reachingUses.addChildToBack(c);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
164	[BUG]  [BUGGY]  if(!c.canInline()  &&  c.canInlineCfgNode)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  &&  c.canInlineCfgNode)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  &&  c.canInlineCfgNode)  {	  if(c.canInline()    &&    c.canInlineCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
165	[BUG]  [BUGGY]  if(c.canInlineCfgNode()  &&  c.canInlineCfgNode)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInlineCfgNode()  &&  c.canInlineCfgNode)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInlineCfgNode()  &&  c.canInlineCfgNode)  {	  if(c.canInline()    &&    c.canInlineCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
166	[BUG]  [BUGGY]  if(c.isInline()  &&  c.canInlineCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.isInline()  &&  c.canInlineCfgNode)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.isInline()  &&  c.canInlineCfgNode)  {	  if(c.canInline()    &&    c.canInlineCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
167	[BUG]  [BUGGY]  if(c.inline()  ||  c.canInlineCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inline()  ||  c.canInlineCfgNode)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inline()  ||  c.canInlineCfgNode)  {	  if(c.canInline()    &&    c.canInlineCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
168	[BUG]  [BUGGY]  if(c.isInline()  &&!c.canInline())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.isInline()  &&!c.canInline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.isInline()  &&!c.canInline())  {	  if(c.canInline()    &&!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
169	[BUG]  [BUGGY]  if(c.canInline()  &&!c.canInline()  &&!c.canInline())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&!c.canInline()  &&!c.canInline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&!c.canInline()  &&!c.canInline())  {	  if(c.canInline()    &&!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
170	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.add(c);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.add(c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.add(c);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.add(c);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
171	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  reachingUses.add(c);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  reachingUses.add(c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  reachingUses.add(c);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.add(c);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
172	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.add(c);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.add(c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.add(c);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.add(c);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
173	[BUG]  [BUGGY]  FindingUses.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.add(c);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  FindingUses.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.add(c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	FindingUses.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.add(c);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.add(c);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
174	[BUG]  [BUGGY]  if(!c.inline()  ||!c.canInline())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.inline()  ||!c.canInline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.inline()  ||!c.canInline())  {	  if(c.inline()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
175	[BUG]  [BUGGY]  if(c.inline()  ||!c.canInline()  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inline()  ||!c.canInline()  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inline()  ||!c.canInline()  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(c.inline()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
176	[BUG]  [BUGGY]  if(c.inline()  ||!c.isInline())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inline()  ||!c.isInline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inline()  ||!c.isInline())  {	  if(c.inline()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
177	[BUG]  [BUGGY]  if(c.inline()  ||!c.canInline()  ||!c.canInline())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inline()  ||!c.canInline()  ||!c.canInline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inline()  ||!c.canInline()  ||!c.canInline())  {	  if(c.inline()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
178	[BUG]  [BUGGY]  if(!c.canInline()  &&  c.canInlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  &&  c.canInlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  &&  c.canInlineVariable())  {	  if(c.canInline()    &&    c.canInlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
179	[BUG]  [BUGGY]  if(c.canInlineCfgNode()  &&  c.canInlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInlineCfgNode()  &&  c.canInlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInlineCfgNode()  &&  c.canInlineVariable())  {	  if(c.canInline()    &&    c.canInlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
180	[BUG]  [BUGGY]  if(c.inline()  ||  c.canInlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inline()  ||  c.canInlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inline()  ||  c.canInlineVariable())  {	  if(c.canInline()    &&    c.canInlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
181	[BUG]  [BUGGY]  if(c.isInline()  &&  c.canInlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.isInline()  &&  c.canInlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.isInline()  &&  c.canInlineVariable())  {	  if(c.canInline()    &&    c.canInlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
182	[BUG]  [BUGGY]  if(c.canInline()  &&  c.canInlineCfgNode())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.canInlineCfgNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.canInlineCfgNode())  {	  if(c.canInline()    &&    c.canInlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
183	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canHaveSideEffects()  ||  c.canHaveSideEffects())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canHaveSideEffects()  ||  c.canHaveSideEffects())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInline()  ||  c.canHaveSideEffects()  ||  c.canHaveSideEffects())  {	  if(c.canInline()    ||    c.canInline()    ||    c.canHaveSideEffects())    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
184	[BUG]  [BUGGY]  if(!c.canInline()  ||  c.canInline()  ||  c.canHaveSideEffects())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  ||  c.canInline()  ||  c.canHaveSideEffects())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  ||  c.canInline()  ||  c.canHaveSideEffects())  {	  if(c.canInline()    ||    c.canInline()    ||    c.canHaveSideEffects())    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
185	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.mayHaveSideEffects())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.mayHaveSideEffects())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInline()  ||  c.mayHaveSideEffects())  {	  if(c.canInline()    ||    c.canInline()    ||    c.canHaveSideEffects())    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
186	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInline()  ||!c.canHaveSideEffects())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInline()  ||!c.canHaveSideEffects())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInline()  ||!c.canHaveSideEffects())  {	  if(c.canInline()    ||    c.canInline()    ||    c.canHaveSideEffects())    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
187	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canHaveSideEffects()  ||  c.mayHaveSideEffects())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canHaveSideEffects()  ||  c.mayHaveSideEffects())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInline()  ||  c.canHaveSideEffects()  ||  c.mayHaveSideEffects())  {	  if(c.canInline()    ||    c.canInline()    ||    c.canHaveSideEffects())    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
188	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canHaveSideEffects()  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canHaveSideEffects()  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInline()  ||  c.canHaveSideEffects()  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(c.canInline()    ||    c.canInline()    ||    c.canHaveSideEffects())    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
189	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
190	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  reachingUses.analyze();  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  reachingUses.analyze();	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
191	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.analyze();  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.analyze();	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
192	[BUG]  [BUGGY]  AssertionFailedError.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  AssertionFailedError.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	AssertionFailedError.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
193	[BUG]  [BUGGY]  if(!c.canInline()  &&  c.inlineCfgNode())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  &&  c.inlineCfgNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  &&  c.inlineCfgNode())  {	  if(c.canInline()    &&    c.inlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
194	[BUG]  [BUGGY]  if(c.isInline()  &&  c.inlineCfgNode())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.isInline()  &&  c.inlineCfgNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.isInline()  &&  c.inlineCfgNode())  {	  if(c.canInline()    &&    c.inlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
195	[BUG]  [BUGGY]  if(c.inline()  ||  c.inlineCfgNode())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inline()  ||  c.inlineCfgNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inline()  ||  c.inlineCfgNode())  {	  if(c.canInline()    &&    c.inlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
196	[BUG]  [BUGGY]  if(c.canInline()  &&  c.inlineVars())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.inlineVars())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.inlineVars())  {	  if(c.canInline()    &&    c.inlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
197	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlineLines())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlineLines())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlineLines())  {	  if(c.canInline()    ||    c.inlineCharacters())    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
198	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlineLineno())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlineLineno())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlineLineno())  {	  if(c.canInline()    ||    c.inlineCharacters())    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
199	[BUG]  [BUGGY]  if(!c.canInline()  ||!c.canInlineBlock())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  ||!c.canInlineBlock())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  ||!c.canInlineBlock())  {	  if(c.canInline()    ||!c.canInlineBlock())    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
200	[BUG]  [BUGGY]  if(c.canInline()  &&!c.canInlineBlock())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&!c.canInlineBlock())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&!c.canInlineBlock())  {	  if(c.canInline()    ||!c.canInlineBlock())    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
201	[BUG]  [BUGGY]  if(c.canInline()  ||!c.canInlinePath())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||!c.canInlinePath())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||!c.canInlinePath())  {	  if(c.canInline()    ||!c.canInlineBlock())    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
202	[BUG]  [BUGGY]  if(!c.canInline()  &&  c.canInlinePlaceholder())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  &&  c.canInlinePlaceholder())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  &&  c.canInlinePlaceholder())  {	  if(c.canInline()    &&    c.canInlinePlaceholder())    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
203	[BUG]  [BUGGY]  if(c.isInline()  &&  c.canInlinePlaceholder())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.isInline()  &&  c.canInlinePlaceholder())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.isInline()  &&  c.canInlinePlaceholder())  {	  if(c.canInline()    &&    c.canInlinePlaceholder())    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
204	[BUG]  [BUGGY]  if(c.inline()  ||  c.canInlinePlaceholder())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inline()  ||  c.canInlinePlaceholder())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inline()  ||  c.canInlinePlaceholder())  {	  if(c.canInline()    &&    c.canInlinePlaceholder())    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
205	[BUG]  [BUGGY]  if(c.canInline()  &&  c.canInlinePlaceholder()  ||  c.canInlinePlaceholder())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.canInlinePlaceholder()  ||  c.canInlinePlaceholder())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.canInlinePlaceholder()  ||  c.canInlinePlaceholder())  {	  if(c.canInline()    &&    c.canInlinePlaceholder())    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
206	[BUG]  [BUGGY]  if(c.canInline()  &&  c.canInlinePlaceholder()  ||  c.canInlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.canInlinePlaceholder()  ||  c.canInlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.canInlinePlaceholder()  ||  c.canInlineVariable())  {	  if(c.canInline()    &&    c.canInlinePlaceholder())    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
207	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.addAll(c);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.addAll(c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.addAll(c);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.addAll(c);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
208	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  reachingUses.addAll(c);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  reachingUses.addAll(c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  reachingUses.addAll(c);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.addAll(c);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
209	[BUG]  [BUGGY]  FindingUses.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.addAll(c);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  FindingUses.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.addAll(c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	FindingUses.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.addAll(c);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.addAll(c);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
210	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.addAll(c);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.addAll(c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.addAll(c);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.addAll(c);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
211	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlinePlaceholder()  ||  c.canInlineBlock())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlinePlaceholder()  ||  c.canInlineBlock())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlinePlaceholder()  ||  c.canInlineBlock())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineBlock())    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
212	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlinePlaceholder()  ||  c.canInlineBlock())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlinePlaceholder()  ||  c.canInlineBlock())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlinePlaceholder()  ||  c.canInlineBlock())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineBlock())    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
213	[BUG]  [BUGGY]  if(!c.inlineInline())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.inlineInline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.inlineInline())  {	  if(c.inlineInline())    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
214	[BUG]  [BUGGY]  if(c.inlineInline()  ||  c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineInline()  ||  c.inlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineInline()  ||  c.inlineVariable())  {	  if(c.inlineInline())    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
215	[BUG]  [BUGGY]  if(c.inline()  ||  c.inlineInline())  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inline()  ||  c.inlineInline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inline()  ||  c.inlineInline())  {	  if(c.inlineInline())    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
216	[BUG]  [BUGGY]  if(c.isVarArgs()  ||  c.isInline()  ||!c.canInline())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.isVarArgs()  ||  c.isInline()  ||!c.canInline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.isVarArgs()  ||  c.isInline()  ||!c.canInline())  {	  if(c.isInline()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
217	[BUG]  [BUGGY]  if(!c.isInline()  ||!c.canInline())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.isInline()  ||!c.canInline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.isInline()  ||!c.canInline())  {	  if(c.isInline()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
218	[BUG]  [BUGGY]  if(c.isFunction()  ||!c.canInline())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.isFunction()  ||!c.canInline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.isFunction()  ||!c.canInline())  {	  if(c.isInline()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
219	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild(),  reachingUses);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild(),  reachingUses);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
220	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
221	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses),  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses),  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses),  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
222	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses()).traverse(t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses()).traverse(t.getScopeRoot().getFirstChild());  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses()).traverse(t.getScopeRoot().getFirstChild());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
223	[BUG]  [BUGGY]  if(c.canInlineDeclaration()  ||  c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInlineDeclaration()  ||  c.inlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInlineDeclaration()  ||  c.inlineVariable())  {	  if(c.canInlineDeclaration()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
224	[BUG]  [BUGGY]  if(!c.canInlineDeclaration()  &&  c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInlineDeclaration()  &&  c.inlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInlineDeclaration()  &&  c.inlineVariable())  {	  if(c.canInlineDeclaration()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
225	[BUG]  [BUGGY]  if(c.canInlineDeclaration()  &&  c.inlineCfgNode())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInlineDeclaration()  &&  c.inlineCfgNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInlineDeclaration()  &&  c.inlineCfgNode())  {	  if(c.canInlineDeclaration()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
226	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c,  reachingUses,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c,  reachingUses,  numUseWithinUseCfgNode);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.mayHaveSideEffects(c,  reachingUses,  numUseWithinUseCfgNode);	  NodeUtil.mayHaveSideEffects(c,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
227	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c,  reachingUses,  c);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c,  reachingUses,  c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.mayHaveSideEffects(c,  reachingUses,  c);	  NodeUtil.mayHaveSideEffects(c,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
228	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c,  reachingUses,  n);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c,  reachingUses,  n);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.mayHaveSideEffects(c,  reachingUses,  n);	  NodeUtil.mayHaveSideEffects(c,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
229	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c,  reachingUses)&&  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode;  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c,  reachingUses)&&  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode;  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.mayHaveSideEffects(c,  reachingUses)&&  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode;	  NodeUtil.mayHaveSideEffects(c,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
230	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c,  reachingUses)&&  numUseWithinUseCfgNode  <=  numUseWithinUseCfgNode;  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c,  reachingUses)&&  numUseWithinUseCfgNode  <=  numUseWithinUseCfgNode;  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.mayHaveSideEffects(c,  reachingUses)&&  numUseWithinUseCfgNode  <=  numUseWithinUseCfgNode;	  NodeUtil.mayHaveSideEffects(c,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
231	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInlineVar(c))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInlineVar(c))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInline()  ||  c.canInlineVar(c))  {	  if(c.canInline()    ||    c.canInline()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
232	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInlineFunction())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInlineFunction())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInline()  ||  c.canInlineFunction())  {	  if(c.canInline()    ||    c.canInline()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
233	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInlineVar(t.getScopeRoot()))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInlineVar(t.getScopeRoot()))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInline()  ||  c.canInlineVar(t.getScopeRoot()))  {	  if(c.canInline()    ||    c.canInline()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
234	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlineCfgNode())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlineCfgNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlineCfgNode())  {	  if(c.canInline()    ||    c.canInline()    ||    c.canInlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
235	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInlineNode())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInlineNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInline()  ||  c.canInlineNode())  {	  if(c.canInline()    ||    c.canInline()    ||    c.canInlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
236	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInlineFunctionDeclaration())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInlineFunctionDeclaration())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInline()  ||  c.canInlineFunctionDeclaration())  {	  if(c.canInline()    ||    c.canInline()    ||    c.canInlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
237	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  new  GatherCandiates());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  new  GatherCandiates());  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses,  new  GatherCandiates());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates());    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
238	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates(),  reachingUses);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates(),  reachingUses);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates());    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
239	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  new  GatherCandiates());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  new  GatherCandiates());  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfa,  new  GatherCandiates());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates());    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
240	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  approachingUses,  new  GatherCandiates());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  approachingUses,  new  GatherCandiates());  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  approachingUses,  new  GatherCandiates());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates());    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
241	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlinePath(c))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlinePath(c))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlinePath(c))  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlineVar(c))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
242	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineReturn(c))  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineReturn(c))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineReturn(c))  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlineVar(c))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
243	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineLineVar(c))  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineLineVar(c))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineLineVar(c))  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlineVar(c))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
244	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineFunction(c))  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineFunction(c))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineFunction(c))  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlineVar(c))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
245	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineCfgNode(c))  {  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineCfgNode(c))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineCfgNode(c))  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlineVar(c))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
246	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineCurrentScope(c))  {  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineCurrentScope(c))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineCurrentScope(c))  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlineVar(c))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
247	[BUG]  [BUGGY]  if(c.isInline()  ||  c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.isInline()  ||  c.inlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.isInline()  ||  c.inlineVariable())  {	  if(c.isInline()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
248	[BUG]  [BUGGY]  if(!c.isInline()  &&  c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.isInline()  &&  c.inlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.isInline()  &&  c.inlineVariable())  {	  if(c.isInline()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
249	[BUG]  [BUGGY]  if(c.isFunction()  &&  c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.isFunction()  &&  c.inlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.isFunction()  &&  c.inlineVariable())  {	  if(c.isInline()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
250	[BUG]  [BUGGY]  if(c.isReaching()  &&  c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.isReaching()  &&  c.inlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.isReaching()  &&  c.inlineVariable())  {	  if(c.isInline()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
251	[BUG]  [BUGGY]  if(c.isConstructor()  &&  c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.isConstructor()  &&  c.inlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.isConstructor()  &&  c.inlineVariable())  {	  if(c.isInline()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
252	[BUG]  [BUGGY]  if(c.isDeclaration()  &&  c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.isDeclaration()  &&  c.inlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.isDeclaration()  &&  c.inlineVariable())  {	  if(c.isInline()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
253	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlineBlock()  ||  c.canInlineCfgNode())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlineBlock()  ||  c.canInlineCfgNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlineBlock()  ||  c.canInlineCfgNode())  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
254	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineNode())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineNode())  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
255	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineVarNode())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineVarNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineVarNode())  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
256	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineChildren())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineChildren())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineChildren())  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
257	[BUG]  [BUGGY]  if(!c.canInline()  ||!c.canInlineCfgNode())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  ||!c.canInlineCfgNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  ||!c.canInlineCfgNode())  {	  if(c.canInline()    ||!c.canInlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
258	[BUG]  [BUGGY]  if(c.canInline()  &&!c.canInlineCfgNode())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&!c.canInlineCfgNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&!c.canInlineCfgNode())  {	  if(c.canInline()    ||!c.canInlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
259	[BUG]  [BUGGY]  if(c.canInline()  ||!c.canInlineChildNodes())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||!c.canInlineChildNodes())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||!c.canInlineChildNodes())  {	  if(c.canInline()    ||!c.canInlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
260	[BUG]  [BUGGY]  if(c.canInline()  ||!c.canInlineParentNode())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||!c.canInlineParentNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||!c.canInlineParentNode())  {	  if(c.canInline()    ||!c.canInlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
261	[BUG]  [BUGGY]  if(c.canInline()  ||!c.canInlineCfgNode()  ||  numUseWithinUseCfgNode  >  0)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||!c.canInlineCfgNode()  ||  numUseWithinUseCfgNode  >  0)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||!c.canInlineCfgNode()  ||  numUseWithinUseCfgNode  >  0)  {	  if(c.canInline()    ||!c.canInlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
262	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlinePlaceholder()  ||  c.canInlineCfgNode())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlinePlaceholder()  ||  c.canInlineCfgNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlinePlaceholder()  ||  c.canInlineCfgNode())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
263	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlinePlaceholder())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlinePlaceholder())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlinePlaceholder())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
264	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineVarNode())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineVarNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineVarNode())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
265	[BUG]  [BUGGY]  if(c.canInline()  ||!c.canInline()  &&  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||!c.canInline()  &&  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||!c.canInline()  &&  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(c.canInline()    ||!c.canInline()    ||    t.getScopeRoot().getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
266	[BUG]  [BUGGY]  if(!c.canInline()  &&!c.canInline()  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  &&!c.canInline()  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  &&!c.canInline()  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(c.canInline()    ||!c.canInline()    ||    t.getScopeRoot().getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
267	[BUG]  [BUGGY]  if(c.canInline()  &&!c.canInline()  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&!c.canInline()  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&!c.canInline()  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(c.canInline()    ||!c.canInline()    ||    t.getScopeRoot().getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
268	[BUG]  [BUGGY]  if(c.canInline()  ||!c.canInline()  &&  t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||!c.canInline()  &&  t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||!c.canInline()  &&  t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION)  {	  if(c.canInline()    ||!c.canInline()    ||    t.getScopeRoot().getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
269	[BUG]  [BUGGY]  if(!c.canInline()  ||!c.canInline()  &&  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  ||!c.canInline()  &&  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  ||!c.canInline()  &&  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(c.canInline()    ||!c.canInline()    ||    t.getScopeRoot().getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
270	[BUG]  [BUGGY]  if(t.canInline()  ||!c.canInline()  ||  c.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(t.canInline()  ||!c.canInline()  ||  c.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(t.canInline()  ||!c.canInline()  ||  c.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(c.canInline()    ||!c.canInline()    ||    t.getScopeRoot().getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
271	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlinePlaceholder()  ||  c.canInlineParent())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlinePlaceholder()  ||  c.canInlineParent())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlinePlaceholder()  ||  c.canInlineParent())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineParent())    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
272	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineParent()  ||  c.canInlinePlaceholder())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineParent()  ||  c.canInlinePlaceholder())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineParent()  ||  c.canInlinePlaceholder())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineParent())    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
273	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlineParent())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlineParent())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlineParent())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineParent())    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
274	[BUG]  [BUGGY]  if(c!=  null  &&  c.canInline()  ||  c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c!=  null  &&  c.canInline()  ||  c.inlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c!=  null  &&  c.canInline()  ||  c.inlineVariable())  {	  if(c!=    null    &&    c.canInline()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
275	[BUG]  [BUGGY]  if(c!=  null  ||  c.canInline()  &&  c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c!=  null  ||  c.canInline()  &&  c.inlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c!=  null  ||  c.canInline()  &&  c.inlineVariable())  {	  if(c!=    null    &&    c.canInline()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
276	[BUG]  [BUGGY]  if(c!=  null  &&  c.canInlineCfgNode()  &&  c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c!=  null  &&  c.canInlineCfgNode()  &&  c.inlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c!=  null  &&  c.canInlineCfgNode()  &&  c.inlineVariable())  {	  if(c!=    null    &&    c.canInline()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
277	[BUG]  [BUGGY]  if(c!=  null  &&  c.canInline()  &&  c.inlineCfgNode())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c!=  null  &&  c.canInline()  &&  c.inlineCfgNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c!=  null  &&  c.canInline()  &&  c.inlineCfgNode())  {	  if(c!=    null    &&    c.canInline()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
278	[BUG]  [BUGGY]  if(c!=  null  &&  c.canInline()  &&  c.inlineChildren())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c!=  null  &&  c.canInline()  &&  c.inlineChildren())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c!=  null  &&  c.canInline()  &&  c.inlineChildren())  {	  if(c!=    null    &&    c.canInline()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
279	[BUG]  [BUGGY]  if(c!=  null  &&  c.canInline()  &&  c.inlinePath())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c!=  null  &&  c.canInline()  &&  c.inlinePath())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c!=  null  &&  c.canInline()  &&  c.inlinePath())  {	  if(c!=    null    &&    c.canInline()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
280	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlinePlaceholder()  ||  c.canInlinePlaceholder())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlinePlaceholder()  ||  c.canInlinePlaceholder())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlinePlaceholder()  ||  c.canInlinePlaceholder())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlinePlaceholder())    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
281	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(c,  c);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.copyCurrentStructure(c,  c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.copyCurrentStructure(c,  c);	  NodeUtil.copyCurrentStructure(c);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
282	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(c,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.copyCurrentStructure(c,  numUseWithinUseCfgNode);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.copyCurrentStructure(c,  numUseWithinUseCfgNode);	  NodeUtil.copyCurrentStructure(c);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
283	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(c,  cfg);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.copyCurrentStructure(c,  cfg);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.copyCurrentStructure(c,  cfg);	  NodeUtil.copyCurrentStructure(c);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
284	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(compiler,  c);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.copyCurrentStructure(compiler,  c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.copyCurrentStructure(compiler,  c);	  NodeUtil.copyCurrentStructure(c);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
285	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(cfg,  c);  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.copyCurrentStructure(cfg,  c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.copyCurrentStructure(cfg,  c);	  NodeUtil.copyCurrentStructure(c);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
286	[BUG]  [BUGGY]  if(c.inlineVariable()  ||!c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineVariable()  ||!c.inlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineVariable()  ||!c.inlineVariable())  {	  if(!c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
287	[BUG]  [BUGGY]  if(!c.inlineCfgNode())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.inlineCfgNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.inlineCfgNode())  {	  if(!c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
288	[BUG]  [BUGGY]  if(!c.inlineVariable()  &&  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.inlineVariable()  &&  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.inlineVariable()  &&  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(!c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
289	[BUG]  [BUGGY]  if(!c.inlineVariable()  &&  t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.inlineVariable()  &&  t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.inlineVariable()  &&  t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION)  {	  if(!c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
290	[BUG]  [BUGGY]  if(!c.inlineVariable()  &&  t.getScopeRoot().getFirstChild().getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.inlineVariable()  &&  t.getScopeRoot().getFirstChild().getType()!=  Token.FUNCTION)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.inlineVariable()  &&  t.getScopeRoot().getFirstChild().getType()!=  Token.FUNCTION)  {	  if(!c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
291	[BUG]  [BUGGY]  if(!c.inlineVariable()  &&  numUseWithinUseCfgNode  >  0)  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.inlineVariable()  &&  numUseWithinUseCfgNode  >  0)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.inlineVariable()  &&  numUseWithinUseCfgNode  >  0)  {	  if(!c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
292	[BUG]  [BUGGY]  reachingUses.addChildToFront(c);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  reachingUses.addChildToFront(c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	reachingUses.addChildToFront(c);	  NodeUtil.copyCurrentStructure(c);    reachingUses.addChildToFront(c);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
293	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(cfg);  reachingUses.addChildToFront(c);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.copyCurrentStructure(cfg);  reachingUses.addChildToFront(c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.copyCurrentStructure(cfg);  reachingUses.addChildToFront(c);	  NodeUtil.copyCurrentStructure(c);    reachingUses.addChildToFront(c);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
294	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(c,  reachingUses);  reachingUses.addChildToFront(c);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.copyCurrentStructure(c,  reachingUses);  reachingUses.addChildToFront(c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.copyCurrentStructure(c,  reachingUses);  reachingUses.addChildToFront(c);	  NodeUtil.copyCurrentStructure(c);    reachingUses.addChildToFront(c);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
295	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(cfg,  c);  reachingUses.addChildToFront(c);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.copyCurrentStructure(cfg,  c);  reachingUses.addChildToFront(c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.copyCurrentStructure(cfg,  c);  reachingUses.addChildToFront(c);	  NodeUtil.copyCurrentStructure(c);    reachingUses.addChildToFront(c);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
296	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(c);  reachingUses.addChildToFront(c,  cfg);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.copyCurrentStructure(c);  reachingUses.addChildToFront(c,  cfg);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.copyCurrentStructure(c);  reachingUses.addChildToFront(c,  cfg);	  NodeUtil.copyCurrentStructure(c);    reachingUses.addChildToFront(c);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
297	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(c),  reachingUses.addChildToFront(c);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.copyCurrentStructure(c),  reachingUses.addChildToFront(c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.copyCurrentStructure(c),  reachingUses.addChildToFront(c);	  NodeUtil.copyCurrentStructure(c);    reachingUses.addChildToFront(c);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
298	[BUG]  [BUGGY]  if(c.inlineVarNode())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineVarNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineVarNode())  {	  if(c.inlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
299	[BUG]  [BUGGY]  if(c.inlineVariable()  ||  c.inlineCfgNode())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineVariable()  ||  c.inlineCfgNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineVariable()  ||  c.inlineCfgNode())  {	  if(c.inlineCfgNode()    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
300	[BUG]  [BUGGY]  if(c.inlineCfgNode()  &&  c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineCfgNode()  &&  c.inlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineCfgNode()  &&  c.inlineVariable())  {	  if(c.inlineCfgNode()    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
301	[BUG]  [BUGGY]  if(c.inlineCfgNode()  ||  c.inlineLocalVariable())  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineCfgNode()  ||  c.inlineLocalVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineCfgNode()  ||  c.inlineLocalVariable())  {	  if(c.inlineCfgNode()    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
302	[BUG]  [BUGGY]  if(c.inlineCfgNode()  ||  c.inlineFunction())  {  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineCfgNode()  ||  c.inlineFunction())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineCfgNode()  ||  c.inlineFunction())  {	  if(c.inlineCfgNode()    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
303	[BUG]  [BUGGY]  if(!c.canInline()  ||  c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  ||  c.inlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  ||  c.inlineVariable())  {	  if(!c.canInline()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
304	[BUG]  [BUGGY]  if(!c.canInline()  &&  c.inlineChildren())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  &&  c.inlineChildren())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  &&  c.inlineChildren())  {	  if(!c.canInline()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
305	[BUG]  [BUGGY]  if(!c.canInline()  &&  c.inlinePath())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  &&  c.inlinePath())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  &&  c.inlinePath())  {	  if(!c.canInline()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
306	[BUG]  [BUGGY]  if(!c.canInline()  &&  c.inlineFunctions())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  &&  c.inlineFunctions())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  &&  c.inlineFunctions())  {	  if(!c.canInline()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
307	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlinePlaceholder()  ||  c.canInlineChildren())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlinePlaceholder()  ||  c.canInlineChildren())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlinePlaceholder()  ||  c.canInlineChildren())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
308	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  &&  c.canInlineChildren())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  &&  c.canInlineChildren())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  &&  c.canInlineChildren())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
309	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineChildren()  ||  c.canInlinePlaceholder())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineChildren()  ||  c.canInlinePlaceholder())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineChildren()  ||  c.canInlinePlaceholder())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
310	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineChildren()  ||  c.canInlinePlaceholder()  ||  c.canInlineChildren())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineChildren()  ||  c.canInlinePlaceholder()  ||  c.canInlineChildren())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineChildren()  ||  c.canInlinePlaceholder()  ||  c.canInlineChildren())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
311	[BUG]  [BUGGY]  if(c.inline()  ||  c.inlineVar(c))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inline()  ||  c.inlineVar(c))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inline()  ||  c.inlineVar(c))  {	  if(c.inline()    ||    c.inline())    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
312	[BUG]  [BUGGY]  if(c.inlineVariable()  ||  c.inline())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineVariable()  ||  c.inline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineVariable()  ||  c.inline())  {	  if(c.inline()    ||    c.inline())    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
313	[BUG]  [BUGGY]  if(c.inline()  ||  c.inlineVars())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inline()  ||  c.inlineVars())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inline()  ||  c.inlineVars())  {	  if(c.inline()    ||    c.inline())    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
314	[BUG]  [BUGGY]  if(c.inline()  ||  c.inlineNode())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inline()  ||  c.inlineNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inline()  ||  c.inlineNode())  {	  if(c.inline()    ||    c.inline())    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
315	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlineChildren())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlineChildren())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlineChildren())  {	  if(c.canInline()    ||    c.canInline()    ||    c.canInlineChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
316	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlineChildren())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlineChildren())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlineChildren())  {	  if(c.canInline()    ||    c.canInline()    ||    c.canInlineChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
317	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInlineOtherCase()  ||  c.canInlineChildren())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInlineOtherCase()  ||  c.canInlineChildren())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInline()  ||  c.canInlineOtherCase()  ||  c.canInlineChildren())  {	  if(c.canInline()    ||    c.canInline()    ||    c.canInlineChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
318	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInlineParent())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInlineParent())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInline()  ||  c.canInlineParent())  {	  if(c.canInline()    ||    c.canInline()    ||    c.canInlineChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
319	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineChildren()  ||  c.canInlineChildren())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineChildren()  ||  c.canInlineChildren())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineChildren()  ||  c.canInlineChildren())  {	  if(c.canInline()    ||    c.canInline()    ||    c.canInlineChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
320	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineVars)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineVars)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineVars)  {	  if(c.canInline()    ||    c.canInlineNode)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
321	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineStatement())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineStatement())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineStatement())  {	  if(c.canInline()    ||    c.canInlineDeclaration())    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
322	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  &&  t.getScopeRoot().getFirstChild().getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  &&  t.getScopeRoot().getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode  &&  t.getScopeRoot().getFirstChild().getType()  ==  Token.VAR)  {	  if(c.canInline()    ||    c.canInlineCfgNode    ||    t.getScopeRoot().getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
323	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  ||  c.getScopeRoot().getFirstChild().getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  ||  c.getScopeRoot().getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode  ||  c.getScopeRoot().getFirstChild().getType()  ==  Token.VAR)  {	  if(c.canInline()    ||    c.canInlineCfgNode    ||    t.getScopeRoot().getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
324	[BUG]  [BUGGY]  if(c.canInline()  &&  c.canInlineCfgNode  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.canInlineCfgNode  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.canInlineCfgNode  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.VAR)  {	  if(c.canInline()    ||    c.canInlineCfgNode    ||    t.getScopeRoot().getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
325	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  ||  c.getScopeRoot().getLastChild().getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  ||  c.getScopeRoot().getLastChild().getType()  ==  Token.VAR)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode  ||  c.getScopeRoot().getLastChild().getType()  ==  Token.VAR)  {	  if(c.canInline()    ||    c.canInlineCfgNode    ||    t.getScopeRoot().getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
326	[BUG]  [BUGGY]  if(t.canInline()  ||  c.canInlineCfgNode  ||  c.getScopeRoot().getFirstChild().getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(t.canInline()  ||  c.canInlineCfgNode  ||  c.getScopeRoot().getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(t.canInline()  ||  c.canInlineCfgNode  ||  c.getScopeRoot().getFirstChild().getType()  ==  Token.VAR)  {	  if(c.canInline()    ||    c.canInlineCfgNode    ||    t.getScopeRoot().getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
327	[BUG]  [BUGGY]  if(!c.canInline()  &&  c.canInlineCfgNode  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  &&  c.canInlineCfgNode  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  &&  c.canInlineCfgNode  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.VAR)  {	  if(c.canInline()    ||    c.canInlineCfgNode    ||    t.getScopeRoot().getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
328	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  ||  c.getScopeRoot().getFirstChild().getType()!=  Token.VAR)  {  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  ||  c.getScopeRoot().getFirstChild().getType()!=  Token.VAR)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode  ||  c.getScopeRoot().getFirstChild().getType()!=  Token.VAR)  {	  if(c.canInline()    ||    c.canInlineCfgNode    ||    t.getScopeRoot().getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
329	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlinePlaceholderCfg())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlinePlaceholderCfg())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlinePlaceholderCfg())  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlinePlaceholder())    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
330	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlinePlaceholderSegment())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlinePlaceholderSegment())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlinePlaceholderSegment())  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlinePlaceholder())    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
331	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode(c))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode(c))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode(c))  {	  if(c.canInline()    ||    c.canInlineVar(c))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
332	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePath(c))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePath(c))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePath(c))  {	  if(c.canInline()    ||    c.canInlineVar(c))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
333	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineFunction(c))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineFunction(c))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineFunction(c))  {	  if(c.canInline()    ||    c.canInlineVar(c))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
334	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineChild(c))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineChild(c))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineChild(c))  {	  if(c.canInline()    ||    c.canInlineVar(c))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
335	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineReturn(c))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineReturn(c))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineReturn(c))  {	  if(c.canInline()    ||    c.canInlineVar(c))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
336	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineVar(c)||  c.canInlineCfgNode(c))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineVar(c)||  c.canInlineCfgNode(c))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineVar(c)||  c.canInlineCfgNode(c))  {	  if(c.canInline()    ||    c.canInlineVar(c))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
337	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlinePredicate())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlinePredicate())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlinePredicate())  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlineParent())    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
338	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineStatement())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineStatement())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineStatement())  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlineParent())    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
339	[BUG]  [BUGGY]  if(!c.canInline()  ||!c.canInline()  ||!c.canInline())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  ||!c.canInline()  ||!c.canInline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  ||!c.canInline()  ||!c.canInline())  {	  if(c.canInline()    ||!c.canInline()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
340	[BUG]  [BUGGY]  if(c.canInline()  ||!c.canInline()  ||!c.canInlineCfgNode())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||!c.canInline()  ||!c.canInlineCfgNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||!c.canInline()  ||!c.canInlineCfgNode())  {	  if(c.canInline()    ||!c.canInline()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
341	[BUG]  [BUGGY]  if(c.canInline()  ||!c.canInline()  ||!c.canInline()  ||!c.canInline())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||!c.canInline()  ||!c.canInline()  ||!c.canInline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||!c.canInline()  ||!c.canInline()  ||!c.canInline())  {	  if(c.canInline()    ||!c.canInline()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
342	[BUG]  [BUGGY]  if(c.canInline()  ||!c.canInline()  ||!c.canInlineFunction())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||!c.canInline()  ||!c.canInlineFunction())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||!c.canInline()  ||!c.canInlineFunction())  {	  if(c.canInline()    ||!c.canInline()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
343	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlinePlaceholder()  ||  c.canInlineVar(c))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlinePlaceholder()  ||  c.canInlineVar(c))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlinePlaceholder()  ||  c.canInlineVar(c))  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineVar(c))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
344	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  &&  c.canInlineVar(c))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  &&  c.canInlineVar(c))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  &&  c.canInlineVar(c))  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineVar(c))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
345	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineCfgNode(c))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineCfgNode(c))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineCfgNode(c))  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineVar(c))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
346	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineReturn(c))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineReturn(c))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineReturn(c))  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineVar(c))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
347	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineLineVar(c))  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineLineVar(c))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineLineVar(c))  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineVar(c))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
348	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineVar(c)&&  c.isFunctionDeclaration())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineVar(c)&&  c.isFunctionDeclaration())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineVar(c)&&  c.isFunctionDeclaration())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineVar(c))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
349	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlinePrettyPrinter())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlinePrettyPrinter())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlinePrettyPrinter())  {	  if(c.canInline()    &&    c.inlinePrettyPrinter())    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
350	[BUG]  [BUGGY]  if(!c.canInline()  &&  c.inlinePrettyPrinter())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  &&  c.inlinePrettyPrinter())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  &&  c.inlinePrettyPrinter())  {	  if(c.canInline()    &&    c.inlinePrettyPrinter())    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
351	[BUG]  [BUGGY]  if(c.isInline()  &&  c.inlinePrettyPrinter())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.isInline()  &&  c.inlinePrettyPrinter())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.isInline()  &&  c.inlinePrettyPrinter())  {	  if(c.canInline()    &&    c.inlinePrettyPrinter())    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
352	[BUG]  [BUGGY]  if(c.inline()  ||  c.inlinePrettyPrinter())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inline()  ||  c.inlinePrettyPrinter())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inline()  ||  c.inlinePrettyPrinter())  {	  if(c.canInline()    &&    c.inlinePrettyPrinter())    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
353	[BUG]  [BUGGY]  if(c.inlineVars()  ||  c.inlineChildren())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineVars()  ||  c.inlineChildren())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineVars()  ||  c.inlineChildren())  {	  if(c.inlineChildren()    ||    c.inlineChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
354	[BUG]  [BUGGY]  if(c.inlineVariable()  ||  c.inlineChildren())  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineVariable()  ||  c.inlineChildren())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineVariable()  ||  c.inlineChildren())  {	  if(c.inlineChildren()    ||    c.inlineChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
355	[BUG]  [BUGGY]  if(c.inlineVar(varName)||  c.inlineChildren())  {  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineVar(varName)||  c.inlineChildren())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineVar(varName)||  c.inlineChildren())  {	  if(c.inlineChildren()    ||    c.inlineChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
356	[BUG]  [BUGGY]  if(c.inlineVar()  ||  c.inlineChildren())  {  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineVar()  ||  c.inlineChildren())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineVar()  ||  c.inlineChildren())  {	  if(c.inlineChildren()    ||    c.inlineChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
357	[BUG]  [BUGGY]  if(c.inlineCfgNode()  ||  c.inlineChildren())  {  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineCfgNode()  ||  c.inlineChildren())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineCfgNode()  ||  c.inlineChildren())  {	  if(c.inlineChildren()    ||    c.inlineChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
358	[BUG]  [BUGGY]  if(c.inlineVarName()  ||  c.inlineChildren())  {  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineVarName()  ||  c.inlineChildren())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineVarName()  ||  c.inlineChildren())  {	  if(c.inlineChildren()    ||    c.inlineChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
359	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePrettyPrinterImpl)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePrettyPrinterImpl)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePrettyPrinterImpl)  {	  if(c.canInline()    ||    c.canInlinePrettyPrinter)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
360	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePrettyPrinter  ||  c.canInlineCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePrettyPrinter  ||  c.canInlineCfgNode)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePrettyPrinter  ||  c.canInlineCfgNode)  {	  if(c.canInline()    ||    c.canInlinePrettyPrinter)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
361	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePrettyPrinter  ||  c.canInlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePrettyPrinter  ||  c.canInlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePrettyPrinter  ||  c.canInlineVariable())  {	  if(c.canInline()    ||    c.canInlinePrettyPrinter)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
362	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode()  ||!c.canInline())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode()  ||!c.canInline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode()  ||!c.canInline())  {	  if(c.canInline()    ||    c.canInline()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
363	[BUG]  [BUGGY]  if(!c.canInline()  ||  c.canInline()  ||!c.canInline())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  ||  c.canInline()  ||!c.canInline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  ||  c.canInline()  ||!c.canInline())  {	  if(c.canInline()    ||    c.canInline()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
364	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInline()  ||!c.canInlineCfgNode())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInline()  ||!c.canInlineCfgNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInline()  ||!c.canInlineCfgNode())  {	  if(c.canInline()    ||    c.canInline()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
365	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInlineCfgNode()  ||!c.canInline())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInlineCfgNode()  ||!c.canInline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInline()  ||  c.canInlineCfgNode()  ||!c.canInline())  {	  if(c.canInline()    ||    c.canInline()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
366	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlineVar(t.getScopeRoot()))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlineVar(t.getScopeRoot()))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlineVar(t.getScopeRoot()))  {	  if(c.canInline()    ||    c.inlineNode())    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
367	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlineVar(t.getScopeRoot().getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlineVar(t.getScopeRoot().getLastChild()))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlineVar(t.getScopeRoot().getLastChild()))  {	  if(c.canInline()    ||    c.inlineNode())    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
368	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlineVarNode())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlineVarNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlineVarNode())  {	  if(c.canInline()    ||    c.inlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
369	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlineVarDeclaration())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlineVarDeclaration())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlineVarDeclaration())  {	  if(c.canInline()    ||    c.inlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
370	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineCharacters())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineCharacters())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineCharacters())  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
371	[BUG]  [BUGGY]  if(c.canInlineCfgNode()  ||  c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInlineCfgNode()  ||  c.inlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInlineCfgNode()  ||  c.inlineVariable())  {	  if(c.canInlineCfgNode()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
372	[BUG]  [BUGGY]  if(!c.canInlineCfgNode()  &&  c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInlineCfgNode()  &&  c.inlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInlineCfgNode()  &&  c.inlineVariable())  {	  if(c.canInlineCfgNode()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
373	[BUG]  [BUGGY]  if(c.canInlineNode()  ||  c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInlineNode()  ||  c.inlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInlineNode()  ||  c.inlineVariable())  {	  if(c.canInlineCfgNode()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
374	[BUG]  [BUGGY]  if(c.inlineVariable()  ||  c.inlineCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineVariable()  ||  c.inlineCfgNode)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineVariable()  ||  c.inlineCfgNode)  {	  if(c.inlineCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
375	[BUG]  [BUGGY]  if(c.defCfgNode!=  null  &&  c.inlineCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defCfgNode!=  null  &&  c.inlineCfgNode)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.defCfgNode!=  null  &&  c.inlineCfgNode)  {	  if(c.inlineCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
376	[BUG]  [BUGGY]  if(c.defCfgNode  ==  null  &&  c.inlineCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defCfgNode  ==  null  &&  c.inlineCfgNode)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.defCfgNode  ==  null  &&  c.inlineCfgNode)  {	  if(c.inlineCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
377	[BUG]  [BUGGY]  if(!c.inlineCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.inlineCfgNode)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.inlineCfgNode)  {	  if(c.inlineCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
378	[BUG]  [BUGGY]  if(c.inlineVars)  {  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineVars)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineVars)  {	  if(c.inlineCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
379	[BUG]  [BUGGY]  if(c.defCfgNode  ==  null  ||  c.inlineCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defCfgNode  ==  null  ||  c.inlineCfgNode)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.defCfgNode  ==  null  ||  c.inlineCfgNode)  {	  if(c.inlineCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
380	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineVarDeclaration)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineVarDeclaration)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineVarDeclaration)  {	  if(c.canInline()    ||    c.canInlineFunctionDeclaration)    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
381	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineDeclaration)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineDeclaration)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineDeclaration)  {	  if(c.canInline()    ||    c.canInlineFunctionDeclaration)    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
382	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineFunctionDeclaration  ||  c.canInlineCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineFunctionDeclaration  ||  c.canInlineCfgNode)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineFunctionDeclaration  ||  c.canInlineCfgNode)  {	  if(c.canInline()    ||    c.canInlineFunctionDeclaration)    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
383	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineNode())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineNode())  {	  if(c.canInline()    ||    c.canInlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
384	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlineVariable())  {	  if(c.canInline()    ||    c.canInlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
385	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlineDeclaration())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlineDeclaration())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlineDeclaration())  {	  if(c.canInline()    ||    c.canInlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
386	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineParentNode())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineParentNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineParentNode())  {	  if(c.canInline()    ||    c.canInlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
387	[BUG]  [BUGGY]  if(c.canInlineBlock()  ||  c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInlineBlock()  ||  c.inlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInlineBlock()  ||  c.inlineVariable())  {	  if(c.canInlineBlock()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
388	[BUG]  [BUGGY]  if(!c.canInlineBlock()  &&  c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInlineBlock()  &&  c.inlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInlineBlock()  &&  c.inlineVariable())  {	  if(c.canInlineBlock()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
389	[BUG]  [BUGGY]  if(c.canInlineBlock()  &&  c.inlineCfgNode())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInlineBlock()  &&  c.inlineCfgNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInlineBlock()  &&  c.inlineCfgNode())  {	  if(c.canInlineBlock()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
390	[BUG]  [BUGGY]  if(c.inlineBlock()  ||  c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineBlock()  ||  c.inlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineBlock()  ||  c.inlineVariable())  {	  if(c.canInlineBlock()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
391	[BUG]  [BUGGY]  if(c.inline()  ||  c.inlineChildren())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inline()  ||  c.inlineChildren())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inline()  ||  c.inlineChildren())  {	  if(c.inline()    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
392	[BUG]  [BUGGY]  if(c.inline()  ||  c.inlinePath())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inline()  ||  c.inlinePath())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inline()  ||  c.inlinePath())  {	  if(c.inline()    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
393	[BUG]  [BUGGY]  if(c.inline()  ||  c.inlineFunctions())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inline()  ||  c.inlineFunctions())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inline()  ||  c.inlineFunctions())  {	  if(c.inline()    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
394	[BUG]  [BUGGY]  if(c.inline()  ||  c.inlineFunction())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inline()  ||  c.inlineFunction())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inline()  ||  c.inlineFunction())  {	  if(c.inline()    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
395	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlinePlaceholder()  ||  c.canInlineDeclaration())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlinePlaceholder()  ||  c.canInlineDeclaration())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlinePlaceholder()  ||  c.canInlineDeclaration())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineDeclaration())    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
396	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineVarDeclaration())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineVarDeclaration())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineVarDeclaration())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineDeclaration())    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
397	[BUG]  [BUGGY]  if(!c.inlineChildren())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.inlineChildren())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.inlineChildren())  {	  if(c.inlineChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
398	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  &&  c.canInlineVar(t.getScopeRoot()))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  &&  c.canInlineVar(t.getScopeRoot()))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  &&  c.canInlineVar(t.getScopeRoot()))  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineVar(t.getScopeRoot()))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
399	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlinePlaceholder()  ||  c.canInlineVar(t.getScopeRoot()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlinePlaceholder()  ||  c.canInlineVar(t.getScopeRoot()))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlinePlaceholder()  ||  c.canInlineVar(t.getScopeRoot()))  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineVar(t.getScopeRoot()))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
400	[BUG]  [BUGGY]  if(c.canInline()  ||  t.canInlinePlaceholder()  ||  c.canInlineVar(c.getScopeRoot()))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  t.canInlinePlaceholder()  ||  c.canInlineVar(c.getScopeRoot()))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  t.canInlinePlaceholder()  ||  c.canInlineVar(c.getScopeRoot()))  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineVar(t.getScopeRoot()))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
401	[BUG]  [BUGGY]  if(t.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineVar(c.getScopeRoot()))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(t.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineVar(c.getScopeRoot()))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(t.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineVar(c.getScopeRoot()))  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineVar(t.getScopeRoot()))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
402	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineChildren()  ||  c.canInlineVar(t.getScopeRoot()))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineChildren()  ||  c.canInlineVar(t.getScopeRoot()))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineChildren()  ||  c.canInlineVar(t.getScopeRoot()))  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineVar(t.getScopeRoot()))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
403	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineVar(t.getParent()))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineVar(t.getParent()))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineVar(t.getParent()))  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineVar(t.getScopeRoot()))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
404	[BUG]  [BUGGY]  if(c.inlinePath()  ||  c.inlinePath())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlinePath()  ||  c.inlinePath())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlinePath()  ||  c.inlinePath())  {	  if(c.inlinePath())    {    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
405	[BUG]  [BUGGY]  if(!c.inlinePath())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.inlinePath())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.inlinePath())  {	  if(c.inlinePath())    {    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
406	[BUG]  [BUGGY]  if(c.inlineCfgNode()  ||  c.inlinePath())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineCfgNode()  ||  c.inlinePath())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineCfgNode()  ||  c.inlinePath())  {	  if(c.inlinePath())    {    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
407	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  &&  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  &&  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode  &&  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(c.canInline()    ||    c.canInlineCfgNode    ||    t.getScopeRoot().getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
408	[BUG]  [BUGGY]  if(c.canInline()  &&  c.canInlineCfgNode  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.canInlineCfgNode  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.canInlineCfgNode  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(c.canInline()    ||    c.canInlineCfgNode    ||    t.getScopeRoot().getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
409	[BUG]  [BUGGY]  if(t.canInline()  ||  c.canInlineCfgNode  ||  c.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(t.canInline()  ||  c.canInlineCfgNode  ||  c.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(t.canInline()  ||  c.canInlineCfgNode  ||  c.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(c.canInline()    ||    c.canInlineCfgNode    ||    t.getScopeRoot().getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
410	[BUG]  [BUGGY]  if(!c.canInline()  &&  c.canInlineCfgNode  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  &&  c.canInlineCfgNode  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  &&  c.canInlineCfgNode  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(c.canInline()    ||    c.canInlineCfgNode    ||    t.getScopeRoot().getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
411	[BUG]  [BUGGY]  if(c.canInline()  &&  c.canInlinePrettyPrinter)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.canInlinePrettyPrinter)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.canInlinePrettyPrinter)  {	  if(c.canInline()    ||    c.canInlinePrettyPrinter)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
412	[BUG]  [BUGGY]  if(!c.canInline()  &&  c.canInlinePrettyPrinter)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  &&  c.canInlinePrettyPrinter)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  &&  c.canInlinePrettyPrinter)  {	  if(c.canInline()    ||    c.canInlinePrettyPrinter)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
413	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePrettyPrinter  ||  c.canInlineChildren())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePrettyPrinter  ||  c.canInlineChildren())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePrettyPrinter  ||  c.canInlineChildren())  {	  if(c.canInline()    ||    c.canInlinePrettyPrinter)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
414	[BUG]  [BUGGY]  NodeUtil.inferSideEffects(c,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.inferSideEffects(c,  numUseWithinUseCfgNode);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.inferSideEffects(c,  numUseWithinUseCfgNode);	  NodeUtil.mayHaveSideEffects(c);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
415	[BUG]  [BUGGY]  NodeUtil.insertSideEffects(c,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.insertSideEffects(c,  reachingUses);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.insertSideEffects(c,  reachingUses);	  NodeUtil.mayHaveSideEffects(c);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
416	[BUG]  [BUGGY]  NodeUtil.inferSideEffects(c,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.inferSideEffects(c,  reachingUses);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.inferSideEffects(c,  reachingUses);	  NodeUtil.mayHaveSideEffects(c);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
417	[BUG]  [BUGGY]  if(c.inlineParent()  ||  c.inlineParent())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineParent()  ||  c.inlineParent())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineParent()  ||  c.inlineParent())  {	  if(c.inlineVariable()    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
418	[BUG]  [BUGGY]  if(c.canInline()  &&  c.canInlineDeclaration())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.canInlineDeclaration())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.canInlineDeclaration())  {	  if(c.canInline()    ||    c.canInlineDeclaration())    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
419	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineReference())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineReference())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineReference())  {	  if(c.canInline()    ||    c.canInlineDeclaration())    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
420	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePrettyPrinter())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePrettyPrinter())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePrettyPrinter())  {	  if(c.canInline()    ||    c.canInlineDeclaration())    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
421	[BUG]  [BUGGY]  if(c.inlineCfgNode()  ||  c.inlineCfgNode())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineCfgNode()  ||  c.inlineCfgNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineCfgNode()  ||  c.inlineCfgNode())  {	  if(c.inlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
422	[BUG]  [BUGGY]  if(c.inlineCfgNode()  ||  c.useCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineCfgNode()  ||  c.useCfgNode)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineCfgNode()  ||  c.useCfgNode)  {	  if(c.inlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
423	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getNext());  reachingUses.inline(c);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getNext());  reachingUses.inline(c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getNext());  reachingUses.inline(c);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.inline(c);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
424	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.inline(c);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.inline(c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.inline(c);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.inline(c);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
425	[BUG]  [BUGGY]  if(c.canInline()  ||!c.canInlinePrettyPrinter())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||!c.canInlinePrettyPrinter())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||!c.canInlinePrettyPrinter())  {	  if(c.canInline()    ||!c.canInlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
426	[BUG]  [BUGGY]  if(c.canInline()  ||!c.canInlineChildren())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||!c.canInlineChildren())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||!c.canInlineChildren())  {	  if(c.canInline()    ||!c.canInlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
427	[BUG]  [BUGGY]  if(c.canInline()  ||!c.canInlineParent())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||!c.canInlineParent())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||!c.canInlineParent())  {	  if(c.canInline()    ||!c.canInlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
428	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineState())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineState())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineState())  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlinePlaceholder())    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
429	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineSegment())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineSegment())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineSegment())  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlinePlaceholder())    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
430	[BUG]  [BUGGY]  if(c.canInline()  &&  c.inlineVarNode())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.inlineVarNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.inlineVarNode())  {	  if(c.canInline()    &&    c.inlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
431	[BUG]  [BUGGY]  if(c.inlineChildren()  ||  c.inlineCfgNode())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineChildren()  ||  c.inlineCfgNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineChildren()  ||  c.inlineCfgNode())  {	  if(c.inlineChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
432	[BUG]  [BUGGY]  if(!c.canInline()  ||!c.canInlineFunction())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  ||!c.canInlineFunction())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  ||!c.canInlineFunction())  {	  if(!c.canInline()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
433	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getNext());  reachingUses.addAll(c);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getNext());  reachingUses.addAll(c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getNext());  reachingUses.addAll(c);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.addAll(c);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
434	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  candidates);  reachingUses.addAll(c);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  candidates);  reachingUses.addAll(c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  candidates);  reachingUses.addAll(c);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.addAll(c);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
435	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.addAll(c);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.addAll(c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.addAll(c);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.addAll(c);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
436	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  FillCandiates());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  FillCandiates());  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  FillCandiates());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates());    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
437	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  JoinCandiates());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  JoinCandiates());  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  JoinCandiates());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates());    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
438	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  TokenTraversal());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  TokenTraversal());  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  TokenTraversal());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates());    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
439	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfgNode,  new  GatherCandiates());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfgNode,  new  GatherCandiates());  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfgNode,  new  GatherCandiates());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates());    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
440	[BUG]  [BUGGY]  if(c.canInline()  &&  c.canInlinePathNode)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.canInlinePathNode)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.canInlinePathNode)  {	  if(c.canInline()    ||    c.canInlinePathNode)    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
441	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePathNode  =  false)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePathNode  =  false)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePathNode  =  false)  {	  if(c.canInline()    ||    c.canInlinePathNode)    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
442	[BUG]  [BUGGY]  if(!c.canInline()  &&  c.canInlinePathNode)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  &&  c.canInlinePathNode)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  &&  c.canInlinePathNode)  {	  if(c.canInline()    ||    c.canInlinePathNode)    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
443	[BUG]  [BUGGY]  if(c.canInlineDeclaration()  &&  c.inlineChildren())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInlineDeclaration()  &&  c.inlineChildren())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInlineDeclaration()  &&  c.inlineChildren())  {	  if(c.canInlineDeclaration()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
444	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineChildCount())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineChildCount())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineChildCount())  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlineParent())    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
445	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlinePrettyPrint())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlinePrettyPrint())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlinePrettyPrint())  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlineParent())    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
446	[BUG]  [BUGGY]  if(c.canInline()  &&  c.inlineChildren())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.inlineChildren())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.inlineChildren())  {	  if(c.canInline()    ||    c.inlineChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
447	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlinePrettyPrinters())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlinePrettyPrinters())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlinePrettyPrinters())  {	  if(c.canInline()    ||    c.inlineChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
448	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlineParent())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlineParent())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlineParent())  {	  if(c.canInline()    ||    c.inlineChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
449	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlineCfgNode()  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlineCfgNode()  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlineCfgNode()  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(c.canInline()    ||    c.inlineVariable()    ||    t.getScopeRoot().getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
450	[BUG]  [BUGGY]  if(c!=  null  &&  c.canInline()  &&  c.canInlineBlock())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c!=  null  &&  c.canInline()  &&  c.canInlineBlock())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c!=  null  &&  c.canInline()  &&  c.canInlineBlock())  {	  if(c.canInline()    &&    c.canInlineBlock())    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
451	[BUG]  [BUGGY]  if(c.isInline()  &&  c.canInlineBlock())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.isInline()  &&  c.canInlineBlock())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.isInline()  &&  c.canInlineBlock())  {	  if(c.canInline()    &&    c.canInlineBlock())    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
452	[BUG]  [BUGGY]  if(c.canInline()  &&  c.canInlineChildren())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.canInlineChildren())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.canInlineChildren())  {	  if(c.canInline()    ||    c.canInlineChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
453	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineVars())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineVars())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineVars())  {	  if(c.canInline()    ||    c.canInlineChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
454	[BUG]  [BUGGY]  if(c!=  null  &&  c.canInline()  &&  c.canInlinePlaceholder())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c!=  null  &&  c.canInline()  &&  c.canInlinePlaceholder())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c!=  null  &&  c.canInline()  &&  c.canInlinePlaceholder())  {	  if(c.canInline()    &&    c.canInlinePlaceholder())    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
455	[BUG]  [BUGGY]  if(c.canInline()  &&  c.canInlinePlaceholder()  &&  c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.canInlinePlaceholder()  &&  c.inlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.canInlinePlaceholder()  &&  c.inlineVariable())  {	  if(c.canInline()    &&    c.canInlinePlaceholder())    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
456	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineFolder())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineFolder())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineFolder())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
457	[BUG]  [BUGGY]  if(c.inlineIfNotFound()  &&  c.isVarDeclaration())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineIfNotFound()  &&  c.isVarDeclaration())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineIfNotFound()  &&  c.isVarDeclaration())  {	  if(c.inlineIfNotFound())    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
458	[BUG]  [BUGGY]  if(c.inlineIfNotFound()  &&  c.isVarArgs())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineIfNotFound()  &&  c.isVarArgs())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineIfNotFound()  &&  c.isVarArgs())  {	  if(c.inlineIfNotFound())    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
459	[BUG]  [BUGGY]  if(c.inlineIfNotFound()  ||  c.isVarDeclaration())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineIfNotFound()  ||  c.isVarDeclaration())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineIfNotFound()  ||  c.isVarDeclaration())  {	  if(c.inlineIfNotFound())    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
460	[BUG]  [BUGGY]  if(c.inlineIfNotFound()  &&  c.canBeReachingVariable())  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineIfNotFound()  &&  c.canBeReachingVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineIfNotFound()  &&  c.canBeReachingVariable())  {	  if(c.inlineIfNotFound())    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
461	[BUG]  [BUGGY]  if(c.inlineNode()  ||  c.inlineCfgNode())  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineNode()  ||  c.inlineCfgNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineNode()  ||  c.inlineCfgNode())  {	  if(c.inlineNode())    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
462	[BUG]  [BUGGY]  if(c.inlineCfgNode()  ||  c.inlineNode())  {  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineCfgNode()  ||  c.inlineNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineCfgNode()  ||  c.inlineNode())  {	  if(c.inlineNode())    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
463	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  reachingUses);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfa,  reachingUses);	  NodeTraversal.traverse(compiler,    cfg,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
464	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  n);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  n);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses,  n);	  NodeTraversal.traverse(compiler,    cfg,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
465	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  def);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  def);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses,  def);	  NodeTraversal.traverse(compiler,    cfg,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
466	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  this);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  this);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses,  this);	  NodeTraversal.traverse(compiler,    cfg,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
467	[BUG]  [BUGGY]  if(c.canInline()  &&  c.canInlineCopyNode)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.canInlineCopyNode)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.canInlineCopyNode)  {	  if(c.canInline()    ||    c.canInlineCopyNode)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
468	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCopyNode  =  true)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCopyNode  =  true)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCopyNode  =  true)  {	  if(c.canInline()    ||    c.canInlineCopyNode)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
469	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCopyNode  >  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCopyNode  >  0)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCopyNode  >  0)  {	  if(c.canInline()    ||    c.canInlineCopyNode)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
470	[BUG]  [BUGGY]  if(c.canInline()  &&  c.inlineNode())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.inlineNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.inlineNode())  {	  if(c.canInline()    ||    c.inlineNode())    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
471	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlineVar())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlineVar())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlineVar())  {	  if(c.canInline()    ||    c.inlineNode())    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
472	[BUG]  [BUGGY]  if(c.canInline()  ||!c.canInlinePlaceholder())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||!c.canInlinePlaceholder())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||!c.canInlinePlaceholder())  {	  if(c.canInline()    ||!c.canInlineBlock())    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
473	[BUG]  [BUGGY]  if(c.canInline()  ||!c.canInlineFunction())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||!c.canInlineFunction())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||!c.canInlineFunction())  {	  if(c.canInline()    ||!c.canInlineBlock())    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
474	[BUG]  [BUGGY]  if(c.canInline()  &&  c.inlineFunction())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.inlineFunction())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.inlineFunction())  {	  if(c.canInline()    ||    c.inlineFunction())    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
475	[BUG]  [BUGGY]  if(!c.canInline()  &&  c.inlineFunction())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  &&  c.inlineFunction())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  &&  c.inlineFunction())  {	  if(c.canInline()    ||    c.inlineFunction())    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
476	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlineFunction()  ||  c.mayHaveSideEffects())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlineFunction()  ||  c.mayHaveSideEffects())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlineFunction()  ||  c.mayHaveSideEffects())  {	  if(c.canInline()    ||    c.inlineFunction())    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
477	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
478	[BUG]  [BUGGY]  if(c.inline()  ||  c.inlinePlaceholder())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inline()  ||  c.inlinePlaceholder())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inline()  ||  c.inlinePlaceholder())  {	  if(c.inline()    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
479	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineNode())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineNode())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
480	[BUG]  [BUGGY]  if(c.canInline()  &&  c.canInlineCfgNode  ||  c.canInlineDeclaration())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.canInlineCfgNode  ||  c.canInlineDeclaration())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.canInlineCfgNode  ||  c.canInlineDeclaration())  {	  if(c.canInline()    &&    c.canInlineCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
481	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  ||  c.getScopeRoot().getLastChild().getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  ||  c.getScopeRoot().getLastChild().getType()!=  Token.FUNCTION)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode  ||  c.getScopeRoot().getLastChild().getType()!=  Token.FUNCTION)  {	  if(c.canInline()    ||    c.canInlineCfgNode    ||    t.getScopeRoot().getLastChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
482	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineDeclaration()  ||  c.canInlineCfgNode  ||  c.canInlinePath())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineDeclaration()  ||  c.canInlineCfgNode  ||  c.canInlinePath())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineDeclaration()  ||  c.canInlineCfgNode  ||  c.canInlinePath())  {	  if(c.canInline()    ||    c.canInlineCfgNode    ||    c.canInlinePath())    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
483	[BUG]  [BUGGY]  if(c.canInline()  &&  c.canInlineCfgNode  ||  c.canInlinePath())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.canInlineCfgNode  ||  c.canInlinePath())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.canInlineCfgNode  ||  c.canInlinePath())  {	  if(c.canInline()    ||    c.canInlineCfgNode    ||    c.canInlinePath())    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
484	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  ||  c.canInlineDeclaration())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  ||  c.canInlineDeclaration())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode  ||  c.canInlineDeclaration())  {	  if(c.canInline()    ||    c.canInlineCfgNode    ||    c.canInlinePath())    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
485	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineChildNodes())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineChildNodes())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineChildNodes())  {	  if(c.canInline()    ||    c.canInlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
486	[BUG]  [BUGGY]  if(c.inlineVariable()  ||!c.canInline()  ||!c.canInline())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineVariable()  ||!c.canInline()  ||!c.canInline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineVariable()  ||!c.canInline()  ||!c.canInline())  {	  if(c.canInline()    ||!c.canInline()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
487	[BUG]  [BUGGY]  if(c.isInline()  ||!c.canInline()  ||!c.canInline())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.isInline()  ||!c.canInline()  ||!c.canInline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.isInline()  ||!c.canInline()  ||!c.canInline())  {	  if(c.canInline()    ||!c.canInline()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
488	[BUG]  [BUGGY]  if(c.canInline()  ||!c.canInline()  ||!c.canInlinePath())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||!c.canInline()  ||!c.canInlinePath())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||!c.canInline()  ||!c.canInlinePath())  {	  if(c.canInline()    ||!c.canInline()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
489	[BUG]  [BUGGY]  if(c.inline()  ||  c.inlineLine())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inline()  ||  c.inlineLine())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inline()  ||  c.inlineLine())  {	  if(c.inline()    ||    c.inline())    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
490	[BUG]  [BUGGY]  if(c.isInline()  ||  c.canInline())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.isInline()  ||  c.canInline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.isInline()  ||  c.canInline())  {	  if(c.isInline()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
491	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(cfgNode);  reachingUses.addChildToFront(c);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.copyCurrentStructure(cfgNode);  reachingUses.addChildToFront(c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.copyCurrentStructure(cfgNode);  reachingUses.addChildToFront(c);	  NodeUtil.copyCurrentStructure(c);    reachingUses.addChildToFront(c);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
492	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(c,  reachingUses.addChildToFront(c));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.copyCurrentStructure(c,  reachingUses.addChildToFront(c));  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.copyCurrentStructure(c,  reachingUses.addChildToFront(c));	  NodeUtil.copyCurrentStructure(c);    reachingUses.addChildToFront(c);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
493	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(c);  reachingUses.removeChildToFront(c);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.copyCurrentStructure(c);  reachingUses.removeChildToFront(c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.copyCurrentStructure(c);  reachingUses.removeChildToFront(c);	  NodeUtil.copyCurrentStructure(c);    reachingUses.addChildToFront(c);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
494	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(c,  n);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.copyCurrentStructure(c,  n);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.copyCurrentStructure(c,  n);	  NodeUtil.copyCurrentStructure(c);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
495	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(c,  cfgNode);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.copyCurrentStructure(c,  cfgNode);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.copyCurrentStructure(c,  cfgNode);	  NodeUtil.copyCurrentStructure(c);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
496	[BUG]  [BUGGY]  if(c.inline()  &&!c.canInline())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inline()  &&!c.canInline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inline()  &&!c.canInline())  {	  if(c.inline()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
497	[BUG]  [BUGGY]  if(c.inlineNode()  ||  c.inlineChildren())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineNode()  ||  c.inlineChildren())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineNode()  ||  c.inlineChildren())  {	  if(c.inlineChildren()    ||    c.inlineChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
498	[BUG]  [BUGGY]  if(c.inlineParent()  ||  c.inlineChildren())  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineParent()  ||  c.inlineChildren())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineParent()  ||  c.inlineChildren())  {	  if(c.inlineChildren()    ||    c.inlineChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
499	[BUG]  [BUGGY]  if(c.canInline()  &&  c.canInlinePlaceholder()  ||  c.canInlineChildren())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.canInlinePlaceholder()  ||  c.canInlineChildren())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.canInlinePlaceholder()  ||  c.canInlineChildren())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
500	[BUG]  [BUGGY]  if(c.isInline()  ||  c.canInline()  ||  c.canHaveSideEffects())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.isInline()  ||  c.canInline()  ||  c.canHaveSideEffects())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.isInline()  ||  c.canInline()  ||  c.canHaveSideEffects())  {	  if(c.canInline()    ||    c.canInline()    ||    c.canHaveSideEffects())    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
501	[BUG]  [BUGGY]  if(c.inlineVariable()  ||  c.canInline()  ||  c.canHaveSideEffects())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineVariable()  ||  c.canInline()  ||  c.canHaveSideEffects())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineVariable()  ||  c.canInline()  ||  c.canHaveSideEffects())  {	  if(c.canInline()    ||    c.canInline()    ||    c.canHaveSideEffects())    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
502	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canRemoveSideEffects())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canRemoveSideEffects())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInline()  ||  c.canRemoveSideEffects())  {	  if(c.canInline()    ||    c.canInline()    ||    c.canHaveSideEffects())    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
503	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInlineVars())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInlineVars())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInline()  ||  c.canInlineVars())  {	  if(c.canInline()    ||    c.canInline()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
504	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInlinePrettyPrinter())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInlinePrettyPrinter())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInline()  ||  c.canInlinePrettyPrinter())  {	  if(c.canInline()    ||    c.canInline()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
505	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineAssignmentToBlock())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineAssignmentToBlock())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineAssignmentToBlock())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineBlock())    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
506	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlineBlock()  ||  c.canInlinePath())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlineBlock()  ||  c.canInlinePath())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode()  ||  c.canInlineBlock()  ||  c.canInlinePath())  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlinePath())    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
507	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBase()  ||  c.canInlinePath())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBase()  ||  c.canInlinePath())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBase()  ||  c.canInlinePath())  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlinePath())    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
508	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(c,  reachingUses,  candidates);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.copyCurrentStructure(c,  reachingUses,  candidates);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.copyCurrentStructure(c,  reachingUses,  candidates);	  NodeUtil.copyCurrentStructure(c,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
509	[BUG]  [BUGGY]  if(c.canInline()  &&  c.canInlineVar(c))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.canInlineVar(c))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.canInlineVar(c))  {	  if(c.canInline()    ||    c.canInlineVar(c))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
510	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineOtherCfg(c))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineOtherCfg(c))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineOtherCfg(c))  {	  if(c.canInline()    ||    c.canInlineVar(c))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
511	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineVar(c)||  c.canInlineFunction(c))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineVar(c)||  c.canInlineFunction(c))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineVar(c)||  c.canInlineFunction(c))  {	  if(c.canInline()    ||    c.canInlineVar(c))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
512	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  candidates);  reachingUses.add(c);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  candidates);  reachingUses.add(c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  candidates);  reachingUses.add(c);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.add(c);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
513	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getNext());  reachingUses.add(c);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getNext());  reachingUses.add(c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getNext());  reachingUses.add(c);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.add(c);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
514	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.add(c);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.add(c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.add(c);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.add(c);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
515	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  ||  t.getScopeRoot().getLastChild().getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  ||  t.getScopeRoot().getLastChild().getType()  ==  Token.VAR)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode  ||  t.getScopeRoot().getLastChild().getType()  ==  Token.VAR)  {	  if(c.canInline()    ||    c.canInlineCfgNode    ||    t.getScopeRoot().getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
516	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineReturn())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineReturn())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineReturn())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineDeclaration())    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
517	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineStatement())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineStatement())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineStatement())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineDeclaration())    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
518	[BUG]  [BUGGY]  if(c  ==  null  &&  c.canInline()  &&  c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c  ==  null  &&  c.canInline()  &&  c.inlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c  ==  null  &&  c.canInline()  &&  c.inlineVariable())  {	  if(c!=    null    &&    c.canInline()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
519	[BUG]  [BUGGY]  if(c!=  null  &&  c.canInline()  &&  c.inlineNode())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c!=  null  &&  c.canInline()  &&  c.inlineNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c!=  null  &&  c.canInline()  &&  c.inlineNode())  {	  if(c!=    null    &&    c.canInline()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
520	[BUG]  [BUGGY]  if(c!=  null  &&  c.canInline())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c!=  null  &&  c.canInline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c!=  null  &&  c.canInline())  {	  if(c!=    null    &&    c.canInline()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
521	[BUG]  [BUGGY]  if(c.inlineCfgNode()  ||!c.canInline())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineCfgNode()  ||!c.canInline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineCfgNode()  ||!c.canInline())  {	  if(c.inlineVariable()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
522	[BUG]  [BUGGY]  if(c.inlineVariable()  ||!c.canInlineParent())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineVariable()  ||!c.canInlineParent())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineVariable()  ||!c.canInlineParent())  {	  if(c.inlineVariable()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
523	[BUG]  [BUGGY]  if(c.inlineNode()  ||!c.canInline())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineNode()  ||!c.canInline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineNode()  ||!c.canInline())  {	  if(c.inlineVariable()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
524	[BUG]  [BUGGY]  if(c.inlineVariable()  ||!c.canInlinePath())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineVariable()  ||!c.canInlinePath())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineVariable()  ||!c.canInlinePath())  {	  if(c.inlineVariable()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
525	[BUG]  [BUGGY]  if(c.canInline()  &&  c.canInline()  ||!c.canInline())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.canInline()  ||!c.canInline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.canInline()  ||!c.canInline())  {	  if(c.canInline()    ||    c.canInline()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
526	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInline()  ||!c.canInlineFunction())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInline()  ||!c.canInlineFunction())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInline()  ||!c.canInlineFunction())  {	  if(c.canInline()    ||    c.canInline()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
527	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineCfgNode(t.getScopeRoot()))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineCfgNode(t.getScopeRoot()))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineCfgNode(t.getScopeRoot()))  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineVar(t.getScopeRoot()))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
528	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineFunction(t.getScopeRoot()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineFunction(t.getScopeRoot()))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineFunction(t.getScopeRoot()))  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineVar(t.getScopeRoot()))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
529	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineReturn(t.getScopeRoot()))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineReturn(t.getScopeRoot()))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineReturn(t.getScopeRoot()))  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineVar(t.getScopeRoot()))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
530	[BUG]  [BUGGY]  if(c.canInline()  &&  c.canInlinePath())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.canInlinePath())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.canInlinePath())  {	  if(c.canInline()    ||    c.canInlinePath())    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
531	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePath()  ||  c.canInlineDeclaration())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePath()  ||  c.canInlineDeclaration())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePath()  ||  c.canInlineDeclaration())  {	  if(c.canInline()    ||    c.canInlinePath())    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
532	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getNext());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getNext());  reachingUses.analyze();  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getNext());  reachingUses.analyze();	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
533	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
534	[BUG]  [BUGGY]  if(c.canInline()  &&  c.inlinePath())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.inlinePath())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.inlinePath())  {	  if(c.canInline()    ||    c.inlinePath())    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
535	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlinePath()  ||  c.mayHaveSideEffects())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlinePath()  ||  c.mayHaveSideEffects())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlinePath()  ||  c.mayHaveSideEffects())  {	  if(c.canInline()    ||    c.inlinePath())    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
536	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlinePath()  ||  c.isVarDeclaration())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlinePath()  ||  c.isVarDeclaration())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlinePath()  ||  c.isVarDeclaration())  {	  if(c.canInline()    ||    c.inlinePath())    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
537	[BUG]  [BUGGY]  if(!c.canInline()  &&  c.inlineFunctionDeclaration())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  &&  c.inlineFunctionDeclaration())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  &&  c.inlineFunctionDeclaration())  {	  if(!c.canInline()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
538	[BUG]  [BUGGY]  if(c.inlineCfgNode()  ||!c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineCfgNode()  ||!c.inlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineCfgNode()  ||!c.inlineVariable())  {	  if(!c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
539	[BUG]  [BUGGY]  if(!c.inlineParent())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.inlineParent())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.inlineParent())  {	  if(!c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
540	[BUG]  [BUGGY]  if(c.canInline()  &&  c.canInlineParent())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.canInlineParent())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.canInlineParent())  {	  if(c.canInline()    ||    c.canInlineParent())    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
541	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePredicate())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePredicate())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePredicate())  {	  if(c.canInline()    ||    c.canInlineParent())    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
542	[BUG]  [BUGGY]  if(c.isName()  &&  c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.isName()  &&  c.inlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.isName()  &&  c.inlineVariable())  {	  if(c.isInline()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
543	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInlinePlaceholder())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInlinePlaceholder())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInline()  ||  c.canInlinePlaceholder())  {	  if(c.canInline()    ||    c.canInline()    ||    c.canInlineBlock())    {    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
544	[BUG]  [BUGGY]  if(c.canInline()  &&  c.canInlineFunction())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.canInlineFunction())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.canInlineFunction())  {	  if(c.canInline()    ||    c.canInlineFunction())    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
545	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePrettyPrint())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePrettyPrint())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePrettyPrint())  {	  if(c.canInline()    ||    c.canInlineFunction())    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
546	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePrettyPrint)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePrettyPrint)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePrettyPrint)  {	  if(c.canInline()    ||    c.canInlineNode)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
547	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
548	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(n.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(n.getScopeRoot().getFirstChild());  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(n.getScopeRoot().getFirstChild());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
549	[BUG]  [BUGGY]  if(c.canInline()  &&  c.inlineCharacters())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.inlineCharacters())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.inlineCharacters())  {	  if(c.canInline()    ||    c.inlineCharacters())    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
550	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlineFunctions())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlineFunctions())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlineFunctions())  {	  if(c.canInline()    ||    c.inlineCharacters())    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
551	[BUG]  [BUGGY]  if(c!=  null  &&  c.canInline()  &&  c.canInlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c!=  null  &&  c.canInline()  &&  c.canInlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c!=  null  &&  c.canInline()  &&  c.canInlineVariable())  {	  if(c.canInline()    &&    c.canInlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
552	[BUG]  [BUGGY]  if(c.canInline()  &&  c.canInlinePrettyPrinter())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.canInlinePrettyPrinter())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.canInlinePrettyPrinter())  {	  if(c.canInline()    &&    c.canInlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
553	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c,  reachingUses)&&  numUseWithinUseCfgNode  >  0;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c,  reachingUses)&&  numUseWithinUseCfgNode  >  0;  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.mayHaveSideEffects(c,  reachingUses)&&  numUseWithinUseCfgNode  >  0;	  NodeUtil.mayHaveSideEffects(c,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
554	[BUG]  [BUGGY]  NodeUtil.throwAsSideEffects(c,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.throwAsSideEffects(c,  reachingUses);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.throwAsSideEffects(c,  reachingUses);	  NodeUtil.mayHaveSideEffects(c,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
555	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c,  reachingUses).analyze();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c,  reachingUses).analyze();  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.mayHaveSideEffects(c,  reachingUses).analyze();	  NodeUtil.mayHaveSideEffects(c,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
556	[BUG]  [BUGGY]  if(c.canInline()  &&  c.canInlineReturn())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.canInlineReturn())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.canInlineReturn())  {	  if(c.canInline()    ||    c.canInlineReturn())    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
557	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineReturn()  ||  c.canInlineCfgNode())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineReturn()  ||  c.canInlineCfgNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineReturn()  ||  c.canInlineCfgNode())  {	  if(c.canInline()    ||    c.canInlineReturn())    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
558	[BUG]  [BUGGY]  if(c.canInline()  &&  c.canInlineCfgNode  =  false)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.canInlineCfgNode  =  false)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.canInlineCfgNode  =  false)  {	  if(c.canInline()    ||    c.canInlineCfgNode    =    false)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
559	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  [Delete]  false)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  [Delete]  false)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode  [Delete]  false)  {	  if(c.canInline()    ||    c.canInlineCfgNode    =    false)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
560	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineGrandparent())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineGrandparent())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineGrandparent())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineParent())    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
561	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  ||  c.getScopeRoot().getFirstChild().getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  ||  c.getScopeRoot().getFirstChild().getType()!=  Token.FUNCTION)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode  ||  c.getScopeRoot().getFirstChild().getType()!=  Token.FUNCTION)  {	  if(c.canInline()    ||    c.canInlineCfgNode    ||    t.getScopeRoot().getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
562	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(cfgNode);  reachingUses.addChildToBack(c);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.copyCurrentStructure(cfgNode);  reachingUses.addChildToBack(c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.copyCurrentStructure(cfgNode);  reachingUses.addChildToBack(c);	  NodeUtil.copyCurrentStructure(c);    reachingUses.addChildToBack(c);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
563	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(c);  reachingUses.removeChildToBack(c);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.copyCurrentStructure(c);  reachingUses.removeChildToBack(c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.copyCurrentStructure(c);  reachingUses.removeChildToBack(c);	  NodeUtil.copyCurrentStructure(c);    reachingUses.addChildToBack(c);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
564	[BUG]  [BUGGY]  if(!c.canInline()  &&  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  &&  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  &&  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(c.canInline()    ||!c.canInline()    ||    t.getScopeRoot().getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
565	[BUG]  [BUGGY]  if(c.canInline()  ||!c.canInline()  &&  t.getScopeRoot().getFirstChild().getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||!c.canInline()  &&  t.getScopeRoot().getFirstChild().getType()!=  Token.FUNCTION)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||!c.canInline()  &&  t.getScopeRoot().getFirstChild().getType()!=  Token.FUNCTION)  {	  if(c.canInline()    ||!c.canInline()    ||    t.getScopeRoot().getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
566	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(c.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(c.getScopeRoot().getFirstChild());  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(c.getScopeRoot().getFirstChild());	  NodeTraversal.traverse(compiler,    c,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
567	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(c.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(c.getScopeRoot().getLastChild());  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(c.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    c,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
568	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canHaveSideEffects())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canHaveSideEffects())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canHaveSideEffects())  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canHaveSideEffects())    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
569	[BUG]  [BUGGY]  if(c.canInline()  &&  c.canInlineBlock()  &&  c.canHaveSideEffects())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.canInlineBlock()  &&  c.canHaveSideEffects())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.canInlineBlock()  &&  c.canHaveSideEffects())  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canHaveSideEffects())    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
570	[BUG]  [BUGGY]  if(!c.canInline()  &&  c.canInlineBlock()  ||  c.canHaveSideEffects())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  &&  c.canInlineBlock()  ||  c.canHaveSideEffects())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  &&  c.canInlineBlock()  ||  c.canHaveSideEffects())  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canHaveSideEffects())    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
571	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePrettyPrint()  ||  c.canHaveSideEffects())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePrettyPrint()  ||  c.canHaveSideEffects())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePrettyPrint()  ||  c.canHaveSideEffects())  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canHaveSideEffects())    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
572	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canRemoveSideEffects())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canRemoveSideEffects())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canRemoveSideEffects())  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canHaveSideEffects())    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
573	[BUG]  [BUGGY]  if(c.inlineCfgNode  ||  c.useCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineCfgNode  ||  c.useCfgNode)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineCfgNode  ||  c.useCfgNode)  {	  if(c.inlineCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
574	[BUG]  [BUGGY]  if(c.canInline()  &&  c.canInlineFunctionDeclaration)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.canInlineFunctionDeclaration)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.canInlineFunctionDeclaration)  {	  if(c.canInline()    ||    c.canInlineFunctionDeclaration)    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
575	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineVar(t.getParent()))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineVar(t.getParent()))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineVar(t.getParent()))  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlineVar(t.getScopeRoot()))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
576	[BUG]  [BUGGY]  if(c.canInline()  &&  c.canInlinePlaceholder()  ||  c.canInlineCharacters())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.canInlinePlaceholder()  ||  c.canInlineCharacters())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  &&  c.canInlinePlaceholder()  ||  c.canInlineCharacters())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineCharacters())    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
577	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineString()  ||  c.canInlineCharacters())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineString()  ||  c.canInlineCharacters())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineString()  ||  c.canInlineCharacters())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineCharacters())    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
578	[BUG]  [BUGGY]  if(c.inlineVariable()  ||  c.canInline())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineVariable()  ||  c.canInline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineVariable()  ||  c.canInline())  {	  if(c.canInline()    &&    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
579	[BUG]  [BUGGY]  if(c.inlineCfgNode()  ||  c.inlineUseCfgNode())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineCfgNode()  ||  c.inlineUseCfgNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineCfgNode()  ||  c.inlineUseCfgNode())  {	  if(c.inlineCfgNode()    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
580	[BUG]  [BUGGY]  if(c.inlineCfgNode()  ||  c.inlineLocal())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineCfgNode()  ||  c.inlineLocal())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineCfgNode()  ||  c.inlineLocal())  {	  if(c.inlineCfgNode()    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
581	[BUG]  [BUGGY]  if(c.inlineCfgNode()  ||  c.inlineNumberOfCandidates())  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineCfgNode()  ||  c.inlineNumberOfCandidates())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineCfgNode()  ||  c.inlineNumberOfCandidates())  {	  if(c.inlineCfgNode()    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
582	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineFolder(c))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineFolder(c))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineFolder(c))  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineVar(c))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
583	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineFront(c))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineFront(c))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineFront(c))  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineVar(c))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
584	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInlineRoot())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInlineRoot())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInline()  ||  c.canInlineRoot())  {	  if(c.canInline()    ||    c.canInline()    ||    c.canInlineChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
585	[BUG]  [BUGGY]  if(c.inlineVariable()  ||!c.canInlineBlock())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineVariable()  ||!c.canInlineBlock())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineVariable()  ||!c.canInlineBlock())  {	  if(c.inlineVariable()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
586	[BUG]  [BUGGY]  if(c.inlineVariable()  ||!c.canInlinePlaceholder())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineVariable()  ||!c.canInlinePlaceholder())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineVariable()  ||!c.canInlinePlaceholder())  {	  if(c.inlineVariable()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
587	[BUG]  [BUGGY]  if(c.inlineVariable()  ||!c.canInlineChildren())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineVariable()  ||!c.canInlineChildren())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineVariable()  ||!c.canInlineChildren())  {	  if(c.inlineVariable()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
588	[BUG]  [BUGGY]  if(c.canInlineBlock()  ||  c.canInlineBlock()  ||  c.canHaveSideEffects())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInlineBlock()  ||  c.canInlineBlock()  ||  c.canHaveSideEffects())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInlineBlock()  ||  c.canInlineBlock()  ||  c.canHaveSideEffects())  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canHaveSideEffects())    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
589	[BUG]  [BUGGY]  if(c.inline()  ||  c.canInlineBlock()  ||  c.canHaveSideEffects())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inline()  ||  c.canInlineBlock()  ||  c.canHaveSideEffects())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inline()  ||  c.canInlineBlock()  ||  c.canHaveSideEffects())  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canHaveSideEffects())    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
590	[BUG]  [BUGGY]  if(c.isInline()  ||  c.canInlineBlock()  ||  c.canHaveSideEffects())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.isInline()  ||  c.canInlineBlock()  ||  c.canHaveSideEffects())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.isInline()  ||  c.canInlineBlock()  ||  c.canHaveSideEffects())  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canHaveSideEffects())    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
591	[BUG]  [BUGGY]  if(c.inlineVarDeclaration())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineVarDeclaration())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineVarDeclaration())  {	  if(c.inlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
592	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock(c))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBlock(c))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock(c))  {	  if(c.canInline()    ||    c.canInlineVar(c))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
593	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBooleanSupported(c))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBooleanSupported(c))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBooleanSupported(c))  {	  if(c.canInline()    ||    c.canInlineVar(c))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
594	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBinary(c))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBinary(c))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBinary(c))  {	  if(c.canInline()    ||    c.canInlineVar(c))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
595	[BUG]  [BUGGY]  if(c.canInlinePlaceholder()  ||  c.canInlinePlaceholder())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInlinePlaceholder()  ||  c.canInlinePlaceholder())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInlinePlaceholder()  ||  c.canInlinePlaceholder())  {	  if(c.canInline()    &&    c.canInlinePlaceholder())    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
596	[BUG]  [BUGGY]  if(c.isInline()  ||  c.canInlinePlaceholder())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.isInline()  ||  c.canInlinePlaceholder())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.isInline()  ||  c.canInlinePlaceholder())  {	  if(c.canInline()    &&    c.canInlinePlaceholder())    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
597	[BUG]  [BUGGY]  if(c.inlinePlaceholder()  &&  c.canInlinePlaceholder())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlinePlaceholder()  &&  c.canInlinePlaceholder())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlinePlaceholder()  &&  c.canInlinePlaceholder())  {	  if(c.canInline()    &&    c.canInlinePlaceholder())    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
598	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineChildBefore(c))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineChildBefore(c))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineChildBefore(c))  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineVar(c))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
599	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineBlock(c))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineBlock(c))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineBlock(c))  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineVar(c))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
600	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineString(c))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineString(c))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineString(c))  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineVar(c))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
601	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineLineBreak())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineLineBreak())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineLineBreak())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineVar(c))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
602	[BUG]  [BUGGY]  if(c.inlineInline()  ||  c.inlineInline())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineInline()  ||  c.inlineInline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineInline()  ||  c.inlineInline())  {	  if(c.inlineInline())    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
603	[BUG]  [BUGGY]  if(c.canInlinePrettyPrinter()  ||  c.inlinePrettyPrinter())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInlinePrettyPrinter()  ||  c.inlinePrettyPrinter())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInlinePrettyPrinter()  ||  c.inlinePrettyPrinter())  {	  if(c.canInline()    &&    c.inlinePrettyPrinter())    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
604	[BUG]  [BUGGY]  if(c.inlinePrettyPrinter()  ||  c.canInline())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlinePrettyPrinter()  ||  c.canInline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlinePrettyPrinter()  ||  c.canInline())  {	  if(c.canInline()    &&    c.inlinePrettyPrinter())    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
605	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(c);  reachingUses.removeChild(c);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.copyCurrentStructure(c);  reachingUses.removeChild(c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.copyCurrentStructure(c);  reachingUses.removeChild(c);	  NodeUtil.copyCurrentStructure(c);    reachingUses.addChildToFront(c);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
606	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlinePath()  ||  t.getScopeRoot().getLastChild().getString().endsWith( "__ "))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlinePath()  ||  t.getScopeRoot().getLastChild().getString().endsWith( "__ "))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlinePath()  ||  t.getScopeRoot().getLastChild().getString().endsWith( "__ "))  {	  if(c.canInline()    ||    c.inlinePath())    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
607	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlinePath()  ||  c.isSyntheticBlock())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlinePath()  ||  c.isSyntheticBlock())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlinePath()  ||  c.isSyntheticBlock())  {	  if(c.canInline()    ||    c.inlinePath())    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
608	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlinePath()  ||  t.getScopeRoot().getLastChild().getString().endsWith( "- "))  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlinePath()  ||  t.getScopeRoot().getLastChild().getString().endsWith( "- "))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlinePath()  ||  t.getScopeRoot().getLastChild().getString().endsWith( "- "))  {	  if(c.canInline()    ||    c.inlinePath())    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
609	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(t.getScopeRoot().getNext());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(t.getScopeRoot().getNext());  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(t.getScopeRoot().getNext());	  NodeTraversal.traverse(compiler,    c,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
610	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  c,  reachingUses).traverse(t.getScopeRoot().getFirstChild());	  NodeTraversal.traverse(compiler,    c,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
611	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlineChildCount())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlineChildCount())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlineChildCount())  {	  if(c.canInline()    ||    c.inlineNode())    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
612	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlineNumber())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlineNumber())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlineNumber())  {	  if(c.canInline()    ||    c.inlineNode())    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
613	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInlineChildCount())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInlineChildCount())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInline()  ||  c.canInlineChildCount())  {	  if(c.canInline()    ||    c.canInline()    ||    c.canInlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
614	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInlineCharacters())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInlineCharacters())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInline()  ||  c.canInlineCharacters())  {	  if(c.canInline()    ||    c.canInline()    ||    c.canInlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
615	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInlineChildBefore())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canInlineChildBefore())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInline()  ||  c.canInlineChildBefore())  {	  if(c.canInline()    ||    c.canInline()    ||    c.canInlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
616	[BUG]  [BUGGY]  if(!c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlinePlaceholder())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlinePlaceholder())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlinePlaceholder())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlinePlaceholder())    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
617	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineNumber())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineNumber())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineNumber())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlinePlaceholder())    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
618	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCopyNode  <  useCfgNode)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCopyNode  <  useCfgNode)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCopyNode  <  useCfgNode)  {	  if(c.canInline()    ||    c.canInlineCopyNode)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
619	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).inline(t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).inline(t.getScopeRoot().getLastChild());  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).inline(t.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates());    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
620	[BUG]  [BUGGY]  if(c.canInlineBlock()  &&  c.inlineCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInlineBlock()  &&  c.inlineCfgNode)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInlineBlock()  &&  c.inlineCfgNode)  {	  if(c.canInlineBlock()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
621	[BUG]  [BUGGY]  if(c.inline()  >  0  ||!c.canInline())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inline()  >  0  ||!c.canInline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inline()  >  0  ||!c.canInline())  {	  if(c.inline()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
622	[BUG]  [BUGGY]  if(c.inline())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inline())  {	  if(c.inline()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
623	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlinePreviousSibling())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlinePreviousSibling())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlinePreviousSibling())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineParent())    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
624	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineChildCount())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineChildCount())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineChildCount())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineParent())    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
625	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePathNode  ||  c.canInlineChildren())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePathNode  ||  c.canInlineChildren())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePathNode  ||  c.canInlineChildren())  {	  if(c.canInline()    ||    c.canInlinePathNode)    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
626	[BUG]  [BUGGY]  if(!c.inline())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.inline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.inline())  {	  if(!c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
627	[BUG]  [BUGGY]  if(!c.inlineVariable()  &&!c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.inlineVariable()  &&!c.inlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.inlineVariable()  &&!c.inlineVariable())  {	  if(!c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
628	[BUG]  [BUGGY]  if(!c.inlineVariable()  ||!c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.inlineVariable()  ||!c.inlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.inlineVariable()  ||!c.inlineVariable())  {	  if(!c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
629	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineUnannotatedFunctionDeclaration)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineUnannotatedFunctionDeclaration)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineUnannotatedFunctionDeclaration)  {	  if(c.canInline()    ||    c.canInlineFunctionDeclaration)    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
630	[BUG]  [BUGGY]  if(!c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineBlock())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineBlock())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineBlock())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineBlock())    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
631	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBase()  ||  c.canInlineBlock())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBase()  ||  c.canInlineBlock())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBase()  ||  c.canInlineBlock())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineBlock())    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
632	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineBase())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineBase())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineBase())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineBlock())    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
633	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineCopy())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineCopy())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineCopy())  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
634	[BUG]  [BUGGY]  if(c.inline()  ||  c.inlineIfNotFound())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inline()  ||  c.inlineIfNotFound())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inline()  ||  c.inlineIfNotFound())  {	  if(c.inlineIfNotFound())    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
635	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  startingDef);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  startingDef);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses,  startingDef);	  NodeTraversal.traverse(compiler,    cfg,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
636	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  t);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  t);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses,  t);	  NodeTraversal.traverse(compiler,    cfg,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
637	[BUG]  [BUGGY]  if(c.canInlineCfgNode())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInlineCfgNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInlineCfgNode())  {	  if(c.canInlineCfgNode()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
638	[BUG]  [BUGGY]  if(c.canInlineDeclaration()  &&  c.canInlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInlineDeclaration()  &&  c.canInlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInlineDeclaration()  &&  c.canInlineVariable())  {	  if(c.canInline()    &&    c.canInlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
639	[BUG]  [BUGGY]  if(c.canInlineBlock()  &&  c.canInlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInlineBlock()  &&  c.canInlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInlineBlock()  &&  c.canInlineVariable())  {	  if(c.canInline()    &&    c.canInlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
640	[BUG]  [BUGGY]  if(c.isInline()  ||  c.canInlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.isInline()  ||  c.canInlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.isInline()  ||  c.canInlineVariable())  {	  if(c.canInline()    &&    c.canInlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
641	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineFunctionDeclaration())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineFunctionDeclaration())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineFunctionDeclaration())  {	  if(c.canInline()    ||    c.canInlineDeclaration())    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
642	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePathNode())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePathNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePathNode())  {	  if(c.canInline()    ||    c.canInlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
643	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCopy())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCopy())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCopy())  {	  if(c.canInline()    ||    c.canInlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
644	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlineFunctionDeclaration())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlineFunctionDeclaration())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlineFunctionDeclaration())  {	  if(c.canInline()    ||    c.inlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
645	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlineFunctionNode())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlineFunctionNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlineFunctionNode())  {	  if(c.canInline()    ||    c.inlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
646	[BUG]  [BUGGY]  if(!c.isInline()  ||  c.canInline())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.isInline()  ||  c.canInline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.isInline()  ||  c.canInline())  {	  if(c.isInline()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
647	[BUG]  [BUGGY]  if(!c.canInline()  ||  c.canInlineCfgNode  ||  c.canInlinePath())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  ||  c.canInlineCfgNode  ||  c.canInlinePath())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  ||  c.canInlineCfgNode  ||  c.canInlinePath())  {	  if(c.canInline()    ||    c.canInlineCfgNode    ||    c.canInlinePath())    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
648	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  ||  c.canInlineFunction())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  ||  c.canInlineFunction())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode  ||  c.canInlineFunction())  {	  if(c.canInline()    ||    c.canInlineCfgNode    ||    c.canInlinePath())    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
649	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  ||  c.canInlineChildren())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode  ||  c.canInlineChildren())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCfgNode  ||  c.canInlineChildren())  {	  if(c.canInline()    ||    c.canInlineCfgNode    ||    c.canInlinePath())    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
650	[BUG]  [BUGGY]  if(c.inline()  ||  c.canInline()  ||  c.canHaveSideEffects())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inline()  ||  c.canInline()  ||  c.canHaveSideEffects())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inline()  ||  c.canInline()  ||  c.canHaveSideEffects())  {	  if(c.canInline()    ||    c.canInline()    ||    c.canHaveSideEffects())    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
651	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePath()  ||  c.canHaveSideEffects())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePath()  ||  c.canHaveSideEffects())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePath()  ||  c.canHaveSideEffects())  {	  if(c.canInline()    ||    c.canInline()    ||    c.canHaveSideEffects())    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
652	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canSideEffects())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInline()  ||  c.canSideEffects())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInline()  ||  c.canSideEffects())  {	  if(c.canInline()    ||    c.canInline()    ||    c.canHaveSideEffects())    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
653	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePrettyPrinter  ||  c.canInlinePrettyPrinter)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePrettyPrinter  ||  c.canInlinePrettyPrinter)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePrettyPrinter  ||  c.canInlinePrettyPrinter)  {	  if(c.canInline()    ||    c.canInlinePrettyPrinter)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
654	[BUG]  [BUGGY]  if(!c.canInline()  ||  c.canInlinePrettyPrinter)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  ||  c.canInlinePrettyPrinter)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  ||  c.canInlinePrettyPrinter)  {	  if(c.canInline()    ||    c.canInlinePrettyPrinter)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
655	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePrettyPrinter  ||!c.canInlinePrettyPrinter)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePrettyPrinter  ||!c.canInlinePrettyPrinter)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePrettyPrinter  ||!c.canInlinePrettyPrinter)  {	  if(c.canInline()    ||    c.canInlinePrettyPrinter)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
656	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePrettyPrinter  ||  c.canInlineDeclaration())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePrettyPrinter  ||  c.canInlineDeclaration())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePrettyPrinter  ||  c.canInlineDeclaration())  {	  if(c.canInline()    ||    c.canInlinePrettyPrinter)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
657	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlinePrimitive())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlinePrimitive())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlinePrimitive())  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlineParent())    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
658	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineMinimumSize())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineMinimumSize())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineMinimumSize())  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlineParent())    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
659	[BUG]  [BUGGY]  if(c.canInlineBlock()  &&  c.canInlineCfgNode)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInlineBlock()  &&  c.canInlineCfgNode)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInlineBlock()  &&  c.canInlineCfgNode)  {	  if(c.canInline()    &&    c.canInlineCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
660	[BUG]  [BUGGY]  if(c.canInlineCfgNode()  ||  c.canInlineCfgNode)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInlineCfgNode()  ||  c.canInlineCfgNode)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInlineCfgNode()  ||  c.canInlineCfgNode)  {	  if(c.canInline()    &&    c.canInlineCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
661	[BUG]  [BUGGY]  if(c.isInline()  ||  c.canInlineCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.isInline()  ||  c.canInlineCfgNode)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.isInline()  ||  c.canInlineCfgNode)  {	  if(c.canInline()    &&    c.canInlineCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
662	[BUG]  [BUGGY]  if(!c.canInline()  ||  c.canInlineBlock()  ||  c.canInlinePath())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  ||  c.canInlineBlock()  ||  c.canInlinePath())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  ||  c.canInlineBlock()  ||  c.canInlinePath())  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlinePath())    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
663	[BUG]  [BUGGY]  if(c.inline()  ||  c.canInlineBlock()  ||  c.canInlinePath())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inline()  ||  c.canInlineBlock()  ||  c.canInlinePath())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inline()  ||  c.canInlineBlock()  ||  c.canInlinePath())  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlinePath())    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
664	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInline()  ||!c.canInlineBlock())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInline()  ||!c.canInlineBlock())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInline()  ||!c.canInlineBlock())  {	  if(c.canInline()    ||    c.canInline()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
665	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInline()  ||!c.canInlinePath())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInline()  ||!c.canInlinePath())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInline()  ||!c.canInlinePath())  {	  if(c.canInline()    ||    c.canInline()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
666	[BUG]  [BUGGY]  if(c.inline()  ||  c.canInline()  ||!c.canInline())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inline()  ||  c.canInline()  ||!c.canInline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inline()  ||  c.canInline()  ||!c.canInline())  {	  if(c.canInline()    ||    c.canInline()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
667	[BUG]  [BUGGY]  if(c.inlinePrettyPrinter()  ||  c.inlinePrettyPrinter())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlinePrettyPrinter()  ||  c.inlinePrettyPrinter())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlinePrettyPrinter()  ||  c.inlinePrettyPrinter())  {	  if(c.inlineVariable()    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
668	[BUG]  [BUGGY]  if(!c.inlineVariable()  &&  c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.inlineVariable()  &&  c.inlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.inlineVariable()  &&  c.inlineVariable())  {	  if(c.inlineVariable()    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
669	[BUG]  [BUGGY]  if(c.inlineCfgNode  ||  c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineCfgNode  ||  c.inlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineCfgNode  ||  c.inlineVariable())  {	  if(c.inlineVariable()    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
670	[BUG]  [BUGGY]  if(c.inlineVars()  ||  c.inlineVars())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineVars()  ||  c.inlineVars())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineVars()  ||  c.inlineVars())  {	  if(c.inlineChildren()    ||    c.inlineChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
671	[BUG]  [BUGGY]  if(c.inlineVarArgs()  ||  c.inlineChildren())  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineVarArgs()  ||  c.inlineChildren())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineVarArgs()  ||  c.inlineChildren())  {	  if(c.inlineChildren()    ||    c.inlineChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
672	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCharacters()  ||  c.canInlineChildren())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCharacters()  ||  c.canInlineChildren())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCharacters()  ||  c.canInlineChildren())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineCharacters())    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
673	[BUG]  [BUGGY]  if(!c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineCharacters())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineCharacters())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineCharacters())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineCharacters())    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
674	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCharacters()  ||  c.canInlineDeclaration())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCharacters()  ||  c.canInlineDeclaration())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCharacters()  ||  c.canInlineDeclaration())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineCharacters())    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
675	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCharacters()  ||  c.canInlineCfgNode())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineCharacters()  ||  c.canInlineCfgNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineCharacters()  ||  c.canInlineCfgNode())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineCharacters())    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
676	[BUG]  [BUGGY]  if(c.inlineVar(n)||  c.inlineCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineVar(n)||  c.inlineCfgNode)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineVar(n)||  c.inlineCfgNode)  {	  if(c.inlineCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
677	[BUG]  [BUGGY]  if(c.inlineVarDeclaration)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineVarDeclaration)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineVarDeclaration)  {	  if(c.inlineCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
678	[BUG]  [BUGGY]  if(c.inlineVar(n))  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineVar(n))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineVar(n))  {	  if(c.inlineCfgNode)    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
679	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(c,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(c,  reachingUses);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.redeclareVarsInsideBranch(c,  reachingUses);	  NodeUtil.mayHaveSideEffects(c,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
680	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c,  reachingUses,  c));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c,  reachingUses,  c));  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.mayHaveSideEffects(c,  reachingUses,  c));	  NodeUtil.mayHaveSideEffects(c,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
681	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(cfg);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.copyCurrentStructure(cfg);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.copyCurrentStructure(cfg);	  NodeUtil.copyCurrentStructure(c);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
682	[BUG]  [BUGGY]  if(c!=  null  &&  c.canInline()  &&  c.inlineFunctionDeclaration())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c!=  null  &&  c.canInline()  &&  c.inlineFunctionDeclaration())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c!=  null  &&  c.canInline()  &&  c.inlineFunctionDeclaration())  {	  if(c!=    null    &&    c.canInline()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
683	[BUG]  [BUGGY]  if(c!=  null  &&  c.canInline()  &&  c.inlinePlaceholder())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c!=  null  &&  c.canInline()  &&  c.inlinePlaceholder())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c!=  null  &&  c.canInline()  &&  c.inlinePlaceholder())  {	  if(c!=    null    &&    c.canInline()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
684	[BUG]  [BUGGY]  if(!c.canInline()  ||  c.canInline())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  ||  c.canInline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  ||  c.canInline())  {	  if(c.canInline()    &&    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
685	[BUG]  [BUGGY]  if(c.canInlineBlock()  &&  c.canInline())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInlineBlock()  &&  c.canInline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInlineBlock()  &&  c.canInline())  {	  if(c.canInline()    &&    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
686	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(cfg,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.copyCurrentStructure(cfg,  reachingUses);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.copyCurrentStructure(cfg,  reachingUses);	  NodeUtil.copyCurrentStructure(c,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
687	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(c,  reachingUses,  c.type);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.copyCurrentStructure(c,  reachingUses,  c.type);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.copyCurrentStructure(c,  reachingUses,  c.type);	  NodeUtil.copyCurrentStructure(c,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
688	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(c,  reachingUses,  cfgNode);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.copyCurrentStructure(c,  reachingUses,  cfgNode);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.copyCurrentStructure(c,  reachingUses,  cfgNode);	  NodeUtil.copyCurrentStructure(c,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
689	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineLineVar(t.getScopeRoot()))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineLineVar(t.getScopeRoot()))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineLineVar(t.getScopeRoot()))  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineVar(t.getScopeRoot()))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
690	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineFront(t.getScopeRoot()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineFront(t.getScopeRoot()))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineFront(t.getScopeRoot()))  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineVar(t.getScopeRoot()))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
691	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineVar(t.getScopeRoot())&&  c.isExtern())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineVar(t.getScopeRoot())&&  c.isExtern())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineVar(t.getScopeRoot())&&  c.isExtern())  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineVar(t.getScopeRoot()))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
692	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineCfg(t.getScopeRoot()))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineCfg(t.getScopeRoot()))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineCfg(t.getScopeRoot()))  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineVar(t.getScopeRoot()))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
693	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineVar(t,  c.getScopeRoot()))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineVar(t,  c.getScopeRoot()))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePlaceholder()  ||  c.canInlineVar(t,  c.getScopeRoot()))  {	  if(c.canInline()    ||    c.canInlinePlaceholder()    ||    c.canInlineVar(t.getScopeRoot()))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
694	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlinePath()  ||  c.canInlineCharacters())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlinePath()  ||  c.canInlineCharacters())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlinePath()  ||  c.canInlineCharacters())  {	  if(c.canInline()    ||    c.canInlinePath())    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
695	[BUG]  [BUGGY]  if(c.isAssignmentTo(c)||  c.isInline()  &&  c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.isAssignmentTo(c)||  c.isInline()  &&  c.inlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.isAssignmentTo(c)||  c.isInline()  &&  c.inlineVariable())  {	  if(c.isInline()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
696	[BUG]  [BUGGY]  if(c.isAssignmentTo(c)||  c.isInline()  ||  c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.isAssignmentTo(c)||  c.isInline()  ||  c.inlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.isAssignmentTo(c)||  c.isInline()  ||  c.inlineVariable())  {	  if(c.isInline()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
697	[BUG]  [BUGGY]  if(c.isDeclared()  ||  c.inlineVariable())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.isDeclared()  ||  c.inlineVariable())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.isDeclared()  ||  c.inlineVariable())  {	  if(c.isInline()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
698	[BUG]  [BUGGY]  if(c.inline()  ||  c.inlineEmpty())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inline()  ||  c.inlineEmpty())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inline()  ||  c.inlineEmpty())  {	  if(c.inline()    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
699	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBlock)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock)  {	  if(c.canInline()    ||    c.canInlineNode)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
700	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(c);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(c);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.redeclareVarsInsideBranch(c);	  NodeUtil.mayHaveSideEffects(c);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
701	[BUG]  [BUGGY]  NodeUtil.throwAsSideEffects(c,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.throwAsSideEffects(c,  numUseWithinUseCfgNode);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.throwAsSideEffects(c,  numUseWithinUseCfgNode);	  NodeUtil.mayHaveSideEffects(c);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
702	[BUG]  [BUGGY]  NodeUtil.throwAsSideEffects(c,  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.throwAsSideEffects(c,  numUseWithinCfgNode);  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	NodeUtil.throwAsSideEffects(c,  numUseWithinCfgNode);	  NodeUtil.mayHaveSideEffects(c);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
703	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlineChildren()  ||  c.isSyntheticBlock())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlineChildren()  ||  c.isSyntheticBlock())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlineChildren()  ||  c.isSyntheticBlock())  {	  if(c.canInline()    ||    c.inlineChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
704	[BUG]  [BUGGY]  if(!c.canInline()  ||  c.canInlineBlock()  ||  c.canInlinePlaceholder())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  ||  c.canInlineBlock()  ||  c.canInlinePlaceholder())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  ||  c.canInlineBlock()  ||  c.canInlinePlaceholder())  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlinePlaceholder())    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
705	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBase()  ||  c.canInlinePlaceholder())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBase()  ||  c.canInlinePlaceholder())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBase()  ||  c.canInlinePlaceholder())  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlinePlaceholder())    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
706	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlinePlaceholderAssignmentTo(c))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlinePlaceholderAssignmentTo(c))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlinePlaceholderAssignmentTo(c))  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlinePlaceholder())    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
707	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlinePlaceholderStructure())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlinePlaceholderStructure())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlinePlaceholderStructure())  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlinePlaceholder())    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
708	[BUG]  [BUGGY]  if(!c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineVar(t.getScopeRoot()))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineVar(t.getScopeRoot()))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineVar(t.getScopeRoot()))  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlineVar(t.getScopeRoot()))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
709	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineVar(t.getScopeRoot())&&  c.isExtern())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineVar(t.getScopeRoot())&&  c.isExtern())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineVar(t.getScopeRoot())&&  c.isExtern())  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlineVar(t.getScopeRoot()))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
710	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineVar(t.getScopeRoot())&&  c.isLocal())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineVar(t.getScopeRoot())&&  c.isLocal())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineVar(t.getScopeRoot())&&  c.isLocal())  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlineVar(t.getScopeRoot()))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
711	[BUG]  [BUGGY]  if(!c.canInline()  &&  c.inlineCharacters())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  &&  c.inlineCharacters())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  &&  c.inlineCharacters())  {	  if(c.canInline()    ||    c.inlineCharacters())    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
712	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlineCharacters()  ||  c.isSyntheticBlock())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlineCharacters()  ||  c.isSyntheticBlock())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlineCharacters()  ||  c.isSyntheticBlock())  {	  if(c.canInline()    ||    c.inlineCharacters())    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
713	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlineCharacters()  ||  c.isVarDeclaration())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlineCharacters()  ||  c.isVarDeclaration())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlineCharacters()  ||  c.isVarDeclaration())  {	  if(c.canInline()    ||    c.inlineCharacters())    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
714	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlineCharacters()  ||  c.inlineVars())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlineCharacters()  ||  c.inlineVars())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlineCharacters()  ||  c.inlineVars())  {	  if(c.canInline()    ||    c.inlineCharacters())    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
715	[BUG]  [BUGGY]  if(c.isInline()  ||  c.canInlineBlock())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.isInline()  ||  c.canInlineBlock())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.isInline()  ||  c.canInlineBlock())  {	  if(c.canInline()    &&    c.canInlineBlock())    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
716	[BUG]  [BUGGY]  if(!c.canInline()  ||  c.canInlineBlock())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  ||  c.canInlineBlock())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  ||  c.canInlineBlock())  {	  if(c.canInline()    &&    c.canInlineBlock())    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
717	[BUG]  [BUGGY]  if(!c.inline()  ||  c.inline())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.inline()  ||  c.inline())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.inline()  ||  c.inline())  {	  if(c.inline()    ||    c.inline())    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
718	[BUG]  [BUGGY]  if(c.inline()  ||  c.inline()  <  def)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inline()  ||  c.inline()  <  def)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inline()  ||  c.inline()  <  def)  {	  if(c.inline()    ||    c.inline())    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
719	[BUG]  [BUGGY]  if(c.inline()  ||  c.inline()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inline()  ||  c.inline()  >  0)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inline()  ||  c.inline()  >  0)  {	  if(c.inline()    ||    c.inline())    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
720	[BUG]  [BUGGY]  if(c.inline()  ||  c.inline()  <  defCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inline()  ||  c.inline()  <  defCfgNode)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inline()  ||  c.inline()  <  defCfgNode)  {	  if(c.inline()    ||    c.inline())    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
721	[BUG]  [BUGGY]  if(!c.canInline()  ||  c.canInline()  ||  c.canInlineBlock())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  ||  c.canInline()  ||  c.canInlineBlock())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  ||  c.canInline()  ||  c.canInlineBlock())  {	  if(c.canInline()    ||    c.canInline()    ||    c.canInlineBlock())    {    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
722	[BUG]  [BUGGY]  if(c.canInlineDeclaration()  &&  c.inlineCfgNode)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInlineDeclaration()  &&  c.inlineCfgNode)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInlineDeclaration()  &&  c.inlineCfgNode)  {	  if(c.canInlineDeclaration()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
723	[BUG]  [BUGGY]  if(c.inline()  ||!c.canInlineBlock())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inline()  ||!c.canInlineBlock())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inline()  ||!c.canInlineBlock())  {	  if(c.canInline()    ||!c.canInlineBlock())    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
724	[BUG]  [BUGGY]  if(c.canInlineCfgNode()  ||  c.inlineCfgNode())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInlineCfgNode()  ||  c.inlineCfgNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInlineCfgNode()  ||  c.inlineCfgNode())  {	  if(c.canInline()    &&    c.inlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
725	[BUG]  [BUGGY]  if(c.canInlineCfgNode()  &&  c.inlineCfgNode())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInlineCfgNode()  &&  c.inlineCfgNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInlineCfgNode()  &&  c.inlineCfgNode())  {	  if(c.canInline()    &&    c.inlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
726	[BUG]  [BUGGY]  if(!c.canInline()  &&  c.inlineCfgNode)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  &&  c.inlineCfgNode)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  &&  c.inlineCfgNode)  {	  if(!c.canInline()    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
727	[BUG]  [BUGGY]  if(c.inlineCfgNode()  ||  c.inlineNumber())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineCfgNode()  ||  c.inlineNumber())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineCfgNode()  ||  c.inlineNumber())  {	  if(c.inlineCfgNode()    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
728	[BUG]  [BUGGY]  if(c.inlineCfgNode()  ||  c.inlineCharacters())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineCfgNode()  ||  c.inlineCharacters())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineCfgNode()  ||  c.inlineCharacters())  {	  if(c.inlineCfgNode()    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
729	[BUG]  [BUGGY]  if(c.inlineCfgNode()  ||  c.inlineLocalFunction())  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineCfgNode()  ||  c.inlineLocalFunction())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineCfgNode()  ||  c.inlineLocalFunction())  {	  if(c.inlineCfgNode()    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
730	[BUG]  [BUGGY]  if(c.inlineCfgNode()  ||  c.inlineVarArgs())  {  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineCfgNode()  ||  c.inlineVarArgs())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlineCfgNode()  ||  c.inlineVarArgs())  {	  if(c.inlineCfgNode()    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
731	[BUG]  [BUGGY]  if(c.canInline()  ||!c.canInlinePathNode())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||!c.canInlinePathNode())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||!c.canInlinePathNode())  {	  if(c.canInline()    ||!c.canInlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
732	[BUG]  [BUGGY]  if(c.canInline()  ||!c.canInlineCopy())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||!c.canInlineCopy())  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||!c.canInlineCopy())  {	  if(c.canInline()    ||!c.canInlineCfgNode())    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
733	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlineVariable()  ||  t.getScopeRoot().getFirstChild().getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlineVariable()  ||  t.getScopeRoot().getFirstChild().getType()!=  Token.FUNCTION)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.inlineVariable()  ||  t.getScopeRoot().getFirstChild().getType()!=  Token.FUNCTION)  {	  if(c.canInline()    ||    c.inlineVariable()    ||    t.getScopeRoot().getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
734	[BUG]  [BUGGY]  if(c.inlinePath()  ||  c.defCfgNode  ==  def)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlinePath()  ||  c.defCfgNode  ==  def)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.inlinePath()  ||  c.defCfgNode  ==  def)  {	  if(c.inlinePath())    {    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
735	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineParent(c))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineParent(c))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineParent(c))  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlineVar(c))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
736	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineChild(c))  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineChild(c))  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(c.canInline()  ||  c.canInlineBlock()  ||  c.canInlineChild(c))  {	  if(c.canInline()    ||    c.canInlineBlock()    ||    c.canInlineVar(c))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
737	[BUG]  [BUGGY]  if(!c.canInline()  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      c.inlineVariable();  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	146	146	3	replace	if(!c.canInline()  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(c.canInline()    ||!c.canInline()    ||    t.getScopeRoot().getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
