bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(!predicate.isRightOf(cur))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(!predicate.isRightOf(cur))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(!predicate.isRightOf(cur))  {	  if(predicate.isRightOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
2	[BUG]  [BUGGY]  if(cur.isRightOf(predicate))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(cur.isRightOf(predicate))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(cur.isRightOf(predicate))  {	  if(predicate.isRightOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
3	[BUG]  [BUGGY]  if(!predicate.isLeftOf(cur))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(!predicate.isLeftOf(cur))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(!predicate.isLeftOf(cur))  {	  if(predicate.isRightOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
4	[BUG]  [BUGGY]  if(!predicate.isLeftOf(cur)||  predicate.isRightOf(cur))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(!predicate.isLeftOf(cur)||  predicate.isRightOf(cur))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(!predicate.isLeftOf(cur)||  predicate.isRightOf(cur))  {	  if(predicate.isRightOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
5	[BUG]  [BUGGY]  if(cur.isRightOf(predicate)||  predicate.isLeftOf(cur))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(cur.isRightOf(predicate)||  predicate.isLeftOf(cur))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(cur.isRightOf(predicate)||  predicate.isLeftOf(cur))  {	  if(predicate.isRightOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
6	[BUG]  [BUGGY]  if(!predicate.isLightOf(cur))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(!predicate.isLightOf(cur))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(!predicate.isLightOf(cur))  {	  if(predicate.isRightOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
7	[BUG]  [BUGGY]  if(cur.isRightOf(predicate)||  predicate.equals(cur.getString()))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(cur.isRightOf(predicate)||  predicate.equals(cur.getString()))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(cur.isRightOf(predicate)||  predicate.equals(cur.getString()))  {	  if(predicate.isRightOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
8	[BUG]  [BUGGY]  if(cur.apply(predicate)&&  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(cur.apply(predicate)&&  predicate.apply(cur))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(cur.apply(predicate)&&  predicate.apply(cur))  {	  if(cur.apply(predicate)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
9	[BUG]  [BUGGY]  if(cur.apply(cur)||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(cur.apply(cur)||  predicate.apply(cur))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(cur.apply(cur)||  predicate.apply(cur))  {	  if(cur.apply(predicate)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
10	[BUG]  [BUGGY]  if(cur.apply(p)||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(cur.apply(p)||  predicate.apply(cur))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(cur.apply(p)||  predicate.apply(cur))  {	  if(cur.apply(predicate)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
11	[BUG]  [BUGGY]  if(cur.apply(predicate)||  predicate.apply(p))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(cur.apply(predicate)||  predicate.apply(p))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(cur.apply(predicate)||  predicate.apply(p))  {	  if(cur.apply(predicate)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
12	[BUG]  [BUGGY]  if(cur.apply(predicate)||  cur.apply(p))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(cur.apply(predicate)||  cur.apply(p))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(cur.apply(predicate)||  cur.apply(p))  {	  if(cur.apply(predicate)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
13	[BUG]  [BUGGY]  if(cur.apply(predicate)||  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(cur.apply(predicate)||  cur.apply(predicate))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(cur.apply(predicate)||  cur.apply(predicate))  {	  if(cur.apply(predicate)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
14	[BUG]  [BUGGY]  if(predicate.apply(cur)&&  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(predicate.apply(cur)&&  predicate.apply(cur))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(predicate.apply(cur)&&  predicate.apply(cur))  {	  if(predicate.apply(cur)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
15	[BUG]  [BUGGY]  if(!predicate.apply(cur)||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(!predicate.apply(cur)||  predicate.apply(cur))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(!predicate.apply(cur)||  predicate.apply(cur))  {	  if(predicate.apply(cur)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
16	[BUG]  [BUGGY]  if(p.apply(cur)||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(p.apply(cur)||  predicate.apply(cur))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(p.apply(cur)||  predicate.apply(cur))  {	  if(predicate.apply(cur)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
17	[BUG]  [BUGGY]  if(cur.isRightOf(predicate)||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(cur.isRightOf(predicate)||  predicate.apply(cur))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(cur.isRightOf(predicate)||  predicate.apply(cur))  {	  if(predicate.isRightOf(cur)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
18	[BUG]  [BUGGY]  if(!predicate.isRightOf(cur)||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(!predicate.isRightOf(cur)||  predicate.apply(cur))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(!predicate.isRightOf(cur)||  predicate.apply(cur))  {	  if(predicate.isRightOf(cur)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
19	[BUG]  [BUGGY]  if(predicate.isLeftOf(cur)||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(predicate.isLeftOf(cur)||  predicate.apply(cur))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(predicate.isLeftOf(cur)||  predicate.apply(cur))  {	  if(predicate.isRightOf(cur)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
20	[BUG]  [BUGGY]  if(predicate.isRightOf(cur)&&  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(predicate.isRightOf(cur)&&  predicate.apply(cur))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(predicate.isRightOf(cur)&&  predicate.apply(cur))  {	  if(predicate.isRightOf(cur)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
21	[BUG]  [BUGGY]  if(cur.isLeftOf(cur)||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(cur.isLeftOf(cur)||  predicate.apply(cur))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(cur.isLeftOf(cur)||  predicate.apply(cur))  {	  if(predicate.isRightOf(cur)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
22	[BUG]  [BUGGY]  if(cur.isRightOf(predicate)||  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(cur.isRightOf(predicate)||  cur.apply(predicate))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(cur.isRightOf(predicate)||  cur.apply(predicate))  {	  if(predicate.isRightOf(cur)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
23	[BUG]  [BUGGY]  if(cur.apply(p))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(cur.apply(p))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(cur.apply(p))  {	  if(p.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
24	[BUG]  [BUGGY]  if(!p.apply(cur))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(!p.apply(cur))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(!p.apply(cur))  {	  if(p.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
25	[BUG]  [BUGGY]  if(p.apply(cur)||  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(p.apply(cur)||  cur.apply(predicate))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(p.apply(cur)||  cur.apply(predicate))  {	  if(p.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
26	[BUG]  [BUGGY]  if(p.apply(cur,  predicate))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(p.apply(cur,  predicate))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(p.apply(cur,  predicate))  {	  if(p.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
27	[BUG]  [BUGGY]  if(cur.apply(p)||  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(cur.apply(p)||  cur.apply(predicate))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(cur.apply(p)||  cur.apply(predicate))  {	  if(p.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
28	[BUG]  [BUGGY]  if(p.apply(cur)||  cur.apply(n))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(p.apply(cur)||  cur.apply(n))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(p.apply(cur)||  cur.apply(n))  {	  if(p.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
29	[BUG]  [BUGGY]  if(predicate.checkRightOf(cur,  expressionRoot)&&  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(predicate.checkRightOf(cur,  expressionRoot)&&  predicate.apply(cur))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(predicate.checkRightOf(cur,  expressionRoot)&&  predicate.apply(cur))  {	  if(predicate.checkRightOf(cur,    expressionRoot)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
30	[BUG]  [BUGGY]  if(cur.checkRightOf(cur,  expressionRoot)||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(cur.checkRightOf(cur,  expressionRoot)||  predicate.apply(cur))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(cur.checkRightOf(cur,  expressionRoot)||  predicate.apply(cur))  {	  if(predicate.checkRightOf(cur,    expressionRoot)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
31	[BUG]  [BUGGY]  if(!predicate.checkRightOf(cur,  expressionRoot)&&  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(!predicate.checkRightOf(cur,  expressionRoot)&&  predicate.apply(cur))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(!predicate.checkRightOf(cur,  expressionRoot)&&  predicate.apply(cur))  {	  if(predicate.checkRightOf(cur,    expressionRoot)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
32	[BUG]  [BUGGY]  if(!predicate.checkRightOf(cur,  expressionRoot)||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(!predicate.checkRightOf(cur,  expressionRoot)||  predicate.apply(cur))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(!predicate.checkRightOf(cur,  expressionRoot)||  predicate.apply(cur))  {	  if(predicate.checkRightOf(cur,    expressionRoot)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
33	[BUG]  [BUGGY]  if(predicate.checkRightOf(cur,  expressionRoot)||  cur.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(predicate.checkRightOf(cur,  expressionRoot)||  cur.apply(expressionRoot))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(predicate.checkRightOf(cur,  expressionRoot)||  cur.apply(expressionRoot))  {	  if(predicate.checkRightOf(cur,    expressionRoot)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
34	[BUG]  [BUGGY]  if(predicate.checkRightOf(n,  expressionRoot)||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(predicate.checkRightOf(n,  expressionRoot)||  predicate.apply(cur))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(predicate.checkRightOf(n,  expressionRoot)||  predicate.apply(cur))  {	  if(predicate.checkRightOf(cur,    expressionRoot)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
35	[BUG]  [BUGGY]  if(!predicate.checkRightOf(cur))  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(!predicate.checkRightOf(cur))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(!predicate.checkRightOf(cur))  {	  if(predicate.checkRightOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
36	[BUG]  [BUGGY]  if(cur.checkRightOf(predicate))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(cur.checkRightOf(predicate))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(cur.checkRightOf(predicate))  {	  if(predicate.checkRightOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
37	[BUG]  [BUGGY]  if(!predicate.checkRightOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(!predicate.checkRightOf(cur,  expressionRoot))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(!predicate.checkRightOf(cur,  expressionRoot))  {	  if(predicate.checkRightOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
38	[BUG]  [BUGGY]  if(cur.checkRightOf(predicate)||  predicate.checkRightOf(cur))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(cur.checkRightOf(predicate)||  predicate.checkRightOf(cur))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(cur.checkRightOf(predicate)||  predicate.checkRightOf(cur))  {	  if(predicate.checkRightOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
39	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(!predicate.checkLeftOf(cur))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(!predicate.checkLeftOf(cur))  {	  if(predicate.checkRightOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
40	[BUG]  [BUGGY]  if(predicate.checkRightOf(cur)||  predicate.checkRightOf(cur))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(predicate.checkRightOf(cur)||  predicate.checkRightOf(cur))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(predicate.checkRightOf(cur)||  predicate.checkRightOf(cur))  {	  if(predicate.checkRightOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
41	[BUG]  [BUGGY]  if(cur.checkRightOf(expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(cur.checkRightOf(expressionRoot,  predicate))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(cur.checkRightOf(expressionRoot,  predicate))  {	  if(predicate.checkRightOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
42	[BUG]  [BUGGY]  if(cur.checkRightOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(cur.checkRightOf(cur,  expressionRoot))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(cur.checkRightOf(cur,  expressionRoot))  {	  if(predicate.checkRightOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
43	[BUG]  [BUGGY]  if(cur.checkRightOf(p,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(cur.checkRightOf(p,  expressionRoot))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(cur.checkRightOf(p,  expressionRoot))  {	  if(predicate.checkRightOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
44	[BUG]  [BUGGY]  if(cur.checkRightOf(defNode,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(cur.checkRightOf(defNode,  expressionRoot))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(cur.checkRightOf(defNode,  expressionRoot))  {	  if(predicate.checkRightOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
45	[BUG]  [BUGGY]  if(cur.checkRightOf(n,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(cur.checkRightOf(n,  expressionRoot))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(cur.checkRightOf(n,  expressionRoot))  {	  if(predicate.checkRightOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
46	[BUG]  [BUGGY]  if(predicate.checkRightOf(cur,  expressionRoot)||  predicate.checkRightOf(n,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(predicate.checkRightOf(cur,  expressionRoot)||  predicate.checkRightOf(n,  expressionRoot))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(predicate.checkRightOf(cur,  expressionRoot)||  predicate.checkRightOf(n,  expressionRoot))  {	  if(predicate.checkRightOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
47	[BUG]  [BUGGY]  NodeUtil.removeChild(cur);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  NodeUtil.removeChild(cur);  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	NodeUtil.removeChild(cur);	      	non-compiled	[CE]  <identifier>  expected	6	None	replace
48	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(cur,  predicate);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  NodeUtil.mayHaveSideEffects(cur,  predicate);  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	NodeUtil.mayHaveSideEffects(cur,  predicate);	      	non-compiled	[CE]  <identifier>  expected	6	None	replace
49	[BUG]  [BUGGY]  NodeUtil.removeChild(cur,  predicate);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  NodeUtil.removeChild(cur,  predicate);  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	NodeUtil.removeChild(cur,  predicate);	      	non-compiled	[CE]  <identifier>  expected	6	None	replace
50	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(cur,  predicate);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  NodeUtil.copyCurrentStructure(cur,  predicate);  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	NodeUtil.copyCurrentStructure(cur,  predicate);	      	non-compiled	[CE]  <identifier>  expected	6	None	replace
51	[BUG]  [BUGGY]  Predicate  <  Node>  cfgNode  =  cur.getParent();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  Predicate  <  Node>  cfgNode  =  cur.getParent();  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	Predicate  <  Node>  cfgNode  =  cur.getParent();	      	non-compiled	[CE]  <identifier>  expected	6	None	replace
52	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(cur);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  NodeUtil.copyCurrentStructure(cur);  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	NodeUtil.copyCurrentStructure(cur);	      	non-compiled	[CE]  <identifier>  expected	6	None	replace
53	[BUG]  [BUGGY]  Predicate  <  Node>  cfgNode  =  cur.getNext();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  Predicate  <  Node>  cfgNode  =  cur.getNext();  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	Predicate  <  Node>  cfgNode  =  cur.getNext();	      	non-compiled	[CE]  <identifier>  expected	6	None	replace
54	[BUG]  [BUGGY]  if(!cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(!cur.apply(predicate))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(!cur.apply(predicate))  {	  if(cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
55	[BUG]  [BUGGY]  if(cur.apply(expressionRoot))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(cur.apply(expressionRoot))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(cur.apply(expressionRoot))  {	  if(cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
56	[BUG]  [BUGGY]  if(cur.apply(cfgNode))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(cur.apply(cfgNode))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(cur.apply(cfgNode))  {	  if(cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
57	[BUG]  [BUGGY]  if(cur.apply(cfgNode,  predicate))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(cur.apply(cfgNode,  predicate))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(cur.apply(cfgNode,  predicate))  {	  if(cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
58	[BUG]  [BUGGY]  if(!cur.apply(p))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(!cur.apply(p))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(!cur.apply(p))  {	  if(cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
59	[BUG]  [BUGGY]  if(!predicate.apply(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(!predicate.apply(cur,  expressionRoot))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(!predicate.apply(cur,  expressionRoot))  {	  if(!predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
60	[BUG]  [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithin  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithin  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithin	  if(!predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
61	[BUG]  [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUs  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUs  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUs	  if(!predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
62	[BUG]  [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWith  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWith  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWith	  if(!predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
63	[BUG]  [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUse  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUse  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUse	  if(!predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
64	[BUG]  [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUse  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUse  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUse	  if(!predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
65	[BUG]  [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinU  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinU  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(!predicate.apply(cur)&&!numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinU	  if(!predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
66	[BUG]  [BUGGY]  if(!predicate.apply(p))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(!predicate.apply(p))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(!predicate.apply(p))  {	  if(!predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
67	[BUG]  [BUGGY]  if(!predicate.contains(cur))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(!predicate.contains(cur))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(!predicate.contains(cur))  {	  if(!predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
68	[BUG]  [BUGGY]  if(!predicate.checkRightOf(cur,  expressionRoot)||!predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(!predicate.checkRightOf(cur,  expressionRoot)||!predicate.apply(cur))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(!predicate.checkRightOf(cur,  expressionRoot)||!predicate.apply(cur))  {	  if(!predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
69	[BUG]  [BUGGY]  if(!predicate.checkRightOf(cur)||!predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(!predicate.checkRightOf(cur)||!predicate.apply(cur))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(!predicate.checkRightOf(cur)||!predicate.apply(cur))  {	  if(!predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
70	[BUG]  [BUGGY]  if(predicate.checkRightOf(cur),  expressionRoot)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(predicate.checkRightOf(cur),  expressionRoot)  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(predicate.checkRightOf(cur),  expressionRoot)  {	  if(predicate.checkRightOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
71	[BUG]  [BUGGY]  if(p.checkRightOf(cur))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(p.checkRightOf(cur))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(p.checkRightOf(cur))  {	  if(predicate.checkRightOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
72	[BUG]  [BUGGY]  if(!predicate.checkRightOf(cur),  expressionRoot)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(!predicate.checkRightOf(cur),  expressionRoot)  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(!predicate.checkRightOf(cur),  expressionRoot)  {	  if(predicate.checkRightOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
73	[BUG]  [BUGGY]  if(predicate.checkRightOf(p,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(predicate.checkRightOf(p,  expressionRoot))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(predicate.checkRightOf(p,  expressionRoot))  {	  if(predicate.checkRightOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
74	[BUG]  [BUGGY]  if(predicate.checkRightOf(cur,  expressionRoot)||  predicate.checkRightOf(p,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(predicate.checkRightOf(cur,  expressionRoot)||  predicate.checkRightOf(p,  expressionRoot))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(predicate.checkRightOf(cur,  expressionRoot)||  predicate.checkRightOf(p,  expressionRoot))  {	  if(predicate.checkRightOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
75	[BUG]  [BUGGY]  if(cur.isLeftOf(predicate))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(cur.isLeftOf(predicate))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(cur.isLeftOf(predicate))  {	  if(predicate.isRightOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
76	[BUG]  [BUGGY]  if(predicate.isLeftOf(cur)||  predicate.isRightOf(cur))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(predicate.isLeftOf(cur)||  predicate.isRightOf(cur))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(predicate.isLeftOf(cur)||  predicate.isRightOf(cur))  {	  if(predicate.isRightOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
77	[BUG]  [BUGGY]  if(predicate.isRightOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(predicate.isRightOf(cur,  expressionRoot))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(predicate.isRightOf(cur,  expressionRoot))  {	  if(predicate.isRightOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
78	[BUG]  [BUGGY]  if(predicate.apply(cur)||  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(predicate.apply(cur)||  cur.apply(predicate))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(predicate.apply(cur)||  cur.apply(predicate))  {	  if(predicate.apply(cur)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
79	[BUG]  [BUGGY]  if(predicate.apply(p)||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(predicate.apply(p)||  predicate.apply(cur))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(predicate.apply(p)||  predicate.apply(cur))  {	  if(predicate.apply(cur)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
80	[BUG]  [BUGGY]  if(predicate.apply(cur)||  predicate.apply(p))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(predicate.apply(cur)||  predicate.apply(p))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(predicate.apply(cur)||  predicate.apply(p))  {	  if(predicate.apply(cur)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
81	[BUG]  [BUGGY]  if(cur.apply(p)||  predicate.apply(predicate))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(cur.apply(p)||  predicate.apply(predicate))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(cur.apply(p)||  predicate.apply(predicate))  {	  if(cur.apply(predicate)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
82	[BUG]  [BUGGY]  if(predicate.isRightOf(cur)||  predicate.apply(p))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(predicate.isRightOf(cur)||  predicate.apply(p))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(predicate.isRightOf(cur)||  predicate.apply(p))  {	  if(predicate.isRightOf(cur)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
83	[BUG]  [BUGGY]  if(predicate.equals(cur)||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(predicate.equals(cur)||  predicate.apply(cur))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(predicate.equals(cur)||  predicate.apply(cur))  {	  if(predicate.isRightOf(cur)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
84	[BUG]  [BUGGY]  if(cur.contains(p)||  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(cur.contains(p)||  cur.apply(predicate))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(cur.contains(p)||  cur.apply(predicate))  {	  if(cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
85	[BUG]  [BUGGY]  if(cur.apply(p,  predicate))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(cur.apply(p,  predicate))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(cur.apply(p,  predicate))  {	  if(cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
86	[BUG]  [BUGGY]  if(cur.apply(p)||  predicate  ==  SIDE_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(cur.apply(p)||  predicate  ==  SIDE_EFFECT_PREDICATE)  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(cur.apply(p)||  predicate  ==  SIDE_EFFECT_PREDICATE)  {	  if(cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
87	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME  &&  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(cur.getType()  ==  Token.NAME  &&  cur.apply(predicate))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(cur.getType()  ==  Token.NAME  &&  cur.apply(predicate))  {	  if(cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
88	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(cur);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  NodeUtil.mayHaveSideEffects(cur);  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	NodeUtil.mayHaveSideEffects(cur);	      	non-compiled	[CE]  <identifier>  expected	6	None	replace
89	[BUG]  [BUGGY]  Predicate  <  Node>  p  =  predicate.getParent();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  Predicate  <  Node>  p  =  predicate.getParent();  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	Predicate  <  Node>  p  =  predicate.getParent();	      	non-compiled	[CE]  <identifier>  expected	6	None	replace
90	[BUG]  [BUGGY]  Predicate  <  Node>  p  =  cur.getParent();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  Predicate  <  Node>  p  =  cur.getParent();  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	Predicate  <  Node>  p  =  cur.getParent();	      	non-compiled	[CE]  <identifier>  expected	6	None	replace
91	[BUG]  [BUGGY]  if(predicate.checkRightOf(p,  expressionRoot)||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(predicate.checkRightOf(p,  expressionRoot)||  predicate.apply(cur))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(predicate.checkRightOf(p,  expressionRoot)||  predicate.apply(cur))  {	  if(predicate.checkRightOf(cur,    expressionRoot)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
92	[BUG]  [BUGGY]  if(predicate.checkRightOf(cur,  expressionRoot)||  predicate.apply(p))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(predicate.checkRightOf(cur,  expressionRoot)||  predicate.apply(p))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(predicate.checkRightOf(cur,  expressionRoot)||  predicate.apply(p))  {	  if(predicate.checkRightOf(cur,    expressionRoot)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
93	[BUG]  [BUGGY]  if(cur.checkRightOf(expressionRoot,  predicate)||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(cur.checkRightOf(expressionRoot,  predicate)||  predicate.apply(cur))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(cur.checkRightOf(expressionRoot,  predicate)||  predicate.apply(cur))  {	  if(predicate.checkRightOf(cur,    expressionRoot)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
94	[BUG]  [BUGGY]  if(p.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(p.apply(predicate))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(p.apply(predicate))  {	  if(p.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
95	[BUG]  [BUGGY]  if(p.apply(cur),  predicate)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(p.apply(cur),  predicate)  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(p.apply(cur),  predicate)  {	  if(p.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
96	[BUG]  [BUGGY]  if(p.apply(cur)||  cur.getType()  ==  Token.GETPROP)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(p.apply(cur)||  cur.getType()  ==  Token.GETPROP)  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(p.apply(cur)||  cur.getType()  ==  Token.GETPROP)  {	  if(p.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
97	[BUG]  [BUGGY]  if(p.apply(cur)||  cur.getType()  ==  Token.NAME)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(p.apply(cur)||  cur.getType()  ==  Token.NAME)  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(p.apply(cur)||  cur.getType()  ==  Token.NAME)  {	  if(p.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
98	[BUG]  [BUGGY]  if(p.apply(cur)||  p.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(p.apply(cur)||  p.apply(predicate))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(p.apply(cur)||  p.apply(predicate))  {	  if(p.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
99	[BUG]  [BUGGY]  if(p.apply(cur)||  cur.getType()!=  Token.NAME)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(p.apply(cur)||  cur.getType()!=  Token.NAME)  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(p.apply(cur)||  cur.getType()!=  Token.NAME)  {	  if(p.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
100	[BUG]  [BUGGY]  if(cur.isLeftOf(predicate)||  predicate.isRightOf(cur))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(cur.isLeftOf(predicate)||  predicate.isRightOf(cur))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(cur.isLeftOf(predicate)||  predicate.isRightOf(cur))  {	  if(predicate.isRightOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
101	[BUG]  [BUGGY]  if(!predicate.isLeftOf(cur)&&  predicate.isRightOf(cur))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(!predicate.isLeftOf(cur)&&  predicate.isRightOf(cur))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(!predicate.isLeftOf(cur)&&  predicate.isRightOf(cur))  {	  if(predicate.isRightOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
102	[BUG]  [BUGGY]  if(!predicate.isRightOf(cur)&&  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(!predicate.isRightOf(cur)&&  predicate.apply(cur))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(!predicate.isRightOf(cur)&&  predicate.apply(cur))  {	  if(predicate.isRightOf(cur)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
103	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.VAR  &&  predicate.apply(n))  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(cur.getType()  ==  Token.VAR  &&  predicate.apply(n))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(cur.getType()  ==  Token.VAR  &&  predicate.apply(n))  {	  if(cur.apply(predicate))    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
104	[BUG]  [BUGGY]  Predicate  <  Node>  cfgNode  =  predicate.getParent();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  Predicate  <  Node>  cfgNode  =  predicate.getParent();  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	Predicate  <  Node>  cfgNode  =  predicate.getParent();	      	non-compiled	[CE]  <identifier>  expected	6	None	replace
105	[BUG]  [BUGGY]  NodeUtil.checkParent(cur,  predicate);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  NodeUtil.checkParent(cur,  predicate);  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	NodeUtil.checkParent(cur,  predicate);	      	non-compiled	[CE]  <identifier>  expected	6	None	replace
106	[BUG]  [BUGGY]  Predicate  <  Node>  cfgNode  =  predicate.getFirstChild();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  Predicate  <  Node>  cfgNode  =  predicate.getFirstChild();  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	Predicate  <  Node>  cfgNode  =  predicate.getFirstChild();	      	non-compiled	[CE]  <identifier>  expected	6	None	replace
107	[BUG]  [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot)&&  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot)&&  predicate.apply(cur))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(predicate.checkLeftOf(cur,  expressionRoot)&&  predicate.apply(cur))  {	  if(predicate.checkRightOf(cur,    expressionRoot)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
108	[BUG]  [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot)||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(predicate.checkLeftOf(cur,  expressionRoot)||  predicate.apply(cur))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(predicate.checkLeftOf(cur,  expressionRoot)||  predicate.apply(cur))  {	  if(predicate.checkRightOf(cur,    expressionRoot)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
109	[BUG]  [BUGGY]  if(!predicate.apply(cur)&&!NodeUtil.isExpressionNode(cur))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(!predicate.apply(cur)&&!NodeUtil.isExpressionNode(cur))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(!predicate.apply(cur)&&!NodeUtil.isExpressionNode(cur))  {	  if(!predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
110	[BUG]  [BUGGY]  if(!predicate.matches(cur))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(!predicate.matches(cur))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(!predicate.matches(cur))  {	  if(!predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
111	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur)||  predicate.checkRightOf(cur))  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(!predicate.checkLeftOf(cur)||  predicate.checkRightOf(cur))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(!predicate.checkLeftOf(cur)||  predicate.checkRightOf(cur))  {	  if(predicate.checkRightOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
112	[BUG]  [BUGGY]  if(p.checkRightOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(p.checkRightOf(cur,  expressionRoot))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(p.checkRightOf(cur,  expressionRoot))  {	  if(predicate.checkRightOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
113	[BUG]  [BUGGY]  if(predicate.checkRightOf(cur,  expressionRoot)||  predicate.checkRightOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(predicate.checkRightOf(cur,  expressionRoot)||  predicate.checkRightOf(cur,  expressionRoot))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(predicate.checkRightOf(cur,  expressionRoot)||  predicate.checkRightOf(cur,  expressionRoot))  {	  if(predicate.checkRightOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
114	[BUG]  [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(!predicate.checkLeftOf(cur,  expressionRoot))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(!predicate.checkLeftOf(cur,  expressionRoot))  {	  if(predicate.checkRightOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
115	[BUG]  [BUGGY]  if(!predicate.apply(cur)&&  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {    [BUGGY]  if(!predicate.apply(cur)&&  predicate.apply(cur))  {  [BUGGY]    return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3333333333333333	464	464	3	replace	if(!predicate.apply(cur)&&  predicate.apply(cur))  {	  if(predicate.apply(cur)||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
