bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  [BUGGY]  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	computeMustDef(n.getLastChild(),  cfgNode,  output,  false);	computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  	non-compiled	[CE]  <identifier>  expected	17	None	replace
2	[BUG]  [BUGGY]  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);	computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  	non-compiled	[CE]  <identifier>  expected	17	None	replace
3	[BUG]  [BUGGY]  if(n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError  [CONTEXT]  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]  if(n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  	non-compiled	[CE]  <identifier>  expected	17	None	replace
4	[BUG]  [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]          AssertionFailedError  [CONTEXT]  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);	computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  	non-compiled	[CE]  <identifier>  expected	17	None	replace
5	[BUG]  [BUGGY]  if(n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError  [CONTEXT]  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]  if(n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  	non-compiled	[CE]  <identifier>  expected	17	None	replace
6	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError  [CONTEXT]  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  	non-compiled	[CE]  <identifier>  expected	17	None	replace
7	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError  [CONTEXT]  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  	non-compiled	[CE]  <identifier>  expected	17	None	replace
8	[BUG]  [BUGGY]    [CE]  <identifier>  expected  [FE]                  AssertionFailedError  [CONTEXT]  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]    [BUGGY]  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	  	computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  	non-compiled	[CE]  <identifier>  expected	17	None	replace
9	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  	non-compiled	[CE]  <identifier>  expected	17	None	replace
10	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  	non-compiled	[CE]  <identifier>  expected	17	None	replace
11	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError  [CONTEXT]  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  	non-compiled	[CE]  <identifier>  expected	17	None	replace
12	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  	non-compiled	[CE]  <identifier>  expected	17	None	replace
13	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]  return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  	non-compiled	[CE]  <identifier>  expected	17	None	replace
