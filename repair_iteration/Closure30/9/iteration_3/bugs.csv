bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
2	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
3	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
4	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
5	[BUG]  [BUGGY]  Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  cfgNode,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  cfgNode,  output,  conditional);	  Node    rhs    =    n.getLastChild();    addToDefIfLocal(rhs,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
6	[BUG]  [BUGGY]  Node  rhs  =  n.getLastChild();  computeMustDef(rhs,  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  rhs  =  n.getLastChild();  computeMustDef(rhs,  cfgNode,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  rhs  =  n.getLastChild();  computeMustDef(rhs,  cfgNode,  output,  conditional);	  Node    rhs    =    n.getLastChild();    addToDefIfLocal(rhs,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
7	[BUG]  [BUGGY]  Node  rhs  =  n.getFirstChild();  computeMustDef(cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  rhs  =  n.getFirstChild();  computeMustDef(cfgNode,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  rhs  =  n.getFirstChild();  computeMustDef(cfgNode,  output,  conditional);	  Node    rhs    =    n.getLastChild();    addToDefIfLocal(rhs,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
8	[BUG]  [BUGGY]  Node  rhs  =  n.getFirstChild();  addToDefIfLocal(cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  rhs  =  n.getFirstChild();  addToDefIfLocal(cfgNode,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  rhs  =  n.getFirstChild();  addToDefIfLocal(cfgNode,  output,  conditional);	  Node    rhs    =    n.getLastChild();    addToDefIfLocal(rhs,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
9	[BUG]  [BUGGY]  Node  rhs  =  n.getFirstChild();  addToDefIfLocal(rhs,  conditional,  cfgNode,  output);  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  rhs  =  n.getFirstChild();  addToDefIfLocal(rhs,  conditional,  cfgNode,  output);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  rhs  =  n.getFirstChild();  addToDefIfLocal(rhs,  conditional,  cfgNode,  output);	  Node    rhs    =    n.getLastChild();    addToDefIfLocal(rhs,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
10	[BUG]  [BUGGY]  if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  compiler.reportCodeChange();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  compiler.reportCodeChange();  }	  if(n.getLastChild()!=    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
11	[BUG]  [BUGGY]  if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(n.getLastChild()!=    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
12	[BUG]  [BUGGY]  if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  compiler.reportCodeChange();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  compiler.reportCodeChange();  }	  if(n.getLastChild()!=    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
13	[BUG]  [BUGGY]  if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  compiler.reportCodeChange  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  compiler.reportCodeChange  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  compiler.reportCodeChange	  if(n.getLastChild()!=    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
14	[BUG]  [BUGGY]  Context.checkState(n.getLastChild()!=  cfgNode);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Context.checkState(n.getLastChild()!=  cfgNode);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Context.checkState(n.getLastChild()!=  cfgNode);	  if(n.getLastChild()!=    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
15	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(conditional)    {    if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChil    	non-compiled	[CE]  <identifier>  expected	82	None	replace
16	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChil  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChil  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChil	  if(conditional)    {    if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChil    	non-compiled	[CE]  <identifier>  expected	82	None	replace
17	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(conditional)    {    if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChil    	non-compiled	[CE]  <identifier>  expected	82	None	replace
18	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChil  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChil  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChil	  if(conditional)    {    if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChil    	non-compiled	[CE]  <identifier>  expected	82	None	replace
19	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(conditional)    {    if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChil    	non-compiled	[CE]  <identifier>  expected	82	None	replace
20	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(conditional)    {    if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChil    	non-compiled	[CE]  <identifier>  expected	82	None	replace
21	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getFirstChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getFirstChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }	  if(n.getFirstChild()    ==    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
22	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME  ||  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild	  if(n.getType()    ==    Token.NAME    &&    cfgNode!=    null)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild    	non-compiled	[CE]  <identifier>  expected	119	None	replace
23	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME  &&  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(n.getType()    ==    Token.NAME    &&    cfgNode!=    null)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild    	non-compiled	[CE]  <identifier>  expected	119	None	replace
24	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME  ||  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.NAME    &&    cfgNode!=    null)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild    	non-compiled	[CE]  <identifier>  expected	119	None	replace
25	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME  &&  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.NAME    &&    cfgNode!=    null)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild    	non-compiled	[CE]  <identifier>  expected	119	None	replace
26	[BUG]  [BUGGY]  if(c.getType()  ==  Token.NAME  &&  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.getType()  ==  Token.NAME  &&  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(c.getType()  ==  Token.NAME  &&  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild	  if(n.getType()    ==    Token.NAME    &&    cfgNode!=    null)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild    	non-compiled	[CE]  <identifier>  expected	119	None	replace
27	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChil  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChil  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME  ||  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChil	  if(n.getType()    ==    Token.NAME    &&    cfgNode!=    null)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild    	non-compiled	[CE]  <identifier>  expected	119	None	replace
28	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
29	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
30	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
31	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeFunction(n.getFirstChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMustBeFunction(n.getFirstChild(),  cfgNode,  output,  false);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMustBeFunction(n.getFirstChild(),  cfgNode,  output,  false);	  if(!conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
32	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeFunction(n.getFirstChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMustBeFunction(n.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMustBeFunction(n.getFirstChild(),  cfgNode,  output,  true);	  if(!conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
33	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeFunction(n.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMustBeFunction(n.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMustBeFunction(n.getFirstChild(),  cfgNode,  output,  conditional);	  if(!conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
34	[BUG]  [BUGGY]  AssertionFailedError.make(lhs,  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  AssertionFailedError.make(lhs,  cfgNode,  output,  false);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	AssertionFailedError.make(lhs,  cfgNode,  output,  false);	  if(!conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
35	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(conditional)    {    if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  <identifier>  expected	74	None	replace
36	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()	  if(conditional)    {    if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  <identifier>  expected	74	None	replace
37	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(conditional)    {    if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  <identifier>  expected	74	None	replace
38	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()	  if(conditional)    {    if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  <identifier>  expected	74	None	replace
39	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMustDef(n.getLastChild(),  cfgNode,  output,  conditional);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
40	[BUG]  [BUGGY]  forceMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  forceMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	forceMustDef(n.getLastChild(),  cfgNode,  output,  conditional);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
41	[BUG]  [BUGGY]  allowMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  allowMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	allowMustDef(n.getLastChild(),  cfgNode,  output,  conditional);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
42	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeFunction(n.getLastChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMustBeFunction(n.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMustBeFunction(n.getLastChild(),  cfgNode,  output,  conditional);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
43	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
44	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustDef(n.getLastChild(),  cfgNode,  output);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMustDef(n.getLastChild(),  cfgNode,  output);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMustDef(n.getLastChild(),  cfgNode,  output);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
45	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  cfgNode  &&  n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getFirstChild()  ==  cfgNode  &&  n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getFirstChild()  ==  cfgNode  &&  n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getFirstChild()    ==    cfgNode    ||    n.getLastChild()    ==    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
46	[BUG]  [BUGGY]  Context.checkState(n.getFirstChild()  ==  cfgNode  ||  n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Context.checkState(n.getFirstChild()  ==  cfgNode  ||  n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Context.checkState(n.getFirstChild()  ==  cfgNode  ||  n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getFirstChild()    ==    cfgNode    ||    n.getLastChild()    ==    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
47	[BUG]  [BUGGY]  if(n.getLastChild()  ==  cfgNode  ||  n.getFirstChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getLastChild()  ==  cfgNode  ||  n.getFirstChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getLastChild()  ==  cfgNode  ||  n.getFirstChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getFirstChild()    ==    cfgNode    ||    n.getLastChild()    ==    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
48	[BUG]  [BUGGY]  if(n.getLastChild()  ==  cfgNode  ||  n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getLastChild()  ==  cfgNode  ||  n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getLastChild()  ==  cfgNode  ||  n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getFirstChild()    ==    cfgNode    ||    n.getLastChild()    ==    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
49	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  cfgNode  ||  n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getFirstChild()  ==  cfgNode  ||  n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getFirstChild()  ==  cfgNode  ||  n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(n.getFirstChild()    ==    cfgNode    ||    n.getLastChild()    ==    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
50	[BUG]  [BUGGY]  forceMustDef(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  forceMustDef(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	forceMustDef(n.getLastChild(),  cfgNode,  output,  true);	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
51	[BUG]  [BUGGY]  forceMustDef(n.getFirstChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  forceMustDef(n.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	forceMustDef(n.getFirstChild(),  cfgNode,  output,  true);	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
52	[BUG]  [BUGGY]  forceMustDef(n.getLastChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  forceMustDef(n.getLastChild(),  cfgNode,  output,  false);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	forceMustDef(n.getLastChild(),  cfgNode,  output,  false);	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
53	[BUG]  [BUGGY]  forceMustDef(n.getFirstChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  forceMustDef(n.getFirstChild(),  cfgNode,  output,  false);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	forceMustDef(n.getFirstChild(),  cfgNode,  output,  false);	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
54	[BUG]  [BUGGY]  if(c.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cf  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cf  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(c.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cf	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cf    	non-compiled	[CE]  <identifier>  expected	25	None	replace
55	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cf  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cf  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cf	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cf    	non-compiled	[CE]  <identifier>  expected	25	None	replace
56	[BUG]  [BUGGY]  if(c.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cf  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cf  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(c.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cf	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cf    	non-compiled	[CE]  <identifier>  expected	25	None	replace
57	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cf  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cf  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cf	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cf    	non-compiled	[CE]  <identifier>  expected	25	None	replace
58	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cf  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cf  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cf	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cf    	non-compiled	[CE]  <identifier>  expected	25	None	replace
59	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.VAR)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
60	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.VAR)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
61	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.VAR)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
62	[BUG]  [BUGGY]  Node  rhs  =  cfgNode.getLastChild();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  rhs  =  cfgNode.getLastChild();  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  rhs  =  cfgNode.getLastChild();	  Node    rhs    =    n.getLastChild();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
63	[BUG]  [BUGGY]  Node  rhs  =  node.getLastChild();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  rhs  =  node.getLastChild();  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  rhs  =  node.getLastChild();	  Node    rhs    =    n.getLastChild();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
64	[BUG]  [BUGGY]  Node  rhs  =  n.getfirstChild();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  rhs  =  n.getfirstChild();  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  rhs  =  n.getfirstChild();	  Node    rhs    =    n.getLastChild();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
65	[BUG]  [BUGGY]  Node  rhs  =  n.getLastChild().getNext();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  rhs  =  n.getLastChild().getNext();  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  rhs  =  n.getLastChild().getNext();	  Node    rhs    =    n.getLastChild();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
66	[BUG]  [BUGGY]  if(n.getType()!=  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()!=  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()!=  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(n.getType()!=    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
67	[BUG]  [BUGGY]  n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(n.getType()!=    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
68	[BUG]  [BUGGY]  n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()!=    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
69	[BUG]  [BUGGY]  if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(n.getLastChild()!=    cfgNode)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
70	[BUG]  [BUGGY]  if(n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  if(n.getLastChild()!=    cfgNode)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
71	[BUG]  [BUGGY]  if(n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(n.getLastChild()!=    cfgNode)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
72	[BUG]  [BUGGY]  if(n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }	  if(n.getLastChild()!=    cfgNode)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
73	[BUG]  [BUGGY]  if(n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  if(n.getLastChild()!=    cfgNode)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
74	[BUG]  [BUGGY]  if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }	  if(n.getLastChild()!=    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
75	[BUG]  [BUGGY]  Constructor  <  Node>  cfgNode  =  n.getLastChild();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Constructor  <  Node>  cfgNode  =  n.getLastChild();  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Constructor  <  Node>  cfgNode  =  n.getLastChild();	  if(n.getLastChild()!=    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
76	[BUG]  [BUGGY]  if(n.getLastChild()!=  cfgNode  ||  n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getLastChild()!=  cfgNode  ||  n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getLastChild()!=  cfgNode  ||  n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }	  if(n.getLastChild()!=    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
77	[BUG]  [BUGGY]  if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(n.getLastChild()!=    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
78	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output    	non-compiled	[CE]  <identifier>  expected	28	None	replace
79	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output    	non-compiled	[CE]  <identifier>  expected	28	None	replace
80	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output    	non-compiled	[CE]  <identifier>  expected	28	None	replace
81	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.FUNCTION  &&!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
82	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
83	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  cfgNode.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  cfgNode.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.FUNCTION  &&  cfgNode.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
84	[BUG]  [BUGGY]  Node  escaped  =  n.getFirstChild();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  escaped  =  n.getFirstChild();  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  escaped  =  n.getFirstChild();	  if(!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
85	[BUG]  [BUGGY]  Node  escaped  =  n.getLastChild();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  escaped  =  n.getLastChild();  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  escaped  =  n.getLastChild();	  if(!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
86	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingDependency(cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMissingDependency(cfgNode,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMissingDependency(cfgNode,  output,  conditional);	  if(!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
87	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
88	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.FUNCTION  &&!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
89	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  cfgNode!=  null)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  cfgNode!=  null)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.FUNCTION  &&  cfgNode!=  null)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
90	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()	  if(conditional)    {    if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  <identifier>  expected	81	None	replace
91	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.FUNCTION  ||  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.FUNCTION    &&!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
92	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.FUNCTION  &&  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.FUNCTION    &&!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
93	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.FUNCTION    &&!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
94	[BUG]  [BUGGY]  n.getType()  ==  Token.FUNCTION  ||  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  n.getType()  ==  Token.FUNCTION  ||  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	n.getType()  ==  Token.FUNCTION  ||  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.FUNCTION    &&!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
95	[BUG]  [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	}  else  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()	  }    else    if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  <identifier>  expected	102	None	replace
96	[BUG]  [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	}  else  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  }    else    if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  <identifier>  expected	102	None	replace
97	[BUG]  [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	}  else  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  }    else    if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  <identifier>  expected	102	None	replace
98	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  false,  conditional);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  false,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  false,  conditional);	  aughtExceptionHandler.handleMissingName(n.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
99	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(cfgNode.getFirstChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMissingName(cfgNode.getFirstChild(),  cfgNode,  output,  false);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMissingName(cfgNode.getFirstChild(),  cfgNode,  output,  false);	  aughtExceptionHandler.handleMissingName(n.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
100	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingDependency(cfgNode,  conditional);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMissingDependency(cfgNode,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMissingDependency(cfgNode,  conditional);	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
101	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output);	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
102	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChil  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChil  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChil	  if(conditional)    {    if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChil    	non-compiled	[CE]  <identifier>  expected	73	None	replace
103	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(conditional)    {    if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChil    	non-compiled	[CE]  <identifier>  expected	73	None	replace
104	[BUG]  [BUGGY]  allowMustDef(n.getLastChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  allowMustDef(n.getLastChild(),  cfgNode,  output,  false);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	allowMustDef(n.getLastChild(),  cfgNode,  output,  false);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
105	[BUG]  [BUGGY]  allowMustDef(n.getLastChild(),  cfgNode,  output);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  allowMustDef(n.getLastChild(),  cfgNode,  output);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	allowMustDef(n.getLastChild(),  cfgNode,  output);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
106	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
107	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
108	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
109	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
110	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
111	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cf  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cf  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cf	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cf    	non-compiled	[CE]  <identifier>  expected	22	None	replace
112	[BUG]  [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cf  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cf  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	}  else  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cf	  }    else    if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cf    	non-compiled	[CE]  <identifier>  expected	107	None	replace
113	[BUG]  [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cf  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cf  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	}  else  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cf	  }    else    if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cf    	non-compiled	[CE]  <identifier>  expected	107	None	replace
114	[BUG]  [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  output,  conditional);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	}  else  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  output,  conditional);  }	  }    else    if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cf    	non-compiled	[CE]  <identifier>  expected	107	None	replace
115	[BUG]  [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	}  else  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),	  }    else    if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cf    	non-compiled	[CE]  <identifier>  expected	107	None	replace
116	[BUG]  [BUGGY]  if(c.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(c.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
117	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
118	[BUG]  [BUGGY]  if(c.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(c.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
119	[BUG]  [BUGGY]  if(c.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(c.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
120	[BUG]  [BUGGY]  Node  rhs  =  n.getLastChild();  addToDefIfLocal(rhs,  conditional,  cfgNode,  output);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  rhs  =  n.getLastChild();  addToDefIfLocal(rhs,  conditional,  cfgNode,  output);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  rhs  =  n.getLastChild();  addToDefIfLocal(rhs,  conditional,  cfgNode,  output);	  Node    rhs    =    n.getFirstChild();    addToDefIfLocal(rhs,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
121	[BUG]  [BUGGY]  AssertionFailedError.make(n,  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  AssertionFailedError.make(n,  cfgNode,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	AssertionFailedError.make(n,  cfgNode,  output,  conditional);	  if(conditional)    {    if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild    	non-compiled	[CE]  <identifier>  expected	71	None	replace
122	[BUG]  [BUGGY]  AssertionFailedError.make(n.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  AssertionFailedError.make(n.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	AssertionFailedError.make(n.getFirstChild(),  cfgNode,  output,  conditional);	  if(conditional)    {    if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild    	non-compiled	[CE]  <identifier>  expected	71	None	replace
123	[BUG]  [BUGGY]  AssertionFailedError.make(n.getType(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  AssertionFailedError.make(n.getType(),  cfgNode,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	AssertionFailedError.make(n.getType(),  cfgNode,  output,  conditional);	  if(conditional)    {    if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild    	non-compiled	[CE]  <identifier>  expected	71	None	replace
124	[BUG]  [BUGGY]  escaped.add(cfgNode);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  escaped.add(cfgNode);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	escaped.add(cfgNode);	  if(conditional)    {    if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild    	non-compiled	[CE]  <identifier>  expected	71	None	replace
125	[BUG]  [BUGGY]  AssertionFailedError.make(cfgNode,  n,  output,  conditional);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  AssertionFailedError.make(cfgNode,  n,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	AssertionFailedError.make(cfgNode,  n,  output,  conditional);	  if(conditional)    {    if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild    	non-compiled	[CE]  <identifier>  expected	71	None	replace
126	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(cfgNode.getFirstChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMissingName(cfgNode.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMissingName(cfgNode.getFirstChild(),  cfgNode,  output,  true);	  aughtExceptionHandler.handleMissingName(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
127	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(n.getString(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMissingName(n.getString(),  cfgNode,  output,  true);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMissingName(n.getString(),  cfgNode,  output,  true);	  aughtExceptionHandler.handleMissingName(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
128	[BUG]  [BUGGY]  escaped  ||  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  escaped  ||  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	escaped  ||  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);	  if(!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cf    	non-compiled	[CE]  <identifier>  expected	64	None	replace
129	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cf  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cf  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cf	  if(!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cf    	non-compiled	[CE]  <identifier>  expected	64	None	replace
130	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cf    	non-compiled	[CE]  <identifier>  expected	64	None	replace
131	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cf  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cf  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cf	  if(!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cf    	non-compiled	[CE]  <identifier>  expected	64	None	replace
132	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cf    	non-compiled	[CE]  <identifier>  expected	64	None	replace
133	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cf    	non-compiled	[CE]  <identifier>  expected	64	None	replace
134	[BUG]  [BUGGY]  n.getType()  ==  Token.FUNCTION  &&!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  n.getType()  ==  Token.FUNCTION  &&!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	n.getType()  ==  Token.FUNCTION  &&!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.FUNCTION    ||!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
135	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingDependency(cfgNode,  output);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMissingDependency(cfgNode,  output);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMissingDependency(cfgNode,  output);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
136	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  output,  conditional);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  output,  conditional);  }	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cf    	non-compiled	[CE]  <identifier>  expected	24	None	replace
137	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cf  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cf  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cf	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cf    	non-compiled	[CE]  <identifier>  expected	24	None	replace
138	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(n.getString(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMissingName(n.getString(),  cfgNode,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMissingName(n.getString(),  cfgNode,  output,  conditional);	  aughtExceptionHandler.handleMissingName(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
139	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(cfgNode.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMissingName(cfgNode.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMissingName(cfgNode.getFirstChild(),  cfgNode,  output,  conditional);	  aughtExceptionHandler.handleMissingName(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
140	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeFunction(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMustBeFunction(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMustBeFunction(n.getLastChild(),  cfgNode,  output,  true);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
141	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeFunction(n.getLastChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMustBeFunction(n.getLastChild(),  cfgNode,  output,  false);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMustBeFunction(n.getLastChild(),  cfgNode,  output,  false);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
142	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME  ||  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild	  if(n.getType()    ==    Token.NAME    &&    cfgNode!=    null)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild    	non-compiled	[CE]  <identifier>  expected	114	None	replace
143	[BUG]  [BUGGY]  if(c.getType()  ==  Token.NAME  &&  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.getType()  ==  Token.NAME  &&  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(c.getType()  ==  Token.NAME  &&  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild	  if(n.getType()    ==    Token.NAME    &&    cfgNode!=    null)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild    	non-compiled	[CE]  <identifier>  expected	114	None	replace
144	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME  &&  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild	  if(n.getType()    ==    Token.NAME    &&    cfgNode!=    null)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild    	non-compiled	[CE]  <identifier>  expected	114	None	replace
145	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
146	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
147	[BUG]  [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	}  else  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  }    else    if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	103	None	replace
148	[BUG]  [BUGGY]  }  else  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  }  else  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	}  else  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  }    else    if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	103	None	replace
149	[BUG]  [BUGGY]  }  else  if(conditional)  {  computeMustDef(cfgNode.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  }  else  if(conditional)  {  computeMustDef(cfgNode.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	}  else  if(conditional)  {  computeMustDef(cfgNode.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  }    else    if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	103	None	replace
150	[BUG]  [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	}  else  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  }    else    if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
151	[BUG]  [BUGGY]  }  else  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  }  else  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	}  else  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  }    else    if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
152	[BUG]  [BUGGY]  }  else  if(conditional)  {  computeMustDef(cfgNode.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  }  else  if(conditional)  {  computeMustDef(cfgNode.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	}  else  if(conditional)  {  computeMustDef(cfgNode.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  }    else    if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
153	[BUG]  [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	}  else  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  }    else    if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
154	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output);	  if(!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
155	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingDependency(n.getLastChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMissingDependency(n.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMissingDependency(n.getLastChild(),  cfgNode,  output,  conditional);	  if(!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	96	None	replace
156	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingDependency(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMissingDependency(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMissingDependency(n.getLastChild(),  cfgNode,  output,  true);	  if(!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	96	None	replace
157	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingDependency(n.getLastChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMissingDependency(n.getLastChild(),  cfgNode,  output,  false);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMissingDependency(n.getLastChild(),  cfgNode,  output,  false);	  if(!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	96	None	replace
158	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingDependency(n.getLastChild(),  cfgNode,  output);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMissingDependency(n.getLastChild(),  cfgNode,  output);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMissingDependency(n.getLastChild(),  cfgNode,  output);	  if(!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	96	None	replace
159	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
160	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION);  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION);  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Context.checkState(n.getType()  ==  Token.FUNCTION);  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
161	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(cfgNode.getLastChild(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(cfgNode.getLastChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(cfgNode.getLastChild(),  cfgNode,  output,  conditional);  }	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
162	[BUG]  [BUGGY]  AssertionFailedError.make(lhs,  cfgNode,  output);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  AssertionFailedError.make(lhs,  cfgNode,  output);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	AssertionFailedError.make(lhs,  cfgNode,  output);	  if(conditional)    {    if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n    	non-compiled	[CE]  <identifier>  expected	72	None	replace
163	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.FUNCTION  &&  n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(n.getType()    ==    Token.FUNCTION    ||    n.getLastChild()    ==    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
164	[BUG]  [BUGGY]  n.getType()  ==  Token.FUNCTION  &&  n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  n.getType()  ==  Token.FUNCTION  &&  n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	n.getType()  ==  Token.FUNCTION  &&  n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(n.getType()    ==    Token.FUNCTION    ||    n.getLastChild()    ==    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
165	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(n.getType()    ==    Token.FUNCTION    ||    n.getLastChild()    ==    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
166	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(n.getType()    ==    Token.FUNCTION    ||    n.getLastChild()    ==    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
167	[BUG]  [BUGGY]  n.getType()  ==  Token.FUNCTION  &&  n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  n.getType()  ==  Token.FUNCTION  &&  n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	n.getType()  ==  Token.FUNCTION  &&  n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.FUNCTION    ||    n.getLastChild()    ==    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
168	[BUG]  [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(!conditional)    {    if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild()    	non-compiled	[CE]  <identifier>  expected	110	None	replace
169	[BUG]  [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(!conditional)    {    if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild()    	non-compiled	[CE]  <identifier>  expected	110	None	replace
170	[BUG]  [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(!conditional)    {    if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild()    	non-compiled	[CE]  <identifier>  expected	110	None	replace
171	[BUG]  [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild()  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild()	  if(!conditional)    {    if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild()    	non-compiled	[CE]  <identifier>  expected	110	None	replace
172	[BUG]  [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(!conditional)    {    if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild()    	non-compiled	[CE]  <identifier>  expected	110	None	replace
173	[BUG]  [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.STRING)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.STRING)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  if(n.getType()  ==  Token.STRING)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(!conditional)    {    if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild()    	non-compiled	[CE]  <identifier>  expected	110	None	replace
174	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.FUNCTION  ||  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.FUNCTION    &&    cfgNode!=    null)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
175	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.FUNCTION  &&  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(n.getType()    ==    Token.FUNCTION    &&    cfgNode!=    null)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
176	[BUG]  [BUGGY]  if(c.getType()  ==  Token.FUNCTION  &&  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.getType()  ==  Token.FUNCTION  &&  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(c.getType()  ==  Token.FUNCTION  &&  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.FUNCTION    &&    cfgNode!=    null)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
177	[BUG]  [BUGGY]  n.getType()  ==  Token.FUNCTION  ||  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  n.getType()  ==  Token.FUNCTION  ||  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	n.getType()  ==  Token.FUNCTION  ||  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.FUNCTION    &&    cfgNode!=    null)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
178	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(!conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
179	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(!conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
180	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild()  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild()	  if(conditional)    {    if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild()    	non-compiled	[CE]  <identifier>  expected	69	None	replace
181	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
182	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
183	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
184	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
185	[BUG]  [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	}  else  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()	  }    else    if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  <identifier>  expected	105	None	replace
186	[BUG]  [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  output,  false);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	}  else  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  output,  false);  }	  }    else    if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  <identifier>  expected	105	None	replace
187	[BUG]  [BUGGY]  if(c.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(c.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
188	[BUG]  [BUGGY]  if(c.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(c.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
189	[BUG]  [BUGGY]  if(c.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(c.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(c.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
190	[BUG]  [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()	  if(!conditional)    {    if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  <identifier>  expected	121	None	replace
191	[BUG]  [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()	  if(!conditional)    {    if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  <identifier>  expected	121	None	replace
192	[BUG]  [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChil  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChil  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChil	  if(!conditional)    {    if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  <identifier>  expected	121	None	replace
193	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustDef(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMustDef(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMustDef(n.getLastChild(),  cfgNode,  output,  true);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getString(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
194	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
195	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
196	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
197	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
198	[BUG]  [BUGGY]  Node  aNode  =  n.getLastChild();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  aNode  =  n.getLastChild();  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  aNode  =  n.getLastChild();	  Node    aNode    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	76	None	replace
199	[BUG]  [BUGGY]  Node  aNode  =  cfgNode.getFirstChild();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  aNode  =  cfgNode.getFirstChild();  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  aNode  =  cfgNode.getFirstChild();	  Node    aNode    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	76	None	replace
200	[BUG]  [BUGGY]  Node  aNode  =  lhs.getFirstChild();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  aNode  =  lhs.getFirstChild();  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  aNode  =  lhs.getFirstChild();	  Node    aNode    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	76	None	replace
201	[BUG]  [BUGGY]  Node  aNode  =  node.getFirstChild();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  aNode  =  node.getFirstChild();  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  aNode  =  node.getFirstChild();	  Node    aNode    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	76	None	replace
202	[BUG]  [BUGGY]  Node  aNode  =  n.getAncestor(1);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  aNode  =  n.getAncestor(1);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  aNode  =  n.getAncestor(1);	  Node    aNode    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	76	None	replace
203	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.VAR)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
204	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }	  if(n.getType()    ==    Token.VAR)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
205	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cf  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cf  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cf	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
206	[BUG]  [BUGGY]  Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output,  true);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output,  true);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output,  true);	  Node    rhs    =    n.getLastChild();    computeMustDef(rhs,    output,    true);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
207	[BUG]  [BUGGY]  Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output,  false);  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output,  false);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output,  false);	  Node    rhs    =    n.getLastChild();    computeMustDef(rhs,    output,    true);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
208	[BUG]  [BUGGY]  Node  rhs  =  n.getLastChild();  computeMustDef(rhs,  output,  false);  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  rhs  =  n.getLastChild();  computeMustDef(rhs,  output,  false);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  rhs  =  n.getLastChild();  computeMustDef(rhs,  output,  false);	  Node    rhs    =    n.getLastChild();    computeMustDef(rhs,    output,    true);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
209	[BUG]  [BUGGY]  Node  rhs  =  node.getLastChild();  computeMustDef(rhs,  output,  true);  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  rhs  =  node.getLastChild();  computeMustDef(rhs,  output,  true);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  rhs  =  node.getLastChild();  computeMustDef(rhs,  output,  true);	  Node    rhs    =    n.getLastChild();    computeMustDef(rhs,    output,    true);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
210	[BUG]  [BUGGY]  Node  rhs  =  n.getfirstChild();  computeMustDef(rhs,  output,  true);  [CE]  <identifier>  expected  [FE]                                              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  rhs  =  n.getfirstChild();  computeMustDef(rhs,  output,  true);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  rhs  =  n.getfirstChild();  computeMustDef(rhs,  output,  true);	  Node    rhs    =    n.getLastChild();    computeMustDef(rhs,    output,    true);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
211	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  if(n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  if(n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.FUNCTION)  {  if(n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(n.getLastChild()!=    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    addToDefIfLocal(lhs.getString()    	non-compiled	[CE]  <identifier>  expected	16	None	replace
212	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  if(n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.VAR)  {  if(n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.VAR)  {  if(n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(n.getLastChild()!=    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    addToDefIfLocal(lhs.getString()    	non-compiled	[CE]  <identifier>  expected	16	None	replace
213	[BUG]  [BUGGY]  if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString()  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString()	  if(n.getLastChild()!=    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    addToDefIfLocal(lhs.getString()    	non-compiled	[CE]  <identifier>  expected	16	None	replace
214	[BUG]  [BUGGY]  n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);	  if(n.getLastChild()!=    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    addToDefIfLocal(lhs.getString()    	non-compiled	[CE]  <identifier>  expected	16	None	replace
215	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if(n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if(n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME)  {  if(n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(n.getLastChild()!=    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    addToDefIfLocal(lhs.getString()    	non-compiled	[CE]  <identifier>  expected	16	None	replace
216	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME  &&  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.NAME    &&!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
217	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME  ||!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME  ||!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.NAME    &&!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
218	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cf  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cf  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME  &&  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cf	  if(n.getType()    ==    Token.NAME    &&!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
219	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cf  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME  ||!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cf  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME  ||!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cf	  if(n.getType()    ==    Token.NAME    &&!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
220	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild()  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild()	  if(n.getType()    ==    Token.NAME    &&!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
221	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
222	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()    ==    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
223	[BUG]  [BUGGY]  n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()    ==    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
224	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()    ==    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
225	[BUG]  [BUGGY]  ||  n.getFirstChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  ||  n.getFirstChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	||  n.getFirstChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()    ==    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
226	[BUG]  [BUGGY]  n.getFirstChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  n.getFirstChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	n.getFirstChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()    ==    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
227	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME  ||!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME  ||!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild	  if(n.getType()    ==    Token.NAME    &&!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild    	non-compiled	[CE]  <identifier>  expected	23	None	replace
228	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild	  if(n.getType()    ==    Token.NAME    &&!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild    	non-compiled	[CE]  <identifier>  expected	23	None	replace
229	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME  &&  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild	  if(n.getType()    ==    Token.NAME    &&!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild    	non-compiled	[CE]  <identifier>  expected	23	None	replace
230	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME  ||!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME  ||!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.NAME    &&!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild    	non-compiled	[CE]  <identifier>  expected	23	None	replace
231	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild	  if(n.getType()    ==    Token.NAME    &&!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild    	non-compiled	[CE]  <identifier>  expected	23	None	replace
232	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.FUNCTION  &&  n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.FUNCTION    ||    n.getLastChild()    ==    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
233	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.FUNCTION    ||    n.getLastChild()    ==    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
234	[BUG]  [BUGGY]  ||  n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  ||  n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	||  n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.FUNCTION    ||    n.getLastChild()    ==    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
235	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  calculateMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  calculateMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  calculateMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(!conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
236	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  <identifier>  expected	68	None	replace
237	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  <identifier>  expected	68	None	replace
238	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  <identifier>  expected	68	None	replace
239	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(n.getLastChild(),  cfgNode,  output,  true);  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  <identifier>  expected	68	None	replace
240	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  <identifier>  expected	68	None	replace
241	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
242	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
243	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cf  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cf  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cf	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
244	[BUG]  [BUGGY]  tryMustDef(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  tryMustDef(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	tryMustDef(n.getLastChild(),  cfgNode,  output,  true);	  tryMustDef(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	106	None	replace
245	[BUG]  [BUGGY]  tryMustDef(n.getFirstChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  tryMustDef(n.getFirstChild(),  cfgNode,  output,  false);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	tryMustDef(n.getFirstChild(),  cfgNode,  output,  false);	  tryMustDef(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	106	None	replace
246	[BUG]  [BUGGY]  enableMustDef(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  enableMustDef(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	enableMustDef(n.getLastChild(),  cfgNode,  output,  true);	  tryMustDef(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	106	None	replace
247	[BUG]  [BUGGY]  tryMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  tryMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	tryMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);	  tryMustDef(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	106	None	replace
248	[BUG]  [BUGGY]  testDef(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  testDef(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	testDef(n.getLastChild(),  cfgNode,  output,  true);	  tryMustDef(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	106	None	replace
249	[BUG]  [BUGGY]  AssertionFailedError.make(lhs,  rhs,  output,  conditional);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  AssertionFailedError.make(lhs,  rhs,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	AssertionFailedError.make(lhs,  rhs,  output,  conditional);	  AssertionFailedError.make(lhs,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
250	[BUG]  [BUGGY]  AssertionFailedError.make(cfgNode,  lhs,  output,  conditional);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  AssertionFailedError.make(cfgNode,  lhs,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	AssertionFailedError.make(cfgNode,  lhs,  output,  conditional);	  AssertionFailedError.make(lhs,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
251	[BUG]  [BUGGY]  AssertionFailedError.make(lhs,  cfgNode,  rhs,  output,  conditional);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  AssertionFailedError.make(lhs,  cfgNode,  rhs,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	AssertionFailedError.make(lhs,  cfgNode,  rhs,  output,  conditional);	  AssertionFailedError.make(lhs,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
252	[BUG]  [BUGGY]  AssertionFailedError.make(lhs,  conditional,  cfgNode);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  AssertionFailedError.make(lhs,  conditional,  cfgNode);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	AssertionFailedError.make(lhs,  conditional,  cfgNode);	  AssertionFailedError.make(lhs,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
253	[BUG]  [BUGGY]  AssertionFailedError.make(aNode,  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  AssertionFailedError.make(aNode,  cfgNode,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	AssertionFailedError.make(aNode,  cfgNode,  output,  conditional);	  AssertionFailedError.make(lhs,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
254	[BUG]  [BUGGY]  AssertionFailedError.make(msg,  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  AssertionFailedError.make(msg,  cfgNode,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	AssertionFailedError.make(msg,  cfgNode,  output,  conditional);	  AssertionFailedError.make(lhs,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
255	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getString(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getString(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getString(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getString(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
256	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getString(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getString(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getString(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getString(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
257	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getString(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getString(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getString(),  cfgNode,  output,  false);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getString(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
258	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getString(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getString(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getString(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getString(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
259	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getString(),  cf  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getString(),  cf  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getString(),  cf	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getString(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
260	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getString(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getString(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getString(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getString(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
261	[BUG]  [BUGGY]  if(n.getFirstChild()!=  cfgNode  &&  n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getFirstChild()!=  cfgNode  &&  n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getFirstChild()!=  cfgNode  &&  n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getFirstChild()!=    cfgNode    ||    n.getLastChild()!=    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
262	[BUG]  [BUGGY]  if(n.getLastChild()!=  cfgNode  ||  n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getLastChild()!=  cfgNode  ||  n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getLastChild()!=  cfgNode  ||  n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getFirstChild()!=    cfgNode    ||    n.getLastChild()!=    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
263	[BUG]  [BUGGY]  if(n.getFirstChild()!=  cfgNode  ||  n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getFirstChild()!=  cfgNode  ||  n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getFirstChild()!=  cfgNode  ||  n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getFirstChild()!=    cfgNode    ||    n.getLastChild()!=    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
264	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  cfgNode  ||  n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getFirstChild()  ==  cfgNode  ||  n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getFirstChild()  ==  cfgNode  ||  n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getFirstChild()!=    cfgNode    ||    n.getLastChild()!=    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
265	[BUG]  [BUGGY]  n.getFirstChild()!=  cfgNode  ||  n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  n.getFirstChild()!=  cfgNode  ||  n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	n.getFirstChild()!=  cfgNode  ||  n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getFirstChild()!=    cfgNode    ||    n.getLastChild()!=    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
266	[BUG]  [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	}  else  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild	  }    else    if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild    	non-compiled	[CE]  <identifier>  expected	108	None	replace
267	[BUG]  [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	}  else  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild	  }    else    if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild    	non-compiled	[CE]  <identifier>  expected	108	None	replace
268	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustDef(n.getLastChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMustDef(n.getLastChild(),  cfgNode,  output,  false);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMustDef(n.getLastChild(),  cfgNode,  output,  false);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
269	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustDef(n.getFirstChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMustDef(n.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMustDef(n.getFirstChild(),  cfgNode,  output,  true);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
270	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
271	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
272	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
273	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
274	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
275	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  conditional);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  conditional);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
276	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  true);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
277	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild	  if(conditional)    {    if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild    	non-compiled	[CE]  <identifier>  expected	80	None	replace
278	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild	  if(conditional)    {    if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild    	non-compiled	[CE]  <identifier>  expected	80	None	replace
279	[BUG]  [BUGGY]  Node  rhs  =  cfgNode.getFirstChild();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  rhs  =  cfgNode.getFirstChild();  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  rhs  =  cfgNode.getFirstChild();	  Node    rhs    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
280	[BUG]  [BUGGY]  Node  rhs  =  node.getFirstChild();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  rhs  =  node.getFirstChild();  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  rhs  =  node.getFirstChild();	  Node    rhs    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
281	[BUG]  [BUGGY]  Node  rhs  =  n.getFirstChild().getNext();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  rhs  =  n.getFirstChild().getNext();  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  rhs  =  n.getFirstChild().getNext();	  Node    rhs    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
282	[BUG]  [BUGGY]  Node  rhs  =  n.getNext();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  rhs  =  n.getNext();  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  rhs  =  n.getNext();	  Node    rhs    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
283	[BUG]  [BUGGY]  forceMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  forceMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	forceMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
284	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
285	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  output,  conditional);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  output,  conditional);  }	  if(n.getType()    ==    Token.NAME    &&!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild()    	non-compiled	[CE]  <identifier>  expected	112	None	replace
286	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME  &&  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.NAME    &&!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild()    	non-compiled	[CE]  <identifier>  expected	112	None	replace
287	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),	  if(n.getType()    ==    Token.NAME    &&!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild()    	non-compiled	[CE]  <identifier>  expected	112	None	replace
288	[BUG]  [BUGGY]  Node  rhs  =  cfgNode.getLastChild();  computeMustDef(rhs,  output,  conditional);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  rhs  =  cfgNode.getLastChild();  computeMustDef(rhs,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  rhs  =  cfgNode.getLastChild();  computeMustDef(rhs,  output,  conditional);	  Node    rhs    =    n.getLastChild();    computeMustDef(rhs,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
289	[BUG]  [BUGGY]  Node  rhs  =  node.getLastChild();  computeMustDef(rhs,  output,  conditional);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  rhs  =  node.getLastChild();  computeMustDef(rhs,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  rhs  =  node.getLastChild();  computeMustDef(rhs,  output,  conditional);	  Node    rhs    =    n.getLastChild();    computeMustDef(rhs,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
290	[BUG]  [BUGGY]  Node  rhs  =  n.getfirstChild();  computeMustDef(rhs,  output,  conditional);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  rhs  =  n.getfirstChild();  computeMustDef(rhs,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  rhs  =  n.getfirstChild();  computeMustDef(rhs,  output,  conditional);	  Node    rhs    =    n.getLastChild();    computeMustDef(rhs,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
291	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  true,  conditional);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  true,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  true,  conditional);	  aughtExceptionHandler.handleMissingName(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
292	[BUG]  [BUGGY]  }  else  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  }  else  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	}  else  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  }    else    if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
293	[BUG]  [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	}  else  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  }    else    if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
294	[BUG]  [BUGGY]  }  else  if(conditional)  {  computeMustDef(cfgNode.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  }  else  if(conditional)  {  computeMustDef(cfgNode.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	}  else  if(conditional)  {  computeMustDef(cfgNode.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  }    else    if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
295	[BUG]  [BUGGY]  }  else  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  }  else  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	}  else  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  }    else    if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
296	[BUG]  [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild	  if(!conditional)    {    if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild    	non-compiled	[CE]  <identifier>  expected	120	None	replace
297	[BUG]  [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild	  if(!conditional)    {    if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild    	non-compiled	[CE]  <identifier>  expected	120	None	replace
298	[BUG]  [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(!conditional)    {    if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild    	non-compiled	[CE]  <identifier>  expected	120	None	replace
299	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  cfgNode  ||  n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getFirstChild()  ==  cfgNode  ||  n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getFirstChild()  ==  cfgNode  ||  n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(n.getLastChild()    ==    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
300	[BUG]  [BUGGY]  n.getLastChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  n.getLastChild(),  cfgNode,  output,  false);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	n.getLastChild(),  cfgNode,  output,  false);	  if(n.getLastChild()    ==    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
301	[BUG]  [BUGGY]  Node  rhs  =  cfgNode.getFirstChild();  computeMustDef(rhs,  output,  conditional);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  rhs  =  cfgNode.getFirstChild();  computeMustDef(rhs,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  rhs  =  cfgNode.getFirstChild();  computeMustDef(rhs,  output,  conditional);	  Node    rhs    =    n.getFirstChild();    computeMustDef(rhs,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
302	[BUG]  [BUGGY]  if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(n.getLastChild()!=    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
303	[BUG]  [BUGGY]  if(n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(n.getLastChild()!=    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
304	[BUG]  [BUGGY]  if(n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(n.getLastChild()!=    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
305	[BUG]  [BUGGY]  if(n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(n.getLastChild()!=    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
306	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n	  if(conditional)    {    if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n    	non-compiled	[CE]  <identifier>  expected	70	None	replace
307	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n	  if(conditional)    {    if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n    	non-compiled	[CE]  <identifier>  expected	70	None	replace
308	[BUG]  [BUGGY]  if(n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  compiler.reportCodeChange();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  compiler.reportCodeChange();  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
309	[BUG]  [BUGGY]  if(n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString(),  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString(),  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString(),	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
310	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingDependency(n.getFirstChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMissingDependency(n.getFirstChild(),  cfgNode,  output,  false);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMissingDependency(n.getFirstChild(),  cfgNode,  output,  false);	  if(!conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
311	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingDependency(n.getFirstChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMissingDependency(n.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMissingDependency(n.getFirstChild(),  cfgNode,  output,  true);	  if(!conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
312	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingDependency(n.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMissingDependency(n.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMissingDependency(n.getFirstChild(),  cfgNode,  output,  conditional);	  if(!conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
313	[BUG]  [BUGGY]  tryMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  tryMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	tryMustDef(n.getLastChild(),  cfgNode,  output,  conditional);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
314	[BUG]  [BUGGY]  tryMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  tryMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	tryMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
315	[BUG]  [BUGGY]  tryMustDef(n.getLastChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  tryMustDef(n.getLastChild(),  cfgNode,  output,  false);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	tryMustDef(n.getLastChild(),  cfgNode,  output,  false);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
316	[BUG]  [BUGGY]  tryMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  tryMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	tryMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
317	[BUG]  [BUGGY]  tryMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  tryMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	tryMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
318	[BUG]  [BUGGY]  tryMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  tryMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	tryMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
319	[BUG]  [BUGGY]  tryMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  tryMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	tryMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
320	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
321	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  false,  conditional);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  false,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  false,  conditional);	  aughtExceptionHandler.handleMissingName(n.getLastChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
322	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME  ||!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME  ||!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()	  if(n.getType()    ==    Token.NAME    &&!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  <identifier>  expected	46	None	replace
323	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME  &&  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()	  if(n.getType()    ==    Token.NAME    &&!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  <identifier>  expected	46	None	replace
324	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  if(n.getType()    ==    Token.VAR)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
325	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild	  if(conditional)    {    if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild    	non-compiled	[CE]  <identifier>  expected	71	None	replace
326	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n	  if(conditional)    {    if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild    	non-compiled	[CE]  <identifier>  expected	71	None	replace
327	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
328	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	113	None	replace
329	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	113	None	replace
330	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getfirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getfirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getfirstChild(),  cfgNode,  output,  true);  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	113	None	replace
331	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getString(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getString(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getString(),  cfgNode,  output,  true);  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getString(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
332	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getString(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getString(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getString(),  cfgNode,  output,  true);  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getString(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
333	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getString(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getString(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getString(),  cfgNode,  output,  true);  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getString(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
334	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getString(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getString(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getString(),  cfgNode,  output,  false);  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getString(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
335	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getString(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getString(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getString(),  cfgNode,  output,  true);  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getString(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
336	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getString(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getString(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getString(),  cfgNode,  output,  true);  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getString(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
337	[BUG]  [BUGGY]  Node  rhs  =  n.getLastChild();  outputToDefIfLocal(rhs,  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  rhs  =  n.getLastChild();  outputToDefIfLocal(rhs,  cfgNode,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  rhs  =  n.getLastChild();  outputToDefIfLocal(rhs,  cfgNode,  output,  conditional);	  Node    rhs    =    n.getFirstChild();    addToDefIfLocal(rhs,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
338	[BUG]  [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	}  else  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  }    else    if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
339	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  output,  true);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  output,  true);  }	  }    else    if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  <identifier>  expected	105	None	replace
340	[BUG]  [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	}  else  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  output,  true);  }	  }    else    if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  <identifier>  expected	105	None	replace
341	[BUG]  [BUGGY]  if(n.getType()!=  Token.FUNCTION  ||  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()!=  Token.FUNCTION  ||  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()!=  Token.FUNCTION  ||  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.FUNCTION    &&    cfgNode!=    null)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
342	[BUG]  [BUGGY]  if(conditional  &&  n!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional  &&  n!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional  &&  n!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.FUNCTION    &&    cfgNode!=    null)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
343	[BUG]  [BUGGY]  n.setType(Token.FUNCTION  ||  n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  n.setType(Token.FUNCTION  ||  n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	n.setType(Token.FUNCTION  ||  n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.FUNCTION    ||    n.getLastChild()    ==    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
344	[BUG]  [BUGGY]  n.setType(Token.FUNCTION  ||  n.getFirstChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  n.setType(Token.FUNCTION  ||  n.getFirstChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	n.setType(Token.FUNCTION  ||  n.getFirstChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.FUNCTION    ||    n.getLastChild()    ==    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
345	[BUG]  [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler.handleMissingName(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
346	[BUG]  [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  aughtExceptionHandler.handleMissingName(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
347	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.FUNCTION  ||!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
348	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
349	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
350	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
351	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChil  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChil  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChil	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
352	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
353	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
354	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
355	[BUG]  [BUGGY]  if(!aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  false);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  false);	  aughtExceptionHandler.handleMissingName(n.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
356	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(n.getString(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMissingName(n.getString(),  cfgNode,  output,  false);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMissingName(n.getString(),  cfgNode,  output,  false);	  aughtExceptionHandler.handleMissingName(n.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
357	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
358	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.FUNCTION  ||  conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.FUNCTION    ||!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
359	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.FUNCTION    ||!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
360	[BUG]  [BUGGY]  if(n.getType()!=  Token.FUNCTION  ||  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()!=  Token.FUNCTION  ||  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()!=  Token.FUNCTION  ||  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.FUNCTION    ||!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
361	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild	  if(n.getType()    ==    Token.NAME    &&!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild    	non-compiled	[CE]  <identifier>  expected	23	None	replace
362	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChil  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChil  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME  &&  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChil	  if(n.getType()    ==    Token.NAME    &&    cfgNode!=    null)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild    	non-compiled	[CE]  <identifier>  expected	119	None	replace
363	[BUG]  [BUGGY]  Node  rhs  =  lhs.getFirstChild();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  rhs  =  lhs.getFirstChild();  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  rhs  =  lhs.getFirstChild();	  Node    rhs    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
364	[BUG]  [BUGGY]  Node  lhs  =  n.getLastChild();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  lhs  =  n.getLastChild();  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  lhs  =  n.getLastChild();	  Node    rhs    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
365	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if(n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if(n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME)  {  if(n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }	  if(n.getLastChild()!=    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
366	[BUG]  [BUGGY]  assembleMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  assembleMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	assembleMustDef(n.getLastChild(),  cfgNode,  output,  conditional);	  if(n.getLastChild()!=    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
367	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if(n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cf  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if(n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cf  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME)  {  if(n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cf	  if(n.getLastChild()!=    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
368	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
369	[BUG]  [BUGGY]  Node  aNode  =  output.getFirstChild();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  aNode  =  output.getFirstChild();  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  aNode  =  output.getFirstChild();	  Node    aNode    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	76	None	replace
370	[BUG]  [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler.handleMissingName(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
371	[BUG]  [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler.handleMissingName(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
372	[BUG]  [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  aughtExceptionHandler.handleMissingName(n.getFirstChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
373	[BUG]  [BUGGY]  Preconditions.checkState(conditional);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Preconditions.checkState(conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Preconditions.checkState(conditional);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
374	[BUG]  [BUGGY]  Constructor  <  Node>  escaped  =  compiler.getNodeForCodeInsertion(cfgNode);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Constructor  <  Node>  escaped  =  compiler.getNodeForCodeInsertion(cfgNode);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Constructor  <  Node>  escaped  =  compiler.getNodeForCodeInsertion(cfgNode);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
375	[BUG]  [BUGGY]  Compiler  compiler  =  compiler.getCompiler(cfgNode);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Compiler  compiler  =  compiler.getCompiler(cfgNode);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Compiler  compiler  =  compiler.getCompiler(cfgNode);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
376	[BUG]  [BUGGY]  Constructor  <  Node>  escaped  =  compiler.getNodeForCodeInsertion(n);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Constructor  <  Node>  escaped  =  compiler.getNodeForCodeInsertion(n);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Constructor  <  Node>  escaped  =  compiler.getNodeForCodeInsertion(n);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
377	[BUG]  [BUGGY]  Constructor  <  Node>  escaped  =  compiler.getNodeForType(cfgNode);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Constructor  <  Node>  escaped  =  compiler.getNodeForType(cfgNode);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Constructor  <  Node>  escaped  =  compiler.getNodeForType(cfgNode);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
378	[BUG]  [BUGGY]  Compiler  compiler  =  compiler.getCompiler();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Compiler  compiler  =  compiler.getCompiler();  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Compiler  compiler  =  compiler.getCompiler();	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
379	[BUG]  [BUGGY]  Constructor  <  Node>  escaped  =  compiler.getCurrentNodeType();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Constructor  <  Node>  escaped  =  compiler.getCurrentNodeType();  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Constructor  <  Node>  escaped  =  compiler.getCurrentNodeType();	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
380	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild()  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild()	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
381	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
382	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
383	[BUG]  [BUGGY]  Node  rhs  =  lhs.getLastChild();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  rhs  =  lhs.getLastChild();  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  rhs  =  lhs.getLastChild();	  Node    rhs    =    n.getLastChild();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
384	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  conditional);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
385	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
386	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  if(n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  if(n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.FUNCTION)  {  if(n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getLastChild()!=    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    addToDefIfLocal(lhs.getString()    	non-compiled	[CE]  <identifier>  expected	16	None	replace
387	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if(n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if(n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME)  {  if(n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getLastChild()!=    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    addToDefIfLocal(lhs.getString()    	non-compiled	[CE]  <identifier>  expected	16	None	replace
388	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getString()  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getString()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getString()	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getString(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
389	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getString(),  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getString(),  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getString(),	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getString(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
390	[BUG]  [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  conditional);  }	  aughtExceptionHandler.handleMissingName(n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
391	[BUG]  [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output	  aughtExceptionHandler.handleMissingName(n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
392	[BUG]  [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler.handleMissingName(n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
393	[BUG]  [BUGGY]  Node  rhs  =  n.getFirstChild();  outputToDefIfLocal(rhs,  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  rhs  =  n.getFirstChild();  outputToDefIfLocal(rhs,  cfgNode,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  rhs  =  n.getFirstChild();  outputToDefIfLocal(rhs,  cfgNode,  output,  conditional);	  Node    rhs    =    n.getLastChild();    addToDefIfLocal(rhs,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
394	[BUG]  [BUGGY]  Node  rhs  =  n.getFirstChild();  computeMustDefIfLocal(rhs,  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  rhs  =  n.getFirstChild();  computeMustDefIfLocal(rhs,  cfgNode,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  rhs  =  n.getFirstChild();  computeMustDefIfLocal(rhs,  cfgNode,  output,  conditional);	  Node    rhs    =    n.getLastChild();    addToDefIfLocal(rhs,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
395	[BUG]  [BUGGY]  Node  rhs  =  n.getFirstChild();  nodeToDefIfLocal(rhs,  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  rhs  =  n.getFirstChild();  nodeToDefIfLocal(rhs,  cfgNode,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  rhs  =  n.getFirstChild();  nodeToDefIfLocal(rhs,  cfgNode,  output,  conditional);	  Node    rhs    =    n.getLastChild();    addToDefIfLocal(rhs,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
396	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  true);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
397	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  false);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMustBeReachingVariableDef(n.getLastChild(),  cfgNode,  output,  false);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
398	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
399	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChil  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChil  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChil	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
400	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariable(n,  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariable(n,  cfgNode,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMustBeReachingVariable(n,  cfgNode,  output,  conditional);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getString(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
401	[BUG]  [BUGGY]  Constructor  <  Node>  escaped  =  compiler.createConstructor(cfgNode,  output);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Constructor  <  Node>  escaped  =  compiler.createConstructor(cfgNode,  output);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Constructor  <  Node>  escaped  =  compiler.createConstructor(cfgNode,  output);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getString(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
402	[BUG]  [BUGGY]  Constructor  <  Node>  rhs  =  n.getFirstChild();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Constructor  <  Node>  rhs  =  n.getFirstChild();  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Constructor  <  Node>  rhs  =  n.getFirstChild();	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getString(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
403	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME  ||  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n	  if(n.getType()    ==    Token.NAME    &&    cfgNode!=    null)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild    	non-compiled	[CE]  <identifier>  expected	114	None	replace
404	[BUG]  [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cf    	non-compiled	[CE]  <identifier>  expected	25	None	replace
405	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
406	[BUG]  [BUGGY]  Node  rhs  =  node.getFirstChild();  computeMustDef(rhs,  output,  conditional);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  rhs  =  node.getFirstChild();  computeMustDef(rhs,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  rhs  =  node.getFirstChild();  computeMustDef(rhs,  output,  conditional);	  Node    rhs    =    n.getLastChild();    computeMustDef(rhs,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
407	[BUG]  [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output    	non-compiled	[CE]  <identifier>  expected	28	None	replace
408	[BUG]  [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChil  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChil  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChil	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output    	non-compiled	[CE]  <identifier>  expected	28	None	replace
409	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()    ==    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
410	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariableDef(n,  cfgNode,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMustBeReachingVariableDef(n,  cfgNode,  output,  conditional);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
411	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariable(n,  cfgNode,  output);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMustBeReachingVariable(n,  cfgNode,  output);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMustBeReachingVariable(n,  cfgNode,  output);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
412	[BUG]  [BUGGY]  Constructor  <  Node>  rhs  =  output.getRhs();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Constructor  <  Node>  rhs  =  output.getRhs();  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Constructor  <  Node>  rhs  =  output.getRhs();	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
413	[BUG]  [BUGGY]  if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(n.getLastChild()!=    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
414	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if(n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  throw  new  Il  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if(n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  throw  new  Il  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME)  {  if(n.getLastChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  throw  new  Il	  if(n.getLastChild()!=    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
415	[BUG]  [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	}  else  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild	  }    else    if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild    	non-compiled	[CE]  <identifier>  expected	108	None	replace
416	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.NAME    &&!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
417	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n	  if(n.getType()    ==    Token.NAME    &&!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
418	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild	  if(conditional)    {    if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild    	non-compiled	[CE]  <identifier>  expected	80	None	replace
419	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  true);  }	  if(!conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
420	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  true);  }	  if(!conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
421	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  true);  }	  if(!conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
422	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(lhs.getFirstChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  true);  }	  if(!conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
423	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  true);  }	  if(!conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
424	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  true);  }	  if(!conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
425	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
426	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cf  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cf  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cf	  if(!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cf    	non-compiled	[CE]  <identifier>  expected	64	None	replace
427	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cf  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cf  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cf	  if(!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cf    	non-compiled	[CE]  <identifier>  expected	64	None	replace
428	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.STRING)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.STRING)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.STRING)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(conditional)    {    if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild()    	non-compiled	[CE]  <identifier>  expected	69	None	replace
429	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
430	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  output,  true);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  output,  true);  }	  if(n.getType()    ==    Token.NAME    &&!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  <identifier>  expected	46	None	replace
431	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  null);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
432	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
433	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cf  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cf  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cf	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
434	[BUG]  [BUGGY]  Node  rhs  =  n.getfirstChild();  computeMustDef(rhs,  output,  false);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  rhs  =  n.getfirstChild();  computeMustDef(rhs,  output,  false);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  rhs  =  n.getfirstChild();  computeMustDef(rhs,  output,  false);	  Node    rhs    =    n.getLastChild();    computeMustDef(rhs,    output,    true);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
435	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME)  {  if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getFirstChild()!=    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
436	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild()  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild()	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
437	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
438	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  null);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  null);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  null);  }	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
439	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(n.getfirstChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMissingName(n.getfirstChild(),  cfgNode,  output,  false);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMissingName(n.getfirstChild(),  cfgNode,  output,  false);	  aughtExceptionHandler.handleMissingName(n.getLastChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
440	[BUG]  [BUGGY]  AssertionFailedError.make(msgNode,  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  AssertionFailedError.make(msgNode,  cfgNode,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	AssertionFailedError.make(msgNode,  cfgNode,  output,  conditional);	  AssertionFailedError.make(lhs,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
441	[BUG]  [BUGGY]  AssertionFailedError.make(conditional,  cfgNode,  output,  lhs);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  AssertionFailedError.make(conditional,  cfgNode,  output,  lhs);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	AssertionFailedError.make(conditional,  cfgNode,  output,  lhs);	  AssertionFailedError.make(lhs,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
442	[BUG]  [BUGGY]  AssertionFailedError.make(n,  lhs,  output,  conditional);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  AssertionFailedError.make(n,  lhs,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	AssertionFailedError.make(n,  lhs,  output,  conditional);	  AssertionFailedError.make(lhs,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
443	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cf    	non-compiled	[CE]  <identifier>  expected	22	None	replace
444	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
445	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
446	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
447	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
448	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
449	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  output,  true);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  output,  true);  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  <identifier>  expected	68	None	replace
450	[BUG]  [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler.handleMissingName(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
451	[BUG]  [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output	  aughtExceptionHandler.handleMissingName(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
452	[BUG]  [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  conditional);  }	  aughtExceptionHandler.handleMissingName(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
453	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
454	[BUG]  [BUGGY]  Node  rhs  =  n.getNext();  computeMustDef(rhs,  output,  conditional);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  rhs  =  n.getNext();  computeMustDef(rhs,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  rhs  =  n.getNext();  computeMustDef(rhs,  output,  conditional);	  Node    rhs    =    n.getFirstChild();    computeMustDef(rhs,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
455	[BUG]  [BUGGY]  Node  lhs  =  n.getFirstChild();  computeMustDef(lhs,  output,  conditional);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  lhs  =  n.getFirstChild();  computeMustDef(lhs,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  lhs  =  n.getFirstChild();  computeMustDef(lhs,  output,  conditional);	  Node    rhs    =    n.getFirstChild();    computeMustDef(rhs,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
456	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	96	None	replace
457	[BUG]  [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild	  if(conditional)    {    if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChil    	non-compiled	[CE]  <identifier>  expected	73	None	replace
458	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.FOR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChil  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.FOR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChil  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.FOR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChil	  if(conditional)    {    if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChil    	non-compiled	[CE]  <identifier>  expected	73	None	replace
459	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  cfgNode)  {  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getFirstChild()  ==  cfgNode)  {  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getFirstChild()  ==  cfgNode)  {  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler.handleMissingName(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
460	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME)  {  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler.handleMissingName(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
461	[BUG]  [BUGGY]  if(aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  true))  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  true))  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  true))  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler.handleMissingName(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
462	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()    ==    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
463	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output    	non-compiled	[CE]  <identifier>  expected	28	None	replace
464	[BUG]  [BUGGY]  Node  aNode  =  n.removeFirstChild();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  aNode  =  n.removeFirstChild();  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  aNode  =  n.removeFirstChild();	  Node    aNode    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	76	None	replace
465	[BUG]  [BUGGY]  Node  aNode  =  n.getFirstChild().getNext();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  aNode  =  n.getFirstChild().getNext();  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  aNode  =  n.getFirstChild().getNext();	  Node    aNode    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	76	None	replace
466	[BUG]  [BUGGY]  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  false);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  false);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
467	[BUG]  [BUGGY]  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  conditional);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getString(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
468	[BUG]  [BUGGY]  castDef(n.getLastChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  castDef(n.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	castDef(n.getLastChild(),  cfgNode,  output,  conditional);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getString(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
469	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingDependency(n,  conditional);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMissingDependency(n,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMissingDependency(n,  conditional);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getString(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
470	[BUG]  [BUGGY]  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getString(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
471	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getString(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
472	[BUG]  [BUGGY]  Node  rhs  =  n.getLastChild();  computeMustDefIfLocal(rhs,  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  rhs  =  n.getLastChild();  computeMustDefIfLocal(rhs,  cfgNode,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  rhs  =  n.getLastChild();  computeMustDefIfLocal(rhs,  cfgNode,  output,  conditional);	  Node    rhs    =    n.getFirstChild();    addToDefIfLocal(rhs,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
473	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.ASSIGN)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChil  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.ASSIGN)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChil  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.ASSIGN)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChil	  if(conditional)    {    if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChil    	non-compiled	[CE]  <identifier>  expected	82	None	replace
474	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(n.getLastChild()!=    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
475	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.FOR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.FOR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.FOR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild	  if(conditional)    {    if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild    	non-compiled	[CE]  <identifier>  expected	71	None	replace
476	[BUG]  [BUGGY]  aughtExceptionHandler(n.getLastChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler(n.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler(n.getLastChild(),  cfgNode,  output,  conditional);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
477	[BUG]  [BUGGY]  cast(n.getLastChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  cast(n.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	cast(n.getLastChild(),  cfgNode,  output,  conditional);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
478	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.FUNCTION  ||  conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(n.getType()    ==    Token.FUNCTION    ||!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
479	[BUG]  [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
480	[BUG]  [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
481	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
482	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cf  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cf  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cf	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cf    	non-compiled	[CE]  <identifier>  expected	22	None	replace
483	[BUG]  [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	}  else  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  }    else    if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  <identifier>  expected	102	None	replace
484	[BUG]  [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getString(),  cf  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getString(),  cf  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getString(),  cf	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getString(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
485	[BUG]  [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getString()  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getString()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getString()	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getString(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
486	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getString(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getString(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getString(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getString(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
487	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getString()  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getString()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME  &&  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getString()	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getString(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
488	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getString(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getString(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getString(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getString(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
489	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString(),  cfgNode,  output,  false);  }	  if(!conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
490	[BUG]  [BUGGY]  Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output,  null);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output,  null);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  rhs  =  n.getFirstChild();  computeMustDef(rhs,  output,  null);	  Node    rhs    =    n.getLastChild();    computeMustDef(rhs,    output,    true);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
491	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME  &&  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
492	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild()  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild()	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
493	[BUG]  [BUGGY]  castDef(n.getLastChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  castDef(n.getLastChild(),  cfgNode,  output,  false);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	castDef(n.getLastChild(),  cfgNode,  output,  false);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
494	[BUG]  [BUGGY]  castDef(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  castDef(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	castDef(n.getLastChild(),  cfgNode,  output,  true);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
495	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(n,  cfgNode);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMissingName(n,  cfgNode);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMissingName(n,  cfgNode);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
496	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild()  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild()	  if(n.getType()    ==    Token.NAME    &&!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild()    	non-compiled	[CE]  <identifier>  expected	112	None	replace
497	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild()  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME  ||!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME  ||!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild()	  if(n.getType()    ==    Token.NAME    &&!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild()    	non-compiled	[CE]  <identifier>  expected	112	None	replace
498	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild()  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild()	  if(n.getType()    ==    Token.NAME    &&!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild()    	non-compiled	[CE]  <identifier>  expected	112	None	replace
499	[BUG]  [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
500	[BUG]  [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChil  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChil  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChil	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
501	[BUG]  [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
502	[BUG]  [BUGGY]  if(n.getType()!=  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()!=  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()!=  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.VAR)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
503	[BUG]  [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	}  else  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  }    else    if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  <identifier>  expected	105	None	replace
504	[BUG]  [BUGGY]  }  else  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  }  else  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	}  else  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()	  }    else    if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  <identifier>  expected	105	None	replace
505	[BUG]  [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	}  else  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	113	None	replace
506	[BUG]  [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	}  else  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	113	None	replace
507	[BUG]  [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild()  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	}  else  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild()	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	113	None	replace
508	[BUG]  [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	}  else  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	113	None	replace
509	[BUG]  [BUGGY]  tryMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  tryMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	tryMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	113	None	replace
510	[BUG]  [BUGGY]  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	tryMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
511	[BUG]  [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  calculateMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  calculateMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	}  else  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  calculateMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
512	[BUG]  [BUGGY]  }  else  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  }  else  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	}  else  if(!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  }    else    if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
513	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.EMPTY)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.EMPTY)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.EMPTY)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(conditional)    {    if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n    	non-compiled	[CE]  <identifier>  expected	72	None	replace
514	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.FOR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.FOR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.FOR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n	  if(conditional)    {    if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n    	non-compiled	[CE]  <identifier>  expected	72	None	replace
515	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.FOR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.FOR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.FOR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(conditional)    {    if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n    	non-compiled	[CE]  <identifier>  expected	72	None	replace
516	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()!=  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()!=  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()!=  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n	  if(conditional)    {    if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n    	non-compiled	[CE]  <identifier>  expected	72	None	replace
517	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.STRING)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild()  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.STRING)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.STRING)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild()	  if(conditional)    {    if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild()    	non-compiled	[CE]  <identifier>  expected	69	None	replace
518	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.ASSIGN)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild()  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.ASSIGN)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.ASSIGN)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild()	  if(conditional)    {    if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild()    	non-compiled	[CE]  <identifier>  expected	69	None	replace
519	[BUG]  [BUGGY]  if(n.getType()!=  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()!=  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()!=  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
520	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CALL)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CALL)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CALL)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
521	[BUG]  [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild()  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild()	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
522	[BUG]  [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
523	[BUG]  [BUGGY]  if(conditional  &&  n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional  &&  n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional  &&  n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()	  if(n.getType()    ==    Token.NAME    &&    cfgNode!=    null)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild    	non-compiled	[CE]  <identifier>  expected	119	None	replace
524	[BUG]  [BUGGY]  if(n.getType()!=  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()!=  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()!=  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
525	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME)  {  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  false);  }	  aughtExceptionHandler.handleMissingName(n.getLastChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
526	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME)  {  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild	  aughtExceptionHandler.handleMissingName(n.getLastChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
527	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild()  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME)  {  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild()	  aughtExceptionHandler.handleMissingName(n.getLastChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
528	[BUG]  [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild()  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	}  else  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild()	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
529	[BUG]  [BUGGY]  tryMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  tryMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	tryMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
530	[BUG]  [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  calculateMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  calculateMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	}  else  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  calculateMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
531	[BUG]  [BUGGY]  n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.FUNCTION    ||    n.getLastChild()    ==    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
532	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME  &&  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
533	[BUG]  [BUGGY]  Node  rhs  =  n.removeFirstChild();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  rhs  =  n.removeFirstChild();  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  rhs  =  n.removeFirstChild();	  Node    rhs    =    n.getLastChild();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
534	[BUG]  [BUGGY]  Node  rhs  =  output.getLastChild();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  rhs  =  output.getLastChild();  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  rhs  =  output.getLastChild();	  Node    rhs    =    n.getLastChild();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
535	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClass(cfgNode);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMissingClass(cfgNode);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMissingClass(cfgNode);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
536	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeFunction(n,  conditional);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMustBeFunction(n,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMustBeFunction(n,  conditional);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
537	[BUG]  [BUGGY]  aughtExceptionHandler(n.getFirstChild(),  cfgNode);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler(n.getFirstChild(),  cfgNode);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler(n.getFirstChild(),  cfgNode);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
538	[BUG]  [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()	  if(n.getType()    ==    Token.NAME    &&!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  <identifier>  expected	46	None	replace
539	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()	  if(n.getType()    ==    Token.NAME    &&!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  <identifier>  expected	46	None	replace
540	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.VAR)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
541	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.CALL)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.CALL)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.CALL)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(conditional)    {    if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n    	non-compiled	[CE]  <identifier>  expected	70	None	replace
542	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.ASSIGN)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.ASSIGN)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.ASSIGN)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(conditional)    {    if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n    	non-compiled	[CE]  <identifier>  expected	70	None	replace
543	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.CALL)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.CALL)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.CALL)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(conditional)    {    if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n    	non-compiled	[CE]  <identifier>  expected	70	None	replace
544	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.ASSIGN)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.ASSIGN)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.ASSIGN)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n	  if(conditional)    {    if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n    	non-compiled	[CE]  <identifier>  expected	70	None	replace
545	[BUG]  [BUGGY]  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
546	[BUG]  [BUGGY]  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	}  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);	  if(!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	96	None	replace
547	[BUG]  [BUGGY]  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	}  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);	  if(!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	96	None	replace
548	[BUG]  [BUGGY]  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler(n.getFirstChild(),  cfgNode,  output,  true);	  if(!conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	96	None	replace
549	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingDependency(n,  cfgNode);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMissingDependency(n,  cfgNode);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMissingDependency(n,  cfgNode);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
550	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingDependency(n,  cfgNode,  output);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMissingDependency(n,  cfgNode,  output);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMissingDependency(n,  cfgNode,  output);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    addToDefIfLocal(lhs.getString(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
551	[BUG]  [BUGGY]  assembleDef(n.getLastChild(),  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  assembleDef(n.getLastChild(),  cfgNode,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	assembleDef(n.getLastChild(),  cfgNode,  output,  conditional);	  if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
552	[BUG]  [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  calculateMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  }  else  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  calculateMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	}  else  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  calculateMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(conditional)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
553	[BUG]  [BUGGY]  if(n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getLastChild()  ==  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }	  if(n.getLastChild()!=    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
554	[BUG]  [BUGGY]  if(!conditional)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler.handleMissingName(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
555	[BUG]  [BUGGY]  if(!conditional)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  conditional);  }	  aughtExceptionHandler.handleMissingName(n.getFirstChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
556	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeString(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMustBeString(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMustBeString(n.getLastChild(),  cfgNode,  output,  true);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
557	[BUG]  [BUGGY]  aughtExceptionHandler(n.getLastChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler(n.getLastChild(),  cfgNode,  output,  true);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler(n.getLastChild(),  cfgNode,  output,  true);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
558	[BUG]  [BUGGY]  aughtExceptionHandler.handleMustBeString(n.getFirstChild(),  cfgNode,  output,  true);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler.handleMustBeString(n.getFirstChild(),  cfgNode,  output,  true);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler.handleMustBeString(n.getFirstChild(),  cfgNode,  output,  true);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
559	[BUG]  [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()	  if(conditional)    {    if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  <identifier>  expected	74	None	replace
560	[BUG]  [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  if(n.getType()  ==  Token.FUNCTION)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()	  if(conditional)    {    if(n.getType()    ==    Token.FUNCTION)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  <identifier>  expected	74	None	replace
561	[BUG]  [BUGGY]  Node  rhs  =  output.getFirstChild();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  Node  rhs  =  output.getFirstChild();  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	Node  rhs  =  output.getFirstChild();	  Node    rhs    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
562	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.STRING)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.STRING)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.STRING)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild	  if(conditional)    {    if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild    	non-compiled	[CE]  <identifier>  expected	80	None	replace
563	[BUG]  [BUGGY]  if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString()  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  addToDefIfLocal(lhs.getString()	  if(n.getLastChild()!=    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    addToDefIfLocal(lhs.getString()    	non-compiled	[CE]  <identifier>  expected	16	None	replace
564	[BUG]  [BUGGY]  if(n.getType()!=  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()!=  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()!=  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
565	[BUG]  [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler.handleMissingName(n.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
566	[BUG]  [BUGGY]  if(aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  false))  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  false))  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  false))  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  aughtExceptionHandler.handleMissingName(n.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
567	[BUG]  [BUGGY]  if(aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  true))  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  true))  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(aughtExceptionHandler.handleMissingName(n.getFirstChild(),  cfgNode,  output,  true))  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  aughtExceptionHandler.handleMissingName(n.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
568	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.get  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.get  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME  ||  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.get	  if(n.getType()    ==    Token.NAME    &&    cfgNode!=    null)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild    	non-compiled	[CE]  <identifier>  expected	114	None	replace
569	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild()  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME  ||  cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild()	  if(n.getType()    ==    Token.NAME    &&    cfgNode!=    null)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild    	non-compiled	[CE]  <identifier>  expected	114	None	replace
570	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  compiler.reportCodeChange();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  compiler.reportCodeChange();  }	  if(n.getLastChild()!=    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
571	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  compiler.reportCodeChange();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  compiler.reportCodeChange();  }	  if(n.getLastChild()!=    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
572	[BUG]  [BUGGY]  if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  compiler.reportCodeChange();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getFirstChild()!=  cfgNode)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  compiler.reportCodeChange();  }	  if(n.getLastChild()!=    cfgNode)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
573	[BUG]  [BUGGY]  aughtExceptionHandler(n.getLastChild(),  cfgNode,  output,  false);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler(n.getLastChild(),  cfgNode,  output,  false);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler(n.getLastChild(),  cfgNode,  output,  false);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
574	[BUG]  [BUGGY]  AssertionFailedError.make(lhs,  conditional,  cfgNode,  output);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  AssertionFailedError.make(lhs,  conditional,  cfgNode,  output);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	AssertionFailedError.make(lhs,  conditional,  cfgNode,  output);	  AssertionFailedError.make(lhs,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
575	[BUG]  [BUGGY]  AssertionFailedError.make(false,  cfgNode,  output,  conditional);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  AssertionFailedError.make(false,  cfgNode,  output,  conditional);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	AssertionFailedError.make(false,  cfgNode,  output,  conditional);	  AssertionFailedError.make(lhs,    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
576	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME  &&!conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild()	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
577	[BUG]  [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.CALL)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild()  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  if(n.getType()  ==  Token.CALL)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  if(n.getType()  ==  Token.CALL)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getFirstChild()	  if(!conditional)    {    if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild()    	non-compiled	[CE]  <identifier>  expected	110	None	replace
578	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.VAR)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  computeMustDef(n.getFirstChild(),    cfgNode,    output,    false);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
579	[BUG]  [BUGGY]  if(!conditional)  {  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  conditional);  }	  aughtExceptionHandler.handleMissingName(n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
580	[BUG]  [BUGGY]  if(!conditional)  {  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  conditional);  }  else  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }	  aughtExceptionHandler.handleMissingName(n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
581	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  conditional);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  conditional);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME)  {  aughtExceptionHandler.handleMissingName(n.getLastChild(),  cfgNode,  output,  conditional);  }	  aughtExceptionHandler.handleMissingName(n.getLastChild(),    cfgNode,    output,    conditional);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
582	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  cfgNode!=  null)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  cfgNode!=  null)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(n.getType()  ==  Token.NAME  &&  cfgNode!=  null)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
583	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild	  }    else    if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild    	non-compiled	[CE]  <identifier>  expected	108	None	replace
584	[BUG]  [BUGGY]  aughtExceptionHandler(n.getLastChild(),  cfgNode,  output);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  aughtExceptionHandler(n.getLastChild(),  cfgNode,  output);  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	aughtExceptionHandler(n.getLastChild(),  cfgNode,  output);	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    conditional);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    conditional);    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
585	[BUG]  [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cf  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cf  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cf	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
586	[BUG]  [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(conditional)  {  computeMustDef(n.getFirstChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getLastChild()	  if(conditional)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    }    else    {    computeMustDef(n.getLastChild()    	non-compiled	[CE]  <identifier>  expected	68	None	replace
587	[BUG]  [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild()  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild()  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(!conditional)  {  if(n.getType()  ==  Token.NAME)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  else  {  computeMustDef(n.getFirstChild()	  if(n.getType()    ==    Token.NAME)    {    computeMustDef(n.getLastChild(),    cfgNode,    output,    false);    }    else    {    computeMustDef(n.getFirstChild(),    cfgNode,    output,    true);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
588	[BUG]  [BUGGY]  if(cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (lhs.isName())  {  addToDefIfLocal(lhs.getString(),  cfgNode,  rhs,  output);  }  }  return;  case  Token.AND:  case  Token.OR:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);      [BUGGY]  if(cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }  [BUGGY]      return;  case  Token.HOOK:  computeMustDef(n.getFirstChild(),  cfgNode,  output,  conditional);  computeMustDef(n.getFirstChild().getNext(),  cfgNode,  output,  true);  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  return;  case  Token.VAR:  for  (Node  c  =  n.getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  computeMustDef  [RETURN_TYPE]  void  Node  n  Node  cfgNode  MustDef  output  boolean  conditional  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  conditional  Scope  jsScope  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rhs  target  Map  reachingDef  resultMap  MustDef  output  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2886751345948129	259	259	3	replace	if(cfgNode!=  null)  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  true);  }  else  {  computeMustDef(n.getLastChild(),  cfgNode,  output,  false);  }	  computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    computeMustDef(n.getLastChild(),    cfgNode,    output,    true);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
