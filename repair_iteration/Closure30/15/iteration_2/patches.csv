bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  For(Node  p  =  expressionRoot;  p!=  null;  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  For(Node  p  =  expressionRoot;  p!=  null;  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	For(Node  p  =  expressionRoot;  p!=  null;  p  =  p.getNext())  {	  For(Node    p    =    n;    p!=    null;    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
2	[BUG]  [BUGGY]  For(Node  p  =  n.getFirstChild();  p!=  null;  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  For(Node  p  =  n.getFirstChild();  p!=  null;  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	For(Node  p  =  n.getFirstChild();  p!=  null;  p  =  p.getNext())  {	  For(Node    p    =    n;    p!=    null;    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
3	[BUG]  [BUGGY]  For(Node  p  =  predicate;  p!=  null;  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  For(Node  p  =  predicate;  p!=  null;  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	For(Node  p  =  predicate;  p!=  null;  p  =  p.getNext())  {	  For(Node    p    =    n;    p!=    null;    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
4	[BUG]  [BUGGY]  For(Node  p  =  n;  p!=  null;  p  =  p.getParent())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  For(Node  p  =  n;  p!=  null;  p  =  p.getParent())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	For(Node  p  =  n;  p!=  null;  p  =  p.getParent())  {	  For(Node    p    =    n;    p!=    null;    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
5	[BUG]  [BUGGY]  For(Node  p  =  n,  expressionRoot!=  null;  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  For(Node  p  =  n,  expressionRoot!=  null;  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	For(Node  p  =  n,  expressionRoot!=  null;  p  =  p.getNext())  {	  For(Node    p    =    n;    p!=    null;    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
6	[BUG]  [BUGGY]  For(Node  p  =  null;  p!=  null;  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  For(Node  p  =  null;  p!=  null;  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	For(Node  p  =  null;  p!=  null;  p  =  p.getNext())  {	  For(Node    p    =    n;    p!=    null;    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
7	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  def.getNext();  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  def.getNext();  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  def.getNext();  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    def.getParent();    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
8	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  def.getFirstChild();  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  def.getFirstChild();  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  def.getFirstChild();  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    def.getParent();    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
9	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  expressionRoot.getParent();  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  expressionRoot.getParent();  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  expressionRoot.getParent();  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    def.getParent();    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
10	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  def.getLastChild();  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  def.getLastChild();  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  def.getLastChild();  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    def.getParent();    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
11	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  def.getRoot();  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  def.getRoot();  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  def.getRoot();  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    def.getParent();    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
12	[BUG]  [BUGGY]  Node  p  =  expressionRoot.getParent();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  Node  p  =  expressionRoot.getParent();  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	Node  p  =  expressionRoot.getParent();	  Node    p    =    n.getParent();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
13	[BUG]  [BUGGY]  Node  p  =  n.getPrevious();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  Node  p  =  n.getPrevious();  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	Node  p  =  n.getPrevious();	  Node    p    =    n.getParent();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
14	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  null;  p  =  expressionRoot.getNext())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  null;  p  =  expressionRoot.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  null;  p  =  expressionRoot.getNext())  {	  for(Node    p    =    n;    p!=    null;    p    =    predicate.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
15	[BUG]  [BUGGY]  for(Node  p  =  expressionRoot;  p!=  null;  p  =  predicate.getNext())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  expressionRoot;  p!=  null;  p  =  predicate.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  expressionRoot;  p!=  null;  p  =  predicate.getNext())  {	  for(Node    p    =    n;    p!=    null;    p    =    predicate.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
16	[BUG]  [BUGGY]  for(Node  p  =  n.getFirstChild();  p!=  null;  p  =  predicate.getNext())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n.getFirstChild();  p!=  null;  p  =  predicate.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n.getFirstChild();  p!=  null;  p  =  predicate.getNext())  {	  for(Node    p    =    n;    p!=    null;    p    =    predicate.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
17	[BUG]  [BUGGY]  for(Node  p  =  n.getNext();  p!=  null;  p  =  predicate.getNext())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n.getNext();  p!=  null;  p  =  predicate.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n.getNext();  p!=  null;  p  =  predicate.getNext())  {	  for(Node    p    =    n;    p!=    null;    p    =    predicate.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
18	[BUG]  [BUGGY]  for(Node  p  =  n.getParent();  p!=  null;  p  =  predicate.getNext())  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n.getParent();  p!=  null;  p  =  predicate.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n.getParent();  p!=  null;  p  =  predicate.getNext())  {	  for(Node    p    =    n;    p!=    null;    p    =    predicate.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
19	[BUG]  [BUGGY]  Node  p  =  n.getFirstChild();  Predicate  <  Node>  p  =  expressionRoot.getParent();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  Node  p  =  n.getFirstChild();  Predicate  <  Node>  p  =  expressionRoot.getParent();  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	Node  p  =  n.getFirstChild();  Predicate  <  Node>  p  =  expressionRoot.getParent();	  Node    p    =    n.getFirstChild();    Predicate    <    Node>    p    =    predicate.getParent();    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
20	[BUG]  [BUGGY]  Node  p  =  n.getFirstChild();  Predicate  <  Node>  p  =  predicate.getNext();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  Node  p  =  n.getFirstChild();  Predicate  <  Node>  p  =  predicate.getNext();  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	Node  p  =  n.getFirstChild();  Predicate  <  Node>  p  =  predicate.getNext();	  Node    p    =    n.getFirstChild();    Predicate    <    Node>    p    =    predicate.getParent();    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
21	[BUG]  [BUGGY]  Node  p  =  n.getLastChild();  Predicate  <  Node>  p  =  predicate.getParent();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  Node  p  =  n.getLastChild();  Predicate  <  Node>  p  =  predicate.getParent();  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	Node  p  =  n.getLastChild();  Predicate  <  Node>  p  =  predicate.getParent();	  Node    p    =    n.getFirstChild();    Predicate    <    Node>    p    =    predicate.getParent();    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
22	[BUG]  [BUGGY]  Node  p  =  expressionRoot.getFirstChild();  Predicate  <  Node>  p  =  predicate.getParent();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  Node  p  =  expressionRoot.getFirstChild();  Predicate  <  Node>  p  =  predicate.getParent();  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	Node  p  =  expressionRoot.getFirstChild();  Predicate  <  Node>  p  =  predicate.getParent();	  Node    p    =    n.getFirstChild();    Predicate    <    Node>    p    =    predicate.getParent();    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
23	[BUG]  [BUGGY]  Node  p  =  n.getFirstChild();  Predicate  <  Node>  p  =  expressionRoot.getNext();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  Node  p  =  n.getFirstChild();  Predicate  <  Node>  p  =  expressionRoot.getNext();  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	Node  p  =  n.getFirstChild();  Predicate  <  Node>  p  =  expressionRoot.getNext();	  Node    p    =    n.getFirstChild();    Predicate    <    Node>    p    =    predicate.getParent();    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
24	[BUG]  [BUGGY]  for(Node  p  =  predicate;  p!=  null;  p  =  p.getPrevious())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  predicate;  p!=  null;  p  =  p.getPrevious())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  predicate;  p!=  null;  p  =  p.getPrevious())  {	  for(Node    p    =    n;    p!=    null;    p    =    p.getPrevious())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
25	[BUG]  [BUGGY]  for(Node  p  =  n.getFirstChild();  p!=  null;  p  =  p.getPrevious())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n.getFirstChild();  p!=  null;  p  =  p.getPrevious())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n.getFirstChild();  p!=  null;  p  =  p.getPrevious())  {	  for(Node    p    =    n;    p!=    null;    p    =    p.getPrevious())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
26	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  null;  p  =  predicate.getPrevious())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  null;  p  =  predicate.getPrevious())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  null;  p  =  predicate.getPrevious())  {	  for(Node    p    =    n;    p!=    null;    p    =    p.getPrevious())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
27	[BUG]  [BUGGY]  for(Node  p  =  expressionRoot;  p!=  null;  p  =  p.getPrevious())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  expressionRoot;  p!=  null;  p  =  p.getPrevious())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  expressionRoot;  p!=  null;  p  =  p.getPrevious())  {	  for(Node    p    =    n;    p!=    null;    p    =    p.getPrevious())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
28	[BUG]  [BUGGY]  for(Node  p  =  node;  p!=  null;  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  node;  p!=  null;  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  node;  p!=  null;  p  =  p.getNext())  {	  for(Node    p    =    null;    p!=    null;    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
29	[BUG]  [BUGGY]  for(Node  p  =  null;  p!=  null;  p  =  p.getParent())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  null;  p!=  null;  p  =  p.getParent())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  null;  p!=  null;  p  =  p.getParent())  {	  for(Node    p    =    null;    p!=    null;    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
30	[BUG]  [BUGGY]  for(Node  p  =  def;  p!=  null;  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  def;  p!=  null;  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  def;  p!=  null;  p  =  p.getNext())  {	  for(Node    p    =    null;    p!=    null;    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
31	[BUG]  [BUGGY]  for(Node  p  =  n;  p  >=  defRoot;  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p  >=  defRoot;  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p  >=  defRoot;  p  =  p.getNext())  {	  for(Node    p    =    expressionRoot;    p!=    defRoot;    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
32	[BUG]  [BUGGY]  For(Node  p  =  n;  p!=  defRoot;  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  For(Node  p  =  n;  p!=  defRoot;  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	For(Node  p  =  n;  p!=  defRoot;  p  =  p.getNext())  {	  for(Node    p    =    expressionRoot;    p!=    defRoot;    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
33	[BUG]  [BUGGY]  for(Node  p  =  predicate;  p!=  defRoot;  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  predicate;  p!=  defRoot;  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  predicate;  p!=  defRoot;  p  =  p.getNext())  {	  for(Node    p    =    expressionRoot;    p!=    defRoot;    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
34	[BUG]  [BUGGY]  for(Node  p  =  n;  p  ==  defRoot;  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p  ==  defRoot;  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p  ==  defRoot;  p  =  p.getNext())  {	  for(Node    p    =    expressionRoot;    p!=    defRoot;    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
35	[BUG]  [BUGGY]  for(Node  p  =  null;  p!=  defRoot;  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  null;  p!=  defRoot;  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  null;  p!=  defRoot;  p  =  p.getNext())  {	  for(Node    p    =    expressionRoot;    p!=    defRoot;    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
36	[BUG]  [BUGGY]  Node  p  =  expressionRoot.getNext();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  Node  p  =  expressionRoot.getNext();  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	Node  p  =  expressionRoot.getNext();	  Node    p    =    predicate.getNext();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
37	[BUG]  [BUGGY]  Node  p  =  node.getNext();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  Node  p  =  node.getNext();  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	Node  p  =  node.getNext();	  Node    p    =    predicate.getNext();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
38	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  defCfgNode.getNext();  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  defCfgNode.getNext();  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  defCfgNode.getNext();  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    defCfgNode.getParent();    p    =    p.getParent())    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
39	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  defCfgNode.getFirstChild();  p  =  p.getParent())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  defCfgNode.getFirstChild();  p  =  p.getParent())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  defCfgNode.getFirstChild();  p  =  p.getParent())  {	  for(Node    p    =    n;    p!=    defCfgNode.getParent();    p    =    p.getParent())    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
40	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  defCfgNode.getLastChild();  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  defCfgNode.getLastChild();  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  defCfgNode.getLastChild();  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    defCfgNode.getParent();    p    =    p.getParent())    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
41	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  expressionRoot.getParent();  p  =  p.getParent())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  expressionRoot.getParent();  p  =  p.getParent())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  expressionRoot.getParent();  p  =  p.getParent())  {	  for(Node    p    =    n;    p!=    defCfgNode.getParent();    p    =    p.getParent())    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
42	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  defCfgNode.getType();  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  defCfgNode.getType();  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  defCfgNode.getType();  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    defCfgNode.getParent();    p    =    p.getParent())    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
43	[BUG]  [BUGGY]  Node  p  =  n.getFirstChild();  Predicate  <  SIDE_EFFECT_PREDICATE  =  expressionRoot.getNext();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  Node  p  =  n.getFirstChild();  Predicate  <  SIDE_EFFECT_PREDICATE  =  expressionRoot.getNext();  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	Node  p  =  n.getFirstChild();  Predicate  <  SIDE_EFFECT_PREDICATE  =  expressionRoot.getNext();	  Node    p    =    n.getFirstChild();    Predicate    <    SIDE_EFFECT_PREDICATE    =    predicate.getNext();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
44	[BUG]  [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  =  predicate.getNext();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  =  predicate.getNext();  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	Predicate  <  SIDE_EFFECT_PREDICATE  =  predicate.getNext();	  Node    p    =    n.getFirstChild();    Predicate    <    SIDE_EFFECT_PREDICATE    =    predicate.getNext();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
45	[BUG]  [BUGGY]  Node  p  =  predicate.getFirstChild();  Predicate  <  SIDE_EFFECT_PREDICATE  =  n.getNext();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  Node  p  =  predicate.getFirstChild();  Predicate  <  SIDE_EFFECT_PREDICATE  =  n.getNext();  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	Node  p  =  predicate.getFirstChild();  Predicate  <  SIDE_EFFECT_PREDICATE  =  n.getNext();	  Node    p    =    n.getFirstChild();    Predicate    <    SIDE_EFFECT_PREDICATE    =    predicate.getNext();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
46	[BUG]  [BUGGY]  Node  p  =  n.getLastChild();  Predicate  <  SIDE_EFFECT_PREDICATE  =  predicate.getNext();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  Node  p  =  n.getLastChild();  Predicate  <  SIDE_EFFECT_PREDICATE  =  predicate.getNext();  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	Node  p  =  n.getLastChild();  Predicate  <  SIDE_EFFECT_PREDICATE  =  predicate.getNext();	  Node    p    =    n.getFirstChild();    Predicate    <    SIDE_EFFECT_PREDICATE    =    predicate.getNext();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
47	[BUG]  [BUGGY]  Node  p  =  expressionRoot.getFirstChild();  Predicate  <  SIDE_EFFECT_PREDICATE  =  predicate.getNext();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  Node  p  =  expressionRoot.getFirstChild();  Predicate  <  SIDE_EFFECT_PREDICATE  =  predicate.getNext();  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	Node  p  =  expressionRoot.getFirstChild();  Predicate  <  SIDE_EFFECT_PREDICATE  =  predicate.getNext();	  Node    p    =    n.getFirstChild();    Predicate    <    SIDE_EFFECT_PREDICATE    =    predicate.getNext();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
48	[BUG]  [BUGGY]  Node  p  =  predicate.getFirstChild();  Predicate  <  SIDE_EFFECT_PREDICATE  =  predicate.getNext();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  Node  p  =  predicate.getFirstChild();  Predicate  <  SIDE_EFFECT_PREDICATE  =  predicate.getNext();  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	Node  p  =  predicate.getFirstChild();  Predicate  <  SIDE_EFFECT_PREDICATE  =  predicate.getNext();	  Node    p    =    n.getFirstChild();    Predicate    <    SIDE_EFFECT_PREDICATE    =    predicate.getNext();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
49	[BUG]  [BUGGY]  Predicate  <  Node>  p  =  n.getParent();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  Predicate  <  Node>  p  =  n.getParent();  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	Predicate  <  Node>  p  =  n.getParent();	  Predicate    <    Node>    p    =    predicate.getParent();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
50	[BUG]  [BUGGY]  Predicate  <  Node>  p  =  n.getNext();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  Predicate  <  Node>  p  =  n.getNext();  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	Predicate  <  Node>  p  =  n.getNext();	  Predicate    <    Node>    p    =    predicate.getParent();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
51	[BUG]  [BUGGY]  Predicate  <  Node>  p  =  expressionRoot.getParent();  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  Predicate  <  Node>  p  =  expressionRoot.getParent();  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	Predicate  <  Node>  p  =  expressionRoot.getParent();	  Predicate    <    Node>    p    =    predicate.getParent();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
52	[BUG]  [BUGGY]  Predicate  <  Node>  p  =  predicate.getNext();  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  Predicate  <  Node>  p  =  predicate.getNext();  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	Predicate  <  Node>  p  =  predicate.getNext();	  Predicate    <    Node>    p    =    predicate.getParent();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
53	[BUG]  [BUGGY]  Predicate  <  Node>  p  =  expressionRoot.getNext();  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  Predicate  <  Node>  p  =  expressionRoot.getNext();  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	Predicate  <  Node>  p  =  expressionRoot.getNext();	  Predicate    <    Node>    p    =    predicate.getParent();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
54	[BUG]  [BUGGY]  Predicate  <  Node>  p  =  node.getParent();  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  Predicate  <  Node>  p  =  node.getParent();  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	Predicate  <  Node>  p  =  node.getParent();	  Predicate    <    Node>    p    =    predicate.getParent();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
55	[BUG]  [BUGGY]  for(Node  p  =  n.getLastChild();  p!=  null;  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n.getLastChild();  p!=  null;  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n.getLastChild();  p!=  null;  p  =  p.getNext())  {	  for(Node    p    =    n.getFirstChild();    p!=    null;    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
56	[BUG]  [BUGGY]  for(Node  p  =  predicate.getFirstChild();  p!=  null;  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  predicate.getFirstChild();  p!=  null;  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  predicate.getFirstChild();  p!=  null;  p  =  p.getNext())  {	  for(Node    p    =    n.getFirstChild();    p!=    null;    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
57	[BUG]  [BUGGY]  for(Node  cur  =  n.getFirstChild();  p!=  null;  p  =  cur.getNext())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  cur  =  n.getFirstChild();  p!=  null;  p  =  cur.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  cur  =  n.getFirstChild();  p!=  null;  p  =  cur.getNext())  {	  for(Node    p    =    n.getFirstChild();    p!=    null;    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
58	[BUG]  [BUGGY]  for(Node  p  =  expressionRoot.getFirstChild();  p!=  null;  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  expressionRoot.getFirstChild();  p!=  null;  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  expressionRoot.getFirstChild();  p!=  null;  p  =  p.getNext())  {	  for(Node    p    =    n.getFirstChild();    p!=    null;    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
59	[BUG]  [BUGGY]  for(Node  p  =  predicate;  p!=  SIDE_EFFECT_PREDICATE;  p  =  p.getParent())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  predicate;  p!=  SIDE_EFFECT_PREDICATE;  p  =  p.getParent())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  predicate;  p!=  SIDE_EFFECT_PREDICATE;  p  =  p.getParent())  {	  for(Node    p    =    n;    p!=    SIDE_EFFECT_PREDICATE;    p    =    p.getParent())    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
60	[BUG]  [BUGGY]  for(Node  p  =  predicate;  p!=  SIDE_EFFECT_PREDICATE;  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  predicate;  p!=  SIDE_EFFECT_PREDICATE;  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  predicate;  p!=  SIDE_EFFECT_PREDICATE;  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    SIDE_EFFECT_PREDICATE;    p    =    p.getParent())    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
61	[BUG]  [BUGGY]  Node  p  =  node.getParent();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  Node  p  =  node.getParent();  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	Node  p  =  node.getParent();	  Node    p    =    predicate.getParent();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
62	[BUG]  [BUGGY]  Node  p  =  predicate.getLastChild();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  Node  p  =  predicate.getLastChild();  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	Node  p  =  predicate.getLastChild();	  Node    p    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
63	[BUG]  [BUGGY]  Node  p  =  expressionRoot.getLastChild();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  Node  p  =  expressionRoot.getLastChild();  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	Node  p  =  expressionRoot.getLastChild();	  Node    p    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
64	[BUG]  [BUGGY]  Node  p  =  node.getLastChild();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  Node  p  =  node.getLastChild();  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	Node  p  =  node.getLastChild();	  Node    p    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
65	[BUG]  [BUGGY]  Node  p  =  predicate.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  Node  p  =  predicate.getFirstChild();  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	Node  p  =  predicate.getFirstChild();	  Node    p    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
66	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  defParent;  p  =  p.getPrevious())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  defParent;  p  =  p.getPrevious())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  defParent;  p  =  p.getPrevious())  {	  for(Node    p    =    n;    p!=    defCfgNode;    p    =    p.getPrevious())    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
67	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  expressionRoot;  p  =  p.getPrevious())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  expressionRoot;  p  =  p.getPrevious())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  expressionRoot;  p  =  p.getPrevious())  {	  for(Node    p    =    n;    p!=    defCfgNode;    p    =    p.getPrevious())    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
68	[BUG]  [BUGGY]  for(Node  p  =  defParent;  p!=  defCfgNode;  p  =  p.getPrevious())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  defParent;  p!=  defCfgNode;  p  =  p.getPrevious())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  defParent;  p!=  defCfgNode;  p  =  p.getPrevious())  {	  for(Node    p    =    n;    p!=    defCfgNode;    p    =    p.getPrevious())    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
69	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  defCfgNode.getPrevious();  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  defCfgNode.getPrevious();  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  defCfgNode.getPrevious();  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    defCfgNode.getParent();    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
70	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  expressionRoot.getNext())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  expressionRoot.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  expressionRoot.getNext())  {	  for(Node    p    =    n;    p!=    defCfgNode.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
71	[BUG]  [BUGGY]  for(Node  p  =  n.getFirstChild();  p!=  defCfgNode.getNext())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n.getFirstChild();  p!=  defCfgNode.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n.getFirstChild();  p!=  defCfgNode.getNext())  {	  for(Node    p    =    n;    p!=    defCfgNode.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
72	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  defParent.getNext())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  defParent.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  defParent.getNext())  {	  for(Node    p    =    n;    p!=    defCfgNode.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
73	[BUG]  [BUGGY]  for(Node  p  =  n.getParent();  p!=  defCfgNode.getNext())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n.getParent();  p!=  defCfgNode.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n.getParent();  p!=  defCfgNode.getNext())  {	  for(Node    p    =    n;    p!=    defCfgNode.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
74	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  predicate.getNext())  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  predicate.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  predicate.getNext())  {	  for(Node    p    =    n;    p!=    defCfgNode.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
75	[BUG]  [BUGGY]  for(Node  p  =  parent;  p!=  null;  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  parent;  p!=  null;  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  parent;  p!=  null;  p  =  p.getNext())  {	  for(Node    p    =    parent;    p!=    null;    p    =    p.getParent())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
76	[BUG]  [BUGGY]  for(Node  p  =  def;  p!=  null;  p  =  p.getParent())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  def;  p!=  null;  p  =  p.getParent())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  def;  p!=  null;  p  =  p.getParent())  {	  for(Node    p    =    parent;    p!=    null;    p    =    p.getParent())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
77	[BUG]  [BUGGY]  Predicate  <  Node>  p  =  predicate.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  Predicate  <  Node>  p  =  predicate.getFirstChild();  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	Predicate  <  Node>  p  =  predicate.getFirstChild();	  Predicate    <    Node>    p    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
78	[BUG]  [BUGGY]  Predicate  <  Node>  p  =  expressionRoot.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  Predicate  <  Node>  p  =  expressionRoot.getFirstChild();  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	Predicate  <  Node>  p  =  expressionRoot.getFirstChild();	  Predicate    <    Node>    p    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
79	[BUG]  [BUGGY]  Predicate  <  Node>  p  =  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  Predicate  <  Node>  p  =  n.getLastChild();  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	Predicate  <  Node>  p  =  n.getLastChild();	  Predicate    <    Node>    p    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
80	[BUG]  [BUGGY]  Predicate  <  Node>  p  =  node.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  Predicate  <  Node>  p  =  node.getFirstChild();  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	Predicate  <  Node>  p  =  node.getFirstChild();	  Predicate    <    Node>    p    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
81	[BUG]  [BUGGY]  Predicate  <  Node>  p  =  parent.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  Predicate  <  Node>  p  =  parent.getFirstChild();  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	Predicate  <  Node>  p  =  parent.getFirstChild();	  Predicate    <    Node>    p    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
82	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  null;  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  null;  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  null;  p.getNext())  {	  for(Node    p    =    n;    p!=    expressionRoot;    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
83	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  predicate;  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  predicate;  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  predicate;  p.getNext())  {	  for(Node    p    =    n;    p!=    expressionRoot;    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
84	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  defParent;  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  defParent;  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  defParent;  p.getNext())  {	  for(Node    p    =    n;    p!=    expressionRoot;    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
85	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  predicate.getNext();  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  predicate.getNext();  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  predicate.getNext();  p.getNext())  {	  for(Node    p    =    n;    p!=    expressionRoot;    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
86	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  expressionRoot;  p.getParent())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  expressionRoot;  p.getParent())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  expressionRoot;  p.getParent())  {	  for(Node    p    =    n;    p!=    expressionRoot;    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
87	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  defCfgNode;  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  defCfgNode;  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  defCfgNode;  p.getNext())  {	  for(Node    p    =    n;    p!=    expressionRoot;    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
88	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  expressionRoot.cloneTree())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  expressionRoot.cloneTree())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  expressionRoot.cloneTree())  {	  for(Node    p    =    n;    p!=    defCfgNode.cloneTree())    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
89	[BUG]  [BUGGY]  for(Node  p  =  n.getFirstChild();  p!=  defCfgNode.cloneTree())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n.getFirstChild();  p!=  defCfgNode.cloneTree())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n.getFirstChild();  p!=  defCfgNode.cloneTree())  {	  for(Node    p    =    n;    p!=    defCfgNode.cloneTree())    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
90	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  defParent.cloneTree())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  defParent.cloneTree())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  defParent.cloneTree())  {	  for(Node    p    =    n;    p!=    defCfgNode.cloneTree())    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
91	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  defCfgNode.clone())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  defCfgNode.clone())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  defCfgNode.clone())  {	  for(Node    p    =    n;    p!=    defCfgNode.cloneTree())    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
92	[BUG]  [BUGGY]  for(Node  p  =  defParent;  p!=  null;  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  defParent;  p!=  null;  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  defParent;  p!=  null;  p  =  p.getNext())  {	  for(Node    p    =    expressionRoot;    p!=    null;    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
93	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  STRING_EFFECT_PREDICATE;  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  STRING_EFFECT_PREDICATE;  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  STRING_EFFECT_PREDICATE;  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    SIDE_EFFECT_PREDICATE;    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
94	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  SIDE_EFFECT_PREDICATE;  p  =  predicate.getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  SIDE_EFFECT_PREDICATE;  p  =  predicate.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  SIDE_EFFECT_PREDICATE;  p  =  predicate.getNext())  {	  for(Node    p    =    n;    p!=    SIDE_EFFECT_PREDICATE;    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
95	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  expressionRoot.getNext();  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  expressionRoot.getNext();  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  expressionRoot.getNext();  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    predicate.getParent();    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
96	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  parent.getParent();  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  parent.getParent();  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  parent.getParent();  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    predicate.getParent();    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
97	[BUG]  [BUGGY]  for(Node  p  =  expressionRoot;  p!=  predicate.getParent();  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  expressionRoot;  p!=  predicate.getParent();  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  expressionRoot;  p!=  predicate.getParent();  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    predicate.getParent();    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
98	[BUG]  [BUGGY]  Node  p  =  expressionRoot.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  Node  p  =  expressionRoot.getFirstChild();  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	Node  p  =  expressionRoot.getFirstChild();	  Node    p    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
99	[BUG]  [BUGGY]  Node  p  =  node.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  Node  p  =  node.getFirstChild();  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	Node  p  =  node.getFirstChild();	  Node    p    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
100	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  expressionRoot.getFirstChild();  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  expressionRoot.getFirstChild();  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  expressionRoot.getFirstChild();  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    defCfgNode.getFirstChild();    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
101	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  defParent.getFirstChild();  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  defParent.getFirstChild();  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  defParent.getFirstChild();  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    defCfgNode.getFirstChild();    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
102	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  predicate.getFirstChild();  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  predicate.getFirstChild();  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  predicate.getFirstChild();  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    defCfgNode.getFirstChild();    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
103	[BUG]  [BUGGY]  for(Node  p  =  n.getFirstChild();  p!=  defCfgNode.getFirstChild();  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n.getFirstChild();  p!=  defCfgNode.getFirstChild();  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n.getFirstChild();  p!=  defCfgNode.getFirstChild();  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    defCfgNode.getFirstChild();    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
104	[BUG]  [BUGGY]  for(Node  p  =  node;  p!=  null;  p  =  p.getParent())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  node;  p!=  null;  p  =  p.getParent())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  node;  p!=  null;  p  =  p.getParent())  {	  for(Node    p    =    predicate;    p!=    null;    p    =    p.getParent())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
105	[BUG]  [BUGGY]  for(Node  p  =  n;  p  ==  defParent;  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p  ==  defParent;  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p  ==  defParent;  p  =  p.getNext())  {	  for(Node    p    =    n;    p    ==    defCfgNode;    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
106	[BUG]  [BUGGY]  for(Node  p  =  n;  p  ==  expressionRoot;  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p  ==  expressionRoot;  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p  ==  expressionRoot;  p  =  p.getNext())  {	  for(Node    p    =    n;    p    ==    defCfgNode;    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
107	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  expressionRoot.getParent())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  expressionRoot.getParent())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  expressionRoot.getParent())  {	  for(Node    p    =    n;    p!=    defCfgNode.getParent())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
108	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  defCfgNode.getFirstChild())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  defCfgNode.getFirstChild())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  defCfgNode.getFirstChild())  {	  for(Node    p    =    n;    p!=    defCfgNode.getParent())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
109	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  defCfgNode.getLastChild())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  defCfgNode.getLastChild())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  defCfgNode.getLastChild())  {	  for(Node    p    =    n;    p!=    defCfgNode.getParent())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
110	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  predicate.getParent())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  predicate.getParent())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  predicate.getParent())  {	  for(Node    p    =    n;    p!=    defCfgNode.getParent())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
111	[BUG]  [BUGGY]  for(Node  p  =  expressionRoot;  p!=  predicate.getNext();  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  expressionRoot;  p!=  predicate.getNext();  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  expressionRoot;  p!=  predicate.getNext();  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    predicate.getNext();    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
112	[BUG]  [BUGGY]  for(Node  p  =  n;  p  ==  expressionRoot.getNext();  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p  ==  expressionRoot.getNext();  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p  ==  expressionRoot.getNext();  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    predicate.getNext();    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
113	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  node.getNext();  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  node.getNext();  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  node.getNext();  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    predicate.getNext();    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
114	[BUG]  [BUGGY]  for(Node  p  =  expressionRoot;  p!=  predicate;  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  expressionRoot;  p!=  predicate;  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  expressionRoot;  p!=  predicate;  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    predicate;    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
115	[BUG]  [BUGGY]  for(Node  p  =  n;  p  >=  expressionRoot;  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p  >=  expressionRoot;  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p  >=  expressionRoot;  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    predicate;    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
116	[BUG]  [BUGGY]  Node  p  =  n.getPreviousChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  Node  p  =  n.getPreviousChild();  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	Node  p  =  n.getPreviousChild();	  Node    p    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
117	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  null.getNext())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  null.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  null.getNext())  {	  for(Node    p    =    n;    p!=    defCfgNode.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
118	[BUG]  [BUGGY]  for(Node  p  =  defCfgNode;  p!=  n.getNext())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  defCfgNode;  p!=  n.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  defCfgNode;  p!=  n.getNext())  {	  for(Node    p    =    n;    p!=    defCfgNode.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
119	[BUG]  [BUGGY]  Node  p  =  n.getNext();  Predicate  <  Node>  p  =  predicate.getParent();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  Node  p  =  n.getNext();  Predicate  <  Node>  p  =  predicate.getParent();  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	Node  p  =  n.getNext();  Predicate  <  Node>  p  =  predicate.getParent();	  Node    p    =    n.getFirstChild();    Predicate    <    Node>    p    =    predicate.getParent();    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
120	[BUG]  [BUGGY]  For(Node  p  =  n;  p!=  null;  p  =  predicate.getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  For(Node  p  =  n;  p!=  null;  p  =  predicate.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	For(Node  p  =  n;  p!=  null;  p  =  predicate.getNext())  {	  For(Node    p    =    n;    p!=    null;    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
121	[BUG]  [BUGGY]  For(Node  p  =  n;  p!=  null;  p  =  p.getPrevious())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  For(Node  p  =  n;  p!=  null;  p  =  p.getPrevious())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	For(Node  p  =  n;  p!=  null;  p  =  p.getPrevious())  {	  For(Node    p    =    n;    p!=    null;    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
122	[BUG]  [BUGGY]  For(Node  p  =  node;  p!=  null;  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  For(Node  p  =  node;  p!=  null;  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	For(Node  p  =  node;  p!=  null;  p  =  p.getNext())  {	  For(Node    p    =    n;    p!=    null;    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
123	[BUG]  [BUGGY]  for(Node  p  =  n;  p  ==  defCfgNode.getFirstChild();  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p  ==  defCfgNode.getFirstChild();  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p  ==  defCfgNode.getFirstChild();  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    defCfgNode.getFirstChild();    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
124	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  defRoot.getParent();  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  defRoot.getParent();  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  defRoot.getParent();  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    predicate.getParent();    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
125	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  defRoot;  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  defRoot;  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  defRoot;  p.getNext())  {	  for(Node    p    =    n;    p!=    expressionRoot;    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
126	[BUG]  [BUGGY]  Node  p  =  n.getPredicate();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  Node  p  =  n.getPredicate();  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	Node  p  =  n.getPredicate();	  Node    p    =    n.getParent();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
127	[BUG]  [BUGGY]  for(Node  p  =  node;  p!=  null;  p  =  predicate.getNext())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  node;  p!=  null;  p  =  predicate.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  node;  p!=  null;  p  =  predicate.getNext())  {	  for(Node    p    =    n;    p!=    null;    p    =    predicate.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
128	[BUG]  [BUGGY]  for(Node  p  =  node;  p!=  defRoot;  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  node;  p!=  defRoot;  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  node;  p!=  defRoot;  p  =  p.getNext())  {	  for(Node    p    =    expressionRoot;    p!=    defRoot;    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
129	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  predicate.cloneTree())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  predicate.cloneTree())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  predicate.cloneTree())  {	  for(Node    p    =    n;    p!=    defCfgNode.cloneTree())    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
130	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  null.cloneTree())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  null.cloneTree())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  null.cloneTree())  {	  for(Node    p    =    n;    p!=    defCfgNode.cloneTree())    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
131	[BUG]  [BUGGY]  for(Node  p  =  n.getFirstChild();  p!=  null;  p  =  p.getParent())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n.getFirstChild();  p!=  null;  p  =  p.getParent())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n.getFirstChild();  p!=  null;  p  =  p.getParent())  {	  for(Node    p    =    n.getFirstChild();    p!=    null;    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
132	[BUG]  [BUGGY]  Predicate  <  Node>  p  =  n.getPredicate();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  Predicate  <  Node>  p  =  n.getPredicate();  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	Predicate  <  Node>  p  =  n.getPredicate();	  Predicate    <    Node>    p    =    predicate.getParent();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
133	[BUG]  [BUGGY]  Predicate  <  Node>  p  =  n.getPreviousChild();  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  Predicate  <  Node>  p  =  n.getPreviousChild();  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	Predicate  <  Node>  p  =  n.getPreviousChild();	  Predicate    <    Node>    p    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
134	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  defCfgNode.getNext();  p  =  p.getParent())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  defCfgNode.getNext();  p  =  p.getParent())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  defCfgNode.getNext();  p  =  p.getParent())  {	  for(Node    p    =    n;    p!=    defCfgNode.getParent();    p    =    p.getParent())    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
135	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  defCfgNode.getLastChild();  p  =  p.getParent())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  defCfgNode.getLastChild();  p  =  p.getParent())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  defCfgNode.getLastChild();  p  =  p.getParent())  {	  for(Node    p    =    n;    p!=    defCfgNode.getParent();    p    =    p.getParent())    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
136	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  SIDE_EFFECT_PREDICATE;  p  =  p.getPrevious())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  SIDE_EFFECT_PREDICATE;  p  =  p.getPrevious())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  SIDE_EFFECT_PREDICATE;  p  =  p.getPrevious())  {	  for(Node    p    =    n;    p!=    defCfgNode;    p    =    p.getPrevious())    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
137	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  defCfgNode.getParent());  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  defCfgNode.getParent());  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  defCfgNode.getParent());  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    defParent;    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
138	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  SIDE_EFFECT_PREDICATE.getNext();  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  SIDE_EFFECT_PREDICATE.getNext();  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  SIDE_EFFECT_PREDICATE.getNext();  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    predicate.getNext();    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
139	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  defRoot.getNext();  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  defRoot.getNext();  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  defRoot.getNext();  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    predicate.getNext();    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
140	[BUG]  [BUGGY]  Node  p  =  predicate.getFirstChild();  Predicate  <  SIDE_EFFECT_PREDICATE  =  p.getNext();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  Node  p  =  predicate.getFirstChild();  Predicate  <  SIDE_EFFECT_PREDICATE  =  p.getNext();  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	Node  p  =  predicate.getFirstChild();  Predicate  <  SIDE_EFFECT_PREDICATE  =  p.getNext();	  Node    p    =    n.getFirstChild();    Predicate    <    SIDE_EFFECT_PREDICATE    =    predicate.getNext();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
141	[BUG]  [BUGGY]  Node  p  =  n.getFirstChild();  Predicate  <  SIDE_EFFECT_PREDICATE  =  predicate.getParent();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  Node  p  =  n.getFirstChild();  Predicate  <  SIDE_EFFECT_PREDICATE  =  predicate.getParent();  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	Node  p  =  n.getFirstChild();  Predicate  <  SIDE_EFFECT_PREDICATE  =  predicate.getParent();	  Node    p    =    n.getFirstChild();    Predicate    <    SIDE_EFFECT_PREDICATE    =    predicate.getNext();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
142	[BUG]  [BUGGY]  for(Node  p  =  no;  p!=  null;  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  no;  p!=  null;  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  no;  p!=  null;  p  =  p.getNext())  {	  for(Node    p    =    expressionRoot;    p!=    null;    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
143	[BUG]  [BUGGY]  for(Node  p  =  n;  p  <  defCfgNode;  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p  <  defCfgNode;  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p  <  defCfgNode;  p  =  p.getNext())  {	  for(Node    p    =    n;    p    >=    defCfgNode;    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
144	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  defRoot.getFirstChild();  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  defRoot.getFirstChild();  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  defRoot.getFirstChild();  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    defCfgNode.getFirstChild();    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
145	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  defCfgNode.getPrevious())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  defCfgNode.getPrevious())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  defCfgNode.getPrevious())  {	  for(Node    p    =    n;    p!=    defCfgNode.getParent())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
146	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  defCfgNode.getType())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  defCfgNode.getType())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  defCfgNode.getType())  {	  for(Node    p    =    n;    p!=    defCfgNode.getParent())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
147	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  defCfgNode.clonePrettyPrinter())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  defCfgNode.clonePrettyPrinter())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  defCfgNode.clonePrettyPrinter())  {	  for(Node    p    =    n;    p!=    defCfgNode.cloneTree())    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
148	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  null;  p  =  p.getName())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  null;  p  =  p.getName())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  null;  p  =  p.getName())  {	  for(Node    p    =    n;    p!=    null;    p    =    p.getPrevious())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
149	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  defCfgNode.getName();  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  defCfgNode.getName();  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  defCfgNode.getName();  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    defCfgNode.getParent();    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
150	[BUG]  [BUGGY]  for(Node  p  =  no;  p!=  defRoot;  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  no;  p!=  defRoot;  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  no;  p!=  defRoot;  p  =  p.getNext())  {	  for(Node    p    =    expressionRoot;    p!=    defRoot;    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
151	[BUG]  [BUGGY]  for(Node  p  =  defCfgNode;  p!=  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  defCfgNode;  p!=  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  defCfgNode;  p!=  p.getNext())  {	  for(Node    p    =    n;    p    ==    defCfgNode;    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
152	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  defPrettyPrinter;  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  defPrettyPrinter;  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  defPrettyPrinter;  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    defParent;    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
153	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  defFactory;  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  defFactory;  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  defFactory;  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    defParent;    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
154	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  defCfgNode.get())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  defCfgNode.get())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  defCfgNode.get())  {	  for(Node    p    =    n;    p!=    defCfgNode.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
155	[BUG]  [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  =  n.getNext();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  =  n.getNext();  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	Predicate  <  SIDE_EFFECT_PREDICATE  =  n.getNext();	  Node    p    =    n.getFirstChild();    Predicate    <    SIDE_EFFECT_PREDICATE    =    predicate.getNext();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
156	[BUG]  [BUGGY]  for(Node  p  =  n;  p  ==  defCfgNode;  p  =  p.getPrevious())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p  ==  defCfgNode;  p  =  p.getPrevious())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p  ==  defCfgNode;  p  =  p.getPrevious())  {	  for(Node    p    =    n;    p!=    defCfgNode;    p    =    p.getPrevious())    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
157	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  def.getPrevious();  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  def.getPrevious();  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  def.getPrevious();  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    def.getParent();    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
158	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  def.getCfgNode();  p  =  p.getNext())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {      [BUGGY]  for(Node  p  =  n;  p!=  def.getCfgNode();  p  =  p.getNext())  {  [BUGGY]      for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.26413527189768715	462	462	3	replace	for(Node  p  =  n;  p!=  def.getCfgNode();  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    def.getParent();    p    =    p.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
