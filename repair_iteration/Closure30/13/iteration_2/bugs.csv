bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  else  if(cur.getType()  ==  Token.FUNCTION)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(cur.getType()  ==  Token.FUNCTION)  {  return  true;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(cur.getType()  ==  Token.FUNCTION)  {  return  true;  }	  else    if(predicate.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
2	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }	  else    if(predicate.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
3	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.GETPROP)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.GETPROP)  {  return  true;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.GETPROP)  {  return  true;  }	  else    if(predicate.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
4	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  true;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  true;  }	  else    if(predicate.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
5	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.VAR)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.VAR)  {  return  true;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.VAR)  {  return  true;  }	  else    if(predicate.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
6	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.GETPROP)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.GETPROP)  {  return  true;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.GETPROP)  {  return  true;  }	  else    if(predicate.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
7	[BUG]  [BUGGY]  return(p.getType()  ==  Token.FUNCTION  &&  p.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  return(p.getType()  ==  Token.FUNCTION  &&  p.getType()  ==  Token.NAME);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	return(p.getType()  ==  Token.FUNCTION  &&  p.getType()  ==  Token.NAME);	  return(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
8	[BUG]  [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.NAME);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	return(p.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.NAME);	  return(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
9	[BUG]  [BUGGY]  return(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  return(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.NAME);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	return(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.NAME);	  return(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
10	[BUG]  [BUGGY]  return(p.getType()!=  Token.FUNCTION  &&  p.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  return(p.getType()!=  Token.FUNCTION  &&  p.getType()  ==  Token.NAME);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	return(p.getType()!=  Token.FUNCTION  &&  p.getType()  ==  Token.NAME);	  return(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
11	[BUG]  [BUGGY]  return(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  return(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.FUNCTION);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	return(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.FUNCTION);	  return(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
12	[BUG]  [BUGGY]  if(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(p.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
13	[BUG]  [BUGGY]  if(p.getType()  ==  Token.NAME  ||  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(p.getType()  ==  Token.NAME  ||  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(p.getType()  ==  Token.NAME  ||  p.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(p.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
14	[BUG]  [BUGGY]  if(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }	  if(p.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
15	[BUG]  [BUGGY]  if(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.VAR)  {  return  false;  }	  if(p.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
16	[BUG]  [BUGGY]  if(p.getType()  ==  Token.NAME  ||  p.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(p.getType()  ==  Token.NAME  ||  p.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(p.getType()  ==  Token.NAME  ||  p.getType()!=  Token.GETPROP)  {  return  false;  }	  if(p.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
17	[BUG]  [BUGGY]  if(p.getType()  ==  Token.NAME  ||  p.getType()!=  Token.VAR)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(p.getType()  ==  Token.NAME  ||  p.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(p.getType()  ==  Token.NAME  ||  p.getType()!=  Token.VAR)  {  return  false;  }	  if(p.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
18	[BUG]  [BUGGY]  if(numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode)  {  return  false;  }	  return    true;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
19	[BUG]  [BUGGY]  if(numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithin  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithin  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithin	  return    true;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
20	[BUG]  [BUGGY]  if(numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWith  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWith  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWith	  return    true;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
21	[BUG]  [BUGGY]  if(numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode)  {  return  true;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode)  {  return  true;  }	  return    true;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
22	[BUG]  [BUGGY]  if(numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUse  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUse  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUse	  return    true;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
23	[BUG]  [BUGGY]  if(numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUs  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUs  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ||  numUs	  return    true;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
24	[BUG]  [BUGGY]  else  if(cur.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(cur.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(cur.getType()  ==  Token.GETPROP)  {  return  false;  }	  else    if(predicate.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
25	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.GETPROP  ||  predicate.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(predicate.getType()  ==  Token.GETPROP  ||  predicate.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(predicate.getType()  ==  Token.GETPROP  ||  predicate.getType()  ==  Token.GETPROP)  {  return  false;  }	  else    if(predicate.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
26	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.GETPROP  ||  predicate.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(predicate.getType()  ==  Token.GETPROP  ||  predicate.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(predicate.getType()  ==  Token.GETPROP  ||  predicate.getType()!=  Token.GETPROP)  {  return  false;  }	  else    if(predicate.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
27	[BUG]  [BUGGY]  else  if(predicate.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(predicate.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(predicate.getType()!=  Token.GETPROP)  {  return  false;  }	  else    if(predicate.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
28	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(p.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(p.getType()  ==  Token.GETPROP)  {  return  false;  }	  else    if(predicate.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
29	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(p.getType()  ==  Token.FUNCTION)  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
30	[BUG]  [BUGGY]  else  if(p.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(p.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(p.getType()!=  Token.FUNCTION)  {  return  false;  }	  else    if(p.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
31	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.EXPR_RESULT)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.EXPR_RESULT)  {  return  true;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.EXPR_RESULT)  {  return  true;  }	  else    if(p.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
32	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }	  else    if(p.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
33	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.GETPROP)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.GETPROP)  {  return  true;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.GETPROP)  {  return  true;  }	  else    if(p.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
34	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.VAR)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.VAR)  {  return  true;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.VAR)  {  return  true;  }	  else    if(p.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
35	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.EXPR_RESULT)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
36	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
37	[BUG]  [BUGGY]  parent  ==  cur.getType()  ||  cur.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  parent  ==  cur.getType()  ||  cur.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	parent  ==  cur.getType()  ||  cur.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
38	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.VAR)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.VAR)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
39	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.GETPROP)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
40	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.CALL)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.CALL)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.CALL)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
41	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Predicate  predicate  =  c.getPredicate();  if(predicate.apply(predicate))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Predicate  predicate  =  c.getPredicate();  if(predicate.apply(predicate))  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Predicate  predicate  =  c.getPredicate();  if(predicate.apply(predicate))  {  return  false;  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
42	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Predicate  predicate  =  c.getPredicate();  if(predicate.apply(predicate))  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Predicate  predicate  =  c.getPredicate();  if(predicate.apply(predicate))  {  return  true;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Predicate  predicate  =  c.getPredicate();  if(predicate.apply(predicate))  {  return  true;  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
43	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Predicate  predicate  =  c.getPredicate();  if(predicate.apply(cur))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Predicate  predicate  =  c.getPredicate();  if(predicate.apply(cur))  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Predicate  predicate  =  c.getPredicate();  if(predicate.apply(cur))  {  return  false;  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
44	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  cur);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  cur);  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  cur);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
45	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(cur,  c);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
46	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Predicate  predicate  =  c.getPredicate();  if(predicate.apply(cur))  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Predicate  predicate  =  c.getPredicate();  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  Predicate  predicate  =  c.getPredicate();  if(predicate.apply(cur))  {  return  true;  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
47	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  NodeUtil.removeChild(c,  p);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
48	[BUG]  [BUGGY]  else  if(cur.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(cur.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(cur.getType()  ==  Token.FUNCTION)  {  return  false;  }	  else    if(predicate.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
49	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	  else    if(predicate.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
50	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.GETPROP)  {  return  false;  }	  else    if(predicate.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
51	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }	  else    if(predicate.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
52	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.VAR)  {  return  false;  }	  else    if(predicate.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
53	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.CALL)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.CALL)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.CALL)  {  return  false;  }	  else    if(predicate.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
54	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
55	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
56	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.VAR)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
57	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.VAR)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.VAR)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
58	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.GETPROP)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
59	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(cur.getType()  ==  Token.NAME  ||  cur.getType()!=  Token.GETPROP)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
60	[BUG]  [BUGGY]  return(p.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.NAME);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  return(p.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.NAME);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	return(p.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.NAME);	  return(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
61	[BUG]  [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.NAME);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.NAME);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	return(p.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.NAME);	  return(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
62	[BUG]  [BUGGY]  return(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  return(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.NAME);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	return(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.NAME);	  return(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
63	[BUG]  [BUGGY]  return(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  return(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.NAME);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	return(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.NAME);	  return(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
64	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.EXPR_RESULT)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
65	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.VAR)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.VAR)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
66	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.GETPROP)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
67	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.NAME)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.NAME)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.NAME)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
68	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.CALL)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.CALL)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.CALL)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
69	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.VAR)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
70	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.VAR  ||  cur.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(cur.getType()  ==  Token.VAR  ||  cur.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(cur.getType()  ==  Token.VAR  ||  cur.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(cur.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
71	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.VAR  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(cur.getType()  ==  Token.VAR  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(cur.getType()  ==  Token.VAR  ||  cur.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(cur.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
72	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.VAR  ||  cur.getType()  ==  Token.NAME)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(cur.getType()  ==  Token.VAR  ||  cur.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(cur.getType()  ==  Token.VAR  ||  cur.getType()  ==  Token.NAME)  {  return  false;  }	  if(cur.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
73	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.VAR  ||  cur.getType()!=  Token.NAME)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(cur.getType()  ==  Token.VAR  ||  cur.getType()!=  Token.NAME)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(cur.getType()  ==  Token.VAR  ||  cur.getType()!=  Token.NAME)  {  return  false;  }	  if(cur.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
74	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.VAR  ||  cur.getType()  ==  Token.CALL)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(cur.getType()  ==  Token.VAR  ||  cur.getType()  ==  Token.CALL)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(cur.getType()  ==  Token.VAR  ||  cur.getType()  ==  Token.CALL)  {  return  false;  }	  if(cur.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
75	[BUG]  [BUGGY]  if(cur.getType()!=  Token.VAR  ||  cur.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(cur.getType()!=  Token.VAR  ||  cur.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(cur.getType()!=  Token.VAR  ||  cur.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(cur.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
76	[BUG]  [BUGGY]  predicate.isEmpty())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  predicate.isEmpty())  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	predicate.isEmpty())  {  return  false;  }	  if(!predicate.isEmpty())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
77	[BUG]  [BUGGY]  if(!predicate.isEmpty())  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(!predicate.isEmpty())  {  return  true;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(!predicate.isEmpty())  {  return  true;  }	  if(!predicate.isEmpty())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
78	[BUG]  [BUGGY]  Predicate.isEmpty(cur)||!predicate.isEmpty())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  Predicate.isEmpty(cur)||!predicate.isEmpty())  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	Predicate.isEmpty(cur)||!predicate.isEmpty())  {  return  false;  }	  if(!predicate.isEmpty())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
79	[BUG]  [BUGGY]  if(!predicate.isEmpty()  ||  predicate.isEmpty())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(!predicate.isEmpty()  ||  predicate.isEmpty())  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(!predicate.isEmpty()  ||  predicate.isEmpty())  {  return  false;  }	  if(!predicate.isEmpty())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
80	[BUG]  [BUGGY]  if(!predicate.isEmpty()  ||!predicate.isEmpty())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(!predicate.isEmpty()  ||!predicate.isEmpty())  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(!predicate.isEmpty()  ||!predicate.isEmpty())  {  return  false;  }	  if(!predicate.isEmpty())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
81	[BUG]  [BUGGY]  if(!predicate.isEmpty()  ||  predicate.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(!predicate.isEmpty()  ||  predicate.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(!predicate.isEmpty()  ||  predicate.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(!predicate.isEmpty())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
82	[BUG]  [BUGGY]  return(p.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  return(p.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.CALL);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	return(p.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.CALL);	  return(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
83	[BUG]  [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.CALL);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	return(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.CALL);	  return(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
84	[BUG]  [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.CALL);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	return(p.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.CALL);	  return(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
85	[BUG]  [BUGGY]  return(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  return(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.CALL);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	return(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.CALL);	  return(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
86	[BUG]  [BUGGY]  return(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  return(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.CALL);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	return(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.CALL);	  return(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
87	[BUG]  [BUGGY]  return(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  return(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.CALL);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	return(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.CALL);	  return(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
88	[BUG]  [BUGGY]  return(p.getType()  ==  Token.FUNCTION  &&  p.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  return(p.getType()  ==  Token.FUNCTION  &&  p.getType()  ==  Token.VAR);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	return(p.getType()  ==  Token.FUNCTION  &&  p.getType()  ==  Token.VAR);	  return(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
89	[BUG]  [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.VAR);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	return(p.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.VAR);	  return(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
90	[BUG]  [BUGGY]  return(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  return(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.VAR);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	return(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.VAR);	  return(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
91	[BUG]  [BUGGY]  return(p.getType()!=  Token.FUNCTION  &&  p.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  return(p.getType()!=  Token.FUNCTION  &&  p.getType()  ==  Token.VAR);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	return(p.getType()!=  Token.FUNCTION  &&  p.getType()  ==  Token.VAR);	  return(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
92	[BUG]  [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.VAR);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	return(p.getType()  ==  Token.FUNCTION  ||  predicate.getType()  ==  Token.VAR);	  return(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
93	[BUG]  [BUGGY]  return(p.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.VAR);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  return(p.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.VAR);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	return(p.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.VAR);	  return(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
94	[BUG]  [BUGGY]  return(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.VAR);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  return(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.VAR);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	return(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.VAR);	  return(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
95	[BUG]  [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.VAR);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.VAR);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	return(p.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.VAR);	  return(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
96	[BUG]  [BUGGY]  return(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  return(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.VAR);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	return(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.VAR);	  return(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
97	[BUG]  [BUGGY]  else  if(cur.getType()  ==  Token.GETPROP)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(cur.getType()  ==  Token.GETPROP)  {  return  true;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(cur.getType()  ==  Token.GETPROP)  {  return  true;  }	  else    if(predicate.getType()    ==    Token.GETPROP)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
98	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.GETPROP  ||  predicate.getType()  ==  Token.GETPROP)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(predicate.getType()  ==  Token.GETPROP  ||  predicate.getType()  ==  Token.GETPROP)  {  return  true;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(predicate.getType()  ==  Token.GETPROP  ||  predicate.getType()  ==  Token.GETPROP)  {  return  true;  }	  else    if(predicate.getType()    ==    Token.GETPROP)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
99	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.GETPROP  ||  predicate.getType()!=  Token.GETPROP)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(predicate.getType()  ==  Token.GETPROP  ||  predicate.getType()!=  Token.GETPROP)  {  return  true;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(predicate.getType()  ==  Token.GETPROP  ||  predicate.getType()!=  Token.GETPROP)  {  return  true;  }	  else    if(predicate.getType()    ==    Token.GETPROP)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
100	[BUG]  [BUGGY]  return(p.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  return(p.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.BLOCK);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	return(p.getType()  ==  Token.FUNCTION  &&  p.getType()!=  Token.BLOCK);	  return(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
101	[BUG]  [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.BLOCK);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	return(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.BLOCK);	  return(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
102	[BUG]  [BUGGY]  return(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  return(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.BLOCK);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	return(p.getType()!=  Token.FUNCTION  ||  p.getType()  ==  Token.BLOCK);	  return(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
103	[BUG]  [BUGGY]  return(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  return(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.BLOCK);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	return(p.getType()!=  Token.FUNCTION  &&  p.getType()!=  Token.BLOCK);	  return(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
104	[BUG]  [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.BLOCK);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	return(p.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.BLOCK);	  return(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
105	[BUG]  [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  p.getType()  >=  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  p.getType()  >=  Token.BLOCK);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	return(p.getType()  ==  Token.FUNCTION  ||  p.getType()  >=  Token.BLOCK);	  return(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
106	[BUG]  [BUGGY]  else  if(predicate.getType()!=  Token.FUNCTION)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(predicate.getType()!=  Token.FUNCTION)  {  return  true;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(predicate.getType()!=  Token.FUNCTION)  {  return  true;  }	  else    if(predicate.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
107	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.GETPROP)  {  return  false;  }	  else    if(predicate.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
108	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.hasChildren())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.hasChildren())  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.hasChildren())  {  return  false;  }	  else    if(predicate.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
109	[BUG]  [BUGGY]  if(predicate.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(predicate.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(predicate.getType()  ==  Token.VAR)  {  return  false;  }	  if(cur.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
110	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.VAR  ||  cur.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(cur.getType()  ==  Token.VAR  ||  cur.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(cur.getType()  ==  Token.VAR  ||  cur.getType()!=  Token.GETPROP)  {  return  false;  }	  if(cur.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
111	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.VAR  ||  cur.getType()!=  Token.CALL)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(cur.getType()  ==  Token.VAR  ||  cur.getType()!=  Token.CALL)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(cur.getType()  ==  Token.VAR  ||  cur.getType()!=  Token.CALL)  {  return  false;  }	  if(cur.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
112	[BUG]  [BUGGY]  if(p.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(p.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(p.getType()  ==  Token.VAR)  {  return  false;  }	  if(cur.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
113	[BUG]  [BUGGY]  if(!predicate.apply(cur))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(!predicate.apply(cur))  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(!predicate.apply(cur))  {  return  false;  }	  return    true;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
114	[BUG]  [BUGGY]  if(!predicate.contains(cur))  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(!predicate.contains(cur))  {  return  true;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(!predicate.contains(cur))  {  return  true;  }	  return    true;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
115	[BUG]  [BUGGY]  return(p.getType()  ==  Token.VAR  ||  p.getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  return(p.getType()  ==  Token.VAR  ||  p.getType()!=  Token.FUNCTION);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	return(p.getType()  ==  Token.VAR  ||  p.getType()!=  Token.FUNCTION);	  return(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
116	[BUG]  [BUGGY]  return(p.getType()  ==  Token.NAME  ||  p.getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  return(p.getType()  ==  Token.NAME  ||  p.getType()!=  Token.FUNCTION);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	return(p.getType()  ==  Token.NAME  ||  p.getType()!=  Token.FUNCTION);	  return(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
117	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.apply(cur))  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.apply(cur))  {  return  true;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.apply(cur))  {  return  true;  }	  else    if(predicate.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
118	[BUG]  [BUGGY]  else  if(predicate.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(predicate.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(predicate.getType()!=  Token.FUNCTION)  {  return  false;  }	  else    if(predicate.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
119	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.hasChildren())  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.hasChildren())  {  return  true;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.hasChildren())  {  return  true;  }	  else    if(predicate.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
120	[BUG]  [BUGGY]  else  if(predicate.getType()!=  Token.FUNCTION  ||  predicate.apply(cur))  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(predicate.getType()!=  Token.FUNCTION  ||  predicate.apply(cur))  {  return  true;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(predicate.getType()!=  Token.FUNCTION  ||  predicate.apply(cur))  {  return  true;  }	  else    if(predicate.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
121	[BUG]  [BUGGY]  else  if(predicate.getType()!=  Token.GETPROP  ||  predicate.getType()  ==  Token.GETPROP)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(predicate.getType()!=  Token.GETPROP  ||  predicate.getType()  ==  Token.GETPROP)  {  return  true;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(predicate.getType()!=  Token.GETPROP  ||  predicate.getType()  ==  Token.GETPROP)  {  return  true;  }	  else    if(predicate.getType()    ==    Token.GETPROP)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
122	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.GETPROP  ||  predicate.apply(cur))  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(predicate.getType()  ==  Token.GETPROP  ||  predicate.apply(cur))  {  return  true;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(predicate.getType()  ==  Token.GETPROP  ||  predicate.apply(cur))  {  return  true;  }	  else    if(predicate.getType()    ==    Token.GETPROP)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
123	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  predicate.apply(cur))  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  predicate.apply(cur))  {  return  true;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(p.getType()  ==  Token.FUNCTION  ||  predicate.apply(cur))  {  return  true;  }	  else    if(p.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
124	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(cur.getType()  ==  Token.FUNCTION)  {  return  true;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(cur.getType()  ==  Token.FUNCTION)  {  return  true;  }	  if(cur.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
125	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.NAME)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.NAME)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()!=  Token.NAME)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
126	[BUG]  [BUGGY]  if(predicate.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(predicate.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(predicate.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
127	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(p.getType()  ==  Token.FUNCTION)  {  return  true;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(p.getType()  ==  Token.FUNCTION)  {  return  true;  }	  if(p.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
128	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(p.getType()!=  Token.FUNCTION)  {  return  true;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(p.getType()!=  Token.FUNCTION)  {  return  true;  }	  if(p.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
129	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(p.getType()  ==  Token.FUNCTION  ||  predicate.getType()!=  Token.EXPR_RESULT)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
130	[BUG]  [BUGGY]  if(p.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(p.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(p.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
131	[BUG]  [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  p.getParent()!=  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  p.getParent()!=  Token.CALL);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	return(p.getType()  ==  Token.FUNCTION  ||  p.getParent()!=  Token.CALL);	  return(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
132	[BUG]  [BUGGY]  if(p.getType()  ==  Token.NAME)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(p.getType()  ==  Token.NAME)  {  return  true;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(p.getType()  ==  Token.NAME)  {  return  true;  }	  if(p.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
133	[BUG]  [BUGGY]  if(p.getType()!=  Token.NAME)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(p.getType()!=  Token.NAME)  {  return  true;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(p.getType()!=  Token.NAME)  {  return  true;  }	  if(p.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
134	[BUG]  [BUGGY]  if(p.getType()!=  Token.NAME  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(p.getType()!=  Token.NAME  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(p.getType()!=  Token.NAME  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }	  if(p.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
135	[BUG]  [BUGGY]  if(p.getType()!=  Token.NAME)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(p.getType()!=  Token.NAME)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(p.getType()!=  Token.NAME)  {  return  false;  }	  if(p.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
136	[BUG]  [BUGGY]  if(predicate.isEmpty())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(predicate.isEmpty())  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(predicate.isEmpty())  {  return  false;  }	  if(!predicate.isEmpty())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
137	[BUG]  [BUGGY]  if(!predicate.isEmpty()  ||  predicate.apply(cur))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(!predicate.isEmpty()  ||  predicate.apply(cur))  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(!predicate.isEmpty()  ||  predicate.apply(cur))  {  return  false;  }	  if(!predicate.isEmpty())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
138	[BUG]  [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  p.getParent()!=  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  p.getParent()!=  Token.BLOCK);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	return(p.getType()  ==  Token.FUNCTION  ||  p.getParent()!=  Token.BLOCK);	  return(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
139	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(cur.getType()  ==  Token.NAME)  {  return  true;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(cur.getType()  ==  Token.NAME)  {  return  true;  }	  if(cur.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
140	[BUG]  [BUGGY]  if(predicate.getType()  ==  Token.NAME)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(predicate.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(predicate.getType()  ==  Token.NAME)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
141	[BUG]  [BUGGY]  if(cur.getType()!=  Token.NAME)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(cur.getType()!=  Token.NAME)  {  return  true;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(cur.getType()!=  Token.NAME)  {  return  true;  }	  if(cur.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
142	[BUG]  [BUGGY]  Preconditions.checkState(predicate.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  Preconditions.checkState(predicate.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	Preconditions.checkState(predicate.getType()  ==  Token.EXPR_RESULT);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
143	[BUG]  [BUGGY]  Preconditions.checkState(predicate.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  Preconditions.checkState(predicate.getType()  ==  Token.FUNCTION);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	Preconditions.checkState(predicate.getType()  ==  Token.FUNCTION);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
144	[BUG]  [BUGGY]  for(Node  p  :  n.getFirstChild().getNext())  {  Node  next  =  p.getNext();  if(next!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  for(Node  p  :  n.getFirstChild().getNext())  {  Node  next  =  p.getNext();  if(next!=  null)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	for(Node  p  :  n.getFirstChild().getNext())  {  Node  next  =  p.getNext();  if(next!=  null)  {  return  false;  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
145	[BUG]  [BUGGY]  Preconditions.checkState(predicate.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  Preconditions.checkState(predicate.getType()  ==  Token.GETPROP);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	Preconditions.checkState(predicate.getType()  ==  Token.GETPROP);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
146	[BUG]  [BUGGY]  Preconditions.checkState(predicate.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  Preconditions.checkState(predicate.getType()  ==  Token.NAME);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	Preconditions.checkState(predicate.getType()  ==  Token.NAME);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
147	[BUG]  [BUGGY]  for(Node  p  :  n.getFirstChild().getNext())  {  Node  next  =  p.getNext();  if(next  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  for(Node  p  :  n.getFirstChild().getNext())  {  Node  next  =  p.getNext();  if(next  ==  null)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	for(Node  p  :  n.getFirstChild().getNext())  {  Node  next  =  p.getNext();  if(next  ==  null)  {  return  false;  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
148	[BUG]  [BUGGY]  Preconditions.checkState(predicate.getType()  ==  Token.FUNCTION);  return  false;  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  Preconditions.checkState(predicate.getType()  ==  Token.FUNCTION);  return  false;  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	Preconditions.checkState(predicate.getType()  ==  Token.FUNCTION);  return  false;	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
149	[BUG]  [BUGGY]  else  if(predicate.getType()!=  Token.GETPROP)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(predicate.getType()!=  Token.GETPROP)  {  return  true;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(predicate.getType()!=  Token.GETPROP)  {  return  true;  }	  else    if(predicate.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
150	[BUG]  [BUGGY]  else  if(predicate.getType()!=  Token.GETPROP  ||  predicate.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(predicate.getType()!=  Token.GETPROP  ||  predicate.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(predicate.getType()!=  Token.GETPROP  ||  predicate.getType()  ==  Token.GETPROP)  {  return  false;  }	  else    if(predicate.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
151	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
152	[BUG]  [BUGGY]  Preconditions.checkState(predicate.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  Preconditions.checkState(predicate.getType()  ==  Token.VAR);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	Preconditions.checkState(predicate.getType()  ==  Token.VAR);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
153	[BUG]  [BUGGY]  return  checkRightOf(n,  expressionRoot,  predicate);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  return  checkRightOf(n,  expressionRoot,  predicate);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	return  checkRightOf(n,  expressionRoot,  predicate);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
154	[BUG]  [BUGGY]  Preconditions.checkState(p.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  Preconditions.checkState(p.getType()  ==  Token.NAME);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	Preconditions.checkState(p.getType()  ==  Token.NAME);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
155	[BUG]  [BUGGY]  Preconditions.checkState(!predicate.isEmpty());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  Preconditions.checkState(!predicate.isEmpty());  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	Preconditions.checkState(!predicate.isEmpty());	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
156	[BUG]  [BUGGY]  Preconditions.checkState(p.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  Preconditions.checkState(p.getType()  ==  Token.VAR);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	Preconditions.checkState(p.getType()  ==  Token.VAR);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
157	[BUG]  [BUGGY]  if(p.getType()  ==  Token.VAR  ||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(p.getType()  ==  Token.VAR  ||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(p.getType()  ==  Token.VAR  ||  p.getType()  ==  Token.FUNCTION)  {  return  false;  }	  return    true;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
158	[BUG]  [BUGGY]  if(p.getType()  ==  Token.VAR  ||  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(p.getType()  ==  Token.VAR  ||  p.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(p.getType()  ==  Token.VAR  ||  p.getType()!=  Token.FUNCTION)  {  return  false;  }	  return    true;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
159	[BUG]  [BUGGY]  if(p.getType()  ==  Token.VAR  ||  p.getType()  ==  Token.FUNCTION)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(p.getType()  ==  Token.VAR  ||  p.getType()  ==  Token.FUNCTION)  {  return  true;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(p.getType()  ==  Token.VAR  ||  p.getType()  ==  Token.FUNCTION)  {  return  true;  }	  return    true;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
160	[BUG]  [BUGGY]  if(p.getType()  ==  Token.VAR  ||  p.getType()!=  Token.FUNCTION)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(p.getType()  ==  Token.VAR  ||  p.getType()!=  Token.FUNCTION)  {  return  true;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(p.getType()  ==  Token.VAR  ||  p.getType()!=  Token.FUNCTION)  {  return  true;  }	  return    true;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
161	[BUG]  [BUGGY]  if(p.getType()  ==  Token.VAR  ||  p.getType()  ==  Token.BLOCK)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(p.getType()  ==  Token.VAR  ||  p.getType()  ==  Token.BLOCK)  {  return  true;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(p.getType()  ==  Token.VAR  ||  p.getType()  ==  Token.BLOCK)  {  return  true;  }	  return    true;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
162	[BUG]  [BUGGY]  if(p.getType()  ==  Token.VAR  ||  p.getType()  ==  Token.BLOCK)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(p.getType()  ==  Token.VAR  ||  p.getType()  ==  Token.BLOCK)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(p.getType()  ==  Token.VAR  ||  p.getType()  ==  Token.BLOCK)  {  return  false;  }	  return    true;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
163	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.GETPROP  &&!NodeUtil.isExpressionNode(n))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(predicate.getType()  ==  Token.GETPROP  &&!NodeUtil.isExpressionNode(n))  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(predicate.getType()  ==  Token.GETPROP  &&!NodeUtil.isExpressionNode(n))  {  return  false;  }	  else    if(predicate.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
164	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.GETPROP  &&  n.getString().equals( "prototype "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(predicate.getType()  ==  Token.GETPROP  &&  n.getString().equals( "prototype "))  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(predicate.getType()  ==  Token.GETPROP  &&  n.getString().equals( "prototype "))  {  return  false;  }	  else    if(predicate.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
165	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.GETPROP  ||  predicate.getType()  ==  Token.GETELEM)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(predicate.getType()  ==  Token.GETPROP  ||  predicate.getType()  ==  Token.GETELEM)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(predicate.getType()  ==  Token.GETPROP  ||  predicate.getType()  ==  Token.GETELEM)  {  return  false;  }	  else    if(predicate.getType()    ==    Token.GETPROP)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
166	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.apply(n))  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.apply(n))  {  return  true;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.apply(n))  {  return  true;  }	  else    if(predicate.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
167	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.equals(expressionRoot))  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.equals(expressionRoot))  {  return  true;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.equals(expressionRoot))  {  return  true;  }	  else    if(predicate.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
168	[BUG]  [BUGGY]  return(p.getType()  ==  Token.VAR  ||  p.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  return(p.getType()  ==  Token.VAR  ||  p.getType()  ==  Token.FUNCTION);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	return(p.getType()  ==  Token.VAR  ||  p.getType()  ==  Token.FUNCTION);	  return(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
169	[BUG]  [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.VAR,  predicate);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.VAR,  predicate);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	return(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.VAR,  predicate);	  return(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
170	[BUG]  [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.VAR)&&  predicate.apply(cur);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.VAR)&&  predicate.apply(cur);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	return(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.VAR)&&  predicate.apply(cur);	  return(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
171	[BUG]  [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.NAME,  predicate);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  return(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.NAME,  predicate);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	return(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.NAME,  predicate);	  return(p.getType()    ==    Token.FUNCTION    ||    p.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
172	[BUG]  [BUGGY]  if(cur.getType()!=  Token.NAME)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(cur.getType()!=  Token.NAME)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(cur.getType()!=  Token.NAME)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
173	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.CALL)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.CALL)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(cur.getType()  ==  Token.NAME  ||  cur.getType()  ==  Token.CALL)  {  return  false;  }	  if(cur.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
174	[BUG]  [BUGGY]  if(cur.getType()!=  Token.VAR)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(cur.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(cur.getType()!=  Token.VAR)  {  return  false;  }	  if(cur.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
175	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.VAR  ||  cur.getType()  ==  Token.BLOCK)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(cur.getType()  ==  Token.VAR  ||  cur.getType()  ==  Token.BLOCK)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(cur.getType()  ==  Token.VAR  ||  cur.getType()  ==  Token.BLOCK)  {  return  false;  }	  if(cur.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
176	[BUG]  [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  ||!predicate.isEmpty())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  ||!predicate.isEmpty())  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	Predicate  <  SIDE_EFFECT_PREDICATE  ||!predicate.isEmpty())  {  return  false;  }	  if(!predicate.isEmpty())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
177	[BUG]  [BUGGY]  if(!predicate.isEmpty()  ||  predicate.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(!predicate.isEmpty()  ||  predicate.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(!predicate.isEmpty()  ||  predicate.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(!predicate.isEmpty())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
178	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
179	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.CALL)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.CALL)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.CALL)  {  return  false;  }	  if(p.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
180	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.apply(cur))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.apply(cur))  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.apply(cur))  {  return  false;  }	  else    if(predicate.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
181	[BUG]  [BUGGY]  if(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.CALL)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.CALL)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(p.getType()  ==  Token.NAME  ||  p.getType()  ==  Token.CALL)  {  return  false;  }	  if(p.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
182	[BUG]  [BUGGY]  if(cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(cur.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(cur.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
183	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.VAR)  {  return  false;  }	  if(cur.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
184	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.GETPROP  &&!NodeUtil.mayHaveSideEffects(n))  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(predicate.getType()  ==  Token.GETPROP  &&!NodeUtil.mayHaveSideEffects(n))  {  return  true;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(predicate.getType()  ==  Token.GETPROP  &&!NodeUtil.mayHaveSideEffects(n))  {  return  true;  }	  else    if(predicate.getType()    ==    Token.GETPROP)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
185	[BUG]  [BUGGY]  else  if(predicate.getType()  ==  Token.GETPROP  &&!NodeUtil.isExpressionNode(n))  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(predicate.getType()  ==  Token.GETPROP  &&!NodeUtil.isExpressionNode(n))  {  return  true;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(predicate.getType()  ==  Token.GETPROP  &&!NodeUtil.isExpressionNode(n))  {  return  true;  }	  else    if(predicate.getType()    ==    Token.GETPROP)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
186	[BUG]  [BUGGY]  else  if(p.getType()!=  Token.FUNCTION)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(p.getType()!=  Token.FUNCTION)  {  return  true;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(p.getType()!=  Token.FUNCTION)  {  return  true;  }	  else    if(p.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
187	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.VAR)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.VAR)  {  return  true;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.VAR)  {  return  true;  }	  else    if(p.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
188	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.GETPROP)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.GETPROP)  {  return  true;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.GETPROP)  {  return  true;  }	  else    if(p.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
189	[BUG]  [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.CALL)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.CALL)  {  return  true;  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	else  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.CALL)  {  return  true;  }	  else    if(p.getType()    ==    Token.FUNCTION)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
190	[BUG]  [BUGGY]  return(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  return(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.BLOCK);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	return(p.getType()!=  Token.FUNCTION  ||  p.getType()!=  Token.BLOCK);	  return(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
191	[BUG]  [BUGGY]  return(p.getType()  >=  Token.FUNCTION  ||  p.getType()!=  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  return(p.getType()  >=  Token.FUNCTION  ||  p.getType()!=  Token.BLOCK);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	return(p.getType()  >=  Token.FUNCTION  ||  p.getType()!=  Token.BLOCK);	  return(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
192	[BUG]  [BUGGY]  return(p.getType()  >=  Token.FUNCTION  ||  p.getType()!=  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }    [BUGGY]  return(p.getType()  >=  Token.FUNCTION  ||  p.getType()!=  Token.CALL);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2672612419124244	469	469	3	replace	return(p.getType()  >=  Token.FUNCTION  ||  p.getType()!=  Token.CALL);	  return(p.getType()    ==    Token.FUNCTION    ||    p.getType()!=    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
