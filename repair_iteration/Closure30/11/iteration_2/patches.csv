bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(Node  cur  =  p.getNext().cloneTree();  cur!=  null;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getNext().cloneTree();  cur!=  null;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getNext().cloneTree();  cur!=  null;	  for(Node    cur    =    p.getNext().removeFirstChild();    cur!=    null;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
2	[BUG]  [BUGGY]  for(Node  cur  =  p.getFirstChild().removeFirstChild();  cur!=  null;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getFirstChild().removeFirstChild();  cur!=  null;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getFirstChild().removeFirstChild();  cur!=  null;	  for(Node    cur    =    p.getNext().removeFirstChild();    cur!=    null;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
3	[BUG]  [BUGGY]  for(Node  cur  =  p.getNext().removeFirstChild();  cur  ==  null;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getNext().removeFirstChild();  cur  ==  null;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getNext().removeFirstChild();  cur  ==  null;	  for(Node    cur    =    p.getNext().removeFirstChild();    cur!=    null;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
4	[BUG]  [BUGGY]  for(Node  cur  =  p.getParent().removeFirstChild();  cur!=  null;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getParent().removeFirstChild();  cur!=  null;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getParent().removeFirstChild();  cur!=  null;	  for(Node    cur    =    p.getNext().removeFirstChild();    cur!=    null;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
5	[BUG]  [BUGGY]  for(Node  cur  =  p.getNext().removeLastChild();  cur!=  null;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getNext().removeLastChild();  cur!=  null;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getNext().removeLastChild();  cur!=  null;	  for(Node    cur    =    p.getNext().removeFirstChild();    cur!=    null;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
6	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  p.getLastChild();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Predicate  <  Node>  cur  =  p.getLastChild();  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	Predicate  <  Node>  cur  =  p.getLastChild();	  Predicate    <    Node>    cur    =    p.getNext();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
7	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  p.getNext()  +  1;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Predicate  <  Node>  cur  =  p.getNext()  +  1;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	Predicate  <  Node>  cur  =  p.getNext()  +  1;	  Predicate    <    Node>    cur    =    p.getNext();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
8	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  p.getCurrentNode();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Predicate  <  Node>  cur  =  p.getCurrentNode();  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	Predicate  <  Node>  cur  =  p.getCurrentNode();	  Predicate    <    Node>    cur    =    p.getNext();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
9	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  p.getNext(),  predicate);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Predicate  <  Node>  cur  =  p.getNext(),  predicate);  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	Predicate  <  Node>  cur  =  p.getNext(),  predicate);	  Predicate    <    Node>    cur    =    p.getNext();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
10	[BUG]  [BUGGY]  for(Node  cur  =  p.getNext().getFirstChild();  cur  ==  expressionRoot;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getNext().getFirstChild();  cur  ==  expressionRoot;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getNext().getFirstChild();  cur  ==  expressionRoot;	  for(Node    cur    =    p.getNext().getFirstChild();    cur!=    expressionRoot;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
11	[BUG]  [BUGGY]  for(Node  cur  =  p.getFirstChild();  cur!=  expressionRoot;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getFirstChild();  cur!=  expressionRoot;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getFirstChild();  cur!=  expressionRoot;	  for(Node    cur    =    p.getNext().getFirstChild();    cur!=    expressionRoot;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
12	[BUG]  [BUGGY]  for(Node  cur  =  p.getNext().getLastChild();  cur!=  expressionRoot;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getNext().getLastChild();  cur!=  expressionRoot;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getNext().getLastChild();  cur!=  expressionRoot;	  for(Node    cur    =    p.getNext().getFirstChild();    cur!=    expressionRoot;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
13	[BUG]  [BUGGY]  for(Node  cur  =  p.getNext().getFirstChild();  cur  >=  expressionRoot;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getNext().getFirstChild();  cur  >=  expressionRoot;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getNext().getFirstChild();  cur  >=  expressionRoot;	  for(Node    cur    =    p.getNext().getFirstChild();    cur!=    expressionRoot;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
14	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  predicate.getLastChild();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Predicate  <  Node>  cur  =  predicate.getLastChild();  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	Predicate  <  Node>  cur  =  predicate.getLastChild();	  Predicate    <    Node>    cur    =    predicate.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
15	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  expressionRoot.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Predicate  <  Node>  cur  =  expressionRoot.getFirstChild();  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	Predicate  <  Node>  cur  =  expressionRoot.getFirstChild();	  Predicate    <    Node>    cur    =    predicate.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
16	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Predicate  <  Node>  cur  =  n.getFirstChild();  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	Predicate  <  Node>  cur  =  n.getFirstChild();	  Predicate    <    Node>    cur    =    predicate.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
17	[BUG]  [BUGGY]  for(Node  cur  =  p.getFirstChild().getFirstChild();  cur!=  null;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getFirstChild().getFirstChild();  cur!=  null;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getFirstChild().getFirstChild();  cur!=  null;	  for(Node    cur    =    n.getParent().getFirstChild();    cur!=    null;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
18	[BUG]  [BUGGY]  For(Node  cur  =  p.getParent().getFirstChild();  cur!=  null;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  For(Node  cur  =  p.getParent().getFirstChild();  cur!=  null;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	For(Node  cur  =  p.getParent().getFirstChild();  cur!=  null;	  for(Node    cur    =    n.getParent().getFirstChild();    cur!=    null;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
19	[BUG]  [BUGGY]  for(Node  cur  =  p.getNext();  cur!=  n;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getNext();  cur!=  n;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getNext();  cur!=  n;	  for(Node    cur    =    p.getParent().getNext();    cur!=    n;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
20	[BUG]  [BUGGY]  for(Node  cur  =  p.getParent().getNext();  cur!=  expressionRoot;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getParent().getNext();  cur!=  expressionRoot;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getParent().getNext();  cur!=  expressionRoot;	  for(Node    cur    =    p.getParent().getNext();    cur!=    n;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
21	[BUG]  [BUGGY]  for(Node  cur  =  p.getFirstChild().getNext();  cur!=  n;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getFirstChild().getNext();  cur!=  n;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getFirstChild().getNext();  cur!=  n;	  for(Node    cur    =    p.getParent().getNext();    cur!=    n;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
22	[BUG]  [BUGGY]  for(Node  cur  =  p.getFirstChild().getLastChild();  cur!=  n;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getFirstChild().getLastChild();  cur!=  n;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getFirstChild().getLastChild();  cur!=  n;	  for(Node    cur    =    p.getParent().getLastChild();    cur!=    n;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
23	[BUG]  [BUGGY]  for(Node  cur  =  n.getNext().getLastChild();  cur!=  null;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  n.getNext().getLastChild();  cur!=  null;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  n.getNext().getLastChild();  cur!=  null;	  for    (Node    cur    =    n.getNext().getFirstChild();    cur!=    null;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
24	[BUG]  [BUGGY]  for(Node  cur  =  p.getParent().getLastChild();  cur!=  p;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getParent().getLastChild();  cur!=  p;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getParent().getLastChild();  cur!=  p;	  for    (Node    cur    =    p.getNext().getLastChild();    cur!=    p;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
25	[BUG]  [BUGGY]  Node  cur  =  p.getCurrentNode();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Node  cur  =  p.getCurrentNode();  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	Node  cur  =  p.getCurrentNode();	  Node    cur    =    p.getNext();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
26	[BUG]  [BUGGY]  Node  cur  =  p.getNext()  +  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Node  cur  =  p.getNext()  +  1;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	Node  cur  =  p.getNext()  +  1;	  Node    cur    =    p.getNext();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
27	[BUG]  [BUGGY]  Node  cur  =  p.getPrevious();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Node  cur  =  p.getPrevious();  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	Node  cur  =  p.getPrevious();	  Node    cur    =    p.getNext();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
28	[BUG]  [BUGGY]  for(Node  cur  =  p.getFirstChild().getNext();  cur!=  null;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getFirstChild().getNext();  cur!=  null;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getFirstChild().getNext();  cur!=  null;	  for(Node    cur    =    p.getParent().getNext();    cur!=    null;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
29	[BUG]  [BUGGY]  for(Node  cur  =  p.getParent().cloneTree();  cur!=  null;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getParent().cloneTree();  cur!=  null;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getParent().cloneTree();  cur!=  null;	  for(Node    cur    =    p.getParent().getNext();    cur!=    null;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
30	[BUG]  [BUGGY]  for(Node  cur  =  p.getParent().getNext();  cur  ==  null;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getParent().getNext();  cur  ==  null;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getParent().getNext();  cur  ==  null;	  for(Node    cur    =    p.getParent().getNext();    cur!=    null;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
31	[BUG]  [BUGGY]  for(Node  cur  =  p.getName().getNext();  cur!=  null;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getName().getNext();  cur!=  null;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getName().getNext();  cur!=  null;	  for(Node    cur    =    p.getParent().getNext();    cur!=    null;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
32	[BUG]  [BUGGY]  for(Node  cur  =  p.getParent().getLastChild();  cur!=  null;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getParent().getLastChild();  cur!=  null;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getParent().getLastChild();  cur!=  null;	  for(Node    cur    =    p.getNext().getLastChild();    cur!=    null;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
33	[BUG]  [BUGGY]  for(Node  cur  =  p.getFirstChild().getLastChild();  cur!=  null;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getFirstChild().getLastChild();  cur!=  null;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getFirstChild().getLastChild();  cur!=  null;	  for(Node    cur    =    p.getNext().getLastChild();    cur!=    null;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
34	[BUG]  [BUGGY]  for(Node  cur  =  p.getNext().getString();  cur!=  null;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getNext().getString();  cur!=  null;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getNext().getString();  cur!=  null;	  for(Node    cur    =    p.getNext().getLastChild();    cur!=    null;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
35	[BUG]  [BUGGY]  for(Node  cur  =  p.getNext().getNext();  cur!=  null;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getNext().getNext();  cur!=  null;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getNext().getNext();  cur!=  null;	  for(Node    cur    =    p.getNext().getLastChild();    cur!=    null;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
36	[BUG]  [BUGGY]  for(Node  cur  =  p.getLastChild();  cur!=  null;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getLastChild();  cur!=  null;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getLastChild();  cur!=  null;	  for(Node    cur    =    p.getNext().getLastChild();    cur!=    null;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
37	[BUG]  [BUGGY]  for(Node  cur  =  p.getParent();  cur!=  null;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getParent();  cur!=  null;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getParent();  cur!=  null;	  for(Node    cur    =    p.getNext();    cur!=    null;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
38	[BUG]  [BUGGY]  for(Node  cur  =  p.getNext();  cur  ==  null;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getNext();  cur  ==  null;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getNext();  cur  ==  null;	  for(Node    cur    =    p.getNext();    cur!=    null;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
39	[BUG]  [BUGGY]  for(Node  cur  =  p.getCurrentNode();  cur!=  null;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getCurrentNode();  cur!=  null;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getCurrentNode();  cur!=  null;	  for(Node    cur    =    p.getNext();    cur!=    null;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
40	[BUG]  [BUGGY]  for(Node  cur  =  p.getNext();  cur  >=  null;  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getNext();  cur  >=  null;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getNext();  cur  >=  null;	  for(Node    cur    =    p.getNext();    cur!=    null;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
41	[BUG]  [BUGGY]  for(Node  cur  =  p.getFirstChild().getFirstChild();  cur!=  expressionRoot;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getFirstChild().getFirstChild();  cur!=  expressionRoot;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getFirstChild().getFirstChild();  cur!=  expressionRoot;	  for(Node    cur    =    n.getParent().getFirstChild();    cur!=    expressionRoot;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
42	[BUG]  [BUGGY]  for(Node  cur  =  n.getNext().getFirstChild();  cur!=  expressionRoot;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  n.getNext().getFirstChild();  cur!=  expressionRoot;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  n.getNext().getFirstChild();  cur!=  expressionRoot;	  for(Node    cur    =    n.getParent().getFirstChild();    cur!=    expressionRoot;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
43	[BUG]  [BUGGY]  for(Node  cur  =  p.getParent().getFirstChild();  cur  >=  expressionRoot;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getParent().getFirstChild();  cur  >=  expressionRoot;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getParent().getFirstChild();  cur  >=  expressionRoot;	  for(Node    cur    =    n.getParent().getFirstChild();    cur!=    expressionRoot;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
44	[BUG]  [BUGGY]  for(Node  cur  =  n.getParent().getFirstChild();  cur  ==  expressionRoot;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  n.getParent().getFirstChild();  cur  ==  expressionRoot;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  n.getParent().getFirstChild();  cur  ==  expressionRoot;	  for(Node    cur    =    n.getParent().getFirstChild();    cur!=    expressionRoot;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
45	[BUG]  [BUGGY]  for(Node  cur  =  p.getParent().getFirstChild();  cur  ==  expressionRoot;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getParent().getFirstChild();  cur  ==  expressionRoot;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getParent().getFirstChild();  cur  ==  expressionRoot;	  for(Node    cur    =    p.getParent().getFirstChild();    cur!=    expressionRoot;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
46	[BUG]  [BUGGY]  for(Node  cur  =  p.getParent().getLastChild();  cur!=  expressionRoot;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getParent().getLastChild();  cur!=  expressionRoot;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getParent().getLastChild();  cur!=  expressionRoot;	  for(Node    cur    =    p.getParent().getFirstChild();    cur!=    expressionRoot;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
47	[BUG]  [BUGGY]  for(Node  cur  =  p.getParent().getFirstChild();  cur  ==  null;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getParent().getFirstChild();  cur  ==  null;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getParent().getFirstChild();  cur  ==  null;	  for(Node    cur    =    p.getNext().getFirstChild();    cur    ==    null;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
48	[BUG]  [BUGGY]  for(Node  cur  =  p.getNext().getFirstChild();  cur!=  node;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getNext().getFirstChild();  cur!=  node;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getNext().getFirstChild();  cur!=  node;	  for(Node    cur    =    n.getNext().getFirstChild();    cur!=    p;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
49	[BUG]  [BUGGY]  for(Node  cur  =  n.getNext().getLastChild();  cur!=  p;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  n.getNext().getLastChild();  cur!=  p;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  n.getNext().getLastChild();  cur!=  p;	  for(Node    cur    =    n.getNext().getFirstChild();    cur!=    p;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
50	[BUG]  [BUGGY]  for(Node  cur  =  p.getFirstChild();  cur  ==  null;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getFirstChild();  cur  ==  null;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getFirstChild();  cur  ==  null;	  for(Node    cur    =    p.getFirstChild();    cur!=    null;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
51	[BUG]  [BUGGY]  For(Node  cur  =  p.getFirstChild();  cur!=  null;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  For(Node  cur  =  p.getFirstChild();  cur!=  null;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	For(Node  cur  =  p.getFirstChild();  cur!=  null;	  for(Node    cur    =    p.getFirstChild();    cur!=    null;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
52	[BUG]  [BUGGY]  for(Node  cur  =  p.getFirstChild();  cur  >=  null;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getFirstChild();  cur  >=  null;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getFirstChild();  cur  >=  null;	  for(Node    cur    =    p.getFirstChild();    cur!=    null;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
53	[BUG]  [BUGGY]  for(Node  cur  =  n.getFirstChild();  cur!=  null;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  n.getFirstChild();  cur!=  null;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  n.getFirstChild();  cur!=  null;	  for(Node    cur    =    p.getFirstChild();    cur!=    null;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
54	[BUG]  [BUGGY]  for(Node  cur  =  p.getLastChild();  cur!=  n;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getLastChild();  cur!=  n;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getLastChild();  cur!=  n;	  for(Node    cur    =    p.getFirstChild();    cur!=    n;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
55	[BUG]  [BUGGY]  for(Node  cur  =  p.getFirstChild();  cur!=  predicate;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getFirstChild();  cur!=  predicate;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getFirstChild();  cur!=  predicate;	  for(Node    cur    =    p.getFirstChild();    cur!=    n;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
56	[BUG]  [BUGGY]  for(Node  cur  =  n.getFirstChild();  cur!=  p;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  n.getFirstChild();  cur!=  p;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  n.getFirstChild();  cur!=  p;	  for(Node    cur    =    p.getFirstChild();    cur!=    n;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
57	[BUG]  [BUGGY]  for(Node  cur  =  p.getFirstChild();  cur  ==  n;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getFirstChild();  cur  ==  n;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getFirstChild();  cur  ==  n;	  for(Node    cur    =    p.getFirstChild();    cur!=    n;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
58	[BUG]  [BUGGY]  for(Node  cur  =  p.getNext().getLastChild();  cur!=  0;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getNext().getLastChild();  cur!=  0;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getNext().getLastChild();  cur!=  0;	  for    (Node    cur    =    p.getNext().getFirstChild();    cur!=    0;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
59	[BUG]  [BUGGY]  for(Node  cur  =  p.getNext().getFirstChild();  cur  ==  0;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getNext().getFirstChild();  cur  ==  0;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getNext().getFirstChild();  cur  ==  0;	  for    (Node    cur    =    p.getNext().getFirstChild();    cur!=    0;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
60	[BUG]  [BUGGY]  Node  cur  =  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Node  cur  =  n.getLastChild();  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	Node  cur  =  n.getLastChild();	  Node    cur    =    p.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
61	[BUG]  [BUGGY]  Node  cur  =  predicate.getLastChild();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Node  cur  =  predicate.getLastChild();  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	Node  cur  =  predicate.getLastChild();	  Node    cur    =    p.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
62	[BUG]  [BUGGY]  Node  cur  =  p.next();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Node  cur  =  p.next();  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	Node  cur  =  p.next();	  Node    cur    =    p.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
63	[BUG]  [BUGGY]  Node  cur  =  p.getLastChild()  +  1;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Node  cur  =  p.getLastChild()  +  1;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	Node  cur  =  p.getLastChild()  +  1;	  Node    cur    =    p.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
64	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  p.getPrevious();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Predicate  <  Node>  cur  =  p.getPrevious();  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	Predicate  <  Node>  cur  =  p.getPrevious();	  Predicate    <    Node>    cur    =    p.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
65	[BUG]  [BUGGY]  Node  cur  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Node  cur  =  n.getFirstChild();  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	Node  cur  =  n.getFirstChild();	  Node    cur    =    p.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
66	[BUG]  [BUGGY]  Node  cur  =  p.getPreviousChild();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Node  cur  =  p.getPreviousChild();  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	Node  cur  =  p.getPreviousChild();	  Node    cur    =    p.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
67	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  expressionRoot.getNext();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Predicate  <  Node>  cur  =  expressionRoot.getNext();  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	Predicate  <  Node>  cur  =  expressionRoot.getNext();	  Predicate    <    Node>    cur    =    predicate.getNext();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
68	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  p.next();  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Predicate  <  Node>  cur  =  p.next();  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	Predicate  <  Node>  cur  =  p.next();	  Predicate    <    Node>    cur    =    predicate.getNext();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
69	[BUG]  [BUGGY]  Node  cur  =  n.getParent();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Node  cur  =  n.getParent();  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	Node  cur  =  n.getParent();	  Node    cur    =    p.getParent();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
70	[BUG]  [BUGGY]  Node  cur  =  n.getNext();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Node  cur  =  n.getNext();  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	Node  cur  =  n.getNext();	  Node    cur    =    p.getParent();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
71	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  predicate.getParent();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Predicate  <  Node>  cur  =  predicate.getParent();  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	Predicate  <  Node>  cur  =  predicate.getParent();	  Predicate    <    Node>    cur    =    p.getParent();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
72	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  n.getParent();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Predicate  <  Node>  cur  =  n.getParent();  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	Predicate  <  Node>  cur  =  n.getParent();	  Predicate    <    Node>    cur    =    p.getParent();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
73	[BUG]  [BUGGY]  Node  cur  =  predicate.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Node  cur  =  predicate.getFirstChild();  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	Node  cur  =  predicate.getFirstChild();	  Node    cur    =    p.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
74	[BUG]  [BUGGY]  for(Node  cur  =  p.getNext().firstChild();  cur!=  null;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getNext().firstChild();  cur!=  null;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getNext().firstChild();  cur!=  null;	  for(Node    cur    =    p.getNext().removeFirstChild();    cur!=    null;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
75	[BUG]  [BUGGY]  for(Node  cur  =  p.next();  cur!=  null;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.next();  cur!=  null;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.next();  cur!=  null;	  for(Node    cur    =    p.getNext();    cur!=    null;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
76	[BUG]  [BUGGY]  for(Node  cur  =  p.getPrevious();  cur!=  null;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getPrevious();  cur!=  null;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getPrevious();  cur!=  null;	  for(Node    cur    =    p.getNext();    cur!=    null;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
77	[BUG]  [BUGGY]  Predicates.  <  Node>  cur  =  p.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Predicates.  <  Node>  cur  =  p.getFirstChild();  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	Predicates.  <  Node>  cur  =  p.getFirstChild();	  Predicate    <    Node>    cur    =    predicate.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
78	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  p.getPredicate();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Predicate  <  Node>  cur  =  p.getPredicate();  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	Predicate  <  Node>  cur  =  p.getPredicate();	  Predicate    <    Node>    cur    =    p.getNext();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
79	[BUG]  [BUGGY]  for(Node  cur  =  p.getNext().getfirstChild();  cur!=  null;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getNext().getfirstChild();  cur!=  null;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getNext().getfirstChild();  cur!=  null;	  for(Node    cur    =    p.getNext().getLastChild();    cur!=    null;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
80	[BUG]  [BUGGY]  Node  cur  =  p.getfirstChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Node  cur  =  p.getfirstChild();  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	Node  cur  =  p.getfirstChild();	  Node    cur    =    p.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
81	[BUG]  [BUGGY]  for(Node  cur  =  p.getNext().getNext();  cur!=  n;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getNext().getNext();  cur!=  n;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getNext().getNext();  cur!=  n;	  for(Node    cur    =    p.getParent().getNext();    cur!=    n;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
82	[BUG]  [BUGGY]  for(Node  cur  =  n.getParent().getLastChild();  cur!=  null;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  n.getParent().getLastChild();  cur!=  null;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  n.getParent().getLastChild();  cur!=  null;	  for(Node    cur    =    p.getParent().getLastChild();    cur!=    n;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
83	[BUG]  [BUGGY]  for(Node  cur  =  p.getLastChild().getFirstChild();  cur!=  expressionRoot;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getLastChild().getFirstChild();  cur!=  expressionRoot;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getLastChild().getFirstChild();  cur!=  expressionRoot;	  for(Node    cur    =    n.getParent().getFirstChild();    cur!=    expressionRoot;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
84	[BUG]  [BUGGY]  for(Node  cur  =  p.getNext().getParent();  cur!=  null;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getNext().getParent();  cur!=  null;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getNext().getParent();  cur!=  null;	  for(Node    cur    =    p.getParent().getNext();    cur!=    null;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
85	[BUG]  [BUGGY]  for(Node  cur  =  p.getParent().getNext();  cur!=  n  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getParent().getNext();  cur!=  n  +  1;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getParent().getNext();  cur!=  n  +  1;	  for(Node    cur    =    p.getParent().getNext();    cur!=    n;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
86	[BUG]  [BUGGY]  for(Node  cur  =  n.getParent().getNext();  cur!=  null;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  n.getParent().getNext();  cur!=  null;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  n.getParent().getNext();  cur!=  null;	  for(Node    cur    =    p.getParent().getNext();    cur!=    n;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
87	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  n.getNext();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Predicate  <  Node>  cur  =  n.getNext();  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	Predicate  <  Node>  cur  =  n.getNext();	  Predicate    <    Node>    cur    =    predicate.getNext();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
88	[BUG]  [BUGGY]  for(Node  cur  =  n.getParent().getLastChild();  cur!=  p;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  n.getParent().getLastChild();  cur!=  p;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  n.getParent().getLastChild();  cur!=  p;	  for(Node    cur    =    p.getParent().getLastChild();    cur!=    n;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
89	[BUG]  [BUGGY]  for(Node  cur  =  p.getParent().getFirstChild();  cur  ==  n;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getParent().getFirstChild();  cur  ==  n;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getParent().getFirstChild();  cur  ==  n;	  for(Node    cur    =    p.getParent().getLastChild();    cur!=    n;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
90	[BUG]  [BUGGY]  for(Node  cur  =  p.getParent().getFirstChild();  cur!=  0;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getParent().getFirstChild();  cur!=  0;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getParent().getFirstChild();  cur!=  0;	  for    (Node    cur    =    p.getNext().getFirstChild();    cur!=    0;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
91	[BUG]  [BUGGY]  for(Node  cur  =  n.getNext().getFirstChild();  cur!=  0;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  n.getNext().getFirstChild();  cur!=  0;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  n.getNext().getFirstChild();  cur!=  0;	  for    (Node    cur    =    p.getNext().getFirstChild();    cur!=    0;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
92	[BUG]  [BUGGY]  for(Node  cur  =  p.getFirstChild();  cur!=  0;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getFirstChild();  cur!=  0;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getFirstChild();  cur!=  0;	  for    (Node    cur    =    p.getNext().getFirstChild();    cur!=    0;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
93	[BUG]  [BUGGY]  Node  cur  =  p.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Node  cur  =  p.removeFirstChild();  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	Node  cur  =  p.removeFirstChild();	  Node    cur    =    p.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
94	[BUG]  [BUGGY]  Node  cur  =  p.cloneTree();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Node  cur  =  p.cloneTree();  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	Node  cur  =  p.cloneTree();	  Node    cur    =    p.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
95	[BUG]  [BUGGY]  for(Node  cur  =  n.getNext();  cur!=  null;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  n.getNext();  cur!=  null;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  n.getNext();  cur!=  null;	  for(Node    cur    =    p.getNext();    cur!=    null;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
96	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  p.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Predicate  <  Node>  cur  =  p.removeFirstChild();  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	Predicate  <  Node>  cur  =  p.removeFirstChild();	  Predicate    <    Node>    cur    =    predicate.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
97	[BUG]  [BUGGY]  For(Node  cur  =  p.getNext().getFirstChild();  cur!=  null;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  For(Node  cur  =  p.getNext().getFirstChild();  cur!=  null;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	For(Node  cur  =  p.getNext().getFirstChild();  cur!=  null;	  for(Node    cur    =    p.getNext().getLastChild();    cur!=    null;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
98	[BUG]  [BUGGY]  for(Node  cur  =  p.getFirstChild();  cur!=  n,  predicate);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getFirstChild();  cur!=  n,  predicate);  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getFirstChild();  cur!=  n,  predicate);	  for(Node    cur    =    p.getFirstChild();    cur!=    n;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
99	[BUG]  [BUGGY]  for(Node  cur  =  n.getNext().removeFirstChild();  cur!=  null;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  n.getNext().removeFirstChild();  cur!=  null;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  n.getNext().removeFirstChild();  cur!=  null;	  for(Node    cur    =    p.getNext().removeFirstChild();    cur!=    null;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
100	[BUG]  [BUGGY]  for(Node  cur  =  p.getFirstChild();  cur!=  p;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getFirstChild();  cur!=  p;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getFirstChild();  cur!=  p;	  for(Node    cur    =    n.getNext().getFirstChild();    cur!=    p;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
101	[BUG]  [BUGGY]  for(Node  cur  =  n.getNext().getFirstChild();  cur  ==  p;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  n.getNext().getFirstChild();  cur  ==  p;  [BUGGY]      cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  n.getNext().getFirstChild();  cur  ==  p;	  for(Node    cur    =    n.getNext().getFirstChild();    cur!=    p;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
