bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(Node  cur  =  p.getNext().getLastChild();  cur!=  null;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  for(Node  cur  =  p.getNext().getLastChild();  cur!=  null;  [BUGGY]    cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getNext().getLastChild();  cur!=  null;	  for(Node    cur    =    p.getNext().getFirstChild();    cur!=    null;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
2	[BUG]  [BUGGY]  for(Node  cur  =  p.getFirstChild();  cur!=  null;  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  for(Node  cur  =  p.getFirstChild();  cur!=  null;  [BUGGY]    cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getFirstChild();  cur!=  null;	  for(Node    cur    =    p.getNext().getFirstChild();    cur!=    null;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
3	[BUG]  [BUGGY]  for(Node  cur  =  p.getNext().getFirstChild();  cur  ==  null;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  for(Node  cur  =  p.getNext().getFirstChild();  cur  ==  null;  [BUGGY]    cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getNext().getFirstChild();  cur  ==  null;	  for(Node    cur    =    p.getNext().getFirstChild();    cur!=    null;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
4	[BUG]  [BUGGY]  for(Node  cur  =  p.getNext();  cur!=  null;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  for(Node  cur  =  p.getNext();  cur!=  null;  [BUGGY]    cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getNext();  cur!=  null;	  for(Node    cur    =    p.getNext().getFirstChild();    cur!=    null;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
5	[BUG]  [BUGGY]  for(Node  cur  =  p.getNext().getFirstChild();  cur  >=  null;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  for(Node  cur  =  p.getNext().getFirstChild();  cur  >=  null;  [BUGGY]    cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getNext().getFirstChild();  cur  >=  null;	  for(Node    cur    =    p.getNext().getFirstChild();    cur!=    null;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
6	[BUG]  [BUGGY]  for  (Node  cur  =  p.getNext().getLastChild();  cur!=  n;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  for  (Node  cur  =  p.getNext().getLastChild();  cur!=  n;  [BUGGY]    cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for  (Node  cur  =  p.getNext().getLastChild();  cur!=  n;	  for    (Node    cur    =    p.getNext().getFirstChild();    cur!=    n;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
7	[BUG]  [BUGGY]  for(Node  cur  =  p.getNext().getFirstChild();  cur!=  expressionRoot;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  for(Node  cur  =  p.getNext().getFirstChild();  cur!=  expressionRoot;  [BUGGY]    cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getNext().getFirstChild();  cur!=  expressionRoot;	  for    (Node    cur    =    p.getNext().getFirstChild();    cur!=    n;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
8	[BUG]  [BUGGY]  Node  cur  =  p.getNext();  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  Node  cur  =  p.getNext();  [BUGGY]    cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	Node  cur  =  p.getNext();	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
9	[BUG]  [BUGGY]  Node  cur  =  p.getLastChild();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  Node  cur  =  p.getLastChild();  [BUGGY]    cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	Node  cur  =  p.getLastChild();	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
10	[BUG]  [BUGGY]  Node  cur  =  p.getFirstChild();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  Node  cur  =  p.getFirstChild();  [BUGGY]    cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	Node  cur  =  p.getFirstChild();	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
11	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  p.getNext();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  Predicate  <  Node>  cur  =  p.getNext();  [BUGGY]    cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	Predicate  <  Node>  cur  =  p.getNext();	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
12	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  p.getFirstChild();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  Predicate  <  Node>  cur  =  p.getFirstChild();  [BUGGY]    cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	Predicate  <  Node>  cur  =  p.getFirstChild();	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
13	[BUG]  [BUGGY]  Node  cur  =  p.getParent();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  Node  cur  =  p.getParent();  [BUGGY]    cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	Node  cur  =  p.getParent();	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
14	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  predicate.getNext();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  Predicate  <  Node>  cur  =  predicate.getNext();  [BUGGY]    cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	Predicate  <  Node>  cur  =  predicate.getNext();	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
15	[BUG]  [BUGGY]  for(Node  cur  =  n.getNext().getFirstChild();  cur!=  p;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  for(Node  cur  =  n.getNext().getFirstChild();  cur!=  p;  [BUGGY]    cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  n.getNext().getFirstChild();  cur!=  p;	  for(Node    cur    =    n.getParent().getFirstChild();    cur!=    p;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
16	[BUG]  [BUGGY]  for(Node  cur  =  p.getParent().getNext();  cur!=  null;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  for(Node  cur  =  p.getParent().getNext();  cur!=  null;  [BUGGY]    cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getParent().getNext();  cur!=  null;	  for    (Node    cur    =    p.getParent().getFirstChild();    cur!=    null;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
17	[BUG]  [BUGGY]  for  (Node  cur  =  p.getNext().getLastChild();  cur!=  p;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  for  (Node  cur  =  p.getNext().getLastChild();  cur!=  p;  [BUGGY]    cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for  (Node  cur  =  p.getNext().getLastChild();  cur!=  p;	  for    (Node    cur    =    p.getNext().getFirstChild();    cur!=    p;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
18	[BUG]  [BUGGY]  for(Node  cur  =  p.getParent().getLastChild();  cur!=  n;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  for(Node  cur  =  p.getParent().getLastChild();  cur!=  n;  [BUGGY]    cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getParent().getLastChild();  cur!=  n;	  for(Node    cur    =    p.getParent().getFirstChild();    cur!=    n;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
19	[BUG]  [BUGGY]  for(Node  cur  =  p.getParent().getNext();  cur!=  n;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  for(Node  cur  =  p.getParent().getNext();  cur!=  n;  [BUGGY]    cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getParent().getNext();  cur!=  n;	  for(Node    cur    =    p.getParent().getFirstChild();    cur!=    n;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
20	[BUG]  [BUGGY]  for(Node  cur  =  p.getParent().getFirstChild();  cur!=  expressionRoot;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  for(Node  cur  =  p.getParent().getFirstChild();  cur!=  expressionRoot;  [BUGGY]    cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getParent().getFirstChild();  cur!=  expressionRoot;	  for(Node    cur    =    p.getParent().getFirstChild();    cur!=    n;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
21	[BUG]  [BUGGY]  for(Node  cur  =  p.getFirstChild();  cur!=  n;  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  for(Node  cur  =  p.getFirstChild();  cur!=  n;  [BUGGY]    cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getFirstChild();  cur!=  n;	  for(Node    cur    =    p.getParent().getFirstChild();    cur!=    n;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
22	[BUG]  [BUGGY]  for(Node  cur  =  n.getParent().getFirstChild();  cur!=  null;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  for(Node  cur  =  n.getParent().getFirstChild();  cur!=  null;  [BUGGY]    cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  n.getParent().getFirstChild();  cur!=  null;	  for(Node    cur    =    p.getParent().getFirstChild();    cur!=    n;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
23	[BUG]  [BUGGY]  for  (Node  cur  =  p.getNext().getFirstChild();  cur!=  0;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  for  (Node  cur  =  p.getNext().getFirstChild();  cur!=  0;  [BUGGY]    cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for  (Node  cur  =  p.getNext().getFirstChild();  cur!=  0;	  for    (Node    cur    =    p.getNext().getFirstChild();    cur!=    p;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
24	[BUG]  [BUGGY]  for  (Node  cur  =  n.getNext().getFirstChild();  cur!=  null;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  for  (Node  cur  =  n.getNext().getFirstChild();  cur!=  null;  [BUGGY]    cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for  (Node  cur  =  n.getNext().getFirstChild();  cur!=  null;	  for    (Node    cur    =    p.getNext().getFirstChild();    cur!=    n;    	non-compiled	[CE]  ';'  expected	6	None	replace
25	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  p.getParent();  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  Predicate  <  Node>  cur  =  p.getParent();  [BUGGY]    cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	Predicate  <  Node>  cur  =  p.getParent();	      	non-compiled	[CE]  ';'  expected	5	None	replace
26	[BUG]  [BUGGY]  for(Node  cur  =  n.getParent().getFirstChild();  cur!=  expressionRoot;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  for(Node  cur  =  n.getParent().getFirstChild();  cur!=  expressionRoot;  [BUGGY]    cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  n.getParent().getFirstChild();  cur!=  expressionRoot;	  for(Node    cur    =    n.getParent().getFirstChild();    cur!=    p;    	non-compiled	[CE]  ';'  expected	7	None	replace
27	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  predicate.getFirstChild();  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  Predicate  <  Node>  cur  =  predicate.getFirstChild();  [BUGGY]    cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	Predicate  <  Node>  cur  =  predicate.getFirstChild();	      	non-compiled	[CE]  ';'  expected	5	None	replace
28	[BUG]  [BUGGY]  for(Node  cur  =  p.getNext().removeFirstChild();  cur!=  null;  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {    [BUGGY]  for(Node  cur  =  p.getNext().removeFirstChild();  cur!=  null;  [BUGGY]    cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	483	483	3	replace	for(Node  cur  =  p.getNext().removeFirstChild();  cur!=  null;	  for(Node    cur    =    p.getNext().getFirstChild();    cur!=    null;    	non-compiled	[CE]  ';'  expected	4	None	replace
