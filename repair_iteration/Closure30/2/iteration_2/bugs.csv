bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  cur.getType()!=  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  &&  cur.getType()!=  Token.FUNCTION)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  cur.getType()!=  Token.FUNCTION)  {	  cur    =    cur.getNext()    ||    cur.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
2	[BUG]  [BUGGY]  cur  =  cur.getParent()  ||  cur.getType()!=  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getParent()  ||  cur.getType()!=  Token.FUNCTION)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  ||  cur.getType()!=  Token.FUNCTION)  {	  cur    =    cur.getNext()    ||    cur.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
3	[BUG]  [BUGGY]  cur  =  cur.getFirstChild()  ||  cur.getType()!=  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getFirstChild()  ||  cur.getType()!=  Token.FUNCTION)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getFirstChild()  ||  cur.getType()!=  Token.FUNCTION)  {	  cur    =    cur.getNext()    ||    cur.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
4	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  cur.getType()  >=  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  &&  cur.getType()  >=  Token.FUNCTION)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  cur.getType()  >=  Token.FUNCTION)  {	  cur    =    cur.getNext()    ||    cur.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
5	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  ||  cur.getType()!=  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getLastChild()  ||  cur.getType()!=  Token.FUNCTION)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  ||  cur.getType()!=  Token.FUNCTION)  {	  cur    =    cur.getNext()    ||    cur.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
6	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  cur.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  &&  cur.getType()  ==  Token.NAME)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  cur.getType()  ==  Token.NAME)  {	  cur    =    cur.getNext()    ||    cur.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	7	None	replace
7	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  cur.getType()!=  Token.NAME)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  ||  cur.getType()!=  Token.NAME)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  cur.getType()!=  Token.NAME)  {	  cur    =    cur.getNext()    ||    cur.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	7	None	replace
8	[BUG]  [BUGGY]  cur  =  cur.getParent()  ||  cur.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getParent()  ||  cur.getType()  ==  Token.NAME)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  ||  cur.getType()  ==  Token.NAME)  {	  cur    =    cur.getNext()    ||    cur.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	7	None	replace
9	[BUG]  [BUGGY]  cur  =  cur.getFirstChild()  ||  cur.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getFirstChild()  ||  cur.getType()  ==  Token.NAME)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getFirstChild()  ||  cur.getType()  ==  Token.NAME)  {	  cur    =    cur.getNext()    ||    cur.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	7	None	replace
10	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  ||  cur.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getLastChild()  ||  cur.getType()  ==  Token.NAME)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  ||  cur.getType()  ==  Token.NAME)  {	  cur    =    cur.getNext()    ||    cur.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	7	None	replace
11	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  cur.getType()!=  Token.NAME)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  &&  cur.getType()!=  Token.NAME)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  cur.getType()!=  Token.NAME)  {	  cur    =    cur.getNext()    ||    cur.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	7	None	replace
12	[BUG]  [BUGGY]  cur  =  cur.getParent())  {  p  =  cur.getParent())  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getParent())  {  p  =  cur.getParent())  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur    =    cur.getParent())    {    p  =  cur.getParent())  {	  	non-compiled	[CE]  ';'  expected	1	None	add
13	[BUG]  [BUGGY]  cur  =  cur.getParent())  {  Node  cur  =  cur.getParent())  {  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getParent())  {  Node  cur  =  cur.getParent())  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur    =    cur.getParent())    {    Node  cur  =  cur.getParent())  {	  	non-compiled	[CE]  ')'  expected	1	None	add
14	[BUG]  [BUGGY]  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.EXPR_RESULT)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.EXPR_RESULT)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur    =    cur.getParent())    {    if(cur.getType()  ==  Token.EXPR_RESULT)  {  if(predicate.apply(cur))  {  return  true;  }	  	non-compiled	[CE]  ')'  expected	1	None	add
15	[BUG]  [BUGGY]  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur    =    cur.getParent())    {    if(cur.getType()  ==  Token.FUNCTION)  {  if(predicate.apply(cur))  {  return  true;  }	  	non-compiled	[CE]  ')'  expected	1	None	add
16	[BUG]  [BUGGY]  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur    =    cur.getParent())    {    if(cur.getType()  ==  Token.NAME)  {  if(predicate.apply(cur))  {  return  true;  }	  	non-compiled	[CE]  ')'  expected	1	None	add
17	[BUG]  [BUGGY]  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.VAR)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.VAR)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur    =    cur.getParent())    {    if(cur.getType()  ==  Token.VAR)  {  if(predicate.apply(cur))  {  return  true;  }	  	non-compiled	[CE]  ')'  expected	1	None	add
18	[BUG]  [BUGGY]  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur    =    cur.getParent())    {    if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }	  	non-compiled	[CE]  ')'  expected	1	None	add
19	[BUG]  [BUGGY]  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur    =    cur.getParent())    {    if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }	  	non-compiled	[CE]  ')'  expected	1	None	add
20	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  predicate.isLeftOf(cur))  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  ||  predicate.isLeftOf(cur))  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  predicate.isLeftOf(cur))  {	  cur    =    cur.getNext()    &&    predicate.isLeftOf(cur))    {    	non-compiled	[CE]  ')'  expected	5	None	replace
21	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(p))  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(p))  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.isLeftOf(p))  {	  cur    =    cur.getNext()    &&    predicate.isLeftOf(cur))    {    	non-compiled	[CE]  ')'  expected	5	None	replace
22	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(defNode))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(defNode))  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.isLeftOf(defNode))  {	  cur    =    cur.getNext()    &&    predicate.isLeftOf(cur))    {    	non-compiled	[CE]  ')'  expected	5	None	replace
23	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(n))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(n))  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.isLeftOf(n))  {	  cur    =    cur.getNext()    &&    predicate.isLeftOf(cur))    {    	non-compiled	[CE]  ')'  expected	5	None	replace
24	[BUG]  [BUGGY]  cur  =  cur.getParent()  &&  predicate.isLeftOf(cur))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getParent()  &&  predicate.isLeftOf(cur))  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  &&  predicate.isLeftOf(cur))  {	  cur    =    cur.getNext()    &&    predicate.isLeftOf(cur))    {    	non-compiled	[CE]  ')'  expected	5	None	replace
25	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(def))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(def))  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.isLeftOf(def))  {	  cur    =    cur.getNext()    &&    predicate.isLeftOf(cur))    {    	non-compiled	[CE]  ')'  expected	5	None	replace
26	[BUG]  [BUGGY]  cur  =  cur.getFirstChild())  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getFirstChild())  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getFirstChild())  {	  cur    =    cur.getParent())    {    	non-compiled	[CE]  ')'  expected	2	None	replace
27	[BUG]  [BUGGY]  cur  =  cur.getPrevious())  {  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getPrevious())  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getPrevious())  {	  cur    =    cur.getParent())    {    	non-compiled	[CE]  ')'  expected	2	None	replace
28	[BUG]  [BUGGY]  cur  =  cur.getString())  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getString())  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getString())  {	  cur    =    cur.getParent())    {    	non-compiled	[CE]  ')'  expected	2	None	replace
29	[BUG]  [BUGGY]  predicate  =  cur.getNext()  &&  predicate.equals(cur.getString()))  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  predicate  =  cur.getNext()  &&  predicate.equals(cur.getString()))  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	predicate  =  cur.getNext()  &&  predicate.equals(cur.getString()))  {	  cur    =    cur.getNext()    &&    predicate.equals(cur.getString()))    {    	non-compiled	[CE]  ')'  expected	3	None	replace
30	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.equals(predicate.getString()))  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  &&  predicate.equals(predicate.getString()))  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.equals(predicate.getString()))  {	  cur    =    cur.getNext()    &&    predicate.equals(cur.getString()))    {    	non-compiled	[CE]  ')'  expected	3	None	replace
31	[BUG]  [BUGGY]  p  =  cur.getNext()  &&  predicate.equals(cur.getString()))  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  p  =  cur.getNext()  &&  predicate.equals(cur.getString()))  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getNext()  &&  predicate.equals(cur.getString()))  {	  cur    =    cur.getNext()    &&    predicate.equals(cur.getString()))    {    	non-compiled	[CE]  ')'  expected	3	None	replace
32	[BUG]  [BUGGY]  Predicate  cur  =  cur.getNext()  &&  predicate.equals(cur.getString()))  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  Predicate  cur  =  cur.getNext()  &&  predicate.equals(cur.getString()))  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  cur  =  cur.getNext()  &&  predicate.equals(cur.getString()))  {	  cur    =    cur.getNext()    &&    predicate.equals(cur.getString()))    {    	non-compiled	[CE]  ')'  expected	3	None	replace
33	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.equals(p.getString()))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  &&  predicate.equals(p.getString()))  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.equals(p.getString()))  {	  cur    =    cur.getNext()    &&    predicate.equals(cur.getString()))    {    	non-compiled	[CE]  ')'  expected	3	None	replace
34	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  predicate.hasChildren())  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  ||  predicate.hasChildren())  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  predicate.hasChildren())  {	  cur    =    cur.getNext()    &&    predicate.hasChildren())    {    	non-compiled	[CE]  ')'  expected	6	None	replace
35	[BUG]  [BUGGY]  cur  =  cur.getParent()  &&  predicate.hasChildren())  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getParent()  &&  predicate.hasChildren())  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  &&  predicate.hasChildren())  {	  cur    =    cur.getNext()    &&    predicate.hasChildren())    {    	non-compiled	[CE]  ')'  expected	6	None	replace
36	[BUG]  [BUGGY]  cur  =  predicate.getNext()  &&  cur.hasChildren())  {  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  predicate.getNext()  &&  cur.hasChildren())  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  predicate.getNext()  &&  cur.hasChildren())  {	  cur    =    cur.getNext()    &&    predicate.hasChildren())    {    	non-compiled	[CE]  ')'  expected	6	None	replace
37	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  cur.getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  &&  cur.getType()  ==  Token.VAR)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  cur.getType()  ==  Token.VAR)  {	  cur    =    cur.getNext()    ||    cur.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	12	None	replace
38	[BUG]  [BUGGY]  cur  =  cur.getParent()  ||  cur.getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getParent()  ||  cur.getType()  ==  Token.VAR)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  ||  cur.getType()  ==  Token.VAR)  {	  cur    =    cur.getNext()    ||    cur.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	12	None	replace
39	[BUG]  [BUGGY]  cur  =  cur.getFirstChild()  ||  cur.getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getFirstChild()  ||  cur.getType()  ==  Token.VAR)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getFirstChild()  ||  cur.getType()  ==  Token.VAR)  {	  cur    =    cur.getNext()    ||    cur.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	12	None	replace
40	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  ||  cur.getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getLastChild()  ||  cur.getType()  ==  Token.VAR)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  ||  cur.getType()  ==  Token.VAR)  {	  cur    =    cur.getNext()    ||    cur.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	12	None	replace
41	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  cur.getType()!=  Token.VAR)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  &&  cur.getType()!=  Token.VAR)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  cur.getType()!=  Token.VAR)  {	  cur    =    cur.getNext()    ||    cur.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	12	None	replace
42	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  Predicates.  <  SIDE_EFFECT_PREDICATE)  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  ||  Predicates.  <  SIDE_EFFECT_PREDICATE)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  Predicates.  <  SIDE_EFFECT_PREDICATE)  {	  cur    =    cur.getNext()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  ')'  expected	9	None	replace
43	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  CREATE_EFFECT_PREDICATE)  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  CREATE_EFFECT_PREDICATE)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  CREATE_EFFECT_PREDICATE)  {	  cur    =    cur.getNext()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  ')'  expected	9	None	replace
44	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  PREDICATE)  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  PREDICATE)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  PREDICATE)  {	  cur    =    cur.getNext()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  ')'  expected	9	None	replace
45	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  Predicates.  <  SIDE_EFFECT_PREDICATE)  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  Predicates.  <  SIDE_EFFECT_PREDICATE)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  Predicates.  <  SIDE_EFFECT_PREDICATE)  {	  cur    =    cur.getNext()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  ')'  expected	9	None	replace
46	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {	  cur    =    cur.getNext()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  ')'  expected	9	None	replace
47	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.getType()  ==  Token.FUNCTION)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.getType()  ==  Token.FUNCTION)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.getType()  ==  Token.FUNCTION)  {	  cur    =    cur.getNext()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  ')'  expected	9	None	replace
48	[BUG]  [BUGGY]  cur  =  cur.getLastChild(),  predicate)  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getLastChild(),  predicate)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild(),  predicate)  {	  cur    =    cur.getLastChild())    {    	non-compiled	[CE]  ')'  expected	10	None	replace
49	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  &&  predicate.equals(cur.getString()))  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getLastChild()  &&  predicate.equals(cur.getString()))  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  &&  predicate.equals(cur.getString()))  {	  cur    =    cur.getLastChild())    {    	non-compiled	[CE]  ')'  expected	10	None	replace
50	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  ||  cur.getType()  ==  Token.FUNCTION)  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getLastChild()  ||  cur.getType()  ==  Token.FUNCTION)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  ||  cur.getType()  ==  Token.FUNCTION)  {	  cur    =    cur.getLastChild())    {    	non-compiled	[CE]  ')'  expected	10	None	replace
51	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  &&  predicate.isLeftOf(cur))  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getLastChild()  &&  predicate.isLeftOf(cur))  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  &&  predicate.isLeftOf(cur))  {	  cur    =    cur.getLastChild())    {    	non-compiled	[CE]  ')'  expected	10	None	replace
52	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  cur.getType()  ==  Token.FUNCTION)  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  &&  cur.getType()  ==  Token.FUNCTION)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  cur.getType()  ==  Token.FUNCTION)  {	  cur    =    cur.getNext()    ||    cur.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ')'  expected	4	None	replace
53	[BUG]  [BUGGY]  cur  =  p.getNext()  ||  cur.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  p.getNext()  ||  cur.getType()  ==  Token.FUNCTION)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  p.getNext()  ||  cur.getType()  ==  Token.FUNCTION)  {	  cur    =    cur.getNext()    ||    cur.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
54	[BUG]  [BUGGY]  cur  =  cur.getParent()  ||  cur.getType()!=  Token.VAR)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getParent()  ||  cur.getType()!=  Token.VAR)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  ||  cur.getType()!=  Token.VAR)  {	  cur    =    cur.getNext()    ||    cur.getType()!=    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
55	[BUG]  [BUGGY]  cur  =  cur.getFirstChild()  ||  cur.getType()!=  Token.VAR)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getFirstChild()  ||  cur.getType()!=  Token.VAR)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getFirstChild()  ||  cur.getType()!=  Token.VAR)  {	  cur    =    cur.getNext()    ||    cur.getType()!=    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
56	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  ||  cur.getType()!=  Token.VAR)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getLastChild()  ||  cur.getType()!=  Token.VAR)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  ||  cur.getType()!=  Token.VAR)  {	  cur    =    cur.getNext()    ||    cur.getType()!=    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
57	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(cur);  [CE]  cannot  find  symbol  c  [FE]                    AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  NodeUtil.copyCurrentStructure(cur);  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.copyCurrentStructure(cur);	      	non-compiled	[CE]  cannot  find  symbol  c	8	None	replace
58	[BUG]  [BUGGY]  NodeUtil.removeChild(cur);  [CE]  cannot  find  symbol  c  [FE]                      AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  NodeUtil.removeChild(cur);  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.removeChild(cur);	      	non-compiled	[CE]  cannot  find  symbol  c	8	None	replace
59	[BUG]  [BUGGY]  NodeUtil.removeChild(cur,  predicate);  [CE]  cannot  find  symbol  c  [FE]                        AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  NodeUtil.removeChild(cur,  predicate);  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.removeChild(cur,  predicate);	      	non-compiled	[CE]  cannot  find  symbol  c	8	None	replace
60	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  cur.getNext();  [CE]  cannot  find  symbol  c  [FE]                          AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  Predicate  <  Node>  cur  =  cur.getNext();  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  cur.getNext();	      	non-compiled	[CE]  cannot  find  symbol  c	8	None	replace
61	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  cur.getFirstChild();  [CE]  cannot  find  symbol  c  [FE]                            AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  Predicate  <  Node>  cur  =  cur.getFirstChild();  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  cur.getFirstChild();	      	non-compiled	[CE]  cannot  find  symbol  c	8	None	replace
62	[BUG]  [BUGGY]  NodeUtil.checkLeftOf(cur,  expressionRoot,  predicate);  [CE]  cannot  find  symbol  c  [FE]                              AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  NodeUtil.checkLeftOf(cur,  expressionRoot,  predicate);  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.checkLeftOf(cur,  expressionRoot,  predicate);	      	non-compiled	[CE]  cannot  find  symbol  c	8	None	replace
63	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(cur,  predicate);  [CE]  cannot  find  symbol  c  [FE]                                AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  NodeUtil.copyCurrentStructure(cur,  predicate);  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.copyCurrentStructure(cur,  predicate);	      	non-compiled	[CE]  cannot  find  symbol  c	8	None	replace
64	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  cur.getType()  ==  Token.CALL)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  &&  cur.getType()  ==  Token.CALL)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  cur.getType()  ==  Token.CALL)  {	  cur    =    cur.getNext()    ||    cur.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
65	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  cur.getType()!=  Token.CALL)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  ||  cur.getType()!=  Token.CALL)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  cur.getType()!=  Token.CALL)  {	  cur    =    cur.getNext()    ||    cur.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
66	[BUG]  [BUGGY]  cur  =  cur.getParent()  ||  cur.getType()  ==  Token.CALL)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getParent()  ||  cur.getType()  ==  Token.CALL)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  ||  cur.getType()  ==  Token.CALL)  {	  cur    =    cur.getNext()    ||    cur.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
67	[BUG]  [BUGGY]  cur  =  cur.getFirstChild()  ||  cur.getType()  ==  Token.CALL)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getFirstChild()  ||  cur.getType()  ==  Token.CALL)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getFirstChild()  ||  cur.getType()  ==  Token.CALL)  {	  cur    =    cur.getNext()    ||    cur.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
68	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  ||  cur.getType()  ==  Token.CALL)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getLastChild()  ||  cur.getType()  ==  Token.CALL)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  ||  cur.getType()  ==  Token.CALL)  {	  cur    =    cur.getNext()    ||    cur.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
69	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  cur.getType()!=  Token.CALL)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  &&  cur.getType()!=  Token.CALL)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  cur.getType()!=  Token.CALL)  {	  cur    =    cur.getNext()    ||    cur.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
70	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  predicate.getParent();  [CE]  cannot  find  symbol  varName  [FE]                    AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  Predicate  <  Node>  cur  =  predicate.getParent();  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  predicate.getParent();	      	non-compiled	[CE]  cannot  find  symbol  varName	8	None	replace
71	[BUG]  [BUGGY]  NodeUtil.copyCurrentNode(cur,  predicate);  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  NodeUtil.copyCurrentNode(cur,  predicate);  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.copyCurrentNode(cur,  predicate);	      	non-compiled	[CE]  ';'  expected	8	None	replace
72	[BUG]  [BUGGY]  Predicate  predicate  =  cur.getPredicate();  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  Predicate  predicate  =  cur.getPredicate();  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  predicate  =  cur.getPredicate();	      	non-compiled	[CE]  ';'  expected	8	None	replace
73	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  p.getFirstChild();  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  Predicate  <  Node>  cur  =  p.getFirstChild();  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  p.getFirstChild();	      	non-compiled	[CE]  ';'  expected	8	None	replace
74	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicate.equals(predicate.getString()))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  &&  Predicate.equals(predicate.getString()))  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicate.equals(predicate.getString()))  {	  cur    =    cur.getNext()    &&    predicate.equals(cur.getString()))    {    	non-compiled	[CE]  ';'  expected	3	None	replace
75	[BUG]  [BUGGY]  cur  =  predicate.getNext()  &&  cur.equals(cur.getString()))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  predicate.getNext()  &&  cur.equals(cur.getString()))  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  predicate.getNext()  &&  cur.equals(cur.getString()))  {	  cur    =    cur.getNext()    &&    predicate.equals(cur.getString()))    {    	non-compiled	[CE]  ';'  expected	3	None	replace
76	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE)  {  [CE]  >  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getLastChild()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE)  {	  cur    =    cur.getLastChild())    {    	non-compiled	[CE]  >  expected	10	None	replace
77	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  &&  NodeUtil.isExpressionNode(cur))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getLastChild()  &&  NodeUtil.isExpressionNode(cur))  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  &&  NodeUtil.isExpressionNode(cur))  {	  cur    =    cur.getLastChild())    {    	non-compiled	[CE]  ';'  expected	10	None	replace
78	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.equals(predicate))  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  &&  predicate.equals(predicate))  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.equals(predicate))  {	  cur    =    cur.getNext()    &&    predicate.hasChildren())    {    	non-compiled	[CE]  ';'  expected	6	None	replace
79	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(expressionRoot))  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(expressionRoot))  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.isLeftOf(expressionRoot))  {	  cur    =    cur.getNext()    &&    predicate.isLeftOf(cur))    {    	non-compiled	[CE]  ';'  expected	5	None	replace
80	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicate.isLeftOf(predicate))  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  &&  Predicate.isLeftOf(predicate))  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicate.isLeftOf(predicate))  {	  cur    =    cur.getNext()    &&    predicate.isLeftOf(cur))    {    	non-compiled	[CE]  ';'  expected	5	None	replace
81	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(predicate))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(predicate))  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.isLeftOf(predicate))  {	  cur    =    cur.getNext()    &&    predicate.isLeftOf(cur))    {    	non-compiled	[CE]  ';'  expected	5	None	replace
82	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  >  SIDE_EFFECT_PREDICATE)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  >  SIDE_EFFECT_PREDICATE)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  >  SIDE_EFFECT_PREDICATE)  {	  cur    =    cur.getNext()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
83	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  Node>empty)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  Node>empty)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  Node>empty)  {	  cur    =    cur.getNext()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
84	[BUG]  [BUGGY]  cur  =  cur.getParent()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE)  {  [CE]  >  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getParent()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE)  {	  cur    =    cur.getNext()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  >  expected	9	None	replace
85	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  Node>predicates)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  Node>predicates)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  Node>predicates)  {	  cur    =    cur.getNext()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
86	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  Node>emptyCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  Node>emptyCfgNode)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  Node>emptyCfgNode)  {	  cur    =    cur.getNext()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
87	[BUG]  [BUGGY]  cur  =  cur.getPrevious()  ||  cur.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getPrevious()  ||  cur.getType()  ==  Token.VAR)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getPrevious()  ||  cur.getType()  ==  Token.VAR)  {	  cur    =    cur.getNext()    ||    cur.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
88	[BUG]  [BUGGY]  cur  =  cur.getPrevious()  ||  cur.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getPrevious()  ||  cur.getType()  ==  Token.NAME)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getPrevious()  ||  cur.getType()  ==  Token.NAME)  {	  cur    =    cur.getNext()    ||    cur.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	7	None	replace
89	[BUG]  [BUGGY]  cur  =  cur.getParent()  ||  cur.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getParent()  ||  cur.getType()  ==  Token.FUNCTION)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  ||  cur.getType()  ==  Token.FUNCTION)  {	  cur    =    cur.getNext()    ||    cur.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
90	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  cur.getType()  >>  Token.VAR)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  &&  cur.getType()  >>  Token.VAR)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  cur.getType()  >>  Token.VAR)  {	  cur    =    cur.getNext()    ||    cur.getType()!=    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
91	[BUG]  [BUGGY]  cur  =  cur.getParent()  &&  cur.getType()  ==  Token.CALL)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getParent()  &&  cur.getType()  ==  Token.CALL)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  &&  cur.getType()  ==  Token.CALL)  {	  cur    =    cur.getNext()    ||    cur.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
92	[BUG]  [BUGGY]  cur  =  cur.next())  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.next())  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.next())  {	  cur    =    cur.getParent())    {    	non-compiled	[CE]  ';'  expected	2	None	replace
93	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  cur.getType()  >>  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  &&  cur.getType()  >>  Token.FUNCTION)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  cur.getType()  >>  Token.FUNCTION)  {	  cur    =    cur.getNext()    ||    cur.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
94	[BUG]  [BUGGY]  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur    =    cur.getParent())    {    if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {	  	non-compiled	[CE]  ';'  expected	1	None	add
95	[BUG]  [BUGGY]  cur  =  cur.getParent())  {  if(cur!=  null)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getParent())  {  if(cur!=  null)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur    =    cur.getParent())    {    if(cur!=  null)  {  if(predicate.apply(cur))  {  return  true;  }	  	non-compiled	[CE]  ';'  expected	1	None	add
96	[BUG]  [BUGGY]  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur    =    cur.getParent())    {    if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {	  	non-compiled	[CE]  ';'  expected	1	None	add
97	[BUG]  [BUGGY]  cur  =  cur.getParent())  {  Predicate  <  Node>  cur  =  cur.getParent())  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getParent())  {  Predicate  <  Node>  cur  =  cur.getParent())  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur    =    cur.getParent())    {    Predicate  <  Node>  cur  =  cur.getParent())  {	  	non-compiled	[CE]  ';'  expected	1	None	add
98	[BUG]  [BUGGY]  cur  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur    =    cur.getParent())    {    Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {	  	non-compiled	[CE]  ';'  expected	1	None	add
99	[BUG]  [BUGGY]  cur  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  :  predicate.checkLeftOf(cur,  expressionRoot);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  :  predicate.checkLeftOf(cur,  expressionRoot);  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur    =    cur.getParent())    {    Predicate  <  SIDE_EFFECT_PREDICATE  :  predicate.checkLeftOf(cur,  expressionRoot);	  	non-compiled	[CE]  ';'  expected	1	None	add
100	[BUG]  [BUGGY]  cur  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  =  predicate.getParent();  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  =  predicate.getParent();  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur    =    cur.getParent())    {    Predicate  <  SIDE_EFFECT_PREDICATE  =  predicate.getParent();	  	non-compiled	[CE]  ';'  expected	1	None	add
101	[BUG]  [BUGGY]  cur  =  cur.getParent())  {  Predicate  <  Node>  cur  =  predicate.getParent())  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getParent())  {  Predicate  <  Node>  cur  =  predicate.getParent())  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur    =    cur.getParent())    {    Predicate  <  Node>  cur  =  predicate.getParent())  {	  	non-compiled	[CE]  ';'  expected	1	None	add
102	[BUG]  [BUGGY]  cur  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate!=  null  &&  predicate.isLeftOf(cur);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate!=  null  &&  predicate.isLeftOf(cur);  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur    =    cur.getParent())    {    Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate!=  null  &&  predicate.isLeftOf(cur);	  	non-compiled	[CE]  ';'  expected	1	None	add
103	[BUG]  [BUGGY]  cur  =  cur.getNext()  +  predicate.hasChildren())  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  +  predicate.hasChildren())  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  +  predicate.hasChildren())  {	  cur    =    cur.getNext()    &&    predicate.hasChildren())    {    	non-compiled	[CE]  ';'  expected	6	None	replace
104	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  predicate.getFirstChild();  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  Predicate  <  Node>  cur  =  predicate.getFirstChild();  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  predicate.getFirstChild();	      	non-compiled	[CE]  ';'  expected	8	None	replace
105	[BUG]  [BUGGY]  NodeUtil.checkLeftOf(cur,  predicate);  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  NodeUtil.checkLeftOf(cur,  predicate);  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.checkLeftOf(cur,  predicate);	      	non-compiled	[CE]  ';'  expected	8	None	replace
106	[BUG]  [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  =  predicate.getParent();  [CE]  >  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  =  predicate.getParent();  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  SIDE_EFFECT_PREDICATE  =  predicate.getParent();	      	non-compiled	[CE]  >  expected	8	None	replace
107	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  p.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  ||  p.getType()  ==  Token.FUNCTION)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  p.getType()  ==  Token.FUNCTION)  {	  cur    =    cur.getNext()    ||    cur.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
108	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  predicate.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  ||  predicate.getType()  ==  Token.FUNCTION)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  predicate.getType()  ==  Token.FUNCTION)  {	  cur    =    cur.getNext()    ||    cur.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
109	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  LIVE_EFFECT_PREDICATE)  {  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  LIVE_EFFECT_PREDICATE)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  LIVE_EFFECT_PREDICATE)  {	  cur    =    cur.getNext()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  >  expected	9	None	replace
110	[BUG]  [BUGGY]  cur  =  cur.getNext()  +|  cur.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  +|  cur.getType()!=  Token.FUNCTION)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  +|  cur.getType()!=  Token.FUNCTION)  {	  cur    =    cur.getNext()    ||    cur.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
111	[BUG]  [BUGGY]  cur  =  cur.getPrevious()  ||  cur.getType()!=  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getPrevious()  ||  cur.getType()!=  Token.FUNCTION)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getPrevious()  ||  cur.getType()!=  Token.FUNCTION)  {	  cur    =    cur.getNext()    ||    cur.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
112	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  cur.getType()  ==  Token.NAME  &&  name.equals(cur.getString()))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  ||  cur.getType()  ==  Token.NAME  &&  name.equals(cur.getString()))  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  cur.getType()  ==  Token.NAME  &&  name.equals(cur.getString()))  {	  cur    =    cur.getNext()    ||    cur.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	7	None	replace
113	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(cur,  expressionRoot))  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(cur,  expressionRoot))  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.isLeftOf(cur,  expressionRoot))  {	  cur    =    cur.getNext()    &&    predicate.isLeftOf(cur))    {    	non-compiled	[CE]  ';'  expected	5	None	replace
114	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(cur);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(cur);  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.isLeftOf(cur);	  cur    =    cur.getNext()    &&    predicate.isLeftOf(cur))    {    	non-compiled	[CE]  ';'  expected	5	None	replace
115	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(cur));  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(cur));  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.isLeftOf(cur));	  cur    =    cur.getNext()    &&    predicate.isLeftOf(cur))    {    	non-compiled	[CE]  ';'  expected	5	None	replace
116	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  predicate.equals(cur.getString()))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  ||  predicate.equals(cur.getString()))  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  predicate.equals(cur.getString()))  {	  cur    =    cur.getNext()    &&    predicate.equals(cur.getString()))    {    	non-compiled	[CE]  ';'  expected	3	None	replace
117	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  &  SIDE_EFFECT_PREDICATE)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getLastChild()  &  SIDE_EFFECT_PREDICATE)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  &  SIDE_EFFECT_PREDICATE)  {	  cur    =    cur.getLastChild())    {    	non-compiled	[CE]  ';'  expected	10	None	replace
118	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  &  SIDE_EFFECT_PREDICATE);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getLastChild()  &  SIDE_EFFECT_PREDICATE);  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  &  SIDE_EFFECT_PREDICATE);	  cur    =    cur.getLastChild())    {    	non-compiled	[CE]  ';'  expected	10	None	replace
119	[BUG]  [BUGGY]  cur  =  cur.getPrevious()  ||  cur.getType()  ==  Token.CALL)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getPrevious()  ||  cur.getType()  ==  Token.CALL)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getPrevious()  ||  cur.getType()  ==  Token.CALL)  {	  cur    =    cur.getNext()    ||    cur.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
120	[BUG]  [BUGGY]  cur  =  cur.getNext()  +|  cur.getType()  ==  Token.CALL)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  +|  cur.getType()  ==  Token.CALL)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  +|  cur.getType()  ==  Token.CALL)  {	  cur    =    cur.getNext()    ||    cur.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
121	[BUG]  [BUGGY]  cur  =  cur.removeFirstChild())  {  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.removeFirstChild())  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.removeFirstChild())  {	  cur    =    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
122	[BUG]  [BUGGY]  cur  =  cur.getNext()  +  1  ||  cur.getType()!=  Token.VAR)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  +  1  ||  cur.getType()!=  Token.VAR)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  +  1  ||  cur.getType()!=  Token.VAR)  {	  cur    =    cur.getNext()    ||    cur.getType()!=    Token.VAR)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
123	[BUG]  [BUGGY]  cur  =  cur.getNext()  +|  cur.getType()!=  Token.VAR)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;    [BUGGY]  cur  =  cur.getNext()  +|  cur.getType()!=  Token.VAR)  {  [BUGGY]    if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  +|  cur.getType()!=  Token.VAR)  {	  cur    =    cur.getNext()    ||    cur.getType()!=    Token.VAR)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
