bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Predicate  cur  =  cur.getNext()  ||  predicate.equals(cur.getString()))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  cur  =  cur.getNext()  ||  predicate.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  cur  =  cur.getNext()  ||  predicate.equals(cur.getString()))  {	  Predicate    cur    =    cur.getNext()    &&    predicate.equals(cur.getString()))    {    	non-compiled	[CE]  ')'  expected	32	None	replace
2	[BUG]  [BUGGY]  Predicate  cur  =  cur.getParent()  &&  predicate.equals(cur.getString()))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  cur  =  cur.getParent()  &&  predicate.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  cur  =  cur.getParent()  &&  predicate.equals(cur.getString()))  {	  Predicate    cur    =    cur.getNext()    &&    predicate.equals(cur.getString()))    {    	non-compiled	[CE]  ')'  expected	32	None	replace
3	[BUG]  [BUGGY]  Predicate  cur  =  cur.getNext()  &&  predicate.equals(predicate.getString()))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  cur  =  cur.getNext()  &&  predicate.equals(predicate.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  cur  =  cur.getNext()  &&  predicate.equals(predicate.getString()))  {	  Predicate    cur    =    cur.getNext()    &&    predicate.equals(cur.getString()))    {    	non-compiled	[CE]  ')'  expected	32	None	replace
4	[BUG]  [BUGGY]  Predicate  cur  =  predicate.getNext()  &&  predicate.equals(cur.getString()))  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  cur  =  predicate.getNext()  &&  predicate.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  cur  =  predicate.getNext()  &&  predicate.equals(cur.getString()))  {	  Predicate    cur    =    cur.getNext()    &&    predicate.equals(cur.getString()))    {    	non-compiled	[CE]  ')'  expected	32	None	replace
5	[BUG]  [BUGGY]  Predicate  cur  =  cur.getNext()  &&  predicate.equals(p.getString()))  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  cur  =  cur.getNext()  &&  predicate.equals(p.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  cur  =  cur.getNext()  &&  predicate.equals(p.getString()))  {	  Predicate    cur    =    cur.getNext()    &&    predicate.equals(cur.getString()))    {    	non-compiled	[CE]  ')'  expected	32	None	replace
6	[BUG]  [BUGGY]  Predicate  cur  =  cur.getNext()  &&  predicate.equals(cur.getString())||  predicate.equals(cur.getString()))  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  cur  =  cur.getNext()  &&  predicate.equals(cur.getString())||  predicate.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  cur  =  cur.getNext()  &&  predicate.equals(cur.getString())||  predicate.equals(cur.getString()))  {	  Predicate    cur    =    cur.getNext()    &&    predicate.equals(cur.getString()))    {    	non-compiled	[CE]  ')'  expected	32	None	replace
7	[BUG]  [BUGGY]  cur  =  cur.getNext()  +|  cur.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  +|  cur.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  +|  cur.getType()  ==  Token.FUNCTION)  {	  cur    =    cur.getNext()    +|    cur.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	110	None	replace
8	[BUG]  [BUGGY]  cur  =  cur.getNext()  /|  cur.getType()!=  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  /|  cur.getType()!=  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  /|  cur.getType()!=  Token.FUNCTION)  {	  cur    =    cur.getNext()    +|    cur.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	110	None	replace
9	[BUG]  [BUGGY]  cur  =  cur.getParent()  +|  cur.getType()!=  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  +|  cur.getType()!=  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  +|  cur.getType()!=  Token.FUNCTION)  {	  cur    =    cur.getNext()    +|    cur.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	110	None	replace
10	[BUG]  [BUGGY]  cur  =  cur.getFirstChild()  &&  cur.getType()  ==  Token.CALL)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getFirstChild()  &&  cur.getType()  ==  Token.CALL)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getFirstChild()  &&  cur.getType()  ==  Token.CALL)  {	  cur    =    cur.getNext()    &&    cur.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
11	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  &&  cur.getType()  ==  Token.CALL)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  &&  cur.getType()  ==  Token.CALL)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  &&  cur.getType()  ==  Token.CALL)  {	  cur    =    cur.getNext()    &&    cur.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
12	[BUG]  [BUGGY]  cur  =  cur.getParent()  &&  cur.getType()  ==  Token.VAR)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  &&  cur.getType()  ==  Token.VAR)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  &&  cur.getType()  ==  Token.VAR)  {	  cur    =    cur.getNext()    &&    cur.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
13	[BUG]  [BUGGY]  cur  =  cur.getFirstChild()  &&  cur.getType()  ==  Token.VAR)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getFirstChild()  &&  cur.getType()  ==  Token.VAR)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getFirstChild()  &&  cur.getType()  ==  Token.VAR)  {	  cur    =    cur.getNext()    &&    cur.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
14	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  &&  cur.getType()  ==  Token.VAR)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  &&  cur.getType()  ==  Token.VAR)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  &&  cur.getType()  ==  Token.VAR)  {	  cur    =    cur.getNext()    &&    cur.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
15	[BUG]  [BUGGY]  cur  =  cur.getNext()  +|  cur.getType()!=  Token.CALL)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  +|  cur.getType()!=  Token.CALL)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  +|  cur.getType()!=  Token.CALL)  {	  cur    =    cur.getNext()    +|    cur.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  <identifier>  expected	120	None	replace
16	[BUG]  [BUGGY]  cur  =  cur.getParent()  +|  cur.getType()  ==  Token.CALL)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  +|  cur.getType()  ==  Token.CALL)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  +|  cur.getType()  ==  Token.CALL)  {	  cur    =    cur.getNext()    +|    cur.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  <identifier>  expected	120	None	replace
17	[BUG]  [BUGGY]  cur  =  cur.getNext()  /|  cur.getType()  ==  Token.CALL)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  /|  cur.getType()  ==  Token.CALL)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  /|  cur.getType()  ==  Token.CALL)  {	  cur    =    cur.getNext()    +|    cur.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  <identifier>  expected	120	None	replace
18	[BUG]  [BUGGY]  cur  =  cur.getNext(),  cur.getType()  ==  Token.CALL)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext(),  cur.getType()  ==  Token.CALL)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext(),  cur.getType()  ==  Token.CALL)  {	  cur    =    cur.getNext()    +|    cur.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  <identifier>  expected	120	None	replace
19	[BUG]  [BUGGY]  cur  =  cur.getParent()  ||  Predicates.  <  SIDE_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  ||  Predicates.  <  SIDE_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  ||  Predicates.  <  SIDE_EFFECT_PREDICATE)  {	  cur    =    cur.getNext()    ||    Predicates.    <    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
20	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  Predicates.  <  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  Predicates.  <  0)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  Predicates.  <  0)  {	  cur    =    cur.getNext()    ||    Predicates.    <    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
21	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  Predicates.  <?>)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  Predicates.  <?>)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  Predicates.  <?>)  {	  cur    =    cur.getNext()    ||    Predicates.    <    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
22	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.getType()  ==  Token.FUNCTION)  {	  cur    =    cur.getNext()    ||    Predicates.    <    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
23	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  ||  cur.getType()!=  Token.CALL)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  ||  cur.getType()!=  Token.CALL)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  ||  cur.getType()!=  Token.CALL)  {	  cur    =    cur.getLastChild()    ||    cur.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  <identifier>  expected	68	None	replace
24	[BUG]  [BUGGY]  cur  =  cur.getParent()  &&  cur.getType()!=  Token.NAME)  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  &&  cur.getType()!=  Token.NAME)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  &&  cur.getType()!=  Token.NAME)  {	  cur    =    cur.getNext()    &&    cur.getType()!=    Token.NAME)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
25	[BUG]  [BUGGY]  cur  =  cur.getFirstChild()  &&  cur.getType()!=  Token.NAME)  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getFirstChild()  &&  cur.getType()!=  Token.NAME)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getFirstChild()  &&  cur.getType()!=  Token.NAME)  {	  cur    =    cur.getNext()    &&    cur.getType()!=    Token.NAME)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
26	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  &&  cur.getType()!=  Token.NAME)  {  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  &&  cur.getType()!=  Token.NAME)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  &&  cur.getType()!=  Token.NAME)  {	  cur    =    cur.getNext()    &&    cur.getType()!=    Token.NAME)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
27	[BUG]  [BUGGY]  NodeUtil.checkLeftOf(cur,  expressionRoot);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.checkLeftOf(cur,  expressionRoot);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.checkLeftOf(cur,  expressionRoot);	  NodeUtil.checkLeftOf(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	105	None	replace
28	[BUG]  [BUGGY]  NodeUtil.checkState(cur.getType()  ==  Token.NAME);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.checkState(cur.getType()  ==  Token.NAME);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.checkState(cur.getType()  ==  Token.NAME);	  NodeUtil.checkLeftOf(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	105	None	replace
29	[BUG]  [BUGGY]  NodeUtil.checkState(cur.getType()  ==  Token.EXPR_RESULT);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.checkState(cur.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.checkState(cur.getType()  ==  Token.EXPR_RESULT);	  NodeUtil.checkLeftOf(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	105	None	replace
30	[BUG]  [BUGGY]  NodeUtil.checkState(cur.getType()  ==  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.checkState(cur.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.checkState(cur.getType()  ==  Token.FUNCTION);	  NodeUtil.checkLeftOf(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	105	None	replace
31	[BUG]  [BUGGY]  NodeUtil.checkFunction(cur,  expressionRoot);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.checkFunction(cur,  expressionRoot);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.checkFunction(cur,  expressionRoot);	  NodeUtil.checkLeftOf(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	105	None	replace
32	[BUG]  [BUGGY]  NodeUtil.checkState(cur.getType()  ==  Token.CALL);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.checkState(cur.getType()  ==  Token.CALL);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.checkState(cur.getType()  ==  Token.CALL);	  NodeUtil.checkLeftOf(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	105	None	replace
33	[BUG]  [BUGGY]  p  =  cur.getParent())  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getParent())  {	  cur    =    cur.getParent())    {    p    =    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
34	[BUG]  [BUGGY]  p  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getNext())  {	  cur    =    cur.getParent())    {    p    =    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
35	[BUG]  [BUGGY]  p  =  cur.getName())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getName())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getName())  {	  cur    =    cur.getParent())    {    p    =    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
36	[BUG]  [BUGGY]  p  =  cur.getPrevious())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getPrevious())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getPrevious())  {	  cur    =    cur.getParent())    {    p    =    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
37	[BUG]  [BUGGY]  P  =  cur.getParent())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  P  =  cur.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	P  =  cur.getParent())  {	  cur    =    cur.getParent())    {    p    =    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
38	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.CALL)  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur.getType()  ==  Token.CALL)  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur.getType()  ==  Token.CALL)  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.FUNCTION)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
39	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.EXPR_RESULT)  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur.getType()  ==  Token.EXPR_RESULT)  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur.getType()  ==  Token.EXPR_RESULT)  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.FUNCTION)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
40	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.FUNCTION)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
41	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION)  {  if(cur.getParent()!=  null)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur.getType()  ==  Token.FUNCTION)  {  if(cur.getParent()!=  null)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur.getType()  ==  Token.FUNCTION)  {  if(cur.getParent()!=  null)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.FUNCTION)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
42	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION)  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur.getType()  ==  Token.FUNCTION)  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur.getType()  ==  Token.FUNCTION)  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.FUNCTION)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
43	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION)  {  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur.getType()  ==  Token.FUNCTION)  {  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur.getType()  ==  Token.FUNCTION)  {  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.FUNCTION)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
44	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.CALL)  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getNext())  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur.getType()  ==  Token.CALL)  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur.getType()  ==  Token.CALL)  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getNext())  {	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.FUNCTION)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
45	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  predicate.isLeftOf(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  predicate.isLeftOf(expressionRoot))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  predicate.isLeftOf(expressionRoot))  {	  cur    =    cur.getNext()    &&    predicate.isLeftOf(expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	79	None	replace
46	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(defNode,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(defNode,  expressionRoot))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.isLeftOf(defNode,  expressionRoot))  {	  cur    =    cur.getNext()    &&    predicate.isLeftOf(expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	79	None	replace
47	[BUG]  [BUGGY]  cur  =  cur.getParent()  &&  predicate.isLeftOf(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  &&  predicate.isLeftOf(expressionRoot))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  &&  predicate.isLeftOf(expressionRoot))  {	  cur    =    cur.getNext()    &&    predicate.isLeftOf(expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	79	None	replace
48	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  Predicates.  <  Node>predicates)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  Predicates.  <  Node>predicates)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  Predicates.  <  Node>predicates)  {	  cur    =    cur.getNext()    &&    Predicates.    <    Node>predicates)    {    	non-compiled	[CE]  <identifier>  expected	85	None	replace
49	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  Node>predicate)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  Node>predicate)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  Node>predicate)  {	  cur    =    cur.getNext()    &&    Predicates.    <    Node>predicates)    {    	non-compiled	[CE]  <identifier>  expected	85	None	replace
50	[BUG]  [BUGGY]  cur  =  cur.getParent()  &&  Predicates.  <  Node>predicates)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  &&  Predicates.  <  Node>predicates)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  &&  Predicates.  <  Node>predicates)  {	  cur    =    cur.getNext()    &&    Predicates.    <    Node>predicates)    {    	non-compiled	[CE]  <identifier>  expected	85	None	replace
51	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  Node>predicates,  predicate)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  Node>predicates,  predicate)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  Node>predicates,  predicate)  {	  cur    =    cur.getNext()    &&    Predicates.    <    Node>predicates)    {    	non-compiled	[CE]  <identifier>  expected	85	None	replace
52	[BUG]  [BUGGY]  cur  =  predicate.getNext()  &&  Predicates.  <  Node>predicates)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  predicate.getNext()  &&  Predicates.  <  Node>predicates)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  predicate.getNext()  &&  Predicates.  <  Node>predicates)  {	  cur    =    cur.getNext()    &&    Predicates.    <    Node>predicates)    {    	non-compiled	[CE]  <identifier>  expected	85	None	replace
53	[BUG]  [BUGGY]  cur  =  cur.getParent()  ||  predicate.hasChildren())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  ||  predicate.hasChildren())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  ||  predicate.hasChildren())  {	  cur    =    cur.getNext()    ||    predicate.hasChildren())    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
54	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  p.hasChildren())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  p.hasChildren())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  p.hasChildren())  {	  cur    =    cur.getNext()    ||    predicate.hasChildren())    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
55	[BUG]  [BUGGY]  cur  =  predicate.getNext()  ||  cur.hasChildren())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  predicate.getNext()  ||  cur.hasChildren())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  predicate.getNext()  ||  cur.hasChildren())  {	  cur    =    cur.getNext()    ||    predicate.hasChildren())    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
56	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicate.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.getType()  ==  Token.FUNCTION)  {	  cur    =    cur.getNext()    ||    predicate.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	108	None	replace
57	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  predicate.getType()!=  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  predicate.getType()!=  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  predicate.getType()!=  Token.FUNCTION)  {	  cur    =    cur.getNext()    ||    predicate.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	108	None	replace
58	[BUG]  [BUGGY]  cur  =  cur.getParent()  ||  predicate.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  ||  predicate.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  ||  predicate.getType()  ==  Token.FUNCTION)  {	  cur    =    cur.getNext()    ||    predicate.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	108	None	replace
59	[BUG]  [BUGGY]  cur  =  cur.getFirstChild()  ||  predicate.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getFirstChild()  ||  predicate.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getFirstChild()  ||  predicate.getType()  ==  Token.FUNCTION)  {	  cur    =    cur.getNext()    ||    predicate.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	108	None	replace
60	[BUG]  [BUGGY]  cur  =  cur.getPrevious()  &&  cur.getType()  ==  Token.CALL)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getPrevious()  &&  cur.getType()  ==  Token.CALL)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getPrevious()  &&  cur.getType()  ==  Token.CALL)  {	  cur    =    cur.getPrevious()    ||    cur.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  <identifier>  expected	119	None	replace
61	[BUG]  [BUGGY]  cur  =  cur.getPrevious()  ||  cur.getType()!=  Token.CALL)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getPrevious()  ||  cur.getType()!=  Token.CALL)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getPrevious()  ||  cur.getType()!=  Token.CALL)  {	  cur    =    cur.getPrevious()    ||    cur.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  <identifier>  expected	119	None	replace
62	[BUG]  [BUGGY]  cur  =  cur.getParent()  &&  cur.getType()!=  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  &&  cur.getType()!=  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  &&  cur.getType()!=  Token.FUNCTION)  {	  cur    =    cur.getParent()    ||    cur.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
63	[BUG]  [BUGGY]  cur  =  cur.getName()  ||  cur.getType()!=  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getName()  ||  cur.getType()!=  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getName()  ||  cur.getType()!=  Token.FUNCTION)  {	  cur    =    cur.getParent()    ||    cur.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
64	[BUG]  [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  :  predicate.checkLeftOf(cur,  expressionRoot);  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  :  predicate.checkLeftOf(cur,  expressionRoot);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  SIDE_EFFECT_PREDICATE  :  predicate.checkLeftOf(cur,  expressionRoot);	  cur    =    cur.getParent())    {    Predicate    <    SIDE_EFFECT_PREDICATE    :    predicate.checkLeftOf(cur,    expressionRoot);    	non-compiled	[CE]  >  expected	99	None	replace
65	[BUG]  [BUGGY]  p  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  :  predicate.checkLeftOf(cur,  expressionRoot);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  :  predicate.checkLeftOf(cur,  expressionRoot);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  :  predicate.checkLeftOf(cur,  expressionRoot);	  cur    =    cur.getParent())    {    Predicate    <    SIDE_EFFECT_PREDICATE    :    predicate.checkLeftOf(cur,    expressionRoot);    	non-compiled	[CE]  <identifier>  expected	99	None	replace
66	[BUG]  [BUGGY]  p  =  cur.getNext())  {  Predicate  <  SIDE_EFFECT_PREDICATE  :  predicate.checkLeftOf(cur,  expressionRoot);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getNext())  {  Predicate  <  SIDE_EFFECT_PREDICATE  :  predicate.checkLeftOf(cur,  expressionRoot);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getNext())  {  Predicate  <  SIDE_EFFECT_PREDICATE  :  predicate.checkLeftOf(cur,  expressionRoot);	  cur    =    cur.getParent())    {    Predicate    <    SIDE_EFFECT_PREDICATE    :    predicate.checkLeftOf(cur,    expressionRoot);    	non-compiled	[CE]  <identifier>  expected	99	None	replace
67	[BUG]  [BUGGY]  predicate  =  cur.getNext())  {  Predicate  <  SIDE_EFFECT_PREDICATE  :  predicate.checkLeftOf(cur,  expressionRoot);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  predicate  =  cur.getNext())  {  Predicate  <  SIDE_EFFECT_PREDICATE  :  predicate.checkLeftOf(cur,  expressionRoot);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	predicate  =  cur.getNext())  {  Predicate  <  SIDE_EFFECT_PREDICATE  :  predicate.checkLeftOf(cur,  expressionRoot);	  cur    =    cur.getParent())    {    Predicate    <    SIDE_EFFECT_PREDICATE    :    predicate.checkLeftOf(cur,    expressionRoot);    	non-compiled	[CE]  <identifier>  expected	99	None	replace
68	[BUG]  [BUGGY]  Node  cur  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  :  predicate.checkLeftOf(cur,  expressionRoot);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Node  cur  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  :  predicate.checkLeftOf(cur,  expressionRoot);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Node  cur  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  :  predicate.checkLeftOf(cur,  expressionRoot);	  cur    =    cur.getParent())    {    Predicate    <    SIDE_EFFECT_PREDICATE    :    predicate.checkLeftOf(cur,    expressionRoot);    	non-compiled	[CE]  ';'  expected	99	None	replace
69	[BUG]  [BUGGY]  Node  cur  =  cur.getNext())  {  Predicate  <  SIDE_EFFECT_PREDICATE  :  predicate.checkLeftOf(cur,  expressionRoot);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Node  cur  =  cur.getNext())  {  Predicate  <  SIDE_EFFECT_PREDICATE  :  predicate.checkLeftOf(cur,  expressionRoot);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Node  cur  =  cur.getNext())  {  Predicate  <  SIDE_EFFECT_PREDICATE  :  predicate.checkLeftOf(cur,  expressionRoot);	  cur    =    cur.getParent())    {    Predicate    <    SIDE_EFFECT_PREDICATE    :    predicate.checkLeftOf(cur,    expressionRoot);    	non-compiled	[CE]  ';'  expected	99	None	replace
70	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME)  {  cur  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  :  predicate.checkLeftOf(cur,  expressionRoot);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur.getType()  ==  Token.NAME)  {  cur  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  :  predicate.checkLeftOf(cur,  expressionRoot);  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur.getType()  ==  Token.NAME)  {  cur  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  :  predicate.checkLeftOf(cur,  expressionRoot);  }	  cur    =    cur.getParent())    {    Predicate    <    SIDE_EFFECT_PREDICATE    :    predicate.checkLeftOf(cur,    expressionRoot);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
71	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  &&  cur.getType()!=  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  &&  cur.getType()!=  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  &&  cur.getType()!=  Token.FUNCTION)  {	  cur    =    cur.getLastChild()    ||    cur.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
72	[BUG]  [BUGGY]  cur  =  cur.getFirstChild()  ||  cur.getType()  >=  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getFirstChild()  ||  cur.getType()  >=  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getFirstChild()  ||  cur.getType()  >=  Token.FUNCTION)  {	  cur    =    cur.getLastChild()    ||    cur.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
73	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  &&  cur.getType()  >=  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  &&  cur.getType()  >=  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  &&  cur.getType()  >=  Token.FUNCTION)  {	  cur    =    cur.getLastChild()    ||    cur.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
74	[BUG]  [BUGGY]  cur  =  cur.getFirstChild()  ||  cur.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getFirstChild()  ||  cur.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getFirstChild()  ||  cur.getType()  ==  Token.FUNCTION)  {	  cur    =    cur.getLastChild()    ||    cur.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
75	[BUG]  [BUGGY]  cur  =  cur.getParent()  &&  cur.getType()!=  Token.VAR)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  &&  cur.getType()!=  Token.VAR)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  &&  cur.getType()!=  Token.VAR)  {	  cur    =    cur.getNext()    &&    cur.getType()    >>    Token.VAR)    {    	non-compiled	[CE]  <identifier>  expected	90	None	replace
76	[BUG]  [BUGGY]  cur  =  cur.getFirstChild()  &&  cur.getType()!=  Token.VAR)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getFirstChild()  &&  cur.getType()!=  Token.VAR)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getFirstChild()  &&  cur.getType()!=  Token.VAR)  {	  cur    =    cur.getNext()    &&    cur.getType()    >>    Token.VAR)    {    	non-compiled	[CE]  <identifier>  expected	90	None	replace
77	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  cur.getType()  >=  Token.VAR)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  cur.getType()  >=  Token.VAR)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  cur.getType()  >=  Token.VAR)  {	  cur    =    cur.getNext()    &&    cur.getType()    >>    Token.VAR)    {    	non-compiled	[CE]  <identifier>  expected	90	None	replace
78	[BUG]  [BUGGY]  cur  =  cur.getParent()  ||  cur.getType()!=  Token.CALL)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  ||  cur.getType()!=  Token.CALL)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  ||  cur.getType()!=  Token.CALL)  {	  cur    =    cur.getNext()    ||    cur.getType()!=    Token.CALL)    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
79	[BUG]  [BUGGY]  cur  =  cur.getFirstChild()  ||  cur.getType()!=  Token.CALL)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getFirstChild()  ||  cur.getType()!=  Token.CALL)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getFirstChild()  ||  cur.getType()!=  Token.CALL)  {	  cur    =    cur.getNext()    ||    cur.getType()!=    Token.CALL)    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
80	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  cur.getType()  >=  Token.CALL)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  cur.getType()  >=  Token.CALL)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  cur.getType()  >=  Token.CALL)  {	  cur    =    cur.getNext()    ||    cur.getType()!=    Token.CALL)    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
81	[BUG]  [BUGGY]  p  =  cur.getNext()  ||  predicate.equals(cur.getString()))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getNext()  ||  predicate.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getNext()  ||  predicate.equals(cur.getString()))  {	  p    =    cur.getNext()    &&    predicate.equals(cur.getString()))    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
82	[BUG]  [BUGGY]  p  =  cur.getParent()  &&  predicate.equals(cur.getString()))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getParent()  &&  predicate.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getParent()  &&  predicate.equals(cur.getString()))  {	  p    =    cur.getNext()    &&    predicate.equals(cur.getString()))    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
83	[BUG]  [BUGGY]  p  =  cur.getPrevious()  &&  predicate.equals(cur.getString()))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getPrevious()  &&  predicate.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getPrevious()  &&  predicate.equals(cur.getString()))  {	  p    =    cur.getNext()    &&    predicate.equals(cur.getString()))    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
84	[BUG]  [BUGGY]  p  =  cur.getFirstChild()  &&  predicate.equals(cur.getString()))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getFirstChild()  &&  predicate.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getFirstChild()  &&  predicate.equals(cur.getString()))  {	  p    =    cur.getNext()    &&    predicate.equals(cur.getString()))    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
85	[BUG]  [BUGGY]  p  =  cur.getNext()  &&  predicate.equals(predicate.getString()))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getNext()  &&  predicate.equals(predicate.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getNext()  &&  predicate.equals(predicate.getString()))  {	  p    =    cur.getNext()    &&    predicate.equals(cur.getString()))    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
86	[BUG]  [BUGGY]  parent  ==  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  parent  ==  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	parent  ==  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.FUNCTION)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
87	[BUG]  [BUGGY]  Predicate  predicate  =  cur.getPredicate())  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  predicate  =  cur.getPredicate())  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  predicate  =  cur.getPredicate())  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.FUNCTION)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    }    	non-compiled	[CE]  ';'  expected	18	None	replace
88	[BUG]  [BUGGY]  Predicate  predicate  =  cur.getPredicate())  {  if(predicate.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  predicate  =  cur.getPredicate())  {  if(predicate.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  predicate  =  cur.getPredicate())  {  if(predicate.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.FUNCTION)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    }    	non-compiled	[CE]  ';'  expected	18	None	replace
89	[BUG]  [BUGGY]  p  =  cur.getParent())  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getParent())  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getParent())  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.FUNCTION)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
90	[BUG]  [BUGGY]  parent  ==  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getNext())  {  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  parent  ==  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getNext())  {  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	parent  ==  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getNext())  {  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.FUNCTION)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
91	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION)  {  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur.getType()  ==  Token.FUNCTION)  {  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur.getType()  ==  Token.FUNCTION)  {  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.FUNCTION)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
92	[BUG]  [BUGGY]  NodeUtil.copyCurrentNode(cur,  expressionRoot);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.copyCurrentNode(cur,  expressionRoot);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.copyCurrentNode(cur,  expressionRoot);	  NodeUtil.copyCurrentNode(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
93	[BUG]  [BUGGY]  NodeUtil.copyCurrentNode(cur,  p);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.copyCurrentNode(cur,  p);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.copyCurrentNode(cur,  p);	  NodeUtil.copyCurrentNode(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
94	[BUG]  [BUGGY]  NodeUtil.copyCurrentNode(n,  predicate);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.copyCurrentNode(n,  predicate);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.copyCurrentNode(n,  predicate);	  NodeUtil.copyCurrentNode(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
95	[BUG]  [BUGGY]  NodeUtil.copyCurrentNode(cur,  predicate,  p);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.copyCurrentNode(cur,  predicate,  p);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.copyCurrentNode(cur,  predicate,  p);	  NodeUtil.copyCurrentNode(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
96	[BUG]  [BUGGY]  NodeUtil.copyCurrentNode(p,  predicate);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.copyCurrentNode(p,  predicate);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.copyCurrentNode(p,  predicate);	  NodeUtil.copyCurrentNode(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
97	[BUG]  [BUGGY]  NodeUtil.copyCurrentNode(expressionRoot,  predicate);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.copyCurrentNode(expressionRoot,  predicate);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.copyCurrentNode(expressionRoot,  predicate);	  NodeUtil.copyCurrentNode(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
98	[BUG]  [BUGGY]  NodeUtil.copyCurrentNode(cur,  predicate,  def);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.copyCurrentNode(cur,  predicate,  def);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.copyCurrentNode(cur,  predicate,  def);	  NodeUtil.copyCurrentNode(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
99	[BUG]  [BUGGY]  p  =  cur.getNext())  {  if(cur!=  null)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getNext())  {  if(cur!=  null)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getNext())  {  if(cur!=  null)  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur!=    null)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
100	[BUG]  [BUGGY]  p  =  cur.getParent())  {  if(cur!=  null)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  unclosed  comment  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getParent())  {  if(cur!=  null)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getParent())  {  if(cur!=  null)  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur!=    null)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  unclosed  comment	95	None	replace
101	[BUG]  [BUGGY]  p  =  cur.getFirstChild())  {  if(cur!=  null)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  unclosed  comment  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getFirstChild())  {  if(cur!=  null)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getFirstChild())  {  if(cur!=  null)  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur!=    null)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  unclosed  comment	95	None	replace
102	[BUG]  [BUGGY]  parant.getParent())  {  if(cur!=  null)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  unclosed  comment  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  parant.getParent())  {  if(cur!=  null)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	parant.getParent())  {  if(cur!=  null)  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur!=    null)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  unclosed  comment	95	None	replace
103	[BUG]  [BUGGY]  p  =  cur.getParent())  {  if(predicate!=  null)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  unclosed  comment  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getParent())  {  if(predicate!=  null)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getParent())  {  if(predicate!=  null)  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur!=    null)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  unclosed  comment	95	None	replace
104	[BUG]  [BUGGY]  p  =  cur.getNext())  {  if(cur.getType()  ==  Token.VAR)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  unclosed  comment  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getNext())  {  if(cur.getType()  ==  Token.VAR)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getNext())  {  if(cur.getType()  ==  Token.VAR)  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.VAR)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  unclosed  comment	17	None	replace
105	[BUG]  [BUGGY]  p  =  cur.getParent())  {  if(cur.getType()  ==  Token.VAR)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  unclosed  comment  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getParent())  {  if(cur.getType()  ==  Token.VAR)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getParent())  {  if(cur.getType()  ==  Token.VAR)  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.VAR)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  unclosed  comment	17	None	replace
106	[BUG]  [BUGGY]  p  =  cur.getFirstChild())  {  if(cur.getType()  ==  Token.VAR)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  unclosed  comment  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getFirstChild())  {  if(cur.getType()  ==  Token.VAR)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getFirstChild())  {  if(cur.getType()  ==  Token.VAR)  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.VAR)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  unclosed  comment	17	None	replace
107	[BUG]  [BUGGY]  p  =  cur.getParent())  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  unclosed  comment  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getParent())  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getParent())  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.VAR)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  unclosed  comment	17	None	replace
108	[BUG]  [BUGGY]  Predicate  cur  =  cur.getNext())  {  if(cur.getType()  ==  Token.VAR)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  unclosed  comment  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  cur  =  cur.getNext())  {  if(cur.getType()  ==  Token.VAR)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  cur  =  cur.getNext())  {  if(cur.getType()  ==  Token.VAR)  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.VAR)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  unclosed  comment	17	None	replace
109	[BUG]  [BUGGY]  p  =  cur.getParent())  {  if(predicate.getType()  ==  Token.VAR)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  unclosed  comment  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getParent())  {  if(predicate.getType()  ==  Token.VAR)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getParent())  {  if(predicate.getType()  ==  Token.VAR)  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.VAR)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  unclosed  comment	17	None	replace
110	[BUG]  [BUGGY]  p  =  cur.getNext())  {  if(predicate.getType()  ==  Token.VAR)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  unclosed  comment  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getNext())  {  if(predicate.getType()  ==  Token.VAR)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getNext())  {  if(predicate.getType()  ==  Token.VAR)  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.VAR)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  unclosed  comment	17	None	replace
111	[BUG]  [BUGGY]  cur  =  cur.getParent()  &&  cur.getType()  ==  Token.NAME)  {  [CE]  unclosed  comment  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  &&  cur.getType()  ==  Token.NAME)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  &&  cur.getType()  ==  Token.NAME)  {	  cur    =    cur.getNext()    &&    cur.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  unclosed  comment	6	None	replace
112	[BUG]  [BUGGY]  cur  =  cur.getFirstChild()  &&  cur.getType()  ==  Token.NAME)  {  [CE]  unclosed  comment  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getFirstChild()  &&  cur.getType()  ==  Token.NAME)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getFirstChild()  &&  cur.getType()  ==  Token.NAME)  {	  cur    =    cur.getNext()    &&    cur.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  unclosed  comment	6	None	replace
113	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  &&  cur.getType()  ==  Token.NAME)  {  [CE]  unclosed  comment  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  &&  cur.getType()  ==  Token.NAME)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  &&  cur.getType()  ==  Token.NAME)  {	  cur    =    cur.getNext()    &&    cur.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  unclosed  comment	6	None	replace
114	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  ||  cur.getType()!=  Token.NAME)  {  [CE]  unclosed  comment  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  ||  cur.getType()!=  Token.NAME)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  ||  cur.getType()!=  Token.NAME)  {	  cur    =    cur.getLastChild()    ||    cur.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  unclosed  comment	10	None	replace
115	[BUG]  [BUGGY]  cur  =  cur.getPrevious()  &&  predicate.equals(cur.getString()))  {  [CE]  unclosed  comment  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getPrevious()  &&  predicate.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getPrevious()  &&  predicate.equals(cur.getString()))  {	  cur    =    cur.getPrevious())    {    	non-compiled	[CE]  unclosed  comment	27	None	replace
116	[BUG]  [BUGGY]  cur  =  cur.getPrevious()  &&  predicate.isLeftOf(cur))  {  [CE]  unclosed  comment  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getPrevious()  &&  predicate.isLeftOf(cur))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getPrevious()  &&  predicate.isLeftOf(cur))  {	  cur    =    cur.getPrevious())    {    	non-compiled	[CE]  unclosed  comment	27	None	replace
117	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  predicate.getNext())  {  [CE]  unclosed  comment  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  predicate.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  predicate.getNext())  {	  cur    =    cur.getParent())    {    Predicate    <    Node>    cur    =    predicate.getParent())    {    	non-compiled	[CE]  unclosed  comment	101	None	replace
118	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  predicate.getParent())  {  [CE]  unclosed  comment  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  predicate.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  predicate.getParent())  {	  cur    =    cur.getParent())    {    Predicate    <    Node>    cur    =    predicate.getParent())    {    	non-compiled	[CE]  unclosed  comment	101	None	replace
119	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  predicate.getFirstChild())  {  [CE]  unclosed  comment  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  predicate.getFirstChild())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  predicate.getFirstChild())  {	  cur    =    cur.getParent())    {    Predicate    <    Node>    cur    =    predicate.getParent())    {    	non-compiled	[CE]  unclosed  comment	101	None	replace
120	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  predicate.getGrandparent())  {  [CE]  unclosed  comment  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  predicate.getGrandparent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  predicate.getGrandparent())  {	  cur    =    cur.getParent())    {    Predicate    <    Node>    cur    =    predicate.getParent())    {    	non-compiled	[CE]  unclosed  comment	101	None	replace
121	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  predicate.getName())  {  [CE]  unclosed  comment  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  predicate.getName())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  predicate.getName())  {	  cur    =    cur.getParent())    {    Predicate    <    Node>    cur    =    predicate.getParent())    {    	non-compiled	[CE]  unclosed  comment	101	None	replace
122	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  predicate.getPrevious())  {  [CE]  unclosed  comment  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  predicate.getPrevious())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  predicate.getPrevious())  {	  cur    =    cur.getParent())    {    Predicate    <    Node>    cur    =    predicate.getParent())    {    	non-compiled	[CE]  unclosed  comment	101	None	replace
123	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  cur.getNext())  {  [CE]  unclosed  comment  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  cur.getNext())  {	  cur    =    cur.getParent())    {    Predicate    <    Node>    cur    =    predicate.getParent())    {    	non-compiled	[CE]  unclosed  comment	101	None	replace
124	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  Predicates.  <  Node>emptyCfgNode)  {  [CE]  unclosed  comment  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  Predicates.  <  Node>emptyCfgNode)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  Predicates.  <  Node>emptyCfgNode)  {	  cur    =    cur.getNext()    &&    Predicates.    <    Node>emptyCfgNode)    {    	non-compiled	[CE]  unclosed  comment	86	None	replace
125	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  Node>emptyCfgNode,  predicate)  {  [CE]  unclosed  comment  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  Node>emptyCfgNode,  predicate)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  Node>emptyCfgNode,  predicate)  {	  cur    =    cur.getNext()    &&    Predicates.    <    Node>emptyCfgNode)    {    	non-compiled	[CE]  unclosed  comment	86	None	replace
126	[BUG]  [BUGGY]  cur  =  cur.getParent()  &&  Predicates.  <  Node>emptyCfgNode)  {  [CE]  unclosed  comment  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  &&  Predicates.  <  Node>emptyCfgNode)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  &&  Predicates.  <  Node>emptyCfgNode)  {	  cur    =    cur.getNext()    &&    Predicates.    <    Node>emptyCfgNode)    {    	non-compiled	[CE]  unclosed  comment	86	None	replace
127	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.  <  Node>emptyCfgNode)  {  [CE]  unclosed  comment  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicate.  <  Node>emptyCfgNode)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.  <  Node>emptyCfgNode)  {	  cur    =    cur.getNext()    &&    Predicates.    <    Node>emptyCfgNode)    {    	non-compiled	[CE]  unclosed  comment	86	None	replace
128	[BUG]  [BUGGY]  cur  =  cur.getPrevious()  &&  Predicates.  <  Node>emptyCfgNode)  {  [CE]  unclosed  comment  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getPrevious()  &&  Predicates.  <  Node>emptyCfgNode)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getPrevious()  &&  Predicates.  <  Node>emptyCfgNode)  {	  cur    =    cur.getNext()    &&    Predicates.    <    Node>emptyCfgNode)    {    	non-compiled	[CE]  unclosed  comment	86	None	replace
129	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  p.getLastChild();  [CE]  unclosed  comment  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  p.getLastChild();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  p.getLastChild();	  Predicate    <    Node>    cur    =    p.getFirstChild();    	non-compiled	[CE]  unclosed  comment	73	None	replace
130	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  cur.getLastChild();  [CE]  unclosed  comment  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  cur.getLastChild();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  cur.getLastChild();	  Predicate    <    Node>    cur    =    p.getFirstChild();    	non-compiled	[CE]  unclosed  comment	73	None	replace
131	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  p.getNext();  [CE]  unclosed  comment  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  p.getNext();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  p.getNext();	  Predicate    <    Node>    cur    =    p.getFirstChild();    	non-compiled	[CE]  unclosed  comment	73	None	replace
132	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  n.getFirstChild();  [CE]  unclosed  comment  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  n.getFirstChild();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  n.getFirstChild();	  Predicate    <    Node>    cur    =    p.getFirstChild();    	non-compiled	[CE]  unclosed  comment	73	None	replace
133	[BUG]  [BUGGY]  cur  =  cur.getPrevious()  &&  cur.getType()!=  Token.FUNCTION)  {  [CE]  unclosed  comment  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getPrevious()  &&  cur.getType()!=  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getPrevious()  &&  cur.getType()!=  Token.FUNCTION)  {	  cur    =    cur.getPrevious()    ||    cur.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  unclosed  comment	111	None	replace
134	[BUG]  [BUGGY]  cur  =  cur.getPrevious()  ||  cur.getType()  ==  Token.FUNCTION)  {  [CE]  unclosed  comment  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getPrevious()  ||  cur.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getPrevious()  ||  cur.getType()  ==  Token.FUNCTION)  {	  cur    =    cur.getPrevious()    ||    cur.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  unclosed  comment	111	None	replace
135	[BUG]  [BUGGY]  cur  =  cur.getString(),  predicate)  {  [CE]  unclosed  comment  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getString(),  predicate)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getString(),  predicate)  {	  cur    =    cur.getString())    {    	non-compiled	[CE]  unclosed  comment	28	None	replace
136	[BUG]  [BUGGY]  cur  =  cur.getString(),  false)  {  [CE]  unclosed  comment  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getString(),  false)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getString(),  false)  {	  cur    =    cur.getString())    {    	non-compiled	[CE]  unclosed  comment	28	None	replace
137	[BUG]  [BUGGY]  cur  =  cur.getString(),  true)  {  [CE]  unclosed  comment  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getString(),  true)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getString(),  true)  {	  cur    =    cur.getString())    {    	non-compiled	[CE]  unclosed  comment	28	None	replace
138	[BUG]  [BUGGY]  cur  =  cur.getParent()  &&  cur.getType()!=  Token.CALL)  {  [CE]  unclosed  comment  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  &&  cur.getType()!=  Token.CALL)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  &&  cur.getType()!=  Token.CALL)  {	  cur    =    cur.getParent()    &&    cur.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  unclosed  comment	91	None	replace
139	[BUG]  [BUGGY]  cur  =  cur.getName()  &&  cur.getType()  ==  Token.CALL)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getName()  &&  cur.getType()  ==  Token.CALL)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getName()  &&  cur.getType()  ==  Token.CALL)  {	  cur    =    cur.getParent()    &&    cur.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  <identifier>  expected	91	None	replace
140	[BUG]  [BUGGY]  NodeUtil.removeChild(cur,  expressionRoot);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.removeChild(cur,  expressionRoot);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.removeChild(cur,  expressionRoot);	  NodeUtil.removeChild(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
141	[BUG]  [BUGGY]  NodeUtil.removeChild(predicate,  cur);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.removeChild(predicate,  cur);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.removeChild(predicate,  cur);	  NodeUtil.removeChild(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
142	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  predicate);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.removeChild(n,  predicate);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.removeChild(n,  predicate);	  NodeUtil.removeChild(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
143	[BUG]  [BUGGY]  NodeUtil.removeChild(cur,  p);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.removeChild(cur,  p);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.removeChild(cur,  p);	  NodeUtil.removeChild(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
144	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  predicate);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.removeChild(parent,  predicate);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.removeChild(parent,  predicate);	  NodeUtil.removeChild(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
145	[BUG]  [BUGGY]  NodeUtil.removeChild(p,  predicate);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.removeChild(p,  predicate);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.removeChild(p,  predicate);	  NodeUtil.removeChild(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
146	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  cur.getParent();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  cur.getParent();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  cur.getParent();	  Predicate    <    Node>    cur    =    predicate.getParent();    	non-compiled	[CE]  <identifier>  expected	70	None	replace
147	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  p.getParent();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  p.getParent();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  p.getParent();	  Predicate    <    Node>    cur    =    predicate.getParent();    	non-compiled	[CE]  <identifier>  expected	70	None	replace
148	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  predicate.getNext();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  predicate.getNext();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  predicate.getNext();	  Predicate    <    Node>    cur    =    predicate.getParent();    	non-compiled	[CE]  <identifier>  expected	70	None	replace
149	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  expressionRoot.getParent();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  expressionRoot.getParent();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  expressionRoot.getParent();	  Predicate    <    Node>    cur    =    predicate.getParent();    	non-compiled	[CE]  <identifier>  expected	70	None	replace
150	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  n.getParent();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  n.getParent();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  n.getParent();	  Predicate    <    Node>    cur    =    predicate.getParent();    	non-compiled	[CE]  <identifier>  expected	70	None	replace
151	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  cur.hasChildren())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  cur.hasChildren())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  cur.hasChildren())  {	  cur    =    predicate.getNext()    &&    cur.hasChildren())    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
152	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  cur.hasChildren())  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  cur.hasChildren())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  cur.hasChildren())  {	  cur    =    predicate.getNext()    &&    cur.hasChildren())    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
153	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  Predicates.  <  SIDE_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  Predicates.  <  SIDE_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  Predicates.  <  SIDE_EFFECT_PREDICATE)  {	  cur    =    cur.getNext()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE    ||    Predicates.    <    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
154	[BUG]  [BUGGY]  cur  =  cur.getParent()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  Predicates.  <  SIDE_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  Predicates.  <  SIDE_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  Predicates.  <  SIDE_EFFECT_PREDICATE)  {	  cur    =    cur.getNext()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE    ||    Predicates.    <    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
155	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  +  SIDE_EFFECT_PREDICATE  ||  Predicates.  <  SIDE_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  +  SIDE_EFFECT_PREDICATE  ||  Predicates.  <  SIDE_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  +  SIDE_EFFECT_PREDICATE  ||  Predicates.  <  SIDE_EFFECT_PREDICATE)  {	  cur    =    cur.getNext()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE    ||    Predicates.    <    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
156	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  ERROR  ||  Predicates.  <  SIDE_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  ERROR  ||  Predicates.  <  SIDE_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  ERROR  ||  Predicates.  <  SIDE_EFFECT_PREDICATE)  {	  cur    =    cur.getNext()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE    ||    Predicates.    <    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
157	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  0  ||  Predicates.  <  0)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  0  ||  Predicates.  <  0)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  0  ||  Predicates.  <  0)  {	  cur    =    cur.getNext()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE    ||    Predicates.    <    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
158	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  Predicates.  <  PREDICATE)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  Predicates.  <  PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  Predicates.  <  PREDICATE)  {	  cur    =    cur.getNext()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE    ||    Predicates.    <    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
159	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  p.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  p.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  p.getType()  ==  Token.FUNCTION)  {	  cur    =    cur.getNext()    ||    p.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	107	None	replace
160	[BUG]  [BUGGY]  cur  =  cur.getParent()  ||  p.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  ||  p.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  ||  p.getType()  ==  Token.FUNCTION)  {	  cur    =    cur.getNext()    ||    p.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	107	None	replace
161	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  p.getType()!=  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  p.getType()!=  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  p.getType()!=  Token.FUNCTION)  {	  cur    =    cur.getNext()    ||    p.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	107	None	replace
162	[BUG]  [BUGGY]  cur  =  cur.getFirstChild()  ||  p.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getFirstChild()  ||  p.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getFirstChild()  ||  p.getType()  ==  Token.FUNCTION)  {	  cur    =    cur.getNext()    ||    p.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	107	None	replace
163	[BUG]  [BUGGY]  p  =  cur.getNext())  {  if(cur.getType()  ==  Token.NAME)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getNext())  {  if(cur.getType()  ==  Token.NAME)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getNext())  {  if(cur.getType()  ==  Token.NAME)  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.NAME)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
164	[BUG]  [BUGGY]  p  =  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.NAME)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
165	[BUG]  [BUGGY]  Predicate  cur  =  cur.getNext())  {  if(cur.getType()  ==  Token.NAME)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  cur  =  cur.getNext())  {  if(cur.getType()  ==  Token.NAME)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  cur  =  cur.getNext())  {  if(cur.getType()  ==  Token.NAME)  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.NAME)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
166	[BUG]  [BUGGY]  p  =  cur.getNext())  {  if(cur.getType()  ==  Token.NAME)  {  if(!predicate.apply(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getNext())  {  if(cur.getType()  ==  Token.NAME)  {  if(!predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getNext())  {  if(cur.getType()  ==  Token.NAME)  {  if(!predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.NAME)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
167	[BUG]  [BUGGY]  p  =  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  if(!predicate.apply(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  if(!predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  if(!predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.NAME)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
168	[BUG]  [BUGGY]  p  =  cur.getParent())  {  if(predicate.getType()  ==  Token.NAME)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getParent())  {  if(predicate.getType()  ==  Token.NAME)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getParent())  {  if(predicate.getType()  ==  Token.NAME)  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.NAME)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
169	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  predicate.isLeftOf(n))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  predicate.isLeftOf(n))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  predicate.isLeftOf(n))  {	  cur    =    cur.getNext()    &&    predicate.isLeftOf(n))    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
170	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(n,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(n,  expressionRoot))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.isLeftOf(n,  expressionRoot))  {	  cur    =    cur.getNext()    &&    predicate.isLeftOf(n))    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
171	[BUG]  [BUGGY]  cur  =  cur.getParent()  &&  predicate.isLeftOf(n))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  &&  predicate.isLeftOf(n))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  &&  predicate.isLeftOf(n))  {	  cur    =    cur.getNext()    &&    predicate.isLeftOf(n))    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
172	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(cur.getString()))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.isLeftOf(cur.getString()))  {	  cur    =    cur.getNext()    &&    predicate.isLeftOf(n))    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
173	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  Predicate.equals(predicate.getString()))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  Predicate.equals(predicate.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  Predicate.equals(predicate.getString()))  {	  cur    =    cur.getNext()    &&    Predicate.equals(predicate.getString()))    {    	non-compiled	[CE]  <identifier>  expected	74	None	replace
174	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicate.equals(cur.getString()))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicate.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicate.equals(cur.getString()))  {	  cur    =    cur.getNext()    &&    Predicate.equals(predicate.getString()))    {    	non-compiled	[CE]  <identifier>  expected	74	None	replace
175	[BUG]  [BUGGY]  cur  =  cur.getParent()  &&  Predicate.equals(predicate.getString()))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  &&  Predicate.equals(predicate.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  &&  Predicate.equals(predicate.getString()))  {	  cur    =    cur.getNext()    &&    Predicate.equals(predicate.getString()))    {    	non-compiled	[CE]  <identifier>  expected	74	None	replace
176	[BUG]  [BUGGY]  cur  =  cur.getParent()  &&  Predicate.equals(cur.getString()))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  &&  Predicate.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  &&  Predicate.equals(cur.getString()))  {	  cur    =    cur.getNext()    &&    Predicate.equals(predicate.getString()))    {    	non-compiled	[CE]  <identifier>  expected	74	None	replace
177	[BUG]  [BUGGY]  cur  =  cur.getFirstChild()  &&  predicate.isLeftOf(cur))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getFirstChild()  &&  predicate.isLeftOf(cur))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getFirstChild()  &&  predicate.isLeftOf(cur))  {	  cur    =    cur.getLastChild()    &&    predicate.isLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
178	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  ||  predicate.isLeftOf(cur))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  ||  predicate.isLeftOf(cur))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  ||  predicate.isLeftOf(cur))  {	  cur    =    cur.getLastChild()    &&    predicate.isLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
179	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  &&  predicate.isLeftOf(defNode))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  &&  predicate.isLeftOf(defNode))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  &&  predicate.isLeftOf(defNode))  {	  cur    =    cur.getLastChild()    &&    predicate.isLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
180	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  &&  predicate.isLeftOf(n))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  &&  predicate.isLeftOf(n))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  &&  predicate.isLeftOf(n))  {	  cur    =    cur.getLastChild()    &&    predicate.isLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
181	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  &&  predicate.isLeftOf(def))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  &&  predicate.isLeftOf(def))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  &&  predicate.isLeftOf(def))  {	  cur    =    cur.getLastChild()    &&    predicate.isLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
182	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  &&  predicate.isLeftOf(p))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  &&  predicate.isLeftOf(p))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  &&  predicate.isLeftOf(p))  {	  cur    =    cur.getLastChild()    &&    predicate.isLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
183	[BUG]  [BUGGY]  p  =  cur.getNext())  {  if(cur.getType()  ==  Token.EXPR_RESULT)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getNext())  {  if(cur.getType()  ==  Token.EXPR_RESULT)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getNext())  {  if(cur.getType()  ==  Token.EXPR_RESULT)  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.EXPR_RESULT)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
184	[BUG]  [BUGGY]  p  =  cur.getParent())  {  if(cur.getType()  ==  Token.EXPR_RESULT)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getParent())  {  if(cur.getType()  ==  Token.EXPR_RESULT)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getParent())  {  if(cur.getType()  ==  Token.EXPR_RESULT)  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.EXPR_RESULT)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
185	[BUG]  [BUGGY]  Predicate  cur  =  cur.getNext())  {  if(cur.getType()  ==  Token.EXPR_RESULT)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  cur  =  cur.getNext())  {  if(cur.getType()  ==  Token.EXPR_RESULT)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  cur  =  cur.getNext())  {  if(cur.getType()  ==  Token.EXPR_RESULT)  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.EXPR_RESULT)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
186	[BUG]  [BUGGY]  p  =  cur.getNext())  {  if(predicate.getType()  ==  Token.EXPR_RESULT)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getNext())  {  if(predicate.getType()  ==  Token.EXPR_RESULT)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getNext())  {  if(predicate.getType()  ==  Token.EXPR_RESULT)  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.EXPR_RESULT)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
187	[BUG]  [BUGGY]  p  =  cur.getParent())  {  if(predicate.getType()  ==  Token.EXPR_RESULT)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getParent())  {  if(predicate.getType()  ==  Token.EXPR_RESULT)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getParent())  {  if(predicate.getType()  ==  Token.EXPR_RESULT)  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.EXPR_RESULT)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
188	[BUG]  [BUGGY]  p  =  cur.getNext())  {  if(cur.getType()  ==  Token.EXPR_RESULT)  {  if(!predicate.apply(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getNext())  {  if(cur.getType()  ==  Token.EXPR_RESULT)  {  if(!predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getNext())  {  if(cur.getType()  ==  Token.EXPR_RESULT)  {  if(!predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.EXPR_RESULT)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
189	[BUG]  [BUGGY]  cur  =  cur.getName()  ||  cur.getType()!=  Token.VAR)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getName()  ||  cur.getType()!=  Token.VAR)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getName()  ||  cur.getType()!=  Token.VAR)  {	  cur    =    cur.getParent()    ||    cur.getType()!=    Token.VAR)    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
190	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  &&  cur.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  &&  cur.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  &&  cur.getType()  ==  Token.FUNCTION)  {	  cur    =    cur.getLastChild()    ||    cur.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
191	[BUG]  [BUGGY]  cur  =  cur.getFirstChild()  &&  cur.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getFirstChild()  &&  cur.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getFirstChild()  &&  cur.getType()  ==  Token.FUNCTION)  {	  cur    =    cur.getLastChild()    ||    cur.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
192	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(cur,  p);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.copyCurrentStructure(cur,  p);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.copyCurrentStructure(cur,  p);	  NodeUtil.copyCurrentStructure(cur);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
193	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(predicate);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.copyCurrentStructure(predicate);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.copyCurrentStructure(predicate);	  NodeUtil.copyCurrentStructure(cur);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
194	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(n);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.copyCurrentStructure(n);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.copyCurrentStructure(n);	  NodeUtil.copyCurrentStructure(cur);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
195	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(cur,  expressionRoot);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.copyCurrentStructure(cur,  expressionRoot);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.copyCurrentStructure(cur,  expressionRoot);	  NodeUtil.copyCurrentStructure(cur);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
196	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(expressionRoot);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.copyCurrentStructure(expressionRoot);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.copyCurrentStructure(expressionRoot);	  NodeUtil.copyCurrentStructure(cur);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
197	[BUG]  [BUGGY]  cur  =  cur.getName()  ||  cur.getType()  ==  Token.CALL)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getName()  ||  cur.getType()  ==  Token.CALL)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getName()  ||  cur.getType()  ==  Token.CALL)  {	  cur    =    cur.getParent()    ||    cur.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
198	[BUG]  [BUGGY]  cur  =  cur.getPrevious()  &&  cur.getType()  ==  Token.VAR)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getPrevious()  &&  cur.getType()  ==  Token.VAR)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getPrevious()  &&  cur.getType()  ==  Token.VAR)  {	  cur    =    cur.getPrevious()    ||    cur.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  <identifier>  expected	87	None	replace
199	[BUG]  [BUGGY]  cur  =  cur.getPrevious()  ||  cur.getType()!=  Token.VAR)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getPrevious()  ||  cur.getType()!=  Token.VAR)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getPrevious()  ||  cur.getType()!=  Token.VAR)  {	  cur    =    cur.getPrevious()    ||    cur.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  <identifier>  expected	87	None	replace
200	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  &&  cur.getType()!=  Token.VAR)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  &&  cur.getType()!=  Token.VAR)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  &&  cur.getType()!=  Token.VAR)  {	  cur    =    cur.getNext()    &&    cur.getType()!=    Token.VAR)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
201	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  expressionRoot.getFirstChild();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  expressionRoot.getFirstChild();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  expressionRoot.getFirstChild();	  Predicate    <    Node>    cur    =    cur.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	61	None	replace
202	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  cr.getFirstChild();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  cr.getFirstChild();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  cr.getFirstChild();	  Predicate    <    Node>    cur    =    cur.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	61	None	replace
203	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  Predicates.  <  CREATE_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  Predicates.  <  CREATE_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  Predicates.  <  CREATE_EFFECT_PREDICATE)  {	  cur    =    cur.getNext()    &&    Predicates.    <    CREATE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
204	[BUG]  [BUGGY]  cur  =  cur.getParent()  &&  Predicates.  <  CREATE_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  &&  Predicates.  <  CREATE_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  &&  Predicates.  <  CREATE_EFFECT_PREDICATE)  {	  cur    =    cur.getNext()    &&    Predicates.    <    CREATE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
205	[BUG]  [BUGGY]  cur  =  cur.getPrevious()  &&  Predicates.  <  CREATE_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getPrevious()  &&  Predicates.  <  CREATE_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getPrevious()  &&  Predicates.  <  CREATE_EFFECT_PREDICATE)  {	  cur    =    cur.getNext()    &&    Predicates.    <    CREATE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
206	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate  <  CREATE_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicate  <  CREATE_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate  <  CREATE_EFFECT_PREDICATE)  {	  cur    =    cur.getNext()    &&    Predicates.    <    CREATE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
207	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  MOVED_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  MOVED_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  MOVED_EFFECT_PREDICATE)  {	  cur    =    cur.getNext()    &&    Predicates.    <    CREATE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
208	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  predicate.isLeftOf(p))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  predicate.isLeftOf(p))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  predicate.isLeftOf(p))  {	  cur    =    cur.getNext()    &&    predicate.isLeftOf(p))    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
209	[BUG]  [BUGGY]  cur  =  cur.getParent()  &&  predicate.isLeftOf(p))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  &&  predicate.isLeftOf(p))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  &&  predicate.isLeftOf(p))  {	  cur    =    cur.getNext()    &&    predicate.isLeftOf(p))    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
210	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(defNode,  p))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(defNode,  p))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.isLeftOf(defNode,  p))  {	  cur    =    cur.getNext()    &&    predicate.isLeftOf(p))    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
211	[BUG]  [BUGGY]  cur  =  cur.getFirstChild(),  predicate)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getFirstChild(),  predicate)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getFirstChild(),  predicate)  {	  cur    =    cur.getFirstChild())    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
212	[BUG]  [BUGGY]  cur  =  cur.getFirstChild()  &&  predicate.equals(cur.getString()))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getFirstChild()  &&  predicate.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getFirstChild()  &&  predicate.equals(cur.getString()))  {	  cur    =    cur.getFirstChild())    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
213	[BUG]  [BUGGY]  cur  =  cur.getFirstChild()  ||  cur.getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getFirstChild()  ||  cur.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getFirstChild()  ||  cur.getLastChild().getType()  ==  Token.FUNCTION)  {	  cur    =    cur.getFirstChild())    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
214	[BUG]  [BUGGY]  predicate  =  cur.getNext()  ||  predicate.equals(cur.getString()))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  predicate  =  cur.getNext()  ||  predicate.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	predicate  =  cur.getNext()  ||  predicate.equals(cur.getString()))  {	  predicate    =    cur.getNext()    &&    predicate.equals(cur.getString()))    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
215	[BUG]  [BUGGY]  predicate  =  cur.getPrevious()  &&  predicate.equals(cur.getString()))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  predicate  =  cur.getPrevious()  &&  predicate.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	predicate  =  cur.getPrevious()  &&  predicate.equals(cur.getString()))  {	  predicate    =    cur.getNext()    &&    predicate.equals(cur.getString()))    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
216	[BUG]  [BUGGY]  predicate  =  cur.getParent()  &&  predicate.equals(cur.getString()))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  predicate  =  cur.getParent()  &&  predicate.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	predicate  =  cur.getParent()  &&  predicate.equals(cur.getString()))  {	  predicate    =    cur.getNext()    &&    predicate.equals(cur.getString()))    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
217	[BUG]  [BUGGY]  predicate  =  cur.getFirstChild()  &&  predicate.equals(cur.getString()))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  predicate  =  cur.getFirstChild()  &&  predicate.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	predicate  =  cur.getFirstChild()  &&  predicate.equals(cur.getString()))  {	  predicate    =    cur.getNext()    &&    predicate.equals(cur.getString()))    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
218	[BUG]  [BUGGY]  predicate  =  cur.getNext()  &&  predicate.equals(cur.getString())||  predicate.equals(cur.getString()))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  predicate  =  cur.getNext()  &&  predicate.equals(cur.getString())||  predicate.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	predicate  =  cur.getNext()  &&  predicate.equals(cur.getString())||  predicate.equals(cur.getString()))  {	  predicate    =    cur.getNext()    &&    predicate.equals(cur.getString()))    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
219	[BUG]  [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  =  cur.getNext();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  =  cur.getNext();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  SIDE_EFFECT_PREDICATE  =  cur.getNext();	  cur    =    cur.getParent())    {    Predicate    <    SIDE_EFFECT_PREDICATE    =    predicate.getParent();    	non-compiled	[CE]  <identifier>  expected	100	None	replace
220	[BUG]  [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  =  cur.getParent();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  =  cur.getParent();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  SIDE_EFFECT_PREDICATE  =  cur.getParent();	  cur    =    cur.getParent())    {    Predicate    <    SIDE_EFFECT_PREDICATE    =    predicate.getParent();    	non-compiled	[CE]  <identifier>  expected	100	None	replace
221	[BUG]  [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  =  predicate.getNext();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  =  predicate.getNext();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  SIDE_EFFECT_PREDICATE  =  predicate.getNext();	  cur    =    cur.getParent())    {    Predicate    <    SIDE_EFFECT_PREDICATE    =    predicate.getParent();    	non-compiled	[CE]  <identifier>  expected	100	None	replace
222	[BUG]  [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  =  cur.getFirstChild();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  =  cur.getFirstChild();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  SIDE_EFFECT_PREDICATE  =  cur.getFirstChild();	  cur    =    cur.getParent())    {    Predicate    <    SIDE_EFFECT_PREDICATE    =    predicate.getParent();    	non-compiled	[CE]  <identifier>  expected	100	None	replace
223	[BUG]  [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  =  p.getParent();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  =  p.getParent();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  SIDE_EFFECT_PREDICATE  =  p.getParent();	  cur    =    cur.getParent())    {    Predicate    <    SIDE_EFFECT_PREDICATE    =    predicate.getParent();    	non-compiled	[CE]  <identifier>  expected	100	None	replace
224	[BUG]  [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  =  predicate.getPrevious();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  =  predicate.getPrevious();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  SIDE_EFFECT_PREDICATE  =  predicate.getPrevious();	  cur    =    cur.getParent())    {    Predicate    <    SIDE_EFFECT_PREDICATE    =    predicate.getParent();    	non-compiled	[CE]  <identifier>  expected	100	None	replace
225	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  predicate.isLeftOf(predicate))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  predicate.isLeftOf(predicate))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  predicate.isLeftOf(predicate))  {	  cur    =    cur.getNext()    &&    predicate.isLeftOf(predicate))    {    	non-compiled	[CE]  <identifier>  expected	81	None	replace
226	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  PredicateUtil.isLeftOf(cur))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  PredicateUtil.isLeftOf(cur))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  PredicateUtil.isLeftOf(cur))  {	  cur    =    cur.getNext()    &&    predicate.isLeftOf(predicate))    {    	non-compiled	[CE]  <identifier>  expected	81	None	replace
227	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  PredicateUtil.isLeftOf(predicate))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  PredicateUtil.isLeftOf(predicate))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  PredicateUtil.isLeftOf(predicate))  {	  cur    =    cur.getNext()    &&    predicate.isLeftOf(predicate))    {    	non-compiled	[CE]  <identifier>  expected	81	None	replace
228	[BUG]  [BUGGY]  cur  =  cur.getParent()  ||  predicate.isLeftOf(cur))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  ||  predicate.isLeftOf(cur))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  ||  predicate.isLeftOf(cur))  {	  cur    =    cur.getNext()    ||    predicate.isLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
229	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  predicate.isLeftOf(cur,  p))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  predicate.isLeftOf(cur,  p))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  predicate.isLeftOf(cur,  p))  {	  cur    =    cur.getNext()    ||    predicate.isLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
230	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  p.isLeftOf(cur))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  p.isLeftOf(cur))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  p.isLeftOf(cur))  {	  cur    =    cur.getNext()    ||    predicate.isLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
231	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  cur.getParent())  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  cur.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  cur.getParent())  {	  cur    =    cur.getParent())    {    Predicate    <    Node>    cur    =    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	97	None	replace
232	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  cur.getFirstChild())  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  cur.getFirstChild())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  cur.getFirstChild())  {	  cur    =    cur.getParent())    {    Predicate    <    Node>    cur    =    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	97	None	replace
233	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  cur.getLastChild())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  cur.getLastChild())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  cur.getLastChild())  {	  cur    =    cur.getParent())    {    Predicate    <    Node>    cur    =    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	97	None	replace
234	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  cur.getPredicate())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  cur.getPredicate())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  cur.getPredicate())  {	  cur    =    cur.getParent())    {    Predicate    <    Node>    cur    =    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	97	None	replace
235	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  cur.getName())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  cur.getName())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  cur.getName())  {	  cur    =    cur.getParent())    {    Predicate    <    Node>    cur    =    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	97	None	replace
236	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  cur.getGrandparent())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  cur.getGrandparent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  cur.getGrandparent())  {	  cur    =    cur.getParent())    {    Predicate    <    Node>    cur    =    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	97	None	replace
237	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  predicate.isLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  predicate.isLeftOf(cur,  expressionRoot))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  predicate.isLeftOf(cur,  expressionRoot))  {	  cur    =    cur.getNext()    &&    predicate.isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	113	None	replace
238	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(defCfgNode,  expressionRoot))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(defCfgNode,  expressionRoot))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.isLeftOf(defCfgNode,  expressionRoot))  {	  cur    =    cur.getNext()    &&    predicate.isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
239	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(p,  expressionRoot))  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(p,  expressionRoot))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.isLeftOf(p,  expressionRoot))  {	  cur    =    cur.getNext()    &&    predicate.isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
240	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  predicate.isLeftOf(expressionRoot,  predicate))  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  predicate.isLeftOf(expressionRoot,  predicate))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  predicate.isLeftOf(expressionRoot,  predicate))  {	  cur    =    cur.getNext()    &&    predicate.isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
241	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  predicate.isLeftOf(expressionRoot,  expressionRoot))  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  predicate.isLeftOf(expressionRoot,  expressionRoot))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  predicate.isLeftOf(expressionRoot,  expressionRoot))  {	  cur    =    cur.getNext()    &&    predicate.isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
242	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  predicate.isLeftOf(cur);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  predicate.isLeftOf(cur);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  predicate.isLeftOf(cur);	  cur    =    cur.getNext()    &&    predicate.isLeftOf(cur);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
243	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(expressionRoot);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(expressionRoot);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.isLeftOf(expressionRoot);	  cur    =    cur.getNext()    &&    predicate.isLeftOf(cur);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
244	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(p);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(p);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.isLeftOf(p);	  cur    =    cur.getNext()    &&    predicate.isLeftOf(cur);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
245	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(n);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(n);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.isLeftOf(n);	  cur    =    cur.getNext()    &&    predicate.isLeftOf(cur);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
246	[BUG]  [BUGGY]  cur  =  cur.getParent()  &&  predicate.isLeftOf(cur);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  &&  predicate.isLeftOf(cur);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  &&  predicate.isLeftOf(cur);	  cur    =    cur.getNext()    &&    predicate.isLeftOf(cur);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
247	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(defCfgNode);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(defCfgNode);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.isLeftOf(defCfgNode);	  cur    =    cur.getNext()    &&    predicate.isLeftOf(cur);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
248	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  Predicate.isLeftOf(predicate))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  Predicate.isLeftOf(predicate))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  Predicate.isLeftOf(predicate))  {	  cur    =    cur.getNext()    &&    Predicate.isLeftOf(predicate))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
249	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicate.isLeftOf(cur))  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicate.isLeftOf(cur))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicate.isLeftOf(cur))  {	  cur    =    cur.getNext()    &&    Predicate.isLeftOf(predicate))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
250	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicate.isLeftOf(cur,  predicate))  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicate.isLeftOf(cur,  predicate))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicate.isLeftOf(cur,  predicate))  {	  cur    =    cur.getNext()    &&    Predicate.isLeftOf(predicate))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
251	[BUG]  [BUGGY]  cur  =  cur.getParent()  &&  Predicate.isLeftOf(predicate))  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  &&  Predicate.isLeftOf(predicate))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  &&  Predicate.isLeftOf(predicate))  {	  cur    =    cur.getNext()    &&    Predicate.isLeftOf(predicate))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
252	[BUG]  [BUGGY]  cur  =  cur.getParent()  &&  Predicate.isLeftOf(cur))  {  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  &&  Predicate.isLeftOf(cur))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  &&  Predicate.isLeftOf(cur))  {	  cur    =    cur.getNext()    &&    Predicate.isLeftOf(predicate))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
253	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicate.isLeftOf(cur.getString()))  {  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicate.isLeftOf(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicate.isLeftOf(cur.getString()))  {	  cur    =    cur.getNext()    &&    Predicate.isLeftOf(predicate))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
254	[BUG]  [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  :  predicate.getParent();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  :  predicate.getParent();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  SIDE_EFFECT_PREDICATE  :  predicate.getParent();	  Predicate    <    SIDE_EFFECT_PREDICATE    =    predicate.getParent();    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
255	[BUG]  [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  :  cur.getParent();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  :  cur.getParent();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  SIDE_EFFECT_PREDICATE  :  cur.getParent();	  Predicate    <    SIDE_EFFECT_PREDICATE    =    predicate.getParent();    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
256	[BUG]  [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  :  predicate.getNext();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  :  predicate.getNext();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  SIDE_EFFECT_PREDICATE  :  predicate.getNext();	  Predicate    <    SIDE_EFFECT_PREDICATE    =    predicate.getParent();    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
257	[BUG]  [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate.getParent()  ==  null;  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate.getParent()  ==  null;  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate.getParent()  ==  null;	  Predicate    <    SIDE_EFFECT_PREDICATE    =    predicate.getParent();    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
258	[BUG]  [BUGGY]  cur  =  cur.getParent()  &&  predicate.isLeftOf(defNode))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  &&  predicate.isLeftOf(defNode))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  &&  predicate.isLeftOf(defNode))  {	  cur    =    cur.getParent()    &&    predicate.isLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
259	[BUG]  [BUGGY]  cur  =  cur.getParent()  &&  predicate.isLeftOf(defCfgNode))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  &&  predicate.isLeftOf(defCfgNode))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  &&  predicate.isLeftOf(defCfgNode))  {	  cur    =    cur.getParent()    &&    predicate.isLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
260	[BUG]  [BUGGY]  cur  =  cur.getParent()  &&  predicate.isLeftOf(def))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  &&  predicate.isLeftOf(def))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  &&  predicate.isLeftOf(def))  {	  cur    =    cur.getParent()    &&    predicate.isLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
261	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  predicate.equals(predicate))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  predicate.equals(predicate))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  predicate.equals(predicate))  {	  cur    =    cur.getNext()    &&    predicate.equals(predicate))    {    	non-compiled	[CE]  <identifier>  expected	78	None	replace
262	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.equals(expressionRoot))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicate.equals(expressionRoot))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.equals(expressionRoot))  {	  cur    =    cur.getNext()    &&    predicate.equals(predicate))    {    	non-compiled	[CE]  <identifier>  expected	78	None	replace
263	[BUG]  [BUGGY]  cur  =  cur.getParent()  &&  predicate.equals(predicate))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  &&  predicate.equals(predicate))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  &&  predicate.equals(predicate))  {	  cur    =    cur.getNext()    &&    predicate.equals(predicate))    {    	non-compiled	[CE]  <identifier>  expected	78	None	replace
264	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.equals(defRoot))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicate.equals(defRoot))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.equals(defRoot))  {	  cur    =    cur.getNext()    &&    predicate.equals(predicate))    {    	non-compiled	[CE]  <identifier>  expected	78	None	replace
265	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.equals(def))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicate.equals(def))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.equals(def))  {	  cur    =    cur.getNext()    &&    predicate.equals(predicate))    {    	non-compiled	[CE]  <identifier>  expected	78	None	replace
266	[BUG]  [BUGGY]  cur  =  cur.getParent()  &&  Predicates.  <  PREDICATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  &&  Predicates.  <  PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  &&  Predicates.  <  PREDICATE)  {	  cur    =    cur.getParent()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	84	None	replace
267	[BUG]  [BUGGY]  cur  =  cur.getParent()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.hasChildren())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.hasChildren())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.hasChildren())  {	  cur    =    cur.getParent()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	84	None	replace
268	[BUG]  [BUGGY]  cur  =  cur.getParent()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.isLeftOf(cur))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.isLeftOf(cur))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.isLeftOf(cur))  {	  cur    =    cur.getParent()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	84	None	replace
269	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  predicate.isLeftOf(def))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  predicate.isLeftOf(def))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  predicate.isLeftOf(def))  {	  cur    =    cur.getNext()    &&    predicate.isLeftOf(def))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
270	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(def,  cur))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(def,  cur))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.isLeftOf(def,  cur))  {	  cur    =    cur.getNext()    &&    predicate.isLeftOf(def))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
271	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  cur.getType()  >=  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  cur.getType()  >=  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  cur.getType()  >=  Token.FUNCTION)  {	  cur    =    cur.getNext()    &&    cur.getType()    >=    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
272	[BUG]  [BUGGY]  cur  =  cur.getParent()  &&  cur.getType()  >=  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  &&  cur.getType()  >=  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  &&  cur.getType()  >=  Token.FUNCTION)  {	  cur    =    cur.getNext()    &&    cur.getType()    >=    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
273	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  cur.getType()  >>  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  cur.getType()  >>  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  cur.getType()  >>  Token.FUNCTION)  {	  cur    =    cur.getNext()    &&    cur.getType()    >=    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
274	[BUG]  [BUGGY]  cur  =  cur.getParent()  &&  cur.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  &&  cur.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  &&  cur.getType()  ==  Token.FUNCTION)  {	  cur    =    cur.getNext()    &&    cur.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	52	None	replace
275	[BUG]  [BUGGY]  cur  =  cur.getFirstChild()  &&  cur.getType()!=  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getFirstChild()  &&  cur.getType()!=  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getFirstChild()  &&  cur.getType()!=  Token.FUNCTION)  {	  cur    =    cur.getFirstChild()    ||    cur.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
276	[BUG]  [BUGGY]  cur  =  cur.getFirstChild()  &&  cur.getType()  >=  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getFirstChild()  &&  cur.getType()  >=  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getFirstChild()  &&  cur.getType()  >=  Token.FUNCTION)  {	  cur    =    cur.getFirstChild()    ||    cur.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
277	[BUG]  [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate!=  null  &&  predicate.isLeftOf(cur);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate!=  null  &&  predicate.isLeftOf(cur);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate!=  null  &&  predicate.isLeftOf(cur);	  cur    =    cur.getParent())    {    Predicate    <    SIDE_EFFECT_PREDICATE    ||    predicate!=    null    &&    predicate.isLeftOf(cur);    	non-compiled	[CE]  <identifier>  expected	102	None	replace
278	[BUG]  [BUGGY]  predicate  =  cur.getNext())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate!=  null  &&  predicate.isLeftOf(cur);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  predicate  =  cur.getNext())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate!=  null  &&  predicate.isLeftOf(cur);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	predicate  =  cur.getNext())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate!=  null  &&  predicate.isLeftOf(cur);	  cur    =    cur.getParent())    {    Predicate    <    SIDE_EFFECT_PREDICATE    ||    predicate!=    null    &&    predicate.isLeftOf(cur);    	non-compiled	[CE]  <identifier>  expected	102	None	replace
279	[BUG]  [BUGGY]  predicate  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate!=  null  &&  predicate.isLeftOf(cur);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  predicate  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate!=  null  &&  predicate.isLeftOf(cur);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	predicate  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate!=  null  &&  predicate.isLeftOf(cur);	  cur    =    cur.getParent())    {    Predicate    <    SIDE_EFFECT_PREDICATE    ||    predicate!=    null    &&    predicate.isLeftOf(cur);    	non-compiled	[CE]  <identifier>  expected	102	None	replace
280	[BUG]  [BUGGY]  p  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate!=  null  &&  predicate.isLeftOf(cur);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate!=  null  &&  predicate.isLeftOf(cur);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate!=  null  &&  predicate.isLeftOf(cur);	  cur    =    cur.getParent())    {    Predicate    <    SIDE_EFFECT_PREDICATE    ||    predicate!=    null    &&    predicate.isLeftOf(cur);    	non-compiled	[CE]  <identifier>  expected	102	None	replace
281	[BUG]  [BUGGY]  p  =  cur.getNext())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate!=  null  &&  predicate.isLeftOf(cur);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getNext())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate!=  null  &&  predicate.isLeftOf(cur);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getNext())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate!=  null  &&  predicate.isLeftOf(cur);	  cur    =    cur.getParent())    {    Predicate    <    SIDE_EFFECT_PREDICATE    ||    predicate!=    null    &&    predicate.isLeftOf(cur);    	non-compiled	[CE]  <identifier>  expected	102	None	replace
282	[BUG]  [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  &&  predicate!=  null  &&  predicate.isLeftOf(cur);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  &&  predicate!=  null  &&  predicate.isLeftOf(cur);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  SIDE_EFFECT_PREDICATE  &&  predicate!=  null  &&  predicate.isLeftOf(cur);	  cur    =    cur.getParent())    {    Predicate    <    SIDE_EFFECT_PREDICATE    ||    predicate!=    null    &&    predicate.isLeftOf(cur);    	non-compiled	[CE]  <identifier>  expected	102	None	replace
283	[BUG]  [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate  ==  null  &&  predicate.isLeftOf(cur);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate  ==  null  &&  predicate.isLeftOf(cur);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate  ==  null  &&  predicate.isLeftOf(cur);	  cur    =    cur.getParent())    {    Predicate    <    SIDE_EFFECT_PREDICATE    ||    predicate!=    null    &&    predicate.isLeftOf(cur);    	non-compiled	[CE]  <identifier>  expected	102	None	replace
284	[BUG]  [BUGGY]  cur  =  cur.getFirstChild()  &&  NodeUtil.isExpressionNode(cur))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getFirstChild()  &&  NodeUtil.isExpressionNode(cur))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getFirstChild()  &&  NodeUtil.isExpressionNode(cur))  {	  cur    =    cur.getLastChild()    &&    NodeUtil.isExpressionNode(cur))    {    	non-compiled	[CE]  <identifier>  expected	77	None	replace
285	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  ||  NodeUtil.isExpressionNode(cur))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  ||  NodeUtil.isExpressionNode(cur))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  ||  NodeUtil.isExpressionNode(cur))  {	  cur    =    cur.getLastChild()    &&    NodeUtil.isExpressionNode(cur))    {    	non-compiled	[CE]  <identifier>  expected	77	None	replace
286	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  &&  NodeUtil.isFunctionDeclaration(cur))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  &&  NodeUtil.isFunctionDeclaration(cur))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  &&  NodeUtil.isFunctionDeclaration(cur))  {	  cur    =    cur.getLastChild()    &&    NodeUtil.isExpressionNode(cur))    {    	non-compiled	[CE]  <identifier>  expected	77	None	replace
287	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  &&  NodeUtil.isFunction(cur))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  &&  NodeUtil.isFunction(cur))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  &&  NodeUtil.isFunction(cur))  {	  cur    =    cur.getLastChild()    &&    NodeUtil.isExpressionNode(cur))    {    	non-compiled	[CE]  <identifier>  expected	77	None	replace
288	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  &&  NodeUtil.isAssignmentOp(cur))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  &&  NodeUtil.isAssignmentOp(cur))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  &&  NodeUtil.isAssignmentOp(cur))  {	  cur    =    cur.getLastChild()    &&    NodeUtil.isExpressionNode(cur))    {    	non-compiled	[CE]  <identifier>  expected	77	None	replace
289	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  &&  NodeUtil.mayHaveSideEffects(cur))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  &&  NodeUtil.mayHaveSideEffects(cur))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  &&  NodeUtil.mayHaveSideEffects(cur))  {	  cur    =    cur.getLastChild()    &&    NodeUtil.isExpressionNode(cur))    {    	non-compiled	[CE]  <identifier>  expected	77	None	replace
290	[BUG]  [BUGGY]  cur  =  p.getNext()  &&  cur.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  p.getNext()  &&  cur.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  p.getNext()  &&  cur.getType()  ==  Token.FUNCTION)  {	  cur    =    p.getNext()    ||    cur.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	53	None	replace
291	[BUG]  [BUGGY]  cur  =  cur.getPrevious()  &&  cur.getType()  ==  Token.NAME)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getPrevious()  &&  cur.getType()  ==  Token.NAME)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getPrevious()  &&  cur.getType()  ==  Token.NAME)  {	  cur    =    cur.getPrevious()    ||    cur.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  <identifier>  expected	88	None	replace
292	[BUG]  [BUGGY]  cur  =  cur.getPrevious()  ||  cur.getType()!=  Token.NAME)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getPrevious()  ||  cur.getType()!=  Token.NAME)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getPrevious()  ||  cur.getType()!=  Token.NAME)  {	  cur    =    cur.getPrevious()    ||    cur.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  <identifier>  expected	88	None	replace
293	[BUG]  [BUGGY]  cur  =  cur.removeFirstChild(),  predicate)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.removeFirstChild(),  predicate)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.removeFirstChild(),  predicate)  {	  cur    =    cur.removeFirstChild())    {    	non-compiled	[CE]  <identifier>  expected	121	None	replace
294	[BUG]  [BUGGY]  cur  =  cur.removeFirstChild()  &&  predicate.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.removeFirstChild()  &&  predicate.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.removeFirstChild()  &&  predicate.getType()  ==  Token.FUNCTION)  {	  cur    =    cur.removeFirstChild())    {    	non-compiled	[CE]  <identifier>  expected	121	None	replace
295	[BUG]  [BUGGY]  cur  =  cur.removeFirstChild()  &&  predicate.getType()  ==  Token.NAME)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.removeFirstChild()  &&  predicate.getType()  ==  Token.NAME)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.removeFirstChild()  &&  predicate.getType()  ==  Token.NAME)  {	  cur    =    cur.removeFirstChild())    {    	non-compiled	[CE]  <identifier>  expected	121	None	replace
296	[BUG]  [BUGGY]  cur  =  cur.removeFirstChild()  &&  predicate.isLeftOf(cur))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.removeFirstChild()  &&  predicate.isLeftOf(cur))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.removeFirstChild()  &&  predicate.isLeftOf(cur))  {	  cur    =    cur.removeFirstChild())    {    	non-compiled	[CE]  <identifier>  expected	121	None	replace
297	[BUG]  [BUGGY]  cur  =  cur.getName()  ||  cur.getType()  ==  Token.VAR)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getName()  ||  cur.getType()  ==  Token.VAR)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getName()  ||  cur.getType()  ==  Token.VAR)  {	  cur    =    cur.getParent()    ||    cur.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
298	[BUG]  [BUGGY]  NodeUtil.checkLeftOf(cur,  expressionRoot,  predicate,  def);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.checkLeftOf(cur,  expressionRoot,  predicate,  def);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.checkLeftOf(cur,  expressionRoot,  predicate,  def);	  NodeUtil.checkLeftOf(cur,    expressionRoot,    predicate);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
299	[BUG]  [BUGGY]  NodeUtil.checkLeftOf(n,  expressionRoot,  predicate);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.checkLeftOf(n,  expressionRoot,  predicate);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.checkLeftOf(n,  expressionRoot,  predicate);	  NodeUtil.checkLeftOf(cur,    expressionRoot,    predicate);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
300	[BUG]  [BUGGY]  NodeUtil.checkLeftOf(cur,  expressionRoot,  predicate,  defCfgNode);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.checkLeftOf(cur,  expressionRoot,  predicate,  defCfgNode);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.checkLeftOf(cur,  expressionRoot,  predicate,  defCfgNode);	  NodeUtil.checkLeftOf(cur,    expressionRoot,    predicate);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
301	[BUG]  [BUGGY]  NodeUtil.checkLeftOf(cur,  expressionRoot,  predicate,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.checkLeftOf(cur,  expressionRoot,  predicate,  numUseWithinUseCfgNode);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.checkLeftOf(cur,  expressionRoot,  predicate,  numUseWithinUseCfgNode);	  NodeUtil.checkLeftOf(cur,    expressionRoot,    predicate);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
302	[BUG]  [BUGGY]  NodeUtil.checkLeftOf(p,  expressionRoot,  predicate);  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.checkLeftOf(p,  expressionRoot,  predicate);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.checkLeftOf(p,  expressionRoot,  predicate);	  NodeUtil.checkLeftOf(cur,    expressionRoot,    predicate);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
303	[BUG]  [BUGGY]  NodeUtil.checkLeftOf(cur,  expressionRoot,  predicate,  defNode);  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.checkLeftOf(cur,  expressionRoot,  predicate,  defNode);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.checkLeftOf(cur,  expressionRoot,  predicate,  defNode);	  NodeUtil.checkLeftOf(cur,    expressionRoot,    predicate);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
304	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  Predicates.  <  Node>empty)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  Predicates.  <  Node>empty)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  Predicates.  <  Node>empty)  {	  cur    =    cur.getNext()    &&    Predicates.    <    Node>empty)    {    	non-compiled	[CE]  <identifier>  expected	83	None	replace
305	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.  <  Node>empty)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicate.  <  Node>empty)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.  <  Node>empty)  {	  cur    =    cur.getNext()    &&    Predicates.    <    Node>empty)    {    	non-compiled	[CE]  <identifier>  expected	83	None	replace
306	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  Node>empty,  predicate)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  Node>empty,  predicate)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  Node>empty,  predicate)  {	  cur    =    cur.getNext()    &&    Predicates.    <    Node>empty)    {    	non-compiled	[CE]  <identifier>  expected	83	None	replace
307	[BUG]  [BUGGY]  cur  =  cur.getParent()  &&  Predicates.  <  Node>empty)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  &&  Predicates.  <  Node>empty)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  &&  Predicates.  <  Node>empty)  {	  cur    =    cur.getNext()    &&    Predicates.    <    Node>empty)    {    	non-compiled	[CE]  <identifier>  expected	83	None	replace
308	[BUG]  [BUGGY]  cur  =  cur.getPrevious()  &&  Predicates.  <  Node>empty)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getPrevious()  &&  Predicates.  <  Node>empty)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getPrevious()  &&  Predicates.  <  Node>empty)  {	  cur    =    cur.getNext()    &&    Predicates.    <    Node>empty)    {    	non-compiled	[CE]  <identifier>  expected	83	None	replace
309	[BUG]  [BUGGY]  cur  =  cur.getName()  ||  cur.getType()  ==  Token.NAME)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getName()  ||  cur.getType()  ==  Token.NAME)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getName()  ||  cur.getType()  ==  Token.NAME)  {	  cur    =    cur.getParent()    ||    cur.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
310	[BUG]  [BUGGY]  cur  =  cur.getParent()  ||  cur.getType()!=  Token.NAME)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  ||  cur.getType()!=  Token.NAME)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  ||  cur.getType()!=  Token.NAME)  {	  cur    =    cur.getParent()    ||    cur.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
311	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.getType()!=  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.getType()!=  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.getType()!=  Token.FUNCTION)  {	  cur    =    cur.getNext()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE    ||    predicate.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
312	[BUG]  [BUGGY]  cur  =  cur.getParent()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.getType()  ==  Token.FUNCTION)  {	  cur    =    cur.getNext()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE    ||    predicate.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
313	[BUG]  [BUGGY]  cur  =  predicate.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  cur.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  predicate.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  cur.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  predicate.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  cur.getType()  ==  Token.FUNCTION)  {	  cur    =    cur.getNext()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE    ||    predicate.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
314	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  SECONDS_PREDICATE  ||  predicate.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  SECONDS_PREDICATE  ||  predicate.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  SECONDS_PREDICATE  ||  predicate.getType()  ==  Token.FUNCTION)  {	  cur    =    cur.getNext()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE    ||    predicate.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
315	[BUG]  [BUGGY]  cur  =  cur.getFirstChild()  &&  predicate.hasChildren())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getFirstChild()  &&  predicate.hasChildren())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getFirstChild()  &&  predicate.hasChildren())  {	  cur    =    cur.getParent()    &&    predicate.hasChildren())    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
316	[BUG]  [BUGGY]  cur  =  p.getParent()  &&  predicate.hasChildren())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  p.getParent()  &&  predicate.hasChildren())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  p.getParent()  &&  predicate.hasChildren())  {	  cur    =    cur.getParent()    &&    predicate.hasChildren())    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
317	[BUG]  [BUGGY]  cur  =  cur.getName()  &&  predicate.hasChildren())  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getName()  &&  predicate.hasChildren())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getName()  &&  predicate.hasChildren())  {	  cur    =    cur.getParent()    &&    predicate.hasChildren())    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
318	[BUG]  [BUGGY]  cur  =  cur.getName()  ||  cur.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getName()  ||  cur.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getName()  ||  cur.getType()  ==  Token.FUNCTION)  {	  cur    =    cur.getParent()    ||    cur.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	89	None	replace
319	[BUG]  [BUGGY]  cur  =  cur.getFirstChild()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getFirstChild()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getFirstChild()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE)  {	  cur    =    cur.getLastChild()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	76	None	replace
320	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  ||  Predicates.  <  SIDE_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  ||  Predicates.  <  SIDE_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  ||  Predicates.  <  SIDE_EFFECT_PREDICATE)  {	  cur    =    cur.getLastChild()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	76	None	replace
321	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  Predicates.  <  SIDE_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  Predicates.  <  SIDE_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  Predicates.  <  SIDE_EFFECT_PREDICATE)  {	  cur    =    cur.getLastChild()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	76	None	replace
322	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  &&  Predicates.  <  CANCEL_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  &&  Predicates.  <  CANCEL_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  &&  Predicates.  <  CANCEL_EFFECT_PREDICATE)  {	  cur    =    cur.getLastChild()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	76	None	replace
323	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  &&  Predicates.  <  PREDICATE)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  &&  Predicates.  <  PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  &&  Predicates.  <  PREDICATE)  {	  cur    =    cur.getLastChild()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	76	None	replace
324	[BUG]  [BUGGY]  cur  =  cur.getFirstChild()  &  SIDE_EFFECT_PREDICATE);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getFirstChild()  &  SIDE_EFFECT_PREDICATE);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getFirstChild()  &  SIDE_EFFECT_PREDICATE);	  cur    =    cur.getLastChild()    &    SIDE_EFFECT_PREDICATE);    	non-compiled	[CE]  <identifier>  expected	118	None	replace
325	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  -  SIDE_EFFECT_PREDICATE);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  -  SIDE_EFFECT_PREDICATE);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  -  SIDE_EFFECT_PREDICATE);	  cur    =    cur.getLastChild()    &    SIDE_EFFECT_PREDICATE);    	non-compiled	[CE]  <identifier>  expected	118	None	replace
326	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  +  SIDE_EFFECT_PREDICATE);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  +  SIDE_EFFECT_PREDICATE);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  +  SIDE_EFFECT_PREDICATE);	  cur    =    cur.getLastChild()    &    SIDE_EFFECT_PREDICATE);    	non-compiled	[CE]  <identifier>  expected	118	None	replace
327	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  &  1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  &  1);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  &  1);	  cur    =    cur.getLastChild()    &    SIDE_EFFECT_PREDICATE);    	non-compiled	[CE]  <identifier>  expected	118	None	replace
328	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  /  SIDE_EFFECT_PREDICATE);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  /  SIDE_EFFECT_PREDICATE);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  /  SIDE_EFFECT_PREDICATE);	  cur    =    cur.getLastChild()    &    SIDE_EFFECT_PREDICATE);    	non-compiled	[CE]  <identifier>  expected	118	None	replace
329	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  |  SIDE_EFFECT_PREDICATE);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  |  SIDE_EFFECT_PREDICATE);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  |  SIDE_EFFECT_PREDICATE);	  cur    =    cur.getLastChild()    &    SIDE_EFFECT_PREDICATE);    	non-compiled	[CE]  <identifier>  expected	118	None	replace
330	[BUG]  [BUGGY]  p  =  cur.getNext())  {  if(cur.getType()  ==  Token.FUNCTION)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getNext())  {  if(cur.getType()  ==  Token.FUNCTION)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getNext())  {  if(cur.getType()  ==  Token.FUNCTION)  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.FUNCTION)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
331	[BUG]  [BUGGY]  p  =  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.FUNCTION)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
332	[BUG]  [BUGGY]  p  =  cur.getNext())  {  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.apply(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getNext())  {  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getNext())  {  if(predicate.getType()  ==  Token.FUNCTION  ||  predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.FUNCTION)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
333	[BUG]  [BUGGY]  p  =  cur.getNext())  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getNext())  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getNext())  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.FUNCTION)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
334	[BUG]  [BUGGY]  p  =  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION  ||  predicate.apply(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION  ||  predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION  ||  predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.FUNCTION)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
335	[BUG]  [BUGGY]  p  =  cur.getNext())  {  if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getNext())  {  if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getNext())  {  if(cur.getType()  ==  Token.FUNCTION  ||  cur.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.FUNCTION)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
336	[BUG]  [BUGGY]  cur  =  cur.getFirstChild()  &  SIDE_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getFirstChild()  &  SIDE_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getFirstChild()  &  SIDE_EFFECT_PREDICATE)  {	  cur    =    cur.getLastChild()    &    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	117	None	replace
337	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  +  SIDE_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  +  SIDE_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  +  SIDE_EFFECT_PREDICATE)  {	  cur    =    cur.getLastChild()    &    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	117	None	replace
338	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  -  SIDE_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  -  SIDE_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  -  SIDE_EFFECT_PREDICATE)  {	  cur    =    cur.getLastChild()    &    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	117	None	replace
339	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  &  1L)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  &  1L)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  &  1L)  {	  cur    =    cur.getLastChild()    &    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	117	None	replace
340	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  &  PREDICATE)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  &  PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  &  PREDICATE)  {	  cur    =    cur.getLastChild()    &    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	117	None	replace
341	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  &  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  &  0)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  &  0)  {	  cur    =    cur.getLastChild()    &    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	117	None	replace
342	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  Predicates.  <  PREDICATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  Predicates.  <  PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  Predicates.  <  PREDICATE)  {	  cur    =    cur.getNext()    &&    Predicates.    <    PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
343	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  MISSING_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  MISSING_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  MISSING_EFFECT_PREDICATE)  {	  cur    =    cur.getNext()    &&    Predicates.    <    PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
344	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  LAST_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  LAST_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  LAST_EFFECT_PREDICATE)  {	  cur    =    cur.getNext()    &&    Predicates.    <    PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
345	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  ERROR)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  ERROR)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  ERROR)  {	  cur    =    cur.getNext()    &&    Predicates.    <    PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
346	[BUG]  [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {	  cur    =    cur.getParent())    {    Predicate    <    SIDE_EFFECT_PREDICATE    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	98	None	replace
347	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME)  {  cur  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur.getType()  ==  Token.NAME)  {  cur  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur.getType()  ==  Token.NAME)  {  cur  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {	  cur    =    cur.getParent())    {    Predicate    <    SIDE_EFFECT_PREDICATE    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	98	None	replace
348	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION)  {  cur  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur.getType()  ==  Token.FUNCTION)  {  cur  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur.getType()  ==  Token.FUNCTION)  {  cur  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {	  cur    =    cur.getParent())    {    Predicate    <    SIDE_EFFECT_PREDICATE    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	98	None	replace
349	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.VAR)  {  cur  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur.getType()  ==  Token.VAR)  {  cur  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur.getType()  ==  Token.VAR)  {  cur  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {	  cur    =    cur.getParent())    {    Predicate    <    SIDE_EFFECT_PREDICATE    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	98	None	replace
350	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.CALL)  {  cur  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur.getType()  ==  Token.CALL)  {  cur  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur.getType()  ==  Token.CALL)  {  cur  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {	  cur    =    cur.getParent())    {    Predicate    <    SIDE_EFFECT_PREDICATE    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	98	None	replace
351	[BUG]  [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  &&  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  &&  predicate.apply(cur))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  SIDE_EFFECT_PREDICATE  &&  predicate.apply(cur))  {	  cur    =    cur.getParent())    {    Predicate    <    SIDE_EFFECT_PREDICATE    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	98	None	replace
352	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME)  {  cur  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur.getType()  ==  Token.NAME)  {  cur  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur.getType()  ==  Token.NAME)  {  cur  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {  }	  cur    =    cur.getParent())    {    Predicate    <    SIDE_EFFECT_PREDICATE    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	98	None	replace
353	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  cur.getType()  ==  Token.NAME  &&  name.equals(cur.getString()))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  cur.getType()  ==  Token.NAME  &&  name.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  cur.getType()  ==  Token.NAME  &&  name.equals(cur.getString()))  {	  cur    =    cur.getNext()    ||    cur.getType()    ==    Token.NAME    &&    name.equals(cur.getString()))    {    	non-compiled	[CE]  <identifier>  expected	112	None	replace
354	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  cur.getType()!=  Token.NAME  &&  name.equals(cur.getString()))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  cur.getType()!=  Token.NAME  &&  name.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  cur.getType()!=  Token.NAME  &&  name.equals(cur.getString()))  {	  cur    =    cur.getNext()    ||    cur.getType()    ==    Token.NAME    &&    name.equals(cur.getString()))    {    	non-compiled	[CE]  <identifier>  expected	112	None	replace
355	[BUG]  [BUGGY]  cur  =  cur.getParent()  ||  cur.getType()  ==  Token.NAME  &&  name.equals(cur.getString()))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  ||  cur.getType()  ==  Token.NAME  &&  name.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  ||  cur.getType()  ==  Token.NAME  &&  name.equals(cur.getString()))  {	  cur    =    cur.getNext()    ||    cur.getType()    ==    Token.NAME    &&    name.equals(cur.getString()))    {    	non-compiled	[CE]  <identifier>  expected	112	None	replace
356	[BUG]  [BUGGY]  cur  =  cur.getFirstChild()  ||  cur.getType()  ==  Token.NAME  &&  name.equals(cur.getString()))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getFirstChild()  ||  cur.getType()  ==  Token.NAME  &&  name.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getFirstChild()  ||  cur.getType()  ==  Token.NAME  &&  name.equals(cur.getString()))  {	  cur    =    cur.getNext()    ||    cur.getType()    ==    Token.NAME    &&    name.equals(cur.getString()))    {    	non-compiled	[CE]  <identifier>  expected	112	None	replace
357	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  cur.getType()!=  Token.NAME  &&  name.equals(cur.getString()))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  cur.getType()!=  Token.NAME  &&  name.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  cur.getType()!=  Token.NAME  &&  name.equals(cur.getString()))  {	  cur    =    cur.getNext()    ||    cur.getType()    ==    Token.NAME    &&    name.equals(cur.getString()))    {    	non-compiled	[CE]  <identifier>  expected	112	None	replace
358	[BUG]  [BUGGY]  Predicate  predicate  =  cur.getNext();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  predicate  =  cur.getNext();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  predicate  =  cur.getNext();	  Predicate    predicate    =    cur.getPredicate();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
359	[BUG]  [BUGGY]  Predicate  predicate  =  cur.getFirstChild();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  predicate  =  cur.getFirstChild();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  predicate  =  cur.getFirstChild();	  Predicate    predicate    =    cur.getPredicate();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
360	[BUG]  [BUGGY]  Predicate  predicate  =  cur.getLastChild();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  predicate  =  cur.getLastChild();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  predicate  =  cur.getLastChild();	  Predicate    predicate    =    cur.getPredicate();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
361	[BUG]  [BUGGY]  Predicate  predicate  =  cur.getNode();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  predicate  =  cur.getNode();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  predicate  =  cur.getNode();	  Predicate    predicate    =    cur.getPredicate();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
362	[BUG]  [BUGGY]  Predicate  predicate  =  cur.getPredicate()  +  1;  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  predicate  =  cur.getPredicate()  +  1;  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  predicate  =  cur.getPredicate()  +  1;	  Predicate    predicate    =    cur.getPredicate();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
363	[BUG]  [BUGGY]  Predicate  predicate  =  cur.getPredicate(),  predicate;  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  predicate  =  cur.getPredicate(),  predicate;  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  predicate  =  cur.getPredicate(),  predicate;	  Predicate    predicate    =    cur.getPredicate();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
364	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  n.getNext();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  n.getNext();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  n.getNext();	  Predicate    <    Node>    cur    =    cur.getNext();    	non-compiled	[CE]  <identifier>  expected	60	None	replace
365	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  expressionRoot.getNext();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  expressionRoot.getNext();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  expressionRoot.getNext();	  Predicate    <    Node>    cur    =    cur.getNext();    	non-compiled	[CE]  <identifier>  expected	60	None	replace
366	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  cur.getNext(),  predicate);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  cur.getNext(),  predicate);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  cur.getNext(),  predicate);	  Predicate    <    Node>    cur    =    cur.getNext();    	non-compiled	[CE]  <identifier>  expected	60	None	replace
367	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  cur.getNext(),  predicate;  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  cur.getNext(),  predicate;  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  cur.getNext(),  predicate;	  Predicate    <    Node>    cur    =    cur.getNext();    	non-compiled	[CE]  <identifier>  expected	60	None	replace
368	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  predicate.isLeftOf(defNode))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  predicate.isLeftOf(defNode))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  predicate.isLeftOf(defNode))  {	  cur    =    cur.getNext()    &&    predicate.isLeftOf(defNode))    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
369	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(defCfgNode))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(defCfgNode))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.isLeftOf(defCfgNode))  {	  cur    =    cur.getNext()    &&    predicate.isLeftOf(defNode))    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
370	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(defRoot))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(defRoot))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.isLeftOf(defRoot))  {	  cur    =    cur.getNext()    &&    predicate.isLeftOf(defNode))    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
371	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(n,  predicate);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.copyCurrentStructure(n,  predicate);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.copyCurrentStructure(n,  predicate);	  NodeUtil.copyCurrentStructure(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
372	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(expressionRoot,  predicate);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.copyCurrentStructure(expressionRoot,  predicate);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.copyCurrentStructure(expressionRoot,  predicate);	  NodeUtil.copyCurrentStructure(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
373	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(predicate,  cur);  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.copyCurrentStructure(predicate,  cur);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.copyCurrentStructure(predicate,  cur);	  NodeUtil.copyCurrentStructure(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
374	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(cfgNode,  predicate);  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.copyCurrentStructure(cfgNode,  predicate);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.copyCurrentStructure(cfgNode,  predicate);	  NodeUtil.copyCurrentStructure(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
375	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(p,  predicate);  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.copyCurrentStructure(p,  predicate);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.copyCurrentStructure(p,  predicate);	  NodeUtil.copyCurrentStructure(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
376	[BUG]  [BUGGY]  cur  =  cur.getNext()  +  p.hasChildren())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  +  p.hasChildren())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  +  p.hasChildren())  {	  cur    =    cur.getNext()    +    predicate.hasChildren())    {    	non-compiled	[CE]  <identifier>  expected	103	None	replace
377	[BUG]  [BUGGY]  cur  =  cur.getNext()  +  predicate.getLastChild())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  +  predicate.getLastChild())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  +  predicate.getLastChild())  {	  cur    =    cur.getNext()    +    predicate.hasChildren())    {    	non-compiled	[CE]  <identifier>  expected	103	None	replace
378	[BUG]  [BUGGY]  cur  =  cur.getNext()  +  predicate.getChildren())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  +  predicate.getChildren())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  +  predicate.getChildren())  {	  cur    =    cur.getNext()    +    predicate.hasChildren())    {    	non-compiled	[CE]  <identifier>  expected	103	None	replace
379	[BUG]  [BUGGY]  cur  =  cur.getNext()  +  predicate.getParent())  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  +  predicate.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  +  predicate.getParent())  {	  cur    =    cur.getNext()    +    predicate.hasChildren())    {    	non-compiled	[CE]  <identifier>  expected	103	None	replace
380	[BUG]  [BUGGY]  cur  =  cur.getNext()  +  predicate.getChildCount())  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  +  predicate.getChildCount())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  +  predicate.getChildCount())  {	  cur    =    cur.getNext()    +    predicate.hasChildren())    {    	non-compiled	[CE]  <identifier>  expected	103	None	replace
381	[BUG]  [BUGGY]  cur  =  cur.getNext()  +  parent.hasChildren())  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  +  parent.hasChildren())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  +  parent.hasChildren())  {	  cur    =    cur.getNext()    +    predicate.hasChildren())    {    	non-compiled	[CE]  <identifier>  expected	103	None	replace
382	[BUG]  [BUGGY]  cur  =  cur.getFirstChild()  ||  cur.getType()!=  Token.NAME)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getFirstChild()  ||  cur.getType()!=  Token.NAME)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getFirstChild()  ||  cur.getType()!=  Token.NAME)  {	  cur    =    cur.getNext()    ||    cur.getType()!=    Token.NAME)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
383	[BUG]  [BUGGY]  cur  =  predicate.getNext()  &&  Predicates.  <  >  SIDE_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  predicate.getNext()  &&  Predicates.  <  >  SIDE_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  predicate.getNext()  &&  Predicates.  <  >  SIDE_EFFECT_PREDICATE)  {	  cur    =    cur.getNext()    &&    Predicates.    <    >    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	82	None	replace
384	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  Predicates.  <  >  SIDE_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  Predicates.  <  >  SIDE_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  Predicates.  <  >  SIDE_EFFECT_PREDICATE)  {	  cur    =    cur.getNext()    &&    Predicates.    <    >    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	82	None	replace
385	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  Predicates.  <  >  SIDE_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  Predicates.  <  >  SIDE_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  Predicates.  <  >  SIDE_EFFECT_PREDICATE)  {	  cur    =    cur.getNext()    &&    Predicates.    <    >    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	82	None	replace
386	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  >  CANCEL_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  >  CANCEL_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  >  CANCEL_EFFECT_PREDICATE)  {	  cur    =    cur.getNext()    &&    Predicates.    <    >    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	82	None	replace
387	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  ||  predicate.equals(cur.getString()))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  ||  predicate.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  ||  predicate.equals(cur.getString()))  {	  cur    =    cur.getLastChild()    &&    predicate.equals(cur.getString()))    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
388	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  &&  predicate.equals(predicate.getString()))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  &&  predicate.equals(predicate.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  &&  predicate.equals(predicate.getString()))  {	  cur    =    cur.getLastChild()    &&    predicate.equals(cur.getString()))    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
389	[BUG]  [BUGGY]  cur  =  cur.getParent()  ||  predicate.equals(cur.getString()))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  ||  predicate.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  ||  predicate.equals(cur.getString()))  {	  cur    =    cur.getNext()    ||    predicate.equals(cur.getString()))    {    	non-compiled	[CE]  <identifier>  expected	116	None	replace
390	[BUG]  [BUGGY]  cur  =  cur.getFirstChild()  ||  predicate.equals(cur.getString()))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getFirstChild()  ||  predicate.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getFirstChild()  ||  predicate.equals(cur.getString()))  {	  cur    =    cur.getNext()    ||    predicate.equals(cur.getString()))    {    	non-compiled	[CE]  <identifier>  expected	116	None	replace
391	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  predicate.equals(p.getString()))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  predicate.equals(p.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  predicate.equals(p.getString()))  {	  cur    =    cur.getNext()    ||    predicate.equals(cur.getString()))    {    	non-compiled	[CE]  <identifier>  expected	116	None	replace
392	[BUG]  [BUGGY]  cur  =  cur.getNext(),  predicate)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext(),  predicate)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext(),  predicate)  {	  cur    =    cur.getLastChild(),    predicate)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
393	[BUG]  [BUGGY]  cur  =  cur.getLastChild(),  p)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild(),  p)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild(),  p)  {	  cur    =    cur.getLastChild(),    predicate)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
394	[BUG]  [BUGGY]  cur  =  cur.getLastChild(),  predicate);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild(),  predicate);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild(),  predicate);	  cur    =    cur.getLastChild(),    predicate)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
395	[BUG]  [BUGGY]  cur  =  p.getLastChild(),  predicate)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  p.getLastChild(),  predicate)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  p.getLastChild(),  predicate)  {	  cur    =    cur.getLastChild(),    predicate)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
396	[BUG]  [BUGGY]  NodeUtil.removeChild(predicate);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.removeChild(predicate);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.removeChild(predicate);	  NodeUtil.removeChild(cur);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
397	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  cur);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.removeChild(parent,  cur);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.removeChild(parent,  cur);	  NodeUtil.removeChild(cur);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
398	[BUG]  [BUGGY]  NodeUtil.removeChild(p);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.removeChild(p);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.removeChild(p);	  NodeUtil.removeChild(cur);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
399	[BUG]  [BUGGY]  NodeUtil.removeChild(n);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.removeChild(n);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.removeChild(n);	  NodeUtil.removeChild(cur);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
400	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {	  cur    =    cur.getNext()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
401	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(p.getNext()))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(p.getNext()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(p.getNext()))  {	  cur    =    cur.getNext()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
402	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(predicate))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(predicate))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(predicate))  {	  cur    =    cur.getNext()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
403	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(p.getLastChild()))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(p.getLastChild()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(p.getLastChild()))  {	  cur    =    cur.getNext()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
404	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(p))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(p))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(p))  {	  cur    =    cur.getNext()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
405	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(defRoot))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(defRoot))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(defRoot))  {	  cur    =    cur.getNext()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
406	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  Predicates.  <  LIVE_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  Predicates.  <  LIVE_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  Predicates.  <  LIVE_EFFECT_PREDICATE)  {	  cur    =    cur.getNext()    &&    Predicates.    <    LIVE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	109	None	replace
407	[BUG]  [BUGGY]  cur  =  cur.getParent()  &&  Predicates.  <  LIVE_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  &&  Predicates.  <  LIVE_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  &&  Predicates.  <  LIVE_EFFECT_PREDICATE)  {	  cur    =    cur.getNext()    &&    Predicates.    <    LIVE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	109	None	replace
408	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  Predicates.  <  LIVE_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  Predicates.  <  LIVE_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  Predicates.  <  LIVE_EFFECT_PREDICATE)  {	  cur    =    cur.getNext()    &&    Predicates.    <    LIVE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	109	None	replace
409	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  LIVE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  LIVE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  LIVE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {	  cur    =    cur.getNext()    &&    Predicates.    <    LIVE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	109	None	replace
410	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  CANCEL_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  CANCEL_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  CANCEL_EFFECT_PREDICATE)  {	  cur    =    cur.getNext()    &&    Predicates.    <    LIVE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	109	None	replace
411	[BUG]  [BUGGY]  parent  ==  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  parent  ==  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	parent  ==  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.NAME)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
412	[BUG]  [BUGGY]  Predicate  predicate  =  cur.getPredicate())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  predicate  =  cur.getPredicate())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  predicate  =  cur.getPredicate())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.NAME)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
413	[BUG]  [BUGGY]  Predicate  predicate  =  cur.getPredicate())  {  if(predicate.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  predicate  =  cur.getPredicate())  {  if(predicate.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  predicate  =  cur.getPredicate())  {  if(predicate.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.NAME)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
414	[BUG]  [BUGGY]  ||  cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  ||  cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	||  cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.NAME)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
415	[BUG]  [BUGGY]  parent  ==  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getNext())  {  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  parent  ==  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getNext())  {  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	parent  ==  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getNext())  {  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.NAME)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
416	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.NAME)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
417	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  predicate.equals(predicate.getString()))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  predicate.equals(predicate.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  predicate.equals(predicate.getString()))  {	  cur    =    cur.getNext()    &&    predicate.equals(predicate.getString()))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
418	[BUG]  [BUGGY]  cur  =  cur.getParent()  &&  predicate.equals(predicate.getString()))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  &&  predicate.equals(predicate.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  &&  predicate.equals(predicate.getString()))  {	  cur    =    cur.getNext()    &&    predicate.equals(predicate.getString()))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
419	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  name.equals(predicate.getString()))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  name.equals(predicate.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  name.equals(predicate.getString()))  {	  cur    =    cur.getNext()    &&    predicate.equals(predicate.getString()))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
420	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  predicate.isLeftOf(cur));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  predicate.isLeftOf(cur));  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  predicate.isLeftOf(cur));	  cur    =    cur.getNext()    &&    predicate.isLeftOf(cur));    	non-compiled	[CE]  <identifier>  expected	115	None	replace
421	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(p));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(p));  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.isLeftOf(p));	  cur    =    cur.getNext()    &&    predicate.isLeftOf(cur));    	non-compiled	[CE]  <identifier>  expected	115	None	replace
422	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(expressionRoot));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(expressionRoot));  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.isLeftOf(expressionRoot));	  cur    =    cur.getNext()    &&    predicate.isLeftOf(cur));    	non-compiled	[CE]  <identifier>  expected	115	None	replace
423	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(n));  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(n));  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.isLeftOf(n));	  cur    =    cur.getNext()    &&    predicate.isLeftOf(cur));    	non-compiled	[CE]  <identifier>  expected	115	None	replace
424	[BUG]  [BUGGY]  cur  =  cur.getParent()  &&  predicate.isLeftOf(cur));  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  &&  predicate.isLeftOf(cur));  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  &&  predicate.isLeftOf(cur));	  cur    =    cur.getNext()    &&    predicate.isLeftOf(cur));    	non-compiled	[CE]  <identifier>  expected	115	None	replace
425	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(defNode));  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(defNode));  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.isLeftOf(defNode));	  cur    =    cur.getNext()    &&    predicate.isLeftOf(cur));    	non-compiled	[CE]  <identifier>  expected	115	None	replace
426	[BUG]  [BUGGY]  Node  cur  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Node  cur  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Node  cur  =  cur.getNext())  {	  cur    =    cur.getParent())    {    Node    cur    =    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
427	[BUG]  [BUGGY]  Node  cur  =  cur.getParent())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Node  cur  =  cur.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Node  cur  =  cur.getParent())  {	  cur    =    cur.getParent())    {    Node    cur    =    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
428	[BUG]  [BUGGY]  Node  cur  =  cur.getFirstChild())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Node  cur  =  cur.getFirstChild())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Node  cur  =  cur.getFirstChild())  {	  cur    =    cur.getParent())    {    Node    cur    =    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
429	[BUG]  [BUGGY]  (Node)cur.getParent())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  (Node)cur.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	(Node)cur.getParent())  {	  cur    =    cur.getParent())    {    Node    cur    =    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
430	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  predicate.getLastChild();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  predicate.getLastChild();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  predicate.getLastChild();	  Predicate    <    Node>    cur    =    predicate.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	104	None	replace
431	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  cur.equals(cur.getString()))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  cur.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  cur.equals(cur.getString()))  {	  cur    =    predicate.getNext()    &&    cur.equals(cur.getString()))    {    	non-compiled	[CE]  <identifier>  expected	75	None	replace
432	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  cur.equals(cur.getString()))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  cur.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  cur.equals(cur.getString()))  {	  cur    =    predicate.getNext()    &&    cur.equals(cur.getString()))    {    	non-compiled	[CE]  <identifier>  expected	75	None	replace
433	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  cur.equals(predicate.getString()))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  cur.equals(predicate.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  cur.equals(predicate.getString()))  {	  cur    =    predicate.getNext()    &&    cur.equals(cur.getString()))    {    	non-compiled	[CE]  <identifier>  expected	75	None	replace
434	[BUG]  [BUGGY]  cur  =  cur.getParent()  &&  cur.equals(cur.getString()))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  &&  cur.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  &&  cur.equals(cur.getString()))  {	  cur    =    predicate.getNext()    &&    cur.equals(cur.getString()))    {    	non-compiled	[CE]  <identifier>  expected	75	None	replace
435	[BUG]  [BUGGY]  cur  =  p.getNext()  &&  cur.equals(cur.getString()))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  p.getNext()  &&  cur.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  p.getNext()  &&  cur.equals(cur.getString()))  {	  cur    =    predicate.getNext()    &&    cur.equals(cur.getString()))    {    	non-compiled	[CE]  <identifier>  expected	75	None	replace
436	[BUG]  [BUGGY]  cur  =  cur.getNext()  +|  cur.getType()  ==  Token.VAR)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  +|  cur.getType()  ==  Token.VAR)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  +|  cur.getType()  ==  Token.VAR)  {	  cur    =    cur.getNext()    +|    cur.getType()!=    Token.VAR)    {    	non-compiled	[CE]  <identifier>  expected	123	None	replace
437	[BUG]  [BUGGY]  cur  =  cur.getParent()  +|  cur.getType()!=  Token.VAR)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  +|  cur.getType()!=  Token.VAR)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  +|  cur.getType()!=  Token.VAR)  {	  cur    =    cur.getNext()    +|    cur.getType()!=    Token.VAR)    {    	non-compiled	[CE]  <identifier>  expected	123	None	replace
438	[BUG]  [BUGGY]  cur  =  cur.getNext()  /|  cur.getType()!=  Token.VAR)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  /|  cur.getType()!=  Token.VAR)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  /|  cur.getType()!=  Token.VAR)  {	  cur    =    cur.getNext()    +|    cur.getType()!=    Token.VAR)    {    	non-compiled	[CE]  <identifier>  expected	123	None	replace
439	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.VAR)  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur.getType()  ==  Token.VAR)  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur.getType()  ==  Token.VAR)  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.NAME)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	96	None	replace
440	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.NAME)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	96	None	replace
441	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.CALL)  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur.getType()  ==  Token.CALL)  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur.getType()  ==  Token.CALL)  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.NAME)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	96	None	replace
442	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME)  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur.getType()  ==  Token.NAME)  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur.getType()  ==  Token.NAME)  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.NAME)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	96	None	replace
443	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME)  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur.getType()  ==  Token.NAME)  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur.getType()  ==  Token.NAME)  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.NAME)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	96	None	replace
444	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.VAR)  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getNext())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur.getType()  ==  Token.VAR)  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur.getType()  ==  Token.VAR)  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getNext())  {	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.NAME)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	96	None	replace
445	[BUG]  [BUGGY]  cur  =  cur.getParent()  &&  predicate.equals(p.getString()))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  &&  predicate.equals(p.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  &&  predicate.equals(p.getString()))  {	  cur    =    cur.getNext()    &&    predicate.equals(p.getString()))    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
446	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.equals(n.getString()))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicate.equals(n.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.equals(n.getString()))  {	  cur    =    cur.getNext()    &&    predicate.equals(p.getString()))    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
447	[BUG]  [BUGGY]  cur  =  cur.getNext()  +  1  ||  cur.getType()  ==  Token.VAR)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  +  1  ||  cur.getType()  ==  Token.VAR)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  +  1  ||  cur.getType()  ==  Token.VAR)  {	  cur    =    cur.getNext()    +    1    ||    cur.getType()!=    Token.VAR)    {    	non-compiled	[CE]  <identifier>  expected	122	None	replace
448	[BUG]  [BUGGY]  cur  =  cur.getNext()  +  1  &&  cur.getType()!=  Token.VAR)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  +  1  &&  cur.getType()!=  Token.VAR)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  +  1  &&  cur.getType()!=  Token.VAR)  {	  cur    =    cur.getNext()    +    1    ||    cur.getType()!=    Token.VAR)    {    	non-compiled	[CE]  <identifier>  expected	122	None	replace
449	[BUG]  [BUGGY]  cur  =  cur.getParent()  +  1  ||  cur.getType()!=  Token.VAR)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  +  1  ||  cur.getType()!=  Token.VAR)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  +  1  ||  cur.getType()!=  Token.VAR)  {	  cur    =    cur.getNext()    +    1    ||    cur.getType()!=    Token.VAR)    {    	non-compiled	[CE]  <identifier>  expected	122	None	replace
450	[BUG]  [BUGGY]  cur  =  cur.getFirstChild()  &&  cur.getType()!=  Token.CALL)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getFirstChild()  &&  cur.getType()!=  Token.CALL)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getFirstChild()  &&  cur.getType()!=  Token.CALL)  {	  cur    =    cur.getNext()    &&    cur.getType()!=    Token.CALL)    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
451	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  &&  cur.getType()!=  Token.CALL)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  &&  cur.getType()!=  Token.CALL)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  &&  cur.getType()!=  Token.CALL)  {	  cur    =    cur.getNext()    &&    cur.getType()!=    Token.CALL)    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
452	[BUG]  [BUGGY]  cur  =  cur.nextChild())  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.nextChild())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.nextChild())  {	  cur    =    cur.next())    {    	non-compiled	[CE]  <identifier>  expected	92	None	replace
453	[BUG]  [BUGGY]  cur  =  cur.next()  ||  cur.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.next()  ||  cur.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.next()  ||  cur.getType()  ==  Token.FUNCTION)  {	  cur    =    cur.next())    {    	non-compiled	[CE]  <identifier>  expected	92	None	replace
454	[BUG]  [BUGGY]  cur  =  cur.next()  &&  predicate.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.next()  &&  predicate.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.next()  &&  predicate.getType()  ==  Token.FUNCTION)  {	  cur    =    cur.next())    {    	non-compiled	[CE]  <identifier>  expected	92	None	replace
455	[BUG]  [BUGGY]  cur  =  cur.next()  &&  predicate.equals(cur.getString()))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.next()  &&  predicate.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.next()  &&  predicate.equals(cur.getString()))  {	  cur    =    cur.next())    {    	non-compiled	[CE]  <identifier>  expected	92	None	replace
456	[BUG]  [BUGGY]  cur  =  cur.next()  ||  cur.getType()  ==  Token.NAME)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.next()  ||  cur.getType()  ==  Token.NAME)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.next()  ||  cur.getType()  ==  Token.NAME)  {	  cur    =    cur.next())    {    	non-compiled	[CE]  <identifier>  expected	92	None	replace
457	[BUG]  [BUGGY]  cur  =  predicate.getNext()  &&  predicate.isLeftOf(cur))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  predicate.getNext()  &&  predicate.isLeftOf(cur))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  predicate.getNext()  &&  predicate.isLeftOf(cur))  {	  cur    =    cur.getNext()    ||    predicate.isLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
458	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  cur.getType()  >>  Token.NAME)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  cur.getType()  >>  Token.NAME)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  cur.getType()  >>  Token.NAME)  {	  cur    =    cur.getNext()    ||    cur.getType()!=    Token.NAME)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
459	[BUG]  [BUGGY]  n  =  cur.getNext())  {  Predicate  <  SIDE_EFFECT_PREDICATE  :  predicate.checkLeftOf(cur,  expressionRoot);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  n  =  cur.getNext())  {  Predicate  <  SIDE_EFFECT_PREDICATE  :  predicate.checkLeftOf(cur,  expressionRoot);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	n  =  cur.getNext())  {  Predicate  <  SIDE_EFFECT_PREDICATE  :  predicate.checkLeftOf(cur,  expressionRoot);	  cur    =    cur.getParent())    {    Predicate    <    SIDE_EFFECT_PREDICATE    :    predicate.checkLeftOf(cur,    expressionRoot);    	non-compiled	[CE]  <identifier>  expected	99	None	replace
460	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION)  {  cur  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  :  predicate.checkLeftOf(cur,  expressionRoot);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur.getType()  ==  Token.FUNCTION)  {  cur  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  :  predicate.checkLeftOf(cur,  expressionRoot);  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur.getType()  ==  Token.FUNCTION)  {  cur  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  :  predicate.checkLeftOf(cur,  expressionRoot);  }	  cur    =    cur.getParent())    {    Predicate    <    SIDE_EFFECT_PREDICATE    :    predicate.checkLeftOf(cur,    expressionRoot);    	non-compiled	[CE]  <identifier>  expected	99	None	replace
461	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  cur.getNext())  {  if(cur.getType()  ==  Token.EXPR_RESULT)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  cur.getNext())  {  if(cur.getType()  ==  Token.EXPR_RESULT)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  cur.getNext())  {  if(cur.getType()  ==  Token.EXPR_RESULT)  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.EXPR_RESULT)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
462	[BUG]  [BUGGY]  p  =  cur.getNext())  {  if(cur.getType()  ==  Token.EXPR_RESULT)  {  if(predicate.apply(cur))  {  return  true  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getNext())  {  if(cur.getType()  ==  Token.EXPR_RESULT)  {  if(predicate.apply(cur))  {  return  true  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getNext())  {  if(cur.getType()  ==  Token.EXPR_RESULT)  {  if(predicate.apply(cur))  {  return  true	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.EXPR_RESULT)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
463	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  cur.getParent())  {  if(predicate.getType()  ==  Token.EXPR_RESULT)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  cur.getParent())  {  if(predicate.getType()  ==  Token.EXPR_RESULT)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  cur.getParent())  {  if(predicate.getType()  ==  Token.EXPR_RESULT)  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.EXPR_RESULT)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
464	[BUG]  [BUGGY]  NodeUtil.checkLeftOf(predicate,  cur);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.checkLeftOf(predicate,  cur);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.checkLeftOf(predicate,  cur);	  NodeUtil.checkLeftOf(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	105	None	replace
465	[BUG]  [BUGGY]  NodeUtil.checkLeftOf(cur,  p);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.checkLeftOf(cur,  p);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.checkLeftOf(cur,  p);	  NodeUtil.checkLeftOf(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	105	None	replace
466	[BUG]  [BUGGY]  NodeUtil.checkLeftOf(p,  predicate);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.checkLeftOf(p,  predicate);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.checkLeftOf(p,  predicate);	  NodeUtil.checkLeftOf(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	105	None	replace
467	[BUG]  [BUGGY]  NodeUtil.checkDeprecated(cur,  predicate);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.checkDeprecated(cur,  predicate);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.checkDeprecated(cur,  predicate);	  NodeUtil.checkLeftOf(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	105	None	replace
468	[BUG]  [BUGGY]  NodeUtil.checkLeftOf(cur,  predicate,  expressionRoot);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.checkLeftOf(cur,  predicate,  expressionRoot);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.checkLeftOf(cur,  predicate,  expressionRoot);	  NodeUtil.checkLeftOf(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	105	None	replace
469	[BUG]  [BUGGY]  cur  =  predicate.getLastChild(),  cur)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  predicate.getLastChild(),  cur)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  predicate.getLastChild(),  cur)  {	  cur    =    cur.getLastChild(),    predicate)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
470	[BUG]  [BUGGY]  cur  =  cur.getPreviousChild(),  predicate)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getPreviousChild(),  predicate)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getPreviousChild(),  predicate)  {	  cur    =    cur.getLastChild(),    predicate)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
471	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  Node>sIDE_EFFECT_PREDICATE  ||  predicate.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  Node>sIDE_EFFECT_PREDICATE  ||  predicate.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  Node>sIDE_EFFECT_PREDICATE  ||  predicate.getType()  ==  Token.FUNCTION)  {	  cur    =    cur.getNext()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE    ||    predicate.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
472	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  node.getNext();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  node.getNext();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  node.getNext();	  Predicate    <    Node>    cur    =    cur.getNext();    	non-compiled	[CE]  <identifier>  expected	60	None	replace
473	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  parent.getNext();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  parent.getNext();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  parent.getNext();	  Predicate    <    Node>    cur    =    cur.getNext();    	non-compiled	[CE]  <identifier>  expected	60	None	replace
474	[BUG]  [BUGGY]  cur  =  predicate.getNext()  &&  predicate.isLeftOf(cur);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  predicate.getNext()  &&  predicate.isLeftOf(cur);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  predicate.getNext()  &&  predicate.isLeftOf(cur);	  cur    =    cur.getNext()    &&    predicate.isLeftOf(cur);    	non-compiled	[CE]  <identifier>  expected	114	None	replace
475	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  |  SIDE_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  |  SIDE_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  |  SIDE_EFFECT_PREDICATE)  {	  cur    =    cur.getLastChild()    &    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	117	None	replace
476	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  &  1)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  &  1)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  &  1)  {	  cur    =    cur.getLastChild()    &    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	117	None	replace
477	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  predicate.getLastChild())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  predicate.getLastChild())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  predicate.getLastChild())  {	  cur    =    cur.getParent())    {    Predicate    <    Node>    cur    =    predicate.getParent())    {    	non-compiled	[CE]  <identifier>  expected	101	None	replace
478	[BUG]  [BUGGY]  Node  cur  =  predicate.getParent())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Node  cur  =  predicate.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Node  cur  =  predicate.getParent())  {	  cur    =    cur.getParent())    {    Predicate    <    Node>    cur    =    predicate.getParent())    {    	non-compiled	[CE]  <identifier>  expected	101	None	replace
479	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.getType()!=  Token.VAR)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicate.getType()!=  Token.VAR)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.getType()!=  Token.VAR)  {	  cur    =    cur.getNext()    &&    cur.getType()!=    Token.VAR)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
480	[BUG]  [BUGGY]  cur  =  cur.getPrevious()  &&  cur.getType()!=  Token.VAR)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getPrevious()  &&  cur.getType()!=  Token.VAR)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getPrevious()  &&  cur.getType()!=  Token.VAR)  {	  cur    =    cur.getNext()    &&    cur.getType()!=    Token.VAR)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
481	[BUG]  [BUGGY]  cur  =  predicate.getParent()  &&  predicate.isLeftOf(cur))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  predicate.getParent()  &&  predicate.isLeftOf(cur))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  predicate.getParent()  &&  predicate.isLeftOf(cur))  {	  cur    =    cur.getParent()    &&    predicate.isLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
482	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  predicate.cloneTree();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  predicate.cloneTree();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  predicate.cloneTree();	  Predicate    <    Node>    cur    =    predicate.getParent();    	non-compiled	[CE]  <identifier>  expected	70	None	replace
483	[BUG]  [BUGGY]  cur  =  cur.getfirstChild()  ||  cur.getType()!=  Token.VAR)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getfirstChild()  ||  cur.getType()!=  Token.VAR)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getfirstChild()  ||  cur.getType()!=  Token.VAR)  {	  cur    =    cur.getLastChild()    ||    cur.getType()!=    Token.VAR)    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
484	[BUG]  [BUGGY]  cur  =  predicate.getNext()  ||  cur.equals(cur.getString()))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  predicate.getNext()  ||  cur.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  predicate.getNext()  ||  cur.equals(cur.getString()))  {	  cur    =    predicate.getNext()    &&    cur.equals(cur.getString()))    {    	non-compiled	[CE]  <identifier>  expected	75	None	replace
485	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  def.equals(cur.getString()))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  def.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  def.equals(cur.getString()))  {	  cur    =    predicate.getNext()    &&    cur.equals(cur.getString()))    {    	non-compiled	[CE]  <identifier>  expected	75	None	replace
486	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NEW)  {  cur  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur.getType()  ==  Token.NEW)  {  cur  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur.getType()  ==  Token.NEW)  {  cur  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {	  cur    =    cur.getParent())    {    Predicate    <    SIDE_EFFECT_PREDICATE    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	98	None	replace
487	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION)  {  cur  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur.getType()  ==  Token.FUNCTION)  {  cur  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur.getType()  ==  Token.FUNCTION)  {  cur  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {  }	  cur    =    cur.getParent())    {    Predicate    <    SIDE_EFFECT_PREDICATE    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	98	None	replace
488	[BUG]  [BUGGY]  cur  =  cur.getfirstChild()  ||  cur.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getfirstChild()  ||  cur.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getfirstChild()  ||  cur.getType()  ==  Token.FUNCTION)  {	  cur    =    cur.getLastChild()    ||    cur.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
489	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  >  SIDE_EFFECT_PREDICATE  ||  Predicates.  <  SIDE_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  >  SIDE_EFFECT_PREDICATE  ||  Predicates.  <  SIDE_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  >  SIDE_EFFECT_PREDICATE  ||  Predicates.  <  SIDE_EFFECT_PREDICATE)  {	  cur    =    cur.getNext()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE    ||    Predicates.    <    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
490	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  Predicates.  <  Node>predicates)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  Predicates.  <  Node>predicates)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  Predicates.  <  Node>predicates)  {	  cur    =    cur.getNext()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE    ||    Predicates.    <    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
491	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.getType()  ==  Token.NAME)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicate.getType()  ==  Token.NAME)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.getType()  ==  Token.NAME)  {	  cur    =    cur.getNext()    &&    cur.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
492	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.getType()!=  Token.CALL)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicate.getType()!=  Token.CALL)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.getType()!=  Token.CALL)  {	  cur    =    cur.getNext()    &&    cur.getType()!=    Token.CALL)    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
493	[BUG]  [BUGGY]  cur  =  cur.getPrevious()  &&  cur.getType()!=  Token.CALL)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getPrevious()  &&  cur.getType()!=  Token.CALL)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getPrevious()  &&  cur.getType()!=  Token.CALL)  {	  cur    =    cur.getNext()    &&    cur.getType()!=    Token.CALL)    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
494	[BUG]  [BUGGY]  NodeUtil.checkLeftOf(predicate,  expressionRoot,  predicate);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.checkLeftOf(predicate,  expressionRoot,  predicate);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.checkLeftOf(predicate,  expressionRoot,  predicate);	  NodeUtil.checkLeftOf(cur,    expressionRoot,    predicate);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
495	[BUG]  [BUGGY]  NodeUtil.checkLeftOf(cur,  p,  predicate);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.checkLeftOf(cur,  p,  predicate);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.checkLeftOf(cur,  p,  predicate);	  NodeUtil.checkLeftOf(cur,    expressionRoot,    predicate);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
496	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(expressionRoot,  predicate))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.isLeftOf(expressionRoot,  predicate))  {	  cur    =    cur.getNext()    &&    predicate.isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	113	None	replace
497	[BUG]  [BUGGY]  cur  =  cur.getParent()  &&  predicate.isLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  &&  predicate.isLeftOf(cur,  expressionRoot))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  &&  predicate.isLeftOf(cur,  expressionRoot))  {	  cur    =    cur.getNext()    &&    predicate.isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	113	None	replace
498	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.getType()!=  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicate.getType()!=  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.getType()!=  Token.FUNCTION)  {	  cur    =    cur.getNext()    &&    cur.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
499	[BUG]  [BUGGY]  cur  =  cur.getfirstChild()  ||  cur.getType()  ==  Token.NAME)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getfirstChild()  ||  cur.getType()  ==  Token.NAME)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getfirstChild()  ||  cur.getType()  ==  Token.NAME)  {	  cur    =    cur.getLastChild()    ||    cur.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
500	[BUG]  [BUGGY]  cur  =  cur.getfirstChild()  ||  cur.getType()!=  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getfirstChild()  ||  cur.getType()!=  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getfirstChild()  ||  cur.getType()!=  Token.FUNCTION)  {	  cur    =    cur.getLastChild()    ||    cur.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
501	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  &&  Predicates.isLeftOf(predicate))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  &&  Predicates.isLeftOf(predicate))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  &&  Predicates.isLeftOf(predicate))  {	  cur    =    cur.getLastChild()    &&    predicate.isLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
502	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  &&  PredicateUtil.isLeftOf(predicate))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  &&  PredicateUtil.isLeftOf(predicate))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  &&  PredicateUtil.isLeftOf(predicate))  {	  cur    =    cur.getLastChild()    &&    predicate.isLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
503	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  &&  PredicateUtil.isLeftOf(cur))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  &&  PredicateUtil.isLeftOf(cur))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  &&  PredicateUtil.isLeftOf(cur))  {	  cur    =    cur.getLastChild()    &&    predicate.isLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
504	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  &&  predicate.  <  SIDE_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  &&  predicate.  <  SIDE_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  &&  predicate.  <  SIDE_EFFECT_PREDICATE)  {	  cur    =    cur.getLastChild()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	76	None	replace
505	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  &&  Predicates.  <  Node>empty)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  &&  Predicates.  <  Node>empty)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  &&  Predicates.  <  Node>empty)  {	  cur    =    cur.getLastChild()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	76	None	replace
506	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  &&  Predicates.  <  Node>predicates)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  &&  Predicates.  <  Node>predicates)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  &&  Predicates.  <  Node>predicates)  {	  cur    =    cur.getLastChild()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	76	None	replace
507	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  node.getFirstChild();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  node.getFirstChild();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  node.getFirstChild();	  Predicate    <    Node>    cur    =    cur.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	61	None	replace
508	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  parent.getFirstChild();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  parent.getFirstChild();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  parent.getFirstChild();	  Predicate    <    Node>    cur    =    cur.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	61	None	replace
509	[BUG]  [BUGGY]  p  =  cur.getNext()  &&  Predicate.equals(predicate.getString()))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getNext()  &&  Predicate.equals(predicate.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getNext()  &&  Predicate.equals(predicate.getString()))  {	  p    =    cur.getNext()    &&    predicate.equals(cur.getString()))    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
510	[BUG]  [BUGGY]  predicate  =  p.getNext()  &&  predicate.equals(cur.getString()))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  predicate  =  p.getNext()  &&  predicate.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	predicate  =  p.getNext()  &&  predicate.equals(cur.getString()))  {	  predicate    =    cur.getNext()    &&    predicate.equals(cur.getString()))    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
511	[BUG]  [BUGGY]  Predicate  predicate  =  cur.getNext()  &&  predicate.equals(cur.getString()))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  predicate  =  cur.getNext()  &&  predicate.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  predicate  =  cur.getNext()  &&  predicate.equals(cur.getString()))  {	  predicate    =    cur.getNext()    &&    predicate.equals(cur.getString()))    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
512	[BUG]  [BUGGY]  Predicate  predicate  =  cur.getNext()  ||  predicate.equals(cur.getString()))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  predicate  =  cur.getNext()  ||  predicate.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  predicate  =  cur.getNext()  ||  predicate.equals(cur.getString()))  {	  predicate    =    cur.getNext()    &&    predicate.equals(cur.getString()))    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
513	[BUG]  [BUGGY]  cur  =  predicate.getParent()  &&  predicate.hasChildren())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  predicate.getParent()  &&  predicate.hasChildren())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  predicate.getParent()  &&  predicate.hasChildren())  {	  cur    =    cur.getParent()    &&    predicate.hasChildren())    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
514	[BUG]  [BUGGY]  cur  =  cur.getNext()  &  SIDE_EFFECT_PREDICATE);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &  SIDE_EFFECT_PREDICATE);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &  SIDE_EFFECT_PREDICATE);	  cur    =    cur.getLastChild()    &    SIDE_EFFECT_PREDICATE);    	non-compiled	[CE]  <identifier>  expected	118	None	replace
515	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  >  PREDICATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  >  PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  >  PREDICATE)  {	  cur    =    cur.getNext()    &&    Predicates.    <    PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
516	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.getType()!=  Token.NAME)  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicate.getType()!=  Token.NAME)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.getType()!=  Token.NAME)  {	  cur    =    cur.getNext()    &&    cur.getType()!=    Token.NAME)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
517	[BUG]  [BUGGY]  cur  =  cur.getPrevious()  &&  cur.getType()!=  Token.NAME)  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getPrevious()  &&  cur.getType()!=  Token.NAME)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getPrevious()  &&  cur.getType()!=  Token.NAME)  {	  cur    =    cur.getNext()    &&    cur.getType()!=    Token.NAME)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
518	[BUG]  [BUGGY]  NodeUtil.copyCurrentNode(cur,  predicate,  n);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.copyCurrentNode(cur,  predicate,  n);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.copyCurrentNode(cur,  predicate,  n);	  NodeUtil.copyCurrentNode(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
519	[BUG]  [BUGGY]  cur  =  predicate.getNext()  &&  predicate.hasChildren())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  predicate.getNext()  &&  predicate.hasChildren())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  predicate.getNext()  &&  predicate.hasChildren())  {	  cur    =    cur.getNext()    ||    predicate.hasChildren())    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
520	[BUG]  [BUGGY]  cur  =  cur.getNext()  +  predicate.removeFirstChild())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  +  predicate.removeFirstChild())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  +  predicate.removeFirstChild())  {	  cur    =    cur.getNext()    +    predicate.hasChildren())    {    	non-compiled	[CE]  <identifier>  expected	103	None	replace
521	[BUG]  [BUGGY]  cur  =  cur.getNext()  +  predicate.cloneTree())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  +  predicate.cloneTree())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  +  predicate.cloneTree())  {	  cur    =    cur.getNext()    +    predicate.hasChildren())    {    	non-compiled	[CE]  <identifier>  expected	103	None	replace
522	[BUG]  [BUGGY]  cur  =  cur.getNext()  +  predicate.getFirstChild())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  +  predicate.getFirstChild())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  +  predicate.getFirstChild())  {	  cur    =    cur.getNext()    +    predicate.hasChildren())    {    	non-compiled	[CE]  <identifier>  expected	103	None	replace
523	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  cur.getType()  >>  Token.CALL)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  cur.getType()  >>  Token.CALL)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  cur.getType()  >>  Token.CALL)  {	  cur    =    cur.getNext()    ||    cur.getType()!=    Token.CALL)    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
524	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.isLeftOf(predicate))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.isLeftOf(predicate))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.isLeftOf(predicate))  {	  cur    =    cur.getNext()    &&    predicate.isLeftOf(predicate))    {    	non-compiled	[CE]  <identifier>  expected	81	None	replace
525	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(cur,  predicate,  expressionRoot);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.copyCurrentStructure(cur,  predicate,  expressionRoot);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.copyCurrentStructure(cur,  predicate,  expressionRoot);	  NodeUtil.copyCurrentStructure(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
526	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(cur,  predicate,  def);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.copyCurrentStructure(cur,  predicate,  def);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.copyCurrentStructure(cur,  predicate,  def);	  NodeUtil.copyCurrentStructure(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
527	[BUG]  [BUGGY]  cur  =  cur.getNext())  {  p  =  cur.getParent())  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext())  {  p  =  cur.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext())  {  p  =  cur.getParent())  {	  cur    =    cur.getParent())    {    p    =    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
528	[BUG]  [BUGGY]  (cur  =  cur.getNext())  ==  null)  {  p  =  cur.getParent())  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  (cur  =  cur.getNext())  ==  null)  {  p  =  cur.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	(cur  =  cur.getNext())  ==  null)  {  p  =  cur.getParent())  {	  cur    =    cur.getParent())    {    p    =    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
529	[BUG]  [BUGGY]  (cur  =  cur.getNext())  ==  null)  {  p  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  (cur  =  cur.getNext())  ==  null)  {  p  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	(cur  =  cur.getNext())  ==  null)  {  p  =  cur.getNext())  {	  cur    =    cur.getParent())    {    p    =    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
530	[BUG]  [BUGGY]  (cur  =  cur.getNext())  ==  null?  cur.getNext()  :  cur.getNext())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  (cur  =  cur.getNext())  ==  null?  cur.getNext()  :  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	(cur  =  cur.getNext())  ==  null?  cur.getNext()  :  cur.getNext())  {	  cur    =    cur.getParent())    {    p    =    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
531	[BUG]  [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  =  predicate.getFirstChild();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  =  predicate.getFirstChild();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  SIDE_EFFECT_PREDICATE  =  predicate.getFirstChild();	  cur    =    cur.getParent())    {    Predicate    <    SIDE_EFFECT_PREDICATE    =    predicate.getParent();    	non-compiled	[CE]  <identifier>  expected	100	None	replace
532	[BUG]  [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  =  predicate.getLastChild();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  =  predicate.getLastChild();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  SIDE_EFFECT_PREDICATE  =  predicate.getLastChild();	  cur    =    cur.getParent())    {    Predicate    <    SIDE_EFFECT_PREDICATE    =    predicate.getParent();    	non-compiled	[CE]  <identifier>  expected	100	None	replace
533	[BUG]  [BUGGY]  Predicate  cur  =  p.getNext()  &&  predicate.equals(cur.getString()))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  cur  =  p.getNext()  &&  predicate.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  cur  =  p.getNext()  &&  predicate.equals(cur.getString()))  {	  Predicate    cur    =    cur.getNext()    &&    predicate.equals(cur.getString()))    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
534	[BUG]  [BUGGY]  cur  =  cur.getfirstChild()  ||  cur.getType()  ==  Token.CALL)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getfirstChild()  ||  cur.getType()  ==  Token.CALL)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getfirstChild()  ||  cur.getType()  ==  Token.CALL)  {	  cur    =    cur.getLastChild()    ||    cur.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  <identifier>  expected	68	None	replace
535	[BUG]  [BUGGY]  cur  =  predicate.getNext()  &&  predicate.equals(cur.getString()))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  predicate.getNext()  &&  predicate.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  predicate.getNext()  &&  predicate.equals(cur.getString()))  {	  cur    =    cur.getNext()    ||    predicate.equals(cur.getString()))    {    	non-compiled	[CE]  <identifier>  expected	116	None	replace
536	[BUG]  [BUGGY]  cur  =  cur.getParent()  &&  predicate.equals(cur.getString()))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  &&  predicate.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  &&  predicate.equals(cur.getString()))  {	  cur    =    cur.getNext()    ||    predicate.equals(cur.getString()))    {    	non-compiled	[CE]  <identifier>  expected	116	None	replace
537	[BUG]  [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  =  cur.getPredicate();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  =  cur.getPredicate();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  SIDE_EFFECT_PREDICATE  =  cur.getPredicate();	  Predicate    <    SIDE_EFFECT_PREDICATE    =    predicate.getParent();    	non-compiled	[CE]  <identifier>  expected	106	None	replace
538	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  def.equals(predicate.getString()))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  def.equals(predicate.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  def.equals(predicate.getString()))  {	  cur    =    cur.getNext()    &&    predicate.equals(predicate.getString()))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
539	[BUG]  [BUGGY]  Predicate  predicate  =  p.getPredicate();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  predicate  =  p.getPredicate();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  predicate  =  p.getPredicate();	  Predicate    predicate    =    cur.getPredicate();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
540	[BUG]  [BUGGY]  Predicate  predicate  =  cur.getPredicate()  &  SIDE_EFFECT_PREDICATE;  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  predicate  =  cur.getPredicate()  &  SIDE_EFFECT_PREDICATE;  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  predicate  =  cur.getPredicate()  &  SIDE_EFFECT_PREDICATE;	  Predicate    predicate    =    cur.getPredicate();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
541	[BUG]  [BUGGY]  Predicate  predicate  =  cur.getPredicate(n);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  predicate  =  cur.getPredicate(n);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  predicate  =  cur.getPredicate(n);	  Predicate    predicate    =    cur.getPredicate();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
542	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(def,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(def,  expressionRoot))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.isLeftOf(def,  expressionRoot))  {	  cur    =    cur.getNext()    &&    predicate.isLeftOf(def))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
543	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.equals(p))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicate.equals(p))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.equals(p))  {	  cur    =    cur.getNext()    &&    predicate.equals(predicate))    {    	non-compiled	[CE]  <identifier>  expected	78	None	replace
544	[BUG]  [BUGGY]  if(cur!=  null)  {  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur!=  null)  {  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur!=  null)  {  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.FUNCTION)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	94	None	replace
545	[BUG]  [BUGGY]  if(cur  ==  null)  {  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur  ==  null)  {  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur  ==  null)  {  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.FUNCTION)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	94	None	replace
546	[BUG]  [BUGGY]  if(cur!=  null)  {  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur!=  null)  {  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur!=  null)  {  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.FUNCTION)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	94	None	replace
547	[BUG]  [BUGGY]  if(cur  ==  null)  {  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur  ==  null)  {  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur  ==  null)  {  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.FUNCTION)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	94	None	replace
548	[BUG]  [BUGGY]  if(cur!=  null)  {  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getNext())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur!=  null)  {  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur!=  null)  {  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getNext())  {	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.FUNCTION)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	94	None	replace
549	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  cur.getNext())  {  if(cur.getType()  ==  Token.VAR)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  cur.getNext())  {  if(cur.getType()  ==  Token.VAR)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  cur.getNext())  {  if(cur.getType()  ==  Token.VAR)  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.VAR)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
550	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.VAR)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.VAR)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.VAR)  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.VAR)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
551	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  cur.getParent())  {  if(predicate.getType()  ==  Token.VAR)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  cur.getParent())  {  if(predicate.getType()  ==  Token.VAR)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  cur.getParent())  {  if(predicate.getType()  ==  Token.VAR)  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.VAR)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
552	[BUG]  [BUGGY]  p  =  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.NAME)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
553	[BUG]  [BUGGY]  p  =  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getNext())  {  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getNext())  {  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getNext())  {  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.NAME)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
554	[BUG]  [BUGGY]  p  =  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur  >=  cur.getParent())  {  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur  >=  cur.getParent())  {  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur  >=  cur.getParent())  {  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.NAME)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
555	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME)  {  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur.getType()  ==  Token.NAME)  {  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur.getType()  ==  Token.NAME)  {  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.NAME)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
556	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getNext())  {  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getNext())  {  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getNext())  {  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.NAME)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
557	[BUG]  [BUGGY]  p  =  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.NAME)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
558	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.getType()  ==  Token.VAR)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicate.getType()  ==  Token.VAR)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.getType()  ==  Token.VAR)  {	  cur    =    cur.getNext()    &&    cur.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
559	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  cur.getType()  >>  Token.VAR)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  cur.getType()  >>  Token.VAR)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  cur.getType()  >>  Token.VAR)  {	  cur    =    cur.getNext()    &&    cur.getType()    >>    Token.VAR)    {    	non-compiled	[CE]  <identifier>  expected	90	None	replace
560	[BUG]  [BUGGY]  p  =  cur.getNext())  {  if(predicate.getType()  ==  Token.FUNCTION)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getNext())  {  if(predicate.getType()  ==  Token.FUNCTION)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getNext())  {  if(predicate.getType()  ==  Token.FUNCTION)  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.FUNCTION)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
561	[BUG]  [BUGGY]  p  =  cur.getParent())  {  if(predicate.getType()  ==  Token.FUNCTION)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getParent())  {  if(predicate.getType()  ==  Token.FUNCTION)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getParent())  {  if(predicate.getType()  ==  Token.FUNCTION)  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.FUNCTION)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
562	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  cur.getNext())  {  if(cur.getType()  ==  Token.FUNCTION)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  cur.getNext())  {  if(cur.getType()  ==  Token.FUNCTION)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  cur.getNext())  {  if(cur.getType()  ==  Token.FUNCTION)  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.FUNCTION)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
563	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.FUNCTION)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
564	[BUG]  [BUGGY]  p  =  cur.getNext())  {  if(cur.getType()  ==  Token.FUNCTION)  {  if(predicate.apply(cur))  {  return  true  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getNext())  {  if(cur.getType()  ==  Token.FUNCTION)  {  if(predicate.apply(cur))  {  return  true  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getNext())  {  if(cur.getType()  ==  Token.FUNCTION)  {  if(predicate.apply(cur))  {  return  true	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.FUNCTION)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
565	[BUG]  [BUGGY]  cur  =  predicate.getNext()  &&  predicate.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  predicate.getNext()  &&  predicate.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  predicate.getNext()  &&  predicate.getType()  ==  Token.FUNCTION)  {	  cur    =    cur.getNext()    ||    predicate.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	108	None	replace
566	[BUG]  [BUGGY]  cur  =  predicate.getNext()  ||  predicate.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  predicate.getNext()  ||  predicate.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  predicate.getNext()  ||  predicate.getType()  ==  Token.FUNCTION)  {	  cur    =    cur.getNext()    ||    predicate.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	108	None	replace
567	[BUG]  [BUGGY]  (cur  =  cur.getNext())  {  Node  cur  =  cur.getParent())  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  (cur  =  cur.getNext())  {  Node  cur  =  cur.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	(cur  =  cur.getNext())  {  Node  cur  =  cur.getParent())  {	  cur    =    cur.getParent())    {    Node    cur    =    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
568	[BUG]  [BUGGY]  (cur  =  cur.getNext())  ==  null)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  (cur  =  cur.getNext())  ==  null)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	(cur  =  cur.getNext())  ==  null)  {	  cur    =    cur.getParent())    {    Node    cur    =    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
569	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(p);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.copyCurrentStructure(p);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.copyCurrentStructure(p);	  NodeUtil.copyCurrentStructure(cur);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
570	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(prime);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.copyCurrentStructure(prime);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.copyCurrentStructure(prime);	  NodeUtil.copyCurrentStructure(cur);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
571	[BUG]  [BUGGY]  cur  =  cur.removeFirstChild()  &&  predicate.hasChildren())  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.removeFirstChild()  &&  predicate.hasChildren())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.removeFirstChild()  &&  predicate.hasChildren())  {	  cur    =    cur.removeFirstChild())    {    	non-compiled	[CE]  <identifier>  expected	121	None	replace
572	[BUG]  [BUGGY]  cur  =  cur.removeFirstChild()  &&  predicate.getType()!=  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.removeFirstChild()  &&  predicate.getType()!=  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.removeFirstChild()  &&  predicate.getType()!=  Token.FUNCTION)  {	  cur    =    cur.removeFirstChild())    {    	non-compiled	[CE]  <identifier>  expected	121	None	replace
573	[BUG]  [BUGGY]  if(cur!=  null)  {  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur!=  null)  {  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur!=  null)  {  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.NAME)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	96	None	replace
574	[BUG]  [BUGGY]  if(cur  ==  null)  {  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur  ==  null)  {  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur  ==  null)  {  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.NAME)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	96	None	replace
575	[BUG]  [BUGGY]  if(cur!=  null)  {  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur!=  null)  {  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur!=  null)  {  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.NAME)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	96	None	replace
576	[BUG]  [BUGGY]  if(cur  ==  null)  {  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur  ==  null)  {  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur  ==  null)  {  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.NAME)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	96	None	replace
577	[BUG]  [BUGGY]  if(cur!=  null)  {  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getNext())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur!=  null)  {  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur!=  null)  {  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getNext())  {	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.NAME)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	96	None	replace
578	[BUG]  [BUGGY]  cur  =  cur.getPrevious()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getPrevious()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getPrevious()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE)  {	  cur    =    cur.getPrevious())    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
579	[BUG]  [BUGGY]  cur  =  cur.getPrevious()  &&  NodeUtil.isExpressionNode(cur))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getPrevious()  &&  NodeUtil.isExpressionNode(cur))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getPrevious()  &&  NodeUtil.isExpressionNode(cur))  {	  cur    =    cur.getPrevious())    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
580	[BUG]  [BUGGY]  p  =  cur.getNext())  {  if(predicate.getType()  ==  Token.NAME)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getNext())  {  if(predicate.getType()  ==  Token.NAME)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getNext())  {  if(predicate.getType()  ==  Token.NAME)  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.NAME)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
581	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  cur.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.NAME)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
582	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  cur.getParent())  {  if(predicate.getType()  ==  Token.NAME)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  cur.getParent())  {  if(predicate.getType()  ==  Token.NAME)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  cur.getParent())  {  if(predicate.getType()  ==  Token.NAME)  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.NAME)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
583	[BUG]  [BUGGY]  p  =  cur.getNext())  {  if(cur.getType()  ==  Token.NAME)  {  if(predicate.apply(cur))  {  return  true  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getNext())  {  if(cur.getType()  ==  Token.NAME)  {  if(predicate.apply(cur))  {  return  true  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getNext())  {  if(cur.getType()  ==  Token.NAME)  {  if(predicate.apply(cur))  {  return  true	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.NAME)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
584	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.getType()  ==  Token.CALL)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicate.getType()  ==  Token.CALL)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.getType()  ==  Token.CALL)  {	  cur    =    cur.getNext()    &&    cur.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
585	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.  <  CREATE_EFFECT_PREDICATE)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicate.  <  CREATE_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.  <  CREATE_EFFECT_PREDICATE)  {	  cur    =    cur.getNext()    &&    Predicates.    <    CREATE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
586	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  Predicates.  <  CREATE_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  Predicates.  <  CREATE_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  Predicates.  <  CREATE_EFFECT_PREDICATE)  {	  cur    =    cur.getNext()    &&    Predicates.    <    CREATE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
587	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  >  LIVE_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  >  LIVE_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  >  LIVE_EFFECT_PREDICATE)  {	  cur    =    cur.getNext()    &&    Predicates.    <    LIVE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	109	None	replace
588	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  >  12)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  >  12)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  >  12)  {	  cur    =    cur.getNext()    &&    Predicates.    <    >    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	82	None	replace
589	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  >  1)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  >  1)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  >  1)  {	  cur    =    cur.getNext()    &&    Predicates.    <    >    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	82	None	replace
590	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  Node>sIDE_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  Node>sIDE_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  Node>sIDE_EFFECT_PREDICATE)  {	  cur    =    cur.getNext()    &&    Predicates.    <    >    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	82	None	replace
591	[BUG]  [BUGGY]  cur  =  predicate.getNext()  &&  predicate.isLeftOf(cur));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  predicate.getNext()  &&  predicate.isLeftOf(cur));  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  predicate.getNext()  &&  predicate.isLeftOf(cur));	  cur    =    cur.getNext()    &&    predicate.isLeftOf(cur));    	non-compiled	[CE]  <identifier>  expected	115	None	replace
592	[BUG]  [BUGGY]  cur  =  cur.getParent()  &&  Predicates.  <  >  SIDE_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  &&  Predicates.  <  >  SIDE_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  &&  Predicates.  <  >  SIDE_EFFECT_PREDICATE)  {	  cur    =    cur.getParent()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	84	None	replace
593	[BUG]  [BUGGY]  cur  =  cur.getName()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getName()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getName()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE)  {	  cur    =    cur.getParent()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	84	None	replace
594	[BUG]  [BUGGY]  p  =  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.FUNCTION)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
595	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.FUNCTION)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
596	[BUG]  [BUGGY]  p  =  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getNext())  {  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getNext())  {  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getNext())  {  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.FUNCTION)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
597	[BUG]  [BUGGY]  p  =  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur  >=  cur.getParent())  {  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur  >=  cur.getParent())  {  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur  >=  cur.getParent())  {  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.FUNCTION)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
598	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getNext())  {  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getNext())  {  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getNext())  {  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.FUNCTION)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
599	[BUG]  [BUGGY]  p  =  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getParent())  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.FUNCTION)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
600	[BUG]  [BUGGY]  cur  =  predicate.getNext()  &&  Predicates.  <  Node>emptyCfgNode)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  predicate.getNext()  &&  Predicates.  <  Node>emptyCfgNode)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  predicate.getNext()  &&  Predicates.  <  Node>emptyCfgNode)  {	  cur    =    cur.getNext()    &&    Predicates.    <    Node>emptyCfgNode)    {    	non-compiled	[CE]  <identifier>  expected	86	None	replace
601	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicates.  <  Node>emptyCfgNode)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicates.  <  Node>emptyCfgNode)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicates.  <  Node>emptyCfgNode)  {	  cur    =    cur.getNext()    &&    Predicates.    <    Node>emptyCfgNode)    {    	non-compiled	[CE]  <identifier>  expected	86	None	replace
602	[BUG]  [BUGGY]  cur  =  cur.next()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.next()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.next()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE)  {	  cur    =    cur.next())    {    	non-compiled	[CE]  <identifier>  expected	92	None	replace
603	[BUG]  [BUGGY]  cur  =  cur.getfirstChild()  ||  cur.getType()  ==  Token.VAR)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getfirstChild()  ||  cur.getType()  ==  Token.VAR)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getfirstChild()  ||  cur.getType()  ==  Token.VAR)  {	  cur    =    cur.getLastChild()    ||    cur.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
604	[BUG]  [BUGGY]  n  =  cur.getNext())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate!=  null  &&  predicate.isLeftOf(cur);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  n  =  cur.getNext())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate!=  null  &&  predicate.isLeftOf(cur);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	n  =  cur.getNext())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate!=  null  &&  predicate.isLeftOf(cur);	  cur    =    cur.getParent())    {    Predicate    <    SIDE_EFFECT_PREDICATE    ||    predicate!=    null    &&    predicate.isLeftOf(cur);    	non-compiled	[CE]  <identifier>  expected	102	None	replace
605	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(n))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(n))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(n))  {	  cur    =    cur.getNext()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
606	[BUG]  [BUGGY]  cur  =  predicate.getNext()  &&  Predicates.  <  Node>empty)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  predicate.getNext()  &&  Predicates.  <  Node>empty)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  predicate.getNext()  &&  Predicates.  <  Node>empty)  {	  cur    =    cur.getNext()    &&    Predicates.    <    Node>empty)    {    	non-compiled	[CE]  <identifier>  expected	83	None	replace
607	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicates.  <  Node>empty)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicates.  <  Node>empty)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicates.  <  Node>empty)  {	  cur    =    cur.getNext()    &&    Predicates.    <    Node>empty)    {    	non-compiled	[CE]  <identifier>  expected	83	None	replace
608	[BUG]  [BUGGY]  cur  =  cur.getNext()  +  1  ||  cur.getType()  >=  Token.VAR)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  +  1  ||  cur.getType()  >=  Token.VAR)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  +  1  ||  cur.getType()  >=  Token.VAR)  {	  cur    =    cur.getNext()    +    1    ||    cur.getType()!=    Token.VAR)    {    	non-compiled	[CE]  <identifier>  expected	122	None	replace
609	[BUG]  [BUGGY]  cur  =  p.getNext()  &&  predicate.hasChildren())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  p.getNext()  &&  predicate.hasChildren())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  p.getNext()  &&  predicate.hasChildren())  {	  cur    =    predicate.getNext()    &&    cur.hasChildren())    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
610	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  cur.getNext())  {  if(cur!=  null)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  cur.getNext())  {  if(cur!=  null)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  cur.getNext())  {  if(cur!=  null)  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur!=    null)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
611	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  cur.getParent())  {  if(cur!=  null)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  cur.getParent())  {  if(cur!=  null)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  cur.getParent())  {  if(cur!=  null)  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur!=    null)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
612	[BUG]  [BUGGY]  cur  =  cur.getNext())  {  if(cur!=  null)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext())  {  if(cur!=  null)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext())  {  if(cur!=  null)  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur!=    null)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
613	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  cur.getParent())  {  if(predicate!=  null)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  cur.getParent())  {  if(predicate!=  null)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  cur.getParent())  {  if(predicate!=  null)  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur!=    null)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
614	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicates.  <  Node>predicates)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicates.  <  Node>predicates)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicates.  <  Node>predicates)  {	  cur    =    cur.getNext()    &&    Predicates.    <    Node>predicates)    {    	non-compiled	[CE]  <identifier>  expected	85	None	replace
615	[BUG]  [BUGGY]  predicate  =  cur.getNext()  &&  predicate.equals(cur.getString()));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  predicate  =  cur.getNext()  &&  predicate.equals(cur.getString()));  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	predicate  =  cur.getNext()  &&  predicate.equals(cur.getString()));	  predicate    =    cur.getNext()    &&    predicate.equals(cur.getString()))    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
616	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(cur,  predicate,  n);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.copyCurrentStructure(cur,  predicate,  n);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.copyCurrentStructure(cur,  predicate,  n);	  NodeUtil.copyCurrentStructure(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
617	[BUG]  [BUGGY]  cur  =  cur.getNext();  p.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext();  p.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext();  p.getType()  ==  Token.FUNCTION)  {	  cur    =    cur.getNext()    ||    p.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	107	None	replace
618	[BUG]  [BUGGY]  cur  =  predicate.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  predicate.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  predicate.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE)  {	  cur    =    cur.getNext()    &&    Predicates.    <    >    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	82	None	replace
619	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.  <  >  SIDE_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicate.  <  >  SIDE_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.  <  >  SIDE_EFFECT_PREDICATE)  {	  cur    =    cur.getNext()    &&    Predicates.    <    >    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	82	None	replace
620	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  N,  Predicates.  <  SIDE_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  N,  Predicates.  <  SIDE_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  N,  Predicates.  <  SIDE_EFFECT_PREDICATE)  {	  cur    =    cur.getNext()    &&    Predicates.    <    >    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	82	None	replace
621	[BUG]  [BUGGY]  cur  =  cur.getLastChild();  cur.getType()!=  Token.VAR)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild();  cur.getType()!=  Token.VAR)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild();  cur.getType()!=  Token.VAR)  {	  cur    =    cur.getLastChild()    ||    cur.getType()!=    Token.VAR)    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
622	[BUG]  [BUGGY]  p  =  cur.getParent();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getParent();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getParent();	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.FUNCTION)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
623	[BUG]  [BUGGY]  Node  cur  =  cur.getParent();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Node  cur  =  cur.getParent();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Node  cur  =  cur.getParent();	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.FUNCTION)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
624	[BUG]  [BUGGY]  Predicate  predicate  =  predicate.getParent();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  predicate  =  predicate.getParent();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  predicate  =  predicate.getParent();	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.FUNCTION)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
625	[BUG]  [BUGGY]  n.removeChild(cur);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  n.removeChild(cur);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	n.removeChild(cur);	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.FUNCTION)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
626	[BUG]  [BUGGY]  Node  cur  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Node  cur  =  n.getFirstChild();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Node  cur  =  n.getFirstChild();	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.FUNCTION)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
627	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  Node>empty  ||  predicate.apply(cur))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  Node>empty  ||  predicate.apply(cur))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  Node>empty  ||  predicate.apply(cur))  {	  cur    =    cur.getNext()    &&    Predicates.    <    Node>empty)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
628	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicates.  <  Node>predicate)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicates.  <  Node>predicate)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicates.  <  Node>predicate)  {	  cur    =    cur.getNext()    &&    Predicates.    <    Node>predicates)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
629	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  Node>predicates);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  Node>predicates);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  Node>predicates);	  cur    =    cur.getNext()    &&    Predicates.    <    Node>predicates)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
630	[BUG]  [BUGGY]  p  =  cur.getParent())  {  if(cur  ==  null)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getParent())  {  if(cur  ==  null)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getParent())  {  if(cur  ==  null)  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur!=    null)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
631	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  cur.getParent())  {  if(cur!=  null  &&  predicate.apply(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  cur.getParent())  {  if(cur!=  null  &&  predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  cur.getParent())  {  if(cur!=  null  &&  predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur!=    null)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
632	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  LIVE_EFFECT_PREDICATE  ||  predicate.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  LIVE_EFFECT_PREDICATE  ||  predicate.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  LIVE_EFFECT_PREDICATE  ||  predicate.getType()  ==  Token.FUNCTION)  {	  cur    =    cur.getNext()    &&    Predicates.    <    LIVE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	109	None	replace
633	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  LIVE_EFFECT_PREDICATE  ||  predicate.getType()  ==  Token.VAR)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  LIVE_EFFECT_PREDICATE  ||  predicate.getType()  ==  Token.VAR)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  LIVE_EFFECT_PREDICATE  ||  predicate.getType()  ==  Token.VAR)  {	  cur    =    cur.getNext()    &&    Predicates.    <    LIVE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	109	None	replace
634	[BUG]  [BUGGY]  cur  =  cur.getFirstChild();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getFirstChild();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getFirstChild();	  cur    =    cur.getFirstChild()    ||    cur.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
635	[BUG]  [BUGGY]  Node  cur  =  n.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Node  cur  =  n.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Node  cur  =  n.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.NAME)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
636	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.VAR)  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur.getType()  ==  Token.VAR)  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur.getType()  ==  Token.VAR)  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.NAME)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
637	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME  &&  cur.hasChildren())  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur.getType()  ==  Token.NAME  &&  cur.hasChildren())  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur.getType()  ==  Token.NAME  &&  cur.hasChildren())  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.NAME)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
638	[BUG]  [BUGGY]  Node  cur  =  n.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getNext())  {  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Node  cur  =  n.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getNext())  {  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Node  cur  =  n.getParent())  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getNext())  {  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.NAME)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
639	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  n.hasChildren())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  n.hasChildren())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  n.hasChildren())  {	  cur    =    cur.getNext()    ||    predicate.hasChildren())    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
640	[BUG]  [BUGGY]  cur  =  cur.getPrevious()  &&!predicate.isEmpty())  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getPrevious()  &&!predicate.isEmpty())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getPrevious()  &&!predicate.isEmpty())  {	  cur    =    cur.getPrevious())    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
641	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  Predicates.  >=  SIDE_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  Predicates.  >=  SIDE_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  Predicates.  >=  SIDE_EFFECT_PREDICATE)  {	  cur    =    cur.getNext()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE    ||    Predicates.    <    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
642	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  Predicates.  <  MISSING_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  Predicates.  <  MISSING_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  Predicates.  <  MISSING_EFFECT_PREDICATE)  {	  cur    =    cur.getNext()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE    ||    Predicates.    <    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
643	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  Predicates.  <  String>predicate)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  Predicates.  <  String>predicate)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  Predicates.  <  String>predicate)  {	  cur    =    cur.getNext()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE    ||    Predicates.    <    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
644	[BUG]  [BUGGY]  cur  =  cur.removeFirstChild();  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.removeFirstChild();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.removeFirstChild();	  cur    =    cur.removeFirstChild())    {    	non-compiled	[CE]  <identifier>  expected	121	None	replace
645	[BUG]  [BUGGY]  cur  =  cur.removeFirstChild()  &&  predicate.getType()  ==  Token.VAR)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.removeFirstChild()  &&  predicate.getType()  ==  Token.VAR)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.removeFirstChild()  &&  predicate.getType()  ==  Token.VAR)  {	  cur    =    cur.removeFirstChild())    {    	non-compiled	[CE]  <identifier>  expected	121	None	replace
646	[BUG]  [BUGGY]  cur  =  cur.removeFirstChild()  &&  Predicates.  <  Node>emptyList())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.removeFirstChild()  &&  Predicates.  <  Node>emptyList())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.removeFirstChild()  &&  Predicates.  <  Node>emptyList())  {	  cur    =    cur.removeFirstChild())    {    	non-compiled	[CE]  <identifier>  expected	121	None	replace
647	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  Node>emptyCfgNode  ||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  Node>emptyCfgNode  ||  predicate.apply(cur))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  Node>emptyCfgNode  ||  predicate.apply(cur))  {	  cur    =    cur.getNext()    &&    Predicates.    <    Node>emptyCfgNode)    {    	non-compiled	[CE]  <identifier>  expected	86	None	replace
648	[BUG]  [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  ||  cur.apply(predicate))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  ||  cur.apply(predicate))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  SIDE_EFFECT_PREDICATE  ||  cur.apply(predicate))  {	  cur    =    cur.getParent())    {    Predicate    <    SIDE_EFFECT_PREDICATE    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	98	None	replace
649	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME)  {  cur  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur.getType()  ==  Token.NAME)  {  cur  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur);  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur.getType()  ==  Token.NAME)  {  cur  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur);  }	  cur    =    cur.getParent())    {    Predicate    <    SIDE_EFFECT_PREDICATE    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	98	None	replace
650	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.VAR)  {  cur  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur.getType()  ==  Token.VAR)  {  cur  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur.getType()  ==  Token.VAR)  {  cur  =  cur.getParent())  {  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {  }	  cur    =    cur.getParent())    {    Predicate    <    SIDE_EFFECT_PREDICATE    ||    predicate.apply(cur))    {    	non-compiled	[CE]  <identifier>  expected	98	None	replace
651	[BUG]  [BUGGY]  cur  =  cur.getFirstChild()  ||  cur.getLastChild().getString().equals( " "))  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getFirstChild()  ||  cur.getLastChild().getString().equals( " "))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getFirstChild()  ||  cur.getLastChild().getString().equals( " "))  {	  cur    =    cur.getFirstChild())    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
652	[BUG]  [BUGGY]  cur  =  cur.getFirstChild()  ||  cur.getLastChild().getString().endsWith( "__ "))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getFirstChild()  ||  cur.getLastChild().getString().endsWith( "__ "))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getFirstChild()  ||  cur.getLastChild().getString().endsWith( "__ "))  {	  cur    =    cur.getFirstChild())    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
653	[BUG]  [BUGGY]  cur  =  cur.getFirstChild()  ||  cur.getLastChild().getString().equals( "- "))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getFirstChild()  ||  cur.getLastChild().getString().equals( "- "))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getFirstChild()  ||  cur.getLastChild().getString().equals( "- "))  {	  cur    =    cur.getFirstChild())    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
654	[BUG]  [BUGGY]  cur  =  cur.getFirstChild()  ||  cur.getLastChild().getString().endsWith( "- "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getFirstChild()  ||  cur.getLastChild().getString().endsWith( "- "))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getFirstChild()  ||  cur.getLastChild().getString().endsWith( "- "))  {	  cur    =    cur.getFirstChild())    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
655	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  cur.getType()  ==  Token.NAME  &&  varName.equals(cur.getString()))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  cur.getType()  ==  Token.NAME  &&  varName.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  cur.getType()  ==  Token.NAME  &&  varName.equals(cur.getString()))  {	  cur    =    cur.getNext()    ||    cur.getType()    ==    Token.NAME    &&    name.equals(cur.getString()))    {    	non-compiled	[CE]  <identifier>  expected	112	None	replace
656	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  cur.getType()  ==  Token.NAME  &&  predicate.equals(cur.getString()))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  cur.getType()  ==  Token.NAME  &&  predicate.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  cur.getType()  ==  Token.NAME  &&  predicate.equals(cur.getString()))  {	  cur    =    cur.getNext()    ||    cur.getType()    ==    Token.NAME    &&    name.equals(cur.getString()))    {    	non-compiled	[CE]  <identifier>  expected	112	None	replace
657	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  predicate.equals(cur.getString()));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  predicate.equals(cur.getString()));  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  predicate.equals(cur.getString()));	  cur    =    cur.getNext()    ||    predicate.equals(cur.getString()))    {    	non-compiled	[CE]  <identifier>  expected	116	None	replace
658	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  name.equals(cur.getString()))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  name.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  name.equals(cur.getString()))  {	  cur    =    cur.getNext()    ||    predicate.equals(cur.getString()))    {    	non-compiled	[CE]  <identifier>  expected	116	None	replace
659	[BUG]  [BUGGY]  cur  =  cur.getNext()  -  1  +|  cur.getType()!=  Token.VAR)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  -  1  +|  cur.getType()!=  Token.VAR)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  -  1  +|  cur.getType()!=  Token.VAR)  {	  cur    =    cur.getNext()    +|    cur.getType()!=    Token.VAR)    {    	non-compiled	[CE]  <identifier>  expected	123	None	replace
660	[BUG]  [BUGGY]  cur  =  cur.getNext()  /  2  +|  cur.getType()!=  Token.VAR)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  /  2  +|  cur.getType()!=  Token.VAR)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  /  2  +|  cur.getType()!=  Token.VAR)  {	  cur    =    cur.getNext()    +|    cur.getType()!=    Token.VAR)    {    	non-compiled	[CE]  <identifier>  expected	123	None	replace
661	[BUG]  [BUGGY]  cur  =  cur.getfirstChild(),  predicate)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getfirstChild(),  predicate)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getfirstChild(),  predicate)  {	  cur    =    cur.getLastChild(),    predicate)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
662	[BUG]  [BUGGY]  cur  =  cur.getLastChild().getNext()  &  SIDE_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild().getNext()  &  SIDE_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild().getNext()  &  SIDE_EFFECT_PREDICATE)  {	  cur    =    cur.getLastChild()    &    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	117	None	replace
663	[BUG]  [BUGGY]  cur  =  cur.getLastChild().getString()  &  SIDE_EFFECT_PREDICATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild().getString()  &  SIDE_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild().getString()  &  SIDE_EFFECT_PREDICATE)  {	  cur    =    cur.getLastChild()    &    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	117	None	replace
664	[BUG]  [BUGGY]  cur  =  cur.getLastChild().getNext())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild().getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild().getNext())  {	  cur    =    cur.getLastChild()    &    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	117	None	replace
665	[BUG]  [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  ||  cur!=  null  &&  predicate.isLeftOf(cur);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  ||  cur!=  null  &&  predicate.isLeftOf(cur);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  SIDE_EFFECT_PREDICATE  ||  cur!=  null  &&  predicate.isLeftOf(cur);	  cur    =    cur.getParent())    {    Predicate    <    SIDE_EFFECT_PREDICATE    ||    predicate!=    null    &&    predicate.isLeftOf(cur);    	non-compiled	[CE]  <identifier>  expected	102	None	replace
666	[BUG]  [BUGGY]  cur  =  cur.getFirstChild();  cur.getType()!=  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getFirstChild();  cur.getType()!=  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getFirstChild();  cur.getType()!=  Token.FUNCTION)  {	  cur    =    cur.getFirstChild()    ||    cur.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
667	[BUG]  [BUGGY]  cur  =  cur.getLastChild();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild();	  cur    =    cur.getLastChild()    &&    NodeUtil.isExpressionNode(cur))    {    	non-compiled	[CE]  <identifier>  expected	77	None	replace
668	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  cur.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  cur.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  cur.getType()  ==  Token.FUNCTION)  {	  cur    =    cur.getNext()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE    ||    predicate.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
669	[BUG]  [BUGGY]  cur  =  cur.getNext();  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext();  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext();  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.getType()  ==  Token.FUNCTION)  {	  cur    =    cur.getNext()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE    ||    predicate.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
670	[BUG]  [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate.checkLeftOf(cur,  expressionRoot);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate.checkLeftOf(cur,  expressionRoot);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  SIDE_EFFECT_PREDICATE  ||  predicate.checkLeftOf(cur,  expressionRoot);	  cur    =    cur.getParent())    {    Predicate    <    SIDE_EFFECT_PREDICATE    :    predicate.checkLeftOf(cur,    expressionRoot);    	non-compiled	[CE]  <identifier>  expected	99	None	replace
671	[BUG]  [BUGGY]  predicate  =  predicate.checkLeftOf(cur,  expressionRoot);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  predicate  =  predicate.checkLeftOf(cur,  expressionRoot);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	predicate  =  predicate.checkLeftOf(cur,  expressionRoot);	  cur    =    cur.getParent())    {    Predicate    <    SIDE_EFFECT_PREDICATE    :    predicate.checkLeftOf(cur,    expressionRoot);    	non-compiled	[CE]  <identifier>  expected	99	None	replace
672	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.equals(defNode))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicate.equals(defNode))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.equals(defNode))  {	  cur    =    cur.getNext()    &&    predicate.isLeftOf(defNode))    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
673	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  p.getParent())  {  if(cur.getType()  ==  Token.EXPR_RESULT)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  p.getParent())  {  if(cur.getType()  ==  Token.EXPR_RESULT)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  p.getParent())  {  if(cur.getType()  ==  Token.EXPR_RESULT)  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.EXPR_RESULT)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
674	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  cur.getNext())  {  if(predicate.getType()  ==  Token.EXPR_RESULT)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  cur.getNext())  {  if(predicate.getType()  ==  Token.EXPR_RESULT)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  cur.getNext())  {  if(predicate.getType()  ==  Token.EXPR_RESULT)  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.EXPR_RESULT)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
675	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  cur.getParent())  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  cur.getParent())  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  cur.getParent())  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.EXPR_RESULT)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
676	[BUG]  [BUGGY]  NodeUtil.checkLeftOf(n,  predicate);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  NodeUtil.checkLeftOf(n,  predicate);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	NodeUtil.checkLeftOf(n,  predicate);	  NodeUtil.checkLeftOf(cur,    predicate);    	non-compiled	[CE]  <identifier>  expected	105	None	replace
677	[BUG]  [BUGGY]  cur  =  cur.getNext()  -  1  +|  cur.getType()  ==  Token.CALL)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  -  1  +|  cur.getType()  ==  Token.CALL)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  -  1  +|  cur.getType()  ==  Token.CALL)  {	  cur    =    cur.getNext()    +|    cur.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  <identifier>  expected	120	None	replace
678	[BUG]  [BUGGY]  cur  =  cur.getNext()  /  ||  cur.getType()  ==  Token.CALL)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  /  ||  cur.getType()  ==  Token.CALL)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  /  ||  cur.getType()  ==  Token.CALL)  {	  cur    =    cur.getNext()    +|    cur.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  <identifier>  expected	120	None	replace
679	[BUG]  [BUGGY]  if(predicate.apply(cur))  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(predicate.apply(cur))  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(predicate.apply(cur))  {  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.NAME)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	96	None	replace
680	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getNext())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur.getType()  ==  Token.NAME)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getNext())  {	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.NAME)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	96	None	replace
681	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME  &&  cur.hasChildren())  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur.getType()  ==  Token.NAME  &&  cur.hasChildren())  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur.getType()  ==  Token.NAME  &&  cur.hasChildren())  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.NAME)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	96	None	replace
682	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  Predicates.  <?>predicate)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  Predicates.  <?>predicate)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  Predicates.  <?>predicate)  {	  cur    =    cur.getNext()    ||    Predicates.    <    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
683	[BUG]  [BUGGY]  cur  =  cur.getNext()  -  1  +|  cur.getType()!=  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  -  1  +|  cur.getType()!=  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  -  1  +|  cur.getType()!=  Token.FUNCTION)  {	  cur    =    cur.getNext()    +|    cur.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	110	None	replace
684	[BUG]  [BUGGY]  cur  =  cur.getNext()  /  ||  cur.getType()!=  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  /  ||  cur.getType()!=  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  /  ||  cur.getType()!=  Token.FUNCTION)  {	  cur    =    cur.getNext()    +|    cur.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	110	None	replace
685	[BUG]  [BUGGY]  cur  =  cur.getNext()  +  Predicate.equals(predicate.getString()))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  +  Predicate.equals(predicate.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  +  Predicate.equals(predicate.getString()))  {	  cur    =    cur.getNext()    &&    Predicate.equals(predicate.getString()))    {    	non-compiled	[CE]  <identifier>  expected	74	None	replace
686	[BUG]  [BUGGY]  cur  =  cur.getNext()  ||  Predicate.equals(cur.getString()))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  ||  Predicate.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  ||  Predicate.equals(cur.getString()))  {	  cur    =    cur.getNext()    &&    Predicate.equals(predicate.getString()))    {    	non-compiled	[CE]  <identifier>  expected	74	None	replace
687	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.equals(cfgNode))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicate.equals(cfgNode))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.equals(cfgNode))  {	  cur    =    cur.getNext()    &&    predicate.equals(predicate))    {    	non-compiled	[CE]  <identifier>  expected	78	None	replace
688	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.equals(n))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicate.equals(n))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.equals(n))  {	  cur    =    cur.getNext()    &&    predicate.equals(predicate))    {    	non-compiled	[CE]  <identifier>  expected	78	None	replace
689	[BUG]  [BUGGY]  cur  =  cur.next()  ||  cur.getType()  ==  Token.VAR)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.next()  ||  cur.getType()  ==  Token.VAR)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.next()  ||  cur.getType()  ==  Token.VAR)  {	  cur    =    cur.next())    {    	non-compiled	[CE]  <identifier>  expected	92	None	replace
690	[BUG]  [BUGGY]  cur  =  cur.next()  ||  cur.getType()!=  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.next()  ||  cur.getType()!=  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.next()  ||  cur.getType()!=  Token.FUNCTION)  {	  cur    =    cur.next())    {    	non-compiled	[CE]  <identifier>  expected	92	None	replace
691	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(cur,  p))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(cur,  p))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.isLeftOf(cur,  p))  {	  cur    =    cur.getNext()    &&    predicate.isLeftOf(p))    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
692	[BUG]  [BUGGY]  p  =  cur.getGrandparent())  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getGrandparent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getGrandparent())  {	  cur    =    cur.getParent())    {    p    =    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
693	[BUG]  [BUGGY]  cur  =  cur.getNext();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext();	  cur    =    cur.getNext()    &&    predicate.isLeftOf(cur);    	non-compiled	[CE]  <identifier>  expected	114	None	replace
694	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(cur,  expressionRoot);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(cur,  expressionRoot);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.isLeftOf(cur,  expressionRoot);	  cur    =    cur.getNext()    &&    predicate.isLeftOf(cur);    	non-compiled	[CE]  <identifier>  expected	114	None	replace
695	[BUG]  [BUGGY]  cur  =  cur.getParent()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {	  cur    =    cur.getParent()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  <identifier>  expected	84	None	replace
696	[BUG]  [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  =  cur.getPrevious();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  =  cur.getPrevious();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  SIDE_EFFECT_PREDICATE  =  cur.getPrevious();	  cur    =    cur.getParent())    {    Predicate    <    SIDE_EFFECT_PREDICATE    =    predicate.getParent();    	non-compiled	[CE]  <identifier>  expected	100	None	replace
697	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  cur.getNext())  {  if(predicate.getType()  ==  Token.FUNCTION)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  cur.getNext())  {  if(predicate.getType()  ==  Token.FUNCTION)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  cur.getNext())  {  if(predicate.getType()  ==  Token.FUNCTION)  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.FUNCTION)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
698	[BUG]  [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  =  p.getNext();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  SIDE_EFFECT_PREDICATE  =  p.getNext();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  SIDE_EFFECT_PREDICATE  =  p.getNext();	  Predicate    <    SIDE_EFFECT_PREDICATE    =    predicate.getParent();    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
699	[BUG]  [BUGGY]  cur  =  cur.getNext()  -  1  ||  cur.getType()!=  Token.VAR)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  -  1  ||  cur.getType()!=  Token.VAR)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  -  1  ||  cur.getType()!=  Token.VAR)  {	  cur    =    cur.getNext()    +    1    ||    cur.getType()!=    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
700	[BUG]  [BUGGY]  cur  =  cur.getLastChild();  cur.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild();  cur.getType()!=  Token.FUNCTION)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild();  cur.getType()!=  Token.FUNCTION)  {	  cur    =    cur.getLastChild()    ||    cur.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
701	[BUG]  [BUGGY]  p  =  cur.getNext()  + ": "  +  predicate.equals(cur.getString()))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getNext()  + ": "  +  predicate.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getNext()  + ": "  +  predicate.equals(cur.getString()))  {	  p    =    cur.getNext()    &&    predicate.equals(cur.getString()))    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
702	[BUG]  [BUGGY]  p  =  cur.getNext()  &&  predicate.equals(cur.getString()));  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getNext()  &&  predicate.equals(cur.getString()));  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getNext()  &&  predicate.equals(cur.getString()));	  p    =    cur.getNext()    &&    predicate.equals(cur.getString()))    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
703	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur);	  cur    =    cur.getNext()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE    ||    predicate.apply(cur))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
704	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  cur.getNext())  {  if(predicate.getType()  ==  Token.VAR)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  cur.getNext())  {  if(predicate.getType()  ==  Token.VAR)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  cur.getNext())  {  if(predicate.getType()  ==  Token.VAR)  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.VAR)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
705	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  cur.getNext())  {  if(predicate.getType()  ==  Token.NAME)  {  if(predicate.apply(cur))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  <  Node>  cur  =  cur.getNext())  {  if(predicate.getType()  ==  Token.NAME)  {  if(predicate.apply(cur))  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  <  Node>  cur  =  cur.getNext())  {  if(predicate.getType()  ==  Token.NAME)  {  if(predicate.apply(cur))  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.NAME)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
706	[BUG]  [BUGGY]  p  =  cur.getNext())  {  if(predicate.getType()  ==  Token.NAME)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  p  =  cur.getNext())  {  if(predicate.getType()  ==  Token.NAME)  {  return  true;  }  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	p  =  cur.getNext())  {  if(predicate.getType()  ==  Token.NAME)  {  return  true;  }	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.NAME)    {    if(predicate.apply(cur))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
707	[BUG]  [BUGGY]  cur  =  cur.getFirstChild();  cur.getType()!=  Token.VAR)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getFirstChild();  cur.getType()!=  Token.VAR)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getFirstChild();  cur.getType()!=  Token.VAR)  {	  cur    =    cur.getFirstChild()    ||    cur.getType()!=    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
708	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  name.equals(cur.getString()))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  name.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  name.equals(cur.getString()))  {	  cur    =    predicate.getNext()    &&    cur.equals(cur.getString()))    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
709	[BUG]  [BUGGY]  cur  =  cur.getString()  &  SIDE_EFFECT_PREDICATE)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getString()  &  SIDE_EFFECT_PREDICATE)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getString()  &  SIDE_EFFECT_PREDICATE)  {	  cur    =    cur.getString())    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
710	[BUG]  [BUGGY]  cur  =  cur.getString()  &  SIDE_EFFECT_PREDICATE);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getString()  &  SIDE_EFFECT_PREDICATE);  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getString()  &  SIDE_EFFECT_PREDICATE);	  cur    =    cur.getString())    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
711	[BUG]  [BUGGY]  cur  =  cur.getParent()  &&  predicate.isLeftOf(predicate))  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getParent()  &&  predicate.isLeftOf(predicate))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getParent()  &&  predicate.isLeftOf(predicate))  {	  cur    =    cur.getNext()    &&    predicate.isLeftOf(predicate))    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
712	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  parent.isLeftOf(predicate))  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  parent.isLeftOf(predicate))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  parent.isLeftOf(predicate))  {	  cur    =    cur.getNext()    &&    predicate.isLeftOf(predicate))    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
713	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  &&  Predicates.  <  SIDE_EFFECT_PREDICATE  ||  predicate.apply(cur))  {	  cur    =    cur.getLastChild()    &&    Predicates.    <    SIDE_EFFECT_PREDICATE)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
714	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(cur,  expressionRoot));  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(cur,  expressionRoot));  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.isLeftOf(cur,  expressionRoot));	  cur    =    cur.getNext()    &&    predicate.isLeftOf(cur));    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
715	[BUG]  [BUGGY]  Predicate  cur  =  cur.getNext().getNext()  &&  predicate.equals(cur.getString()))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  cur  =  cur.getNext().getNext()  &&  predicate.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  cur  =  cur.getNext().getNext()  &&  predicate.equals(cur.getString()))  {	  Predicate    cur    =    cur.getNext()    &&    predicate.equals(cur.getString()))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
716	[BUG]  [BUGGY]  Predicate  cur  =  cur.getNext().getParent()  &&  predicate.equals(cur.getString()))  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  cur  =  cur.getNext().getParent()  &&  predicate.equals(cur.getString()))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  cur  =  cur.getNext().getParent()  &&  predicate.equals(cur.getString()))  {	  Predicate    cur    =    cur.getNext()    &&    predicate.equals(cur.getString()))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
717	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(cur,  expressionRoot,  predicate))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  predicate.isLeftOf(cur,  expressionRoot,  predicate))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  predicate.isLeftOf(cur,  expressionRoot,  predicate))  {	  cur    =    cur.getNext()    &&    predicate.isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
718	[BUG]  [BUGGY]  cur  =  cur.getNext()  &&  Predicate.isLeftOf(cur,  expressionRoot,  predicate))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  &&  Predicate.isLeftOf(cur,  expressionRoot,  predicate))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  &&  Predicate.isLeftOf(cur,  expressionRoot,  predicate))  {	  cur    =    cur.getNext()    &&    predicate.isLeftOf(cur,    expressionRoot))    {    	non-compiled	[CE]  <identifier>  expected	113	None	replace
719	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.VAR)  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur.getType()  ==  Token.VAR)  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur.getType()  ==  Token.VAR)  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.FUNCTION)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	94	None	replace
720	[BUG]  [BUGGY]  if(predicate.apply(cur))  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(predicate.apply(cur))  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(predicate.apply(cur))  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.FUNCTION)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	94	None	replace
721	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.EMPTY)  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  if(cur.getType()  ==  Token.EMPTY)  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	if(cur.getType()  ==  Token.EMPTY)  {  if(cur.getType()  ==  Token.FUNCTION)  {  for(Node  cur  =  cur.getParent().getFirstChild();  cur!=  cur.getParent())  {	  cur    =    cur.getParent())    {    if(cur.getType()    ==    Token.FUNCTION)    {    for(Node    cur    =    cur.getParent().getFirstChild();    cur!=    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	94	None	replace
722	[BUG]  [BUGGY]  cur  =  cur.getNext()  +  n.hasChildren())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  +  n.hasChildren())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  +  n.hasChildren())  {	  cur    =    cur.getNext()    +    predicate.hasChildren())    {    	non-compiled	[CE]  <identifier>  expected	103	None	replace
723	[BUG]  [BUGGY]  cur  =  cur.getFirstChild()  ||  predicate.isLeftOf(cur))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getFirstChild()  ||  predicate.isLeftOf(cur))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getFirstChild()  ||  predicate.isLeftOf(cur))  {	  cur    =    cur.getLastChild()    &&    predicate.isLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
724	[BUG]  [BUGGY]  cur  =  cur.getLastChild()  &&  predicate.isLeftOf(cur,  expressionRoot))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getLastChild()  &&  predicate.isLeftOf(cur,  expressionRoot))  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getLastChild()  &&  predicate.isLeftOf(cur,  expressionRoot))  {	  cur    =    cur.getLastChild()    &&    predicate.isLeftOf(cur))    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
725	[BUG]  [BUGGY]  cur  =  cur.getNext()  +  1  ||  cur.getType()!=  Token.NAME)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  cur  =  cur.getNext()  +  1  ||  cur.getType()!=  Token.NAME)  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	cur  =  cur.getNext()  +  1  ||  cur.getType()!=  Token.NAME)  {	  cur    =    cur.getNext()    ||    cur.getType()!=    Token.NAME)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
726	[BUG]  [BUGGY]  Predicate  predicate  =  cur.removeFirstChild();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  predicate  =  cur.removeFirstChild();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  predicate  =  cur.removeFirstChild();	  Predicate    predicate    =    cur.getPredicate();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
727	[BUG]  [BUGGY]  Predicate  predicate  =  n.getPredicate();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;      [BUGGY]  Predicate  predicate  =  n.getPredicate();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.4364357804719848	484	484	3	replace	Predicate  predicate  =  n.getPredicate();	  Predicate    predicate    =    cur.getPredicate();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
