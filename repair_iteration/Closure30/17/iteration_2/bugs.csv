bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unknown  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unknown  scope: "  +  var.getName());  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Unknown  scope: "  +  var.getName());	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
2	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  name);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  name);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  scope: "  +  name);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
3	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  var.getName());  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  var: "  +  var.getName());	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
4	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  var.getName(),  name);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  var.getName(),  name);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  scope: "  +  var.getName(),  name);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
5	[BUG]  [BUGGY]  AssertionFailedError(name,   "Unknown  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  AssertionFailedError(name,   "Unknown  scope: "  +  var.getName());  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,   "Unknown  scope: "  +  var.getName());	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
6	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  var.toString());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  var.toString());  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  scope: "  +  var.toString());	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
7	[BUG]  [BUGGY]  Node  rValue  =  jsScope.getVar(name);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  Node  rValue  =  jsScope.getVar(name);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Node  rValue  =  jsScope.getVar(name);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
8	[BUG]  [BUGGY]  Definition  rValue  =  jsScope.getVar(name);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  Definition  rValue  =  jsScope.getVar(name);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  rValue  =  jsScope.getVar(name);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
9	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  def);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  def);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  def);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
10	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  var,  this);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  var,  this);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  var,  this);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
11	[BUG]  [BUGGY]  Node  rValue  =  var.getLastChild();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  Node  rValue  =  var.getLastChild();  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Node  rValue  =  var.getLastChild();	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
12	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  var,  def);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  var,  def);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  var,  def);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
13	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  var);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  var);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  var);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
14	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unknown  var: "  +  name);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unknown  var: "  +  name);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Unknown  var: "  +  name);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
15	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  rValue);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  rValue);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  var: "  +  name,  rValue);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
16	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  jsScope);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  jsScope);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  var: "  +  name,  jsScope);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
17	[BUG]  [BUGGY]  AssertionFailedError(name,   "Unknown  var: "  +  var);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  AssertionFailedError(name,   "Unknown  var: "  +  var);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,   "Unknown  var: "  +  var);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
18	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name  + "  for  scope: "  +  jsScope);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name  + "  for  scope: "  +  jsScope);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  var: "  +  name  + "  for  scope: "  +  jsScope);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
19	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name  + "  in  scope: "  +  jsScope);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name  + "  in  scope: "  +  jsScope);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  var: "  +  name  + "  in  scope: "  +  jsScope);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
20	[BUG]  [BUGGY]  Throwables.throw  new  JsScopeException( " ");  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  Throwables.throw  new  JsScopeException( " ");  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  JsScopeException( " ");	  throw    new    JsScopeException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
21	[BUG]  [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  rValue);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  rValue);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  JsScopeException( "Unknown  scope: "  +  rValue);	  throw    new    JsScopeException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
22	[BUG]  [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.getName());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.getName());  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.getName());	  throw    new    JsScopeException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
23	[BUG]  [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  rValue.toString());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  rValue.toString());  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  JsScopeException( "Unknown  scope: "  +  rValue.toString());	  throw    new    JsScopeException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
24	[BUG]  [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  var.getName());  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  JsScopeException( "Unknown  scope: "  +  var.getName());	  throw    new    JsScopeException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
25	[BUG]  [BUGGY]  throw  new  JsScopeException( "JsScope  exception: "  +  name);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  JsScopeException( "JsScope  exception: "  +  name);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  JsScopeException( "JsScope  exception: "  +  name);	  throw    new    JsScopeException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
26	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalStateException( " ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
27	[BUG]  [BUGGY]  String  name  =  jsScope.getName();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  String  name  =  jsScope.getName();  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	String  name  =  jsScope.getName();	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
28	[BUG]  [BUGGY]  String  name  =  jsScope.getVar(name);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  String  name  =  jsScope.getVar(name);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	String  name  =  jsScope.getVar(name);	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
29	[BUG]  [BUGGY]  Definition  def  =  jsScope.getDefinition(name);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  Definition  def  =  jsScope.getDefinition(name);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  jsScope.getDefinition(name);	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
30	[BUG]  [BUGGY]  Definition  def  =  jsScope.getDefinition(rValue);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  Definition  def  =  jsScope.getDefinition(rValue);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  jsScope.getDefinition(rValue);	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
31	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
32	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Missing  var: "  +  name);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  Throwables.throw  new  AssertionFailedError( "Missing  var: "  +  name);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Missing  var: "  +  name);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
33	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  rValue);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  rValue);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Missing  var: "  +  name,  rValue);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
34	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  var.name);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  var.name);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Missing  var: "  +  var.name);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
35	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  jsScope);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  jsScope);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Missing  var: "  +  name,  jsScope);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
36	[BUG]  [BUGGY]  AssertionFailedError(name,   "Missing  var: "  +  var);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  AssertionFailedError(name,   "Missing  var: "  +  var);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,   "Missing  var: "  +  var);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
37	[BUG]  [BUGGY]  Throwables.warning( "Missing  var: "  +  name);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  Throwables.warning( "Missing  var: "  +  name);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.warning( "Missing  var: "  +  name);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
38	[BUG]  [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " ");  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " ");  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  UnsupportedOperationException( " ");	  throw    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
39	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(var.getString()));  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(var.getString()));  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(var.getString()));	  throw    new    IllegalArgumentException(   "   ".equals(var.getString()));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
40	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  name.equals(var.getString()));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  IllegalArgumentException( " "  +  name.equals(var.getString()));  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  IllegalArgumentException( " "  +  name.equals(var.getString()));	  throw    new    IllegalArgumentException(   "   ".equals(var.getString()));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
41	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(var.getString()));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(var.getString()));  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalArgumentException( " ").equals(var.getString()));	  throw    new    IllegalArgumentException(   "   ".equals(var.getString()));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
42	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  var.getString());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  IllegalArgumentException( " "  +  var.getString());  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  IllegalArgumentException( " "  +  var.getString());	  throw    new    IllegalArgumentException(   "   ".equals(var.getString()));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
43	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(var.getString());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(var.getString());  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalArgumentException( " ").equals(var.getString());	  throw    new    IllegalArgumentException(   "   ".equals(var.getString()));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
44	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  var.name);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  var.name);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  scope: "  +  var.name);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
45	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unknown  scope: "  +  var.scope);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unknown  scope: "  +  var.scope);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Unknown  scope: "  +  var.scope);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
46	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  var.scope,  name);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  var.scope,  name);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  scope: "  +  var.scope,  name);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
47	[BUG]  [BUGGY]  AssertionFailedError(name,   "Unknown  scope: "  +  var.scope);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  AssertionFailedError(name,   "Unknown  scope: "  +  var.scope);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,   "Unknown  scope: "  +  var.scope);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
48	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getType());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getType());  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getType());	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getType());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
49	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getClass());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getClass());  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getClass());	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getType());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
50	[BUG]  [BUGGY]  AssertionFailedError(name,   "Unexpected  scope: "  +  var.getType());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  AssertionFailedError(name,   "Unexpected  scope: "  +  var.getType());  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,   "Unexpected  scope: "  +  var.getType());	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getType());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
51	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getLocalName());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getLocalName());  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getLocalName());	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getType());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
52	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  type: "  +  var.getType());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  AssertionFailedError( "Unexpected  type: "  +  var.getType());  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unexpected  type: "  +  var.getType());	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getType());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
53	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName());  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName());	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
54	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName(),  name);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName(),  name);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName(),  name);	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
55	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  name);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  name);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unexpected  scope: "  +  name);	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
56	[BUG]  [BUGGY]  AssertionFailedError(name,   "Unexpected  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  AssertionFailedError(name,   "Unexpected  scope: "  +  var.getName());  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,   "Unexpected  scope: "  +  var.getName());	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
57	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Unexpected  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  IllegalArgumentException( "Unexpected  scope: "  +  var.getName());  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  IllegalArgumentException( "Unexpected  scope: "  +  var.getName());	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
58	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.toString());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.toString());  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.toString());	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
59	[BUG]  [BUGGY]  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName());  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError( "Unexpected  scope: "  +  var.getName());	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getType());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
60	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getType(),  name);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getType(),  name);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getType(),  name);	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getType());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
61	[BUG]  [BUGGY]  Definition  def  =  def.reachingDef.get(rValue);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  Definition  def  =  def.reachingDef.get(rValue);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  def.reachingDef.get(rValue);	  throw    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
62	[BUG]  [BUGGY]  Definition  def  =  jsScope.getDefinitions();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  Definition  def  =  jsScope.getDefinitions();  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  jsScope.getDefinitions();	  throw    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
63	[BUG]  [BUGGY]  Definition  def  =  jsScope.getDefinitions(name);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  Definition  def  =  jsScope.getDefinitions(name);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  jsScope.getDefinitions(name);	  throw    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
64	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  var.name());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  var.name());  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  scope: "  +  var.name());	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
65	[BUG]  [BUGGY]  new  AssertionFailedError( "Unknown  var: "  +  name);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  new  AssertionFailedError( "Unknown  var: "  +  name);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError( "Unknown  var: "  +  name);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
66	[BUG]  [BUGGY]  new  AssertionFailedError( "Unknown  var: "  +  name,  rValue);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  new  AssertionFailedError( "Unknown  var: "  +  name,  rValue);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError( "Unknown  var: "  +  name,  rValue);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
67	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  var.name);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  var.name);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  var: "  +  var.name);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
68	[BUG]  [BUGGY]  JsScopeException  t  =  new  JsScopeException( " ");  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  JsScopeException  t  =  new  JsScopeException( " ");  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	JsScopeException  t  =  new  JsScopeException( " ");	  throw    new    JsScopeException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
69	[BUG]  [BUGGY]  jsScope.reachingDef.put(rValue,  def);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  jsScope.reachingDef.put(rValue,  def);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	jsScope.reachingDef.put(rValue,  def);	  throw    new    JsScopeException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
70	[BUG]  [BUGGY]  Definition  def  =  def.getDefinitions();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  Definition  def  =  def.getDefinitions();  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  def.getDefinitions();	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
71	[BUG]  [BUGGY]  DefinitionDefinition  def  =  def.getDefinitions();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  DefinitionDefinition  def  =  def.getDefinitions();  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	DefinitionDefinition  def  =  def.getDefinitions();	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
72	[BUG]  [BUGGY]  new  AssertionFailedError( "Unknown  scope: "  +  var.scope);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  new  AssertionFailedError( "Unknown  scope: "  +  var.scope);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError( "Unknown  scope: "  +  var.scope);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
73	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  jsScope);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  jsScope);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  scope: "  +  jsScope);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
74	[BUG]  [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName());  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError  t  =  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName());	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
75	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.name());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.name());  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.name());	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
76	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  var.getString());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  var.getString());  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalArgumentException( " "  +  var.getString());	  throw    new    IllegalArgumentException(   "   ".equals(var.getString()));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
77	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  IllegalArgumentException( " "));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  IllegalArgumentException( " "));  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  new  IllegalArgumentException( " "));	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
78	[BUG]  [BUGGY]  escaped.add(definition);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  escaped.add(definition);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	escaped.add(definition);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
79	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  JsScope());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  JsScope());  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  new  JsScope());	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
80	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  this);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  this);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  this);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
81	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  IllegalStateException( " "));  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  IllegalStateException( " "));  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  new  IllegalStateException( " "));	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
82	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  MockitoReachingDef());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  MockitoReachingDef());  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  new  MockitoReachingDef());	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
83	[BUG]  [BUGGY]  new  AssertionFailedError( "Missing  var: "  +  var.name);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  new  AssertionFailedError( "Missing  var: "  +  var.name);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError( "Missing  var: "  +  var.name);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
84	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  var.getName());  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Missing  var: "  +  var.getName());	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
85	[BUG]  [BUGGY]  escaped.add(var);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  escaped.add(var);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	escaped.add(var);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
86	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  def);  continue;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  def);  continue;  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  def);  continue;	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
87	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  var);  continue;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  var);  continue;  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  var);  continue;	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
88	[BUG]  [BUGGY]  Definition  <  Object>  def  =  jsScope.getVar(name);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  Definition  <  Object>  def  =  jsScope.getVar(name);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  <  Object>  def  =  jsScope.getVar(name);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
89	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  UnsupportedOperationException( " "));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  UnsupportedOperationException( " "));  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  new  UnsupportedOperationException( " "));	  throw    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
90	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  RuntimeException( " "));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  RuntimeException( " "));  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  new  RuntimeException( " "));	  throw    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
91	[BUG]  [BUGGY]  Definition  def  =  jsScope.getVar(name);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  Definition  def  =  jsScope.getVar(name);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  jsScope.getVar(name);	  throw    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
92	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  Reporter());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  Reporter());  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  new  Reporter());	  throw    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
93	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  MockImpl());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  MockImpl());  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  new  MockImpl());	  throw    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
94	[BUG]  [BUGGY]  DefinitionDef  def  =  jsScope.getDefinitionDef(name);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  DefinitionDef  def  =  jsScope.getDefinitionDef(name);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	DefinitionDef  def  =  jsScope.getDefinitionDef(name);	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
95	[BUG]  [BUGGY]  return  new  AssertionFailedError( "Unknown  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  return  new  AssertionFailedError( "Unknown  scope: "  +  var.getName());  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	return  new  AssertionFailedError( "Unknown  scope: "  +  var.getName());	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
96	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + "Unknown  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  AssertionFailedError(name  + "Unknown  scope: "  +  var.getName());  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + "Unknown  scope: "  +  var.getName());	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
97	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + "  unknown  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  AssertionFailedError(name  + "  unknown  scope: "  +  var.getName());  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + "  unknown  scope: "  +  var.getName());	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
98	[BUG]  [BUGGY]  Definition  def  =  jsScope.getDefinitionsInExpression(rValue);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  Definition  def  =  jsScope.getDefinitionsInExpression(rValue);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  jsScope.getDefinitionsInExpression(rValue);	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
99	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.scope);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.scope);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.scope);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
100	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  var);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  var);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Missing  var: "  +  name,  var);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
101	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.name);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.name);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.name);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
102	[BUG]  [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.getVar(name));  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.getVar(name));	  throw    new    JsScopeException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
103	[BUG]  [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  var.scope);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  var.scope);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  JsScopeException( "Unknown  scope: "  +  var.scope);	  throw    new    JsScopeException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
104	[BUG]  [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  jsScope);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  jsScope);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  JsScopeException( "Unknown  scope: "  +  jsScope);	  throw    new    JsScopeException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
105	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.scope);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.scope);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.scope);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
106	[BUG]  [BUGGY]  return  new  AssertionFailedError( "Unknown  var: "  +  name);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  return  new  AssertionFailedError( "Unknown  var: "  +  name);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	return  new  AssertionFailedError( "Unknown  var: "  +  name);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
107	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.name);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.name);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.name);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
108	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
109	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.getName());  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.getName());	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
110	[BUG]  [BUGGY]  return  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  return  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName());  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	return  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName());	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
111	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name,   "Unexpected  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  AssertionFailedError(name,   "Unexpected  scope: "  +  var.getName());  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name,   "Unexpected  scope: "  +  var.getName());	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
112	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.getType());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.getType());  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.getType());	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getType());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
113	[BUG]  [BUGGY]  return  new  AssertionFailedError( "Unknown  scope: "  +  var.scope);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  return  new  AssertionFailedError( "Unknown  scope: "  +  var.scope);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	return  new  AssertionFailedError( "Unknown  scope: "  +  var.scope);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
114	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + "  unknown  scope: "  +  var.scope);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  AssertionFailedError(name  + "  unknown  scope: "  +  var.scope);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + "  unknown  scope: "  +  var.scope);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
115	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + "Unknown  scope: "  +  var.scope);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {    [BUGGY]  throw  new  AssertionFailedError(name  + "Unknown  scope: "  +  var.scope);  [BUGGY]    }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + "Unknown  scope: "  +  var.scope);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
