bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name  + ",  in  scope: "  +  jsScope);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name  + ",  in  scope: "  +  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  var: "  +  name  + ",  in  scope: "  +  jsScope);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name    +   "    in    scope:   "    +    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
2	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unknown  var: "  +  name  + "  in  scope: "  +  jsScope);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unknown  var: "  +  name  + "  in  scope: "  +  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Unknown  var: "  +  name  + "  in  scope: "  +  jsScope);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name    +   "    in    scope:   "    +    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
3	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name  + "  in  scope: "  +  jsScope,  rValue);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name  + "  in  scope: "  +  jsScope,  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  var: "  +  name  + "  in  scope: "  +  jsScope,  rValue);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name    +   "    in    scope:   "    +    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
4	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name  + "  in  scope: "  +  jsScope.getName());  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name  + "  in  scope: "  +  jsScope.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  var: "  +  name  + "  in  scope: "  +  jsScope.getName());	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name    +   "    in    scope:   "    +    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
5	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unknown  var: "  +  name  + ",  in  scope: "  +  jsScope);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unknown  var: "  +  name  + ",  in  scope: "  +  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Unknown  var: "  +  name  + ",  in  scope: "  +  jsScope);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name    +   "    in    scope:   "    +    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
6	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name  + "  in  scope: "  +  jsScope.scope);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name  + "  in  scope: "  +  jsScope.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  var: "  +  name  + "  in  scope: "  +  jsScope.scope);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name    +   "    in    scope:   "    +    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
7	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unknown  scope: "  +  var.toString());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unknown  scope: "  +  var.toString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Unknown  scope: "  +  var.toString());	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.toString());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
8	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  name.toString());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  name.toString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  scope: "  +  name.toString());	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.toString());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
9	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  name,  var.toString());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  name,  var.toString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  scope: "  +  name,  var.toString());	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.toString());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
10	[BUG]  [BUGGY]  AssertionFailedError(name,   "Unknown  scope: "  +  var.toString());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,   "Unknown  scope: "  +  var.toString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,   "Unknown  scope: "  +  var.toString());	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.toString());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
11	[BUG]  [BUGGY]  Throwables.weirdString( "Unknown  scope: "  +  var.toString());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.weirdString( "Unknown  scope: "  +  var.toString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.weirdString( "Unknown  scope: "  +  var.toString());	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.toString());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
12	[BUG]  [BUGGY]  AssertionFailedError(name,   "Missing  var: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,   "Missing  var: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,   "Missing  var: "  +  var.getName());	  AssertionFailedError(name,       "Missing    var:   "    +    var);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
13	[BUG]  [BUGGY]  AssertionFailedError(name,  jsScope, "Missing  var: "  +  var);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,  jsScope, "Missing  var: "  +  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,  jsScope, "Missing  var: "  +  var);	  AssertionFailedError(name,       "Missing    var:   "    +    var);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
14	[BUG]  [BUGGY]  AssertionFailedError(name,   "Missing  var: "  +  var.toString());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,   "Missing  var: "  +  var.toString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,   "Missing  var: "  +  var.toString());	  AssertionFailedError(name,       "Missing    var:   "    +    var);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
15	[BUG]  [BUGGY]  AssertionFailedError(name,   "Missing  var: "  +  var.scope);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,   "Missing  var: "  +  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,   "Missing  var: "  +  var.scope);	  AssertionFailedError(name,       "Missing    var:   "    +    var);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
16	[BUG]  [BUGGY]  AssertionFailedError(name,  var.getName());  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,  var.getName());	  AssertionFailedError(name,       "Missing    var:   "    +    var);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
17	[BUG]  [BUGGY]  AssertionFailedError(name,   "Missing  var: "  +  var.name);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,   "Missing  var: "  +  var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,   "Missing  var: "  +  var.name);	  AssertionFailedError(name,       "Missing    var:   "    +    var);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
18	[BUG]  [BUGGY]  AssertionFailedError(name,  var.getName()  + ": "  +  var);  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,  var.getName()  + ": "  +  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,  var.getName()  + ": "  +  var);	  AssertionFailedError(name,       "Missing    var:   "    +    var);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
19	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  type: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unexpected  type: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unexpected  type: "  +  var.getName());	  throw    new    AssertionFailedError(   "Unexpected    type:   "    +    var.getType());    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
20	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unexpected  type: "  +  var.getType());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unexpected  type: "  +  var.getType());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Unexpected  type: "  +  var.getType());	  throw    new    AssertionFailedError(   "Unexpected    type:   "    +    var.getType());    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
21	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  type: "  +  name,  var.getType());  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unexpected  type: "  +  name,  var.getType());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unexpected  type: "  +  name,  var.getType());	  throw    new    AssertionFailedError(   "Unexpected    type:   "    +    var.getType());    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
22	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  type: "  +  name);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unexpected  type: "  +  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unexpected  type: "  +  name);	  throw    new    AssertionFailedError(   "Unexpected    type:   "    +    var.getType());    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
23	[BUG]  [BUGGY]  AssertionFailedError(name,   "Unexpected  type: "  +  var.getType());  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,   "Unexpected  type: "  +  var.getType());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,   "Unexpected  type: "  +  var.getType());	  throw    new    AssertionFailedError(   "Unexpected    type:   "    +    var.getType());    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
24	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  type: "  +  var.getQualifiedName());  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unexpected  type: "  +  var.getQualifiedName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unexpected  type: "  +  var.getQualifiedName());	  throw    new    AssertionFailedError(   "Unexpected    type:   "    +    var.getType());    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
25	[BUG]  [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.getVar(name),  rValue);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.getVar(name),  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.getVar(name),  rValue);	  throw    new    JsScopeException(   "Unknown    scope:   "    +    jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
26	[BUG]  [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  rValue.getVar(name));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  rValue.getVar(name));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  JsScopeException( "Unknown  scope: "  +  rValue.getVar(name));	  throw    new    JsScopeException(   "Unknown    scope:   "    +    jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
27	[BUG]  [BUGGY]  Throwables.throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.getVar(name));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.getVar(name));	  throw    new    JsScopeException(   "Unknown    scope:   "    +    jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
28	[BUG]  [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  var.getVar(name));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  var.getVar(name));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  JsScopeException( "Unknown  scope: "  +  var.getVar(name));	  throw    new    JsScopeException(   "Unknown    scope:   "    +    jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
29	[BUG]  [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.getVar(name,  var.scope));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.getVar(name,  var.scope));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.getVar(name,  var.scope));	  throw    new    JsScopeException(   "Unknown    scope:   "    +    jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
30	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.name);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.name);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name,    var.name);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
31	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.name,  rValue);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.name,  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.name,  rValue);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name,    var.name);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
32	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  jsScope.name);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  jsScope.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  var: "  +  name,  jsScope.name);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name,    var.name);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
33	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  jsScope,  var.name);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  jsScope,  var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  var: "  +  name,  jsScope,  var.name);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name,    var.name);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
34	[BUG]  [BUGGY]  Throwables.warning( "Unknown  var: "  +  name,  var.name);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.warning( "Unknown  var: "  +  name,  var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.warning( "Unknown  var: "  +  name,  var.name);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name,    var.name);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
35	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.name,  jsScope);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.name,  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.name,  jsScope);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name,    var.name);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
36	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.name());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.name());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.name());	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.name());    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
37	[BUG]  [BUGGY]  AssertionFailedError(name,   "Unexpected  scope: "  +  var.name());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,   "Unexpected  scope: "  +  var.name());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,   "Unexpected  scope: "  +  var.name());	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.name());    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
38	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Unexpected  scope: "  +  var.name());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  IllegalArgumentException( "Unexpected  scope: "  +  var.name());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  IllegalArgumentException( "Unexpected  scope: "  +  var.name());	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.name());    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
39	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Unexpected  scope: "  +  var.name());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  IllegalStateException( "Unexpected  scope: "  +  var.name());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  IllegalStateException( "Unexpected  scope: "  +  var.name());	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.name());    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
40	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").append(var.getString());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").append(var.getString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalArgumentException( " ").append(var.getString());	  Throwables.throw    new    IllegalArgumentException(   "   ").equals(var.getString());    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
41	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(var.getName());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalArgumentException( " ").equals(var.getName());	  Throwables.throw    new    IllegalArgumentException(   "   ").equals(var.getString());    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
42	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").returnValue().equals(var.getString());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").returnValue().equals(var.getString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalArgumentException( " ").returnValue().equals(var.getString());	  Throwables.throw    new    IllegalArgumentException(   "   ").equals(var.getString());    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
43	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(rValue.getString());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(rValue.getString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalArgumentException( " ").equals(rValue.getString());	  Throwables.throw    new    IllegalArgumentException(   "   ").equals(var.getString());    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
44	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").describe(var.getString());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").describe(var.getString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalArgumentException( " ").describe(var.getString());	  Throwables.throw    new    IllegalArgumentException(   "   ").equals(var.getString());    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
45	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").returnString();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").returnString();  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalArgumentException( " ").returnString();	  Throwables.throw    new    IllegalArgumentException(   "   ").equals(var.getString());    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
46	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getType(),  name,  rValue);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getType(),  name,  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getType(),  name,  rValue);	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getType(),    name);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
47	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getType(),  name);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getType(),  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getType(),  name);	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getType(),    name);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
48	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getType(),  name,  def);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getType(),  name,  def);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getType(),  name,  def);	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getType(),    name);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
49	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  name.getType(),  var);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  name.getType(),  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unexpected  scope: "  +  name.getType(),  var);	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getType(),    name);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
50	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getType(),  name,  jsScope);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getType(),  name,  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getType(),  name,  jsScope);	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getType(),    name);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
51	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  name,  var.getType());  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  name,  var.getType());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unexpected  scope: "  +  name,  var.getType());	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getType(),    name);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
52	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError(name  + "Unknown  scope: "  +  var.scope);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError(name  + "Unknown  scope: "  +  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError(name  + "Unknown  scope: "  +  var.scope);	  throw    new    AssertionFailedError(name    +   "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
53	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + ",  unknown  scope: "  +  var.scope);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name  + ",  unknown  scope: "  +  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + ",  unknown  scope: "  +  var.scope);	  throw    new    AssertionFailedError(name    +   "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
54	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + "  cannot  access  scope: "  +  var.scope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name  + "  cannot  access  scope: "  +  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + "  cannot  access  scope: "  +  var.scope);	  throw    new    AssertionFailedError(name    +   "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
55	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError(name,   "Unknown  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError(name,   "Unknown  scope: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError(name,   "Unknown  scope: "  +  var.getName());	  Throwables.throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
56	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unknown  var: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unknown  var: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Unknown  var: "  +  var.getName());	  Throwables.throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
57	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unknown  scope: "  +  var.getName(),  name);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unknown  scope: "  +  var.getName(),  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Unknown  scope: "  +  var.getName(),  name);	  Throwables.throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
58	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unknown  scope: "  +  var.name());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unknown  scope: "  +  var.name());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Unknown  scope: "  +  var.name());	  Throwables.throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
59	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError(name  + "  unknown  scope: "  +  var.scope);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError(name  + "  unknown  scope: "  +  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError(name  + "  unknown  scope: "  +  var.scope);	  throw    new    AssertionFailedError(name    +   "    unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
60	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + "  unknown  scope: "  +  var.scope,  rValue);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name  + "  unknown  scope: "  +  var.scope,  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + "  unknown  scope: "  +  var.scope,  rValue);	  throw    new    AssertionFailedError(name    +   "    unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
61	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + "  unknown  scope: "  +  var.scope,  jsScope);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name  + "  unknown  scope: "  +  var.scope,  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + "  unknown  scope: "  +  var.scope,  jsScope);	  throw    new    AssertionFailedError(name    +   "    unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
62	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + "  unknown  scope: "  +  jsScope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name  + "  unknown  scope: "  +  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + "  unknown  scope: "  +  jsScope);	  throw    new    AssertionFailedError(name    +   "    unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
63	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.getName());	  throw    new    AssertionFailedError(name    +   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
64	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + "  declared  in  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name  + "  declared  in  scope: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + "  declared  in  scope: "  +  var.getName());	  throw    new    AssertionFailedError(name    +   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
65	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.getName(),  rValue);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.getName(),  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.getName(),  rValue);	  throw    new    AssertionFailedError(name    +   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
66	[BUG]  [BUGGY]  Definition  <  Object>  def  =  jsScope.getVar(name,  var.scope);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  <  Object>  def  =  jsScope.getVar(name,  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  <  Object>  def  =  jsScope.getVar(name,  var.scope);	  Definition    <    Object>    def    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
67	[BUG]  [BUGGY]  Definition  <  Object>  def  =  jsScope.getVar(rValue);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  <  Object>  def  =  jsScope.getVar(rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  <  Object>  def  =  jsScope.getVar(rValue);	  Definition    <    Object>    def    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
68	[BUG]  [BUGGY]  Definition  <  Object>  def  =  jsScope.getVar(name,  rValue);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  <  Object>  def  =  jsScope.getVar(name,  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  <  Object>  def  =  jsScope.getVar(name,  rValue);	  Definition    <    Object>    def    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
69	[BUG]  [BUGGY]  Definition  <  Object>  def  =  jsScope.getDefinition(rValue);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  <  Object>  def  =  jsScope.getDefinition(rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  <  Object>  def  =  jsScope.getDefinition(rValue);	  Definition    <    Object>    def    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
70	[BUG]  [BUGGY]  Definition  <  Object>  def  =  jsScope.getDefinitions(rValue);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  <  Object>  def  =  jsScope.getDefinitions(rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  <  Object>  def  =  jsScope.getDefinitions(rValue);	  Definition    <    Object>    def    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
71	[BUG]  [BUGGY]  Definition  <  Object>  def  =  rValue.getVar(name);  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  <  Object>  def  =  rValue.getVar(name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  <  Object>  def  =  rValue.getVar(name);	  Definition    <    Object>    def    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
72	[BUG]  [BUGGY]  Node  rValue  =  var.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Node  rValue  =  var.getFirstChild();  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Node  rValue  =  var.getFirstChild();	  Node    rValue    =    var.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
73	[BUG]  [BUGGY]  Node  rValue  =  jsScope.getLastChild();  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Node  rValue  =  jsScope.getLastChild();  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Node  rValue  =  jsScope.getLastChild();	  Node    rValue    =    var.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
74	[BUG]  [BUGGY]  Node  rValue  =  var.node.getLastChild();  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Node  rValue  =  var.node.getLastChild();  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Node  rValue  =  var.node.getLastChild();	  Node    rValue    =    var.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
75	[BUG]  [BUGGY]  Node  rValue  =  var.getNext();  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Node  rValue  =  var.getNext();  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Node  rValue  =  var.getNext();	  Node    rValue    =    var.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
76	[BUG]  [BUGGY]  Node  rValue  =  node.getLastChild();  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Node  rValue  =  node.getLastChild();  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Node  rValue  =  node.getLastChild();	  Node    rValue    =    var.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
77	[BUG]  [BUGGY]  Node  rValue  =  v.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Node  rValue  =  v.getFirstChild();  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Node  rValue  =  v.getFirstChild();	  Node    rValue    =    var.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
78	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Missing  var: "  +  name,  rValue);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Missing  var: "  +  name,  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Missing  var: "  +  name,  rValue);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name,    rValue);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
79	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.getName());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.getName());	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name,    rValue);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
80	[BUG]  [BUGGY]  Throwables.warning( "Missing  var: "  +  name,  rValue);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.warning( "Missing  var: "  +  name,  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.warning( "Missing  var: "  +  name,  rValue);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name,    rValue);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
81	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.toString());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.toString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.toString());	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name,    rValue);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
82	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unknown  var: "  +  name,  rValue);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unknown  var: "  +  name,  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Unknown  var: "  +  name,  rValue);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name,    rValue);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
83	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  cfgNode,  rValue);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  cfgNode,  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  var: "  +  name,  cfgNode,  rValue);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name,    rValue);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
84	[BUG]  [BUGGY]  Throwables.warning( "Unknown  var: "  +  name,  rValue);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.warning( "Unknown  var: "  +  name,  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.warning( "Unknown  var: "  +  name,  rValue);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name,    rValue);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
85	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getClass());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getClass());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getClass());	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getClass());    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
86	[BUG]  [BUGGY]  AssertionFailedError(name,   "Unexpected  scope: "  +  var.getClass());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,   "Unexpected  scope: "  +  var.getClass());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,   "Unexpected  scope: "  +  var.getClass());	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getClass());    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
87	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  var: "  +  var.getClass());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unexpected  var: "  +  var.getClass());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unexpected  var: "  +  var.getClass());	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getClass());    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
88	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getClass(),  name);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getClass(),  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getClass(),  name);	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getClass());    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
89	[BUG]  [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  var.name);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  JsScopeException( "Unknown  scope: "  +  var.name);	  throw    new    JsScopeException(   "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
90	[BUG]  [BUGGY]  Throwables.throw  new  JsScopeException( "Unknown  scope: "  +  var.scope);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  JsScopeException( "Unknown  scope: "  +  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  JsScopeException( "Unknown  scope: "  +  var.scope);	  throw    new    JsScopeException(   "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
91	[BUG]  [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  name);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  JsScopeException( "Unknown  scope: "  +  name);	  throw    new    JsScopeException(   "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
92	[BUG]  [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  var.scope,  name);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  var.scope,  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  JsScopeException( "Unknown  scope: "  +  var.scope,  name);	  throw    new    JsScopeException(   "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
93	[BUG]  [BUGGY]  JsScopeException  t  =  new  JsScopeException( "Unknown  scope: "  +  var.scope);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  JsScopeException  t  =  new  JsScopeException( "Unknown  scope: "  +  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	JsScopeException  t  =  new  JsScopeException( "Unknown  scope: "  +  var.scope);	  throw    new    JsScopeException(   "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
94	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.getType());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.getType());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.getType());	  throw    new    AssertionFailedError(name    +   "Unexpected    scope:   "    +    var.getType());    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
95	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.getType(),  rValue);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.getType(),  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.getType(),  rValue);	  throw    new    AssertionFailedError(name    +   "Unexpected    scope:   "    +    var.getType());    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
96	[BUG]  [BUGGY]  Definition  def  =  var.getDefinitions();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  var.getDefinitions();  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  var.getDefinitions();	  Definition    def    =    def.getDefinitions();    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
97	[BUG]  [BUGGY]  Definition  def  =  rValue.getDefinitions();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  rValue.getDefinitions();  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  rValue.getDefinitions();	  Definition    def    =    def.getDefinitions();    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
98	[BUG]  [BUGGY]  Definition  def  =  v.getDefinitions();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  v.getDefinitions();  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  v.getDefinitions();	  Definition    def    =    def.getDefinitions();    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
99	[BUG]  [BUGGY]  Definition  definition  =  var.getDefinitions();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  definition  =  var.getDefinitions();  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  definition  =  var.getDefinitions();	  Definition    def    =    def.getDefinitions();    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
100	[BUG]  [BUGGY]  Definition  otherDef  =  var.getDefinitions();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  otherDef  =  var.getDefinitions();  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  otherDef  =  var.getDefinitions();	  Definition    def    =    def.getDefinitions();    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
101	[BUG]  [BUGGY]  Def  def  =  var.getDefinitions();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Def  def  =  var.getDefinitions();  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Def  def  =  var.getDefinitions();	  Definition    def    =    def.getDefinitions();    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
102	[BUG]  [BUGGY]  new  AssertionFailedError(name,   "Unknown  var: "  +  var);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError(name,   "Unknown  var: "  +  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError(name,   "Unknown  var: "  +  var);	  new    AssertionFailedError(   "Unknown    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
103	[BUG]  [BUGGY]  new  AssertionFailedError( "Unknown  var: "  +  name,  jsScope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError( "Unknown  var: "  +  name,  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError( "Unknown  var: "  +  name,  jsScope);	  new    AssertionFailedError(   "Unknown    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
104	[BUG]  [BUGGY]  new  AssertionFailedError( "Unknown  var: "  +  name,  var.name);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError( "Unknown  var: "  +  name,  var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError( "Unknown  var: "  +  name,  var.name);	  new    AssertionFailedError(   "Unknown    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
105	[BUG]  [BUGGY]  new  AssertionFailedError( "Unknown  var: "  +  name));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError( "Unknown  var: "  +  name));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError( "Unknown  var: "  +  name));	  new    AssertionFailedError(   "Unknown    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
106	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  var.name,  name);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  var.name,  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  scope: "  +  var.name,  name);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.scope,    name);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
107	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unknown  scope: "  +  var.scope,  name);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unknown  scope: "  +  var.scope,  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Unknown  scope: "  +  var.scope,  name);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.scope,    name);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
108	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  name,  var.scope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  name,  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  scope: "  +  name,  var.scope);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.scope,    name);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
109	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  var.name,  var.scope);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  var.name,  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  scope: "  +  var.name,  var.scope);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.scope,    name);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
110	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  var.scope,  name,  rValue);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  var.scope,  name,  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  scope: "  +  var.scope,  name,  rValue);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.scope,    name);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
111	[BUG]  [BUGGY]  AssertionFailedError(name,   "Unknown  scope: "  +  var.scope,  name);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,   "Unknown  scope: "  +  var.scope,  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,   "Unknown  scope: "  +  var.scope,  name);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.scope,    name);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
112	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  name,  var);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  name,  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  scope: "  +  name,  var);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.scope,    name);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
113	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RuntimeException( " "));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  RuntimeException( " "));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  node,  new  RuntimeException( " "));	  NodeTraversal.traverse(compiler,    rValue,    new    RuntimeException(   "   "));    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
114	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  RuntimeException( " "));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  RuntimeException( " "));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  var,  new  RuntimeException( " "));	  NodeTraversal.traverse(compiler,    rValue,    new    RuntimeException(   "   "));    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
115	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  RuntimeException(name));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  RuntimeException(name));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  new  RuntimeException(name));	  NodeTraversal.traverse(compiler,    rValue,    new    RuntimeException(   "   "));    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
116	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  def,  new  RuntimeException( " "));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  def,  new  RuntimeException( " "));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  def,  new  RuntimeException( " "));	  NodeTraversal.traverse(compiler,    rValue,    new    RuntimeException(   "   "));    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
117	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  this,  new  RuntimeException( " "));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  this,  new  RuntimeException( " "));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  this,  new  RuntimeException( " "));	  NodeTraversal.traverse(compiler,    rValue,    new    RuntimeException(   "   "));    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
118	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  name,  new  RuntimeException( " "));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  name,  new  RuntimeException( " "));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  name,  new  RuntimeException( " "));	  NodeTraversal.traverse(compiler,    rValue,    new    RuntimeException(   "   "));    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
119	[BUG]  [BUGGY]  new  AssertionFailedError(name,   "Unexpected  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError(name,   "Unexpected  scope: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError(name,   "Unexpected  scope: "  +  var.getName());	  new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
120	[BUG]  [BUGGY]  new  AssertionFailedError(name,  var.getName());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError(name,  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError(name,  var.getName());	  new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
121	[BUG]  [BUGGY]  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName(),  name);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName(),  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError( "Unexpected  scope: "  +  var.getName(),  name);	  new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
122	[BUG]  [BUGGY]  new  AssertionFailedError( "Unexpected  var: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError( "Unexpected  var: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError( "Unexpected  var: "  +  var.getName());	  new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
123	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(var.getString()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(var.getString()));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalStateException( " ".equals(var.getString()));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
124	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(var.getName()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(var.getName()));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalStateException( " ".equals(var.getName()));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
125	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(rValue));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(rValue));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalStateException( " ".equals(rValue));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
126	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ",  rValue);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ",  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalStateException( " ",  rValue);	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
127	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(var.scope));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(var.scope));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalStateException( " ".equals(var.scope));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
128	[BUG]  [BUGGY]  Definition  def  =  var.getDefinitions(name);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  var.getDefinitions(name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  var.getDefinitions(name);	  Definition    def    =    jsScope.getDefinitions(name);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
129	[BUG]  [BUGGY]  Definition  def  =  jsScope.getDefinitions(var.name);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  jsScope.getDefinitions(var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  jsScope.getDefinitions(var.name);	  Definition    def    =    jsScope.getDefinitions(name);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
130	[BUG]  [BUGGY]  Definition  def  =  jsScope.getDefinitions(name,  var.scope);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  jsScope.getDefinitions(name,  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  jsScope.getDefinitions(name,  var.scope);	  Definition    def    =    jsScope.getDefinitions(name);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
131	[BUG]  [BUGGY]  Definition  def  =  jsScope.getDefinitions(rValue);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  jsScope.getDefinitions(rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  jsScope.getDefinitions(rValue);	  Definition    def    =    jsScope.getDefinitions(name);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
132	[BUG]  [BUGGY]  Definition  def  =  rValue.getDefinitions(name);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  rValue.getDefinitions(name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  rValue.getDefinitions(name);	  Definition    def    =    jsScope.getDefinitions(name);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
133	[BUG]  [BUGGY]  Definition  def  =  jsScope.getDefinitions(name,  var);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  jsScope.getDefinitions(name,  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  jsScope.getDefinitions(name,  var);	  Definition    def    =    jsScope.getDefinitions(name);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
134	[BUG]  [BUGGY]  Definition  def  =  jsScope.getDefinitions(var);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  jsScope.getDefinitions(var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  jsScope.getDefinitions(var);	  Definition    def    =    jsScope.getDefinitions(name);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
135	[BUG]  [BUGGY]  String  name  =  var.getName();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  String  name  =  var.getName();  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	String  name  =  var.getName();	  String    name    =    jsScope.getName();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
136	[BUG]  [BUGGY]  String  name  =  rValue.getName();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  String  name  =  rValue.getName();  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	String  name  =  rValue.getName();	  String    name    =    jsScope.getName();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
137	[BUG]  [BUGGY]  String  name  =  jsScope.getNamespaceURI();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  String  name  =  jsScope.getNamespaceURI();  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	String  name  =  jsScope.getNamespaceURI();	  String    name    =    jsScope.getName();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
138	[BUG]  [BUGGY]  String  name  =  jsScope.getNameNode();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  String  name  =  jsScope.getNameNode();  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	String  name  =  jsScope.getNameNode();	  String    name    =    jsScope.getName();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
139	[BUG]  [BUGGY]  String  name  =  jsScope.getName()  + ": "  +  var.scope;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  String  name  =  jsScope.getName()  + ": "  +  var.scope;  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	String  name  =  jsScope.getName()  + ": "  +  var.scope;	  String    name    =    jsScope.getName();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
140	[BUG]  [BUGGY]  String  name  =  jsScope.getVarName();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  String  name  =  jsScope.getVarName();  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	String  name  =  jsScope.getVarName();	  String    name    =    jsScope.getName();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
141	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.scope);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.scope);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name,    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
142	[BUG]  [BUGGY]  Throwables.warning( "Unknown  var: "  +  name,  var.scope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.warning( "Unknown  var: "  +  name,  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.warning( "Unknown  var: "  +  name,  var.scope);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name,    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
143	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.jsScope);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.jsScope);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name,    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
144	[BUG]  [BUGGY]  Definition  def  =  jsScope.getVar(name,  var.scope);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  jsScope.getVar(name,  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  jsScope.getVar(name,  var.scope);	  Definition    def    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
145	[BUG]  [BUGGY]  Definition  def  =  var.getVar(name);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  var.getVar(name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  var.getVar(name);	  Definition    def    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
146	[BUG]  [BUGGY]  Definition  def  =  jsScope.getVar(rValue);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  jsScope.getVar(rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  jsScope.getVar(rValue);	  Definition    def    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
147	[BUG]  [BUGGY]  Definition  def  =  rValue.getVar(name);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  rValue.getVar(name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  rValue.getVar(name);	  Definition    def    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
148	[BUG]  [BUGGY]  Definition  def  =  jsScope.getDefinitionDefinition(rValue);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  jsScope.getDefinitionDefinition(rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  jsScope.getDefinitionDefinition(rValue);	  Definition    def    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
149	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  IllegalArgumentException(name));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  IllegalArgumentException(name));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  new  IllegalArgumentException(name));	  NodeTraversal.traverse(compiler,    rValue,    new    IllegalArgumentException(   "   "));    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
150	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  IllegalArgumentException( " "));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  IllegalArgumentException( " "));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  node,  new  IllegalArgumentException( " "));	  NodeTraversal.traverse(compiler,    rValue,    new    IllegalArgumentException(   "   "));    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
151	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  IllegalArgumentException( " "));  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  IllegalArgumentException( " "));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  var,  new  IllegalArgumentException( " "));	  NodeTraversal.traverse(compiler,    rValue,    new    IllegalArgumentException(   "   "));    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
152	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  IllegalStatementException( " "));  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  IllegalStatementException( " "));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  new  IllegalStatementException( " "));	  NodeTraversal.traverse(compiler,    rValue,    new    IllegalArgumentException(   "   "));    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
153	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  def,  new  IllegalArgumentException( " "));  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  def,  new  IllegalArgumentException( " "));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  def,  new  IllegalArgumentException( " "));	  NodeTraversal.traverse(compiler,    rValue,    new    IllegalArgumentException(   "   "));    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
154	[BUG]  [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(name,   "Unexpected  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(name,   "Unexpected  scope: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError  t  =  new  AssertionFailedError(name,   "Unexpected  scope: "  +  var.getName());	  AssertionFailedError    t    =    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
155	[BUG]  [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName(),  name);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName(),  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError  t  =  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName(),  name);	  AssertionFailedError    t    =    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
156	[BUG]  [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(name);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError  t  =  new  AssertionFailedError(name);	  AssertionFailedError    t    =    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
157	[BUG]  [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(name  + ": "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(name  + ": "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError  t  =  new  AssertionFailedError(name  + ": "  +  var.getName());	  AssertionFailedError    t    =    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
158	[BUG]  [BUGGY]  AssertionFailedError(name,  jsScope, "Unexpected  scope: "  +  var.getType());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,  jsScope, "Unexpected  scope: "  +  var.getType());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,  jsScope, "Unexpected  scope: "  +  var.getType());	  AssertionFailedError(name,       "Unexpected    scope:   "    +    var.getType());    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
159	[BUG]  [BUGGY]  AssertionFailedError(name,   "Unexpected  scope: "  +  var.getType(),  rValue);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,   "Unexpected  scope: "  +  var.getType(),  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,   "Unexpected  scope: "  +  var.getType(),  rValue);	  AssertionFailedError(name,       "Unexpected    scope:   "    +    var.getType());    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
160	[BUG]  [BUGGY]  AssertionFailedError(name,  var.name,  var.getType());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,  var.name,  var.getType());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,  var.name,  var.getType());	  AssertionFailedError(name,       "Unexpected    scope:   "    +    var.getType());    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
161	[BUG]  [BUGGY]  AssertionFailedError(name,  var.getName(),  var.getType());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,  var.getName(),  var.getType());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,  var.getName(),  var.getType());	  AssertionFailedError(name,       "Unexpected    scope:   "    +    var.getType());    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
162	[BUG]  [BUGGY]  AssertionFailedError(name,   "Unexpected  scope: "  +  var.getLocalName());  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,   "Unexpected  scope: "  +  var.getLocalName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,   "Unexpected  scope: "  +  var.getLocalName());	  AssertionFailedError(name,       "Unexpected    scope:   "    +    var.getType());    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
163	[BUG]  [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " ",  rValue);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " ",  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  UnsupportedOperationException( " ",  rValue);	  Throwables.throw    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
164	[BUG]  [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " "),  rValue);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " "),  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  UnsupportedOperationException( " "),  rValue);	  Throwables.throw    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
165	[BUG]  [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " "));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " "));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  UnsupportedOperationException( " "));	  Throwables.throw    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
166	[BUG]  [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " ")  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " ")  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  UnsupportedOperationException( " ")	  Throwables.throw    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
167	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Unexpected  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Unexpected  scope: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalArgumentException( "Unexpected  scope: "  +  var.getName());	  throw    new    IllegalArgumentException(   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
168	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Unexpected  scope: "  +  rValue.getName());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  IllegalArgumentException( "Unexpected  scope: "  +  rValue.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  IllegalArgumentException( "Unexpected  scope: "  +  rValue.getName());	  throw    new    IllegalArgumentException(   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
169	[BUG]  [BUGGY]  Throwables.weirdString( "Unexpected  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.weirdString( "Unexpected  scope: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.weirdString( "Unexpected  scope: "  +  var.getName());	  throw    new    IllegalArgumentException(   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
170	[BUG]  [BUGGY]  Throwables.warning( "Unexpected  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.warning( "Unexpected  scope: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.warning( "Unexpected  scope: "  +  var.getName());	  throw    new    IllegalArgumentException(   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
171	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Unexpected  scope: "  +  var.toString());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  IllegalArgumentException( "Unexpected  scope: "  +  var.toString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  IllegalArgumentException( "Unexpected  scope: "  +  var.toString());	  throw    new    IllegalArgumentException(   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
172	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Unexpected  scope: "  +  name);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  IllegalArgumentException( "Unexpected  scope: "  +  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  IllegalArgumentException( "Unexpected  scope: "  +  name);	  throw    new    IllegalArgumentException(   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
173	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  Reporter());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  Reporter());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  var,  new  Reporter());	  NodeTraversal.traverse(compiler,    rValue,    new    Reporter());    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
174	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  Reporter());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  Reporter());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  node,  new  Reporter());	  NodeTraversal.traverse(compiler,    rValue,    new    Reporter());    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
175	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  def,  new  Reporter());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  def,  new  Reporter());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  def,  new  Reporter());	  NodeTraversal.traverse(compiler,    rValue,    new    Reporter());    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
176	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  Reporter(),  def);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  Reporter(),  def);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  new  Reporter(),  def);	  NodeTraversal.traverse(compiler,    rValue,    new    Reporter());    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
177	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  target,  new  Reporter());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  target,  new  Reporter());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  target,  new  Reporter());	  NodeTraversal.traverse(compiler,    rValue,    new    Reporter());    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
178	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  this,  new  Reporter());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  this,  new  Reporter());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  this,  new  Reporter());	  NodeTraversal.traverse(compiler,    rValue,    new    Reporter());    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
179	[BUG]  [BUGGY]  Throwables.throw  new  JsScopeException( "Unknown  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  JsScopeException( "Unknown  scope: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  JsScopeException( "Unknown  scope: "  +  var.getName());	  throw    new    JsScopeException(   "Unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
180	[BUG]  [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  rValue.getName());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  rValue.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  JsScopeException( "Unknown  scope: "  +  rValue.getName());	  throw    new    JsScopeException(   "Unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
181	[BUG]  [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  var.getName(),  name);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  var.getName(),  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  JsScopeException( "Unknown  scope: "  +  var.getName(),  name);	  throw    new    JsScopeException(   "Unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
182	[BUG]  [BUGGY]  throw  new  JsScopeException( "Unknown  var: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  JsScopeException( "Unknown  var: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  JsScopeException( "Unknown  var: "  +  var.getName());	  throw    new    JsScopeException(   "Unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
183	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  jsScope,  rValue);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  jsScope,  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Missing  var: "  +  name,  jsScope,  rValue);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
184	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Missing  var: "  +  name,  jsScope);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Missing  var: "  +  name,  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Missing  var: "  +  name,  jsScope);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
185	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  jsScope,  def);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  jsScope,  def);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Missing  var: "  +  name,  jsScope,  def);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
186	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  scope);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Missing  var: "  +  name,  scope);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
187	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  jsScope,  declaration);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  jsScope,  declaration);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Missing  var: "  +  name,  jsScope,  declaration);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
188	[BUG]  [BUGGY]  Throwables.warning( "Missing  var: "  +  name,  jsScope);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.warning( "Missing  var: "  +  name,  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.warning( "Missing  var: "  +  name,  jsScope);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
189	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").append(var.getString()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").append(var.getString()));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalArgumentException( " ").append(var.getString()));	  Throwables.throw    new    IllegalArgumentException(   "   ").equals(var.getString()));    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
190	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(var.getName()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(var.getName()));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalArgumentException( " ").equals(var.getName()));	  Throwables.throw    new    IllegalArgumentException(   "   ").equals(var.getString()));    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
191	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(rValue.getString()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(rValue.getString()));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalArgumentException( " ").equals(rValue.getString()));	  Throwables.throw    new    IllegalArgumentException(   "   ").equals(var.getString()));    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
192	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").describe(var.getString()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").describe(var.getString()));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalArgumentException( " ").describe(var.getString()));	  Throwables.throw    new    IllegalArgumentException(   "   ").equals(var.getString()));    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
193	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "),  var.getString());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "),  var.getString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalArgumentException( " "),  var.getString());	  Throwables.throw    new    IllegalArgumentException(   "   ").equals(var.getString()));    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
194	[BUG]  [BUGGY]  DefinitionDefinition  def  =  var.getDefinitions();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  DefinitionDefinition  def  =  var.getDefinitions();  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	DefinitionDefinition  def  =  var.getDefinitions();	  DefinitionDefinition    def    =    def.getDefinitions();    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
195	[BUG]  [BUGGY]  DefinitionDefinition  def  =  jsScope.getDefinitions();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  DefinitionDefinition  def  =  jsScope.getDefinitions();  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	DefinitionDefinition  def  =  jsScope.getDefinitions();	  DefinitionDefinition    def    =    def.getDefinitions();    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
196	[BUG]  [BUGGY]  DefinitionDefinition  def  =  rValue.getDefinitions();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  DefinitionDefinition  def  =  rValue.getDefinitions();  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	DefinitionDefinition  def  =  rValue.getDefinitions();	  DefinitionDefinition    def    =    def.getDefinitions();    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
197	[BUG]  [BUGGY]  DefinitionDefinition  def  =  v.getDefinitions();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  DefinitionDefinition  def  =  v.getDefinitions();  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	DefinitionDefinition  def  =  v.getDefinitions();	  DefinitionDefinition    def    =    def.getDefinitions();    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
198	[BUG]  [BUGGY]  DefinitionDefinition  def  =  cfgNode.getDefinitions();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  DefinitionDefinition  def  =  cfgNode.getDefinitions();  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	DefinitionDefinition  def  =  cfgNode.getDefinitions();	  DefinitionDefinition    def    =    def.getDefinitions();    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
199	[BUG]  [BUGGY]  DefinitionDefinition  def  =  vs.getDefinitions();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  DefinitionDefinition  def  =  vs.getDefinitions();  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	DefinitionDefinition  def  =  vs.getDefinitions();	  DefinitionDefinition    def    =    def.getDefinitions();    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
200	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unknown  scope: "  +  var.name);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unknown  scope: "  +  var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Unknown  scope: "  +  var.name);	  Throwables.throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
201	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError(name,   "Unknown  scope: "  +  var.scope);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError(name,   "Unknown  scope: "  +  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError(name,   "Unknown  scope: "  +  var.scope);	  Throwables.throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
202	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unknown  scope: "  +  name);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unknown  scope: "  +  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Unknown  scope: "  +  name);	  Throwables.throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
203	[BUG]  [BUGGY]  AssertionFailedError(name,   "Unknown  var: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,   "Unknown  var: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,   "Unknown  var: "  +  var.getName());	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
204	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  var.name());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  var.name());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  var: "  +  var.name());	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
205	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Unknown  var: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  IllegalArgumentException( "Unknown  var: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  IllegalArgumentException( "Unknown  var: "  +  var.getName());	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
206	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  var.getLocalName());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  var.getLocalName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  var: "  +  var.getLocalName());	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
207	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  IllegalStateException( " "));  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  IllegalStateException( " "));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  node,  new  IllegalStateException( " "));	  NodeTraversal.traverse(compiler,    rValue,    new    IllegalStateException(   "   "));    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
208	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  IllegalStateException( " "));  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  IllegalStateException( " "));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  var,  new  IllegalStateException( " "));	  NodeTraversal.traverse(compiler,    rValue,    new    IllegalStateException(   "   "));    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
209	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  IllegalStateException(name));  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  IllegalStateException(name));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  new  IllegalStateException(name));	  NodeTraversal.traverse(compiler,    rValue,    new    IllegalStateException(   "   "));    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
210	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  def,  new  IllegalStateException( " "));  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  def,  new  IllegalStateException( " "));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  def,  new  IllegalStateException( " "));	  NodeTraversal.traverse(compiler,    rValue,    new    IllegalStateException(   "   "));    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
211	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  name,  new  IllegalStateException( " "));  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  name,  new  IllegalStateException( " "));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  name,  new  IllegalStateException( " "));	  NodeTraversal.traverse(compiler,    rValue,    new    IllegalStateException(   "   "));    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
212	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  IllegalStateException( "));  [CE]  illegal  start  of  expression  [FE]                                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  IllegalStateException( "));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  new  IllegalStateException( "));	  NodeTraversal.traverse(compiler,    rValue,    new    IllegalStateException(   "   "));    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
213	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError(name,   "Unexpected  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError(name,   "Unexpected  scope: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError(name,   "Unexpected  scope: "  +  var.getName());	  throw    new    AssertionFailedError(name,       "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
214	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name,   "Unexpected  scope: "  +  var.getName(),  rValue);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name,   "Unexpected  scope: "  +  var.getName(),  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name,   "Unexpected  scope: "  +  var.getName(),  rValue);	  throw    new    AssertionFailedError(name,       "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
215	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name,  jsScope.getName()  + "  expected  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name,  jsScope.getName()  + "  expected  scope: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name,  jsScope.getName()  + "  expected  scope: "  +  var.getName());	  throw    new    AssertionFailedError(name,       "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
216	[BUG]  [BUGGY]  Definition  def  =  var.reachingDef.get(rValue);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  var.reachingDef.get(rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  var.reachingDef.get(rValue);	  Definition    def    =    def.reachingDef.get(rValue);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
217	[BUG]  [BUGGY]  Definition  def  =  rValue.reachingDef.get(def);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  rValue.reachingDef.get(def);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  rValue.reachingDef.get(def);	  Definition    def    =    def.reachingDef.get(rValue);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
218	[BUG]  [BUGGY]  Definition  def  =  jsScope.getDefiningDef(rValue);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  jsScope.getDefiningDef(rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  jsScope.getDefiningDef(rValue);	  Definition    def    =    def.reachingDef.get(rValue);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
219	[BUG]  [BUGGY]  Definition  otherDef  =  var.reachingDef.get(rValue);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  otherDef  =  var.reachingDef.get(rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  otherDef  =  var.reachingDef.get(rValue);	  Definition    def    =    def.reachingDef.get(rValue);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
220	[BUG]  [BUGGY]  Definition  def  =  v.reachingDef.get(rValue);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  v.reachingDef.get(rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  v.reachingDef.get(rValue);	  Definition    def    =    def.reachingDef.get(rValue);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
221	[BUG]  [BUGGY]  throw  new  JsScopeException( "JsScope  exception: "  +  name,  rValue);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  JsScopeException( "JsScope  exception: "  +  name,  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  JsScopeException( "JsScope  exception: "  +  name,  rValue);	  throw    new    JsScopeException(   "JsScope    exception:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
222	[BUG]  [BUGGY]  throw  new  JsScopeException( "JsScope  exception: "  +  rValue);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  JsScopeException( "JsScope  exception: "  +  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  JsScopeException( "JsScope  exception: "  +  rValue);	  throw    new    JsScopeException(   "JsScope    exception:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
223	[BUG]  [BUGGY]  throw  new  JsScopeException( "JsScope  exception: "  +  var.name);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  JsScopeException( "JsScope  exception: "  +  var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  JsScopeException( "JsScope  exception: "  +  var.name);	  throw    new    JsScopeException(   "JsScope    exception:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
224	[BUG]  [BUGGY]  Throwables.throw  new  JsScopeException( "JsScope  exception: "  +  name);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  JsScopeException( "JsScope  exception: "  +  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  JsScopeException( "JsScope  exception: "  +  name);	  throw    new    JsScopeException(   "JsScope    exception:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
225	[BUG]  [BUGGY]  throw  new  JsScopeException( "JsScope  exception: "  +  name,  jsScope);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  JsScopeException( "JsScope  exception: "  +  name,  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  JsScopeException( "JsScope  exception: "  +  name,  jsScope);	  throw    new    JsScopeException(   "JsScope    exception:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
226	[BUG]  [BUGGY]  throw  new  JsScopeException( "JsScope  exception: "  +  jsScope);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  JsScopeException( "JsScope  exception: "  +  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  JsScopeException( "JsScope  exception: "  +  jsScope);	  throw    new    JsScopeException(   "JsScope    exception:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
227	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError(name,   "Unexpected  scope: "  +  var.getType());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError(name,   "Unexpected  scope: "  +  var.getType());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError(name,   "Unexpected  scope: "  +  var.getType());	  Throwables.throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getType());    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
228	[BUG]  [BUGGY]  DefinitionDef  def  =  jsScope.getDefinitionDef(rValue);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  DefinitionDef  def  =  jsScope.getDefinitionDef(rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	DefinitionDef  def  =  jsScope.getDefinitionDef(rValue);	  DefinitionDef    def    =    jsScope.getDefinitionDef(name);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
229	[BUG]  [BUGGY]  DefinitionDef  def  =  jsScope.getDefinitionDef(var);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  DefinitionDef  def  =  jsScope.getDefinitionDef(var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	DefinitionDef  def  =  jsScope.getDefinitionDef(var);	  DefinitionDef    def    =    jsScope.getDefinitionDef(name);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
230	[BUG]  [BUGGY]  DefinitionDef  def  =  jsScope.getDefinitionDef(var.name);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  DefinitionDef  def  =  jsScope.getDefinitionDef(var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	DefinitionDef  def  =  jsScope.getDefinitionDef(var.name);	  DefinitionDef    def    =    jsScope.getDefinitionDef(name);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
231	[BUG]  [BUGGY]  DefinitionDef  def  =  jsScope.getDefinitionDef(name,  var.scope);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  DefinitionDef  def  =  jsScope.getDefinitionDef(name,  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	DefinitionDef  def  =  jsScope.getDefinitionDef(name,  var.scope);	  DefinitionDef    def    =    jsScope.getDefinitionDef(name);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
232	[BUG]  [BUGGY]  DefinitionDef  def  =  jsScope.getDefinitionDef(var,  name);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  DefinitionDef  def  =  jsScope.getDefinitionDef(var,  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	DefinitionDef  def  =  jsScope.getDefinitionDef(var,  name);	  DefinitionDef    def    =    jsScope.getDefinitionDef(name);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
233	[BUG]  [BUGGY]  DefinitionDef  def  =  var.getDefinitionDef(name);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  DefinitionDef  def  =  var.getDefinitionDef(name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	DefinitionDef  def  =  var.getDefinitionDef(name);	  DefinitionDef    def    =    jsScope.getDefinitionDef(name);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
234	[BUG]  [BUGGY]  DefinitionDef  def  =  rValue.getDefinitionDef(jsScope);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  DefinitionDef  def  =  rValue.getDefinitionDef(jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	DefinitionDef  def  =  rValue.getDefinitionDef(jsScope);	  DefinitionDef    def    =    jsScope.getDefinitionDef(name);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
235	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(var.getName()));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(var.getName()));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(var.getName()));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
236	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(rValue));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(rValue));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(rValue));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
237	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(var));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(var));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(var));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
238	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(var.scope));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(var.scope));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(var.scope));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
239	[BUG]  [BUGGY]  return  new  AssertionFailedError( "Unknown  var: "  +  var.name);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  return  new  AssertionFailedError( "Unknown  var: "  +  var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	return  new  AssertionFailedError( "Unknown  var: "  +  var.name);	  return    new    AssertionFailedError(   "Unknown    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
240	[BUG]  [BUGGY]  return  new  AssertionFailedError(name,   "Unknown  var: "  +  var);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  return  new  AssertionFailedError(name,   "Unknown  var: "  +  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	return  new  AssertionFailedError(name,   "Unknown  var: "  +  var);	  return    new    AssertionFailedError(   "Unknown    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
241	[BUG]  [BUGGY]  return  new  AssertionFailedError( "Unknown  var: "  +  name,  rValue);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  return  new  AssertionFailedError( "Unknown  var: "  +  name,  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	return  new  AssertionFailedError( "Unknown  var: "  +  name,  rValue);	  return    new    AssertionFailedError(   "Unknown    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
242	[BUG]  [BUGGY]  return  new  AssertionFailedError( "Unknown  var: "  +  name,  var.name);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  return  new  AssertionFailedError( "Unknown  var: "  +  name,  var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	return  new  AssertionFailedError( "Unknown  var: "  +  name,  var.name);	  return    new    AssertionFailedError(   "Unknown    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
243	[BUG]  [BUGGY]  return  new  AssertionFailedError( "Unknown  var: "  +  name,  var);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  return  new  AssertionFailedError( "Unknown  var: "  +  name,  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	return  new  AssertionFailedError( "Unknown  var: "  +  name,  var);	  return    new    AssertionFailedError(   "Unknown    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
244	[BUG]  [BUGGY]  Definition  rValue  =  jsScope.getVar(name,  var.scope);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  rValue  =  jsScope.getVar(name,  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  rValue  =  jsScope.getVar(name,  var.scope);	  Definition    rValue    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
245	[BUG]  [BUGGY]  Definition  rValue  =  jsScope.getVar(name,  var.type);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  rValue  =  jsScope.getVar(name,  var.type);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  rValue  =  jsScope.getVar(name,  var.type);	  Definition    rValue    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
246	[BUG]  [BUGGY]  Definition  rValue  =  jsScope.getVar(name,  var.node);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  rValue  =  jsScope.getVar(name,  var.node);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  rValue  =  jsScope.getVar(name,  var.node);	  Definition    rValue    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
247	[BUG]  [BUGGY]  Definition  rValue  =  jsScope.getVar(name,  def);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  rValue  =  jsScope.getVar(name,  def);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  rValue  =  jsScope.getVar(name,  def);	  Definition    rValue    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
248	[BUG]  [BUGGY]  Definition  rValue  =  jsScope.getVar(name,  var);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  rValue  =  jsScope.getVar(name,  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  rValue  =  jsScope.getVar(name,  var);	  Definition    rValue    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
249	[BUG]  [BUGGY]  Definition  rValue  =  jsScope.getVar(name  +  1);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  rValue  =  jsScope.getVar(name  +  1);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  rValue  =  jsScope.getVar(name  +  1);	  Definition    rValue    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
250	[BUG]  [BUGGY]  new  AssertionFailedError( "Unknown  scope: "  +  var.name);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError( "Unknown  scope: "  +  var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError( "Unknown  scope: "  +  var.name);	  new    AssertionFailedError(   "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
251	[BUG]  [BUGGY]  new  AssertionFailedError(name,   "Unknown  scope: "  +  var.scope);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError(name,   "Unknown  scope: "  +  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError(name,   "Unknown  scope: "  +  var.scope);	  new    AssertionFailedError(   "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
252	[BUG]  [BUGGY]  new  AssertionFailedError( "Unknown  scope: "  +  var.scope,  name);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError( "Unknown  scope: "  +  var.scope,  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError( "Unknown  scope: "  +  var.scope,  name);	  new    AssertionFailedError(   "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
253	[BUG]  [BUGGY]  new  AssertionFailedError( "Unknown  scope: "  +  name);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError( "Unknown  scope: "  +  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError( "Unknown  scope: "  +  name);	  new    AssertionFailedError(   "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
254	[BUG]  [BUGGY]  AssertionFailedError(name,   "Unknown  scope: "  +  var.getName(),  rValue);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,   "Unknown  scope: "  +  var.getName(),  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,   "Unknown  scope: "  +  var.getName(),  rValue);	  AssertionFailedError(name,       "Unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
255	[BUG]  [BUGGY]  AssertionFailedError(name,  jsScope, "Unknown  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,  jsScope, "Unknown  scope: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,  jsScope, "Unknown  scope: "  +  var.getName());	  AssertionFailedError(name,       "Unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
256	[BUG]  [BUGGY]  AssertionFailedError(name,  var.name,  var.getName());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,  var.name,  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,  var.name,  var.getName());	  AssertionFailedError(name,       "Unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
257	[BUG]  [BUGGY]  AssertionFailedError(name,  jsScope.getName(),  var.getName());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,  jsScope.getName(),  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,  jsScope.getName(),  var.getName());	  AssertionFailedError(name,       "Unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
258	[BUG]  [BUGGY]  AssertionFailedError(name,  var.name,   "Unknown  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,  var.name,   "Unknown  scope: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,  var.name,   "Unknown  scope: "  +  var.getName());	  AssertionFailedError(name,       "Unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
259	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + ",  unknown  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name  + ",  unknown  scope: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + ",  unknown  scope: "  +  var.getName());	  throw    new    AssertionFailedError(name    +   "    unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
260	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError(name  + "  unknown  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError(name  + "  unknown  scope: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError(name  + "  unknown  scope: "  +  var.getName());	  throw    new    AssertionFailedError(name    +   "    unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
261	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + "  unknown  scope: "  +  var.getName(),  rValue);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name  + "  unknown  scope: "  +  var.getName(),  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + "  unknown  scope: "  +  var.getName(),  rValue);	  throw    new    AssertionFailedError(name    +   "    unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
262	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + "  unknown  scope: "  +  var.toString());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name  + "  unknown  scope: "  +  var.toString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + "  unknown  scope: "  +  var.toString());	  throw    new    AssertionFailedError(name    +   "    unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
263	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + "  cannot  access  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name  + "  cannot  access  scope: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + "  cannot  access  scope: "  +  var.getName());	  throw    new    AssertionFailedError(name    +   "    unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
264	[BUG]  [BUGGY]  return  new  AssertionFailedError(name,   "Unexpected  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  return  new  AssertionFailedError(name,   "Unexpected  scope: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	return  new  AssertionFailedError(name,   "Unexpected  scope: "  +  var.getName());	  return    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
265	[BUG]  [BUGGY]  return  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName(),  name);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  return  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName(),  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	return  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName(),  name);	  return    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
266	[BUG]  [BUGGY]  return  new  AssertionFailedError(name,  var.getName());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  return  new  AssertionFailedError(name,  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	return  new  AssertionFailedError(name,  var.getName());	  return    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
267	[BUG]  [BUGGY]  return  new  AssertionFailedError( "Unexpected  var: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  return  new  AssertionFailedError( "Unexpected  var: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	return  new  AssertionFailedError( "Unexpected  var: "  +  var.getName());	  return    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
268	[BUG]  [BUGGY]  new  AssertionFailedError( "Missing  var: "  +  var.name,  name);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError( "Missing  var: "  +  var.name,  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError( "Missing  var: "  +  var.name,  name);	  new    AssertionFailedError(   "Missing    var:   "    +    var.name);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
269	[BUG]  [BUGGY]  new  AssertionFailedError(name,   "Missing  var: "  +  var.name);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError(name,   "Missing  var: "  +  var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError(name,   "Missing  var: "  +  var.name);	  new    AssertionFailedError(   "Missing    var:   "    +    var.name);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
270	[BUG]  [BUGGY]  new  AssertionFailedError( "Missing  var: "  +  name);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError( "Missing  var: "  +  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError( "Missing  var: "  +  name);	  new    AssertionFailedError(   "Missing    var:   "    +    var.name);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
271	[BUG]  [BUGGY]  new  AssertionFailedError(name  + "  var: "  +  var.name);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError(name  + "  var: "  +  var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError(name  + "  var: "  +  var.name);	  new    AssertionFailedError(   "Missing    var:   "    +    var.name);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
272	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  rValue,  this);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  rValue,  this);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  node,  rValue,  this);	  NodeTraversal.traverse(compiler,    rValue,    this);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
273	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  this,  def);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  this,  def);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  this,  def);	  NodeTraversal.traverse(compiler,    rValue,    this);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
274	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  node,  this);	  NodeTraversal.traverse(compiler,    rValue,    this);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
275	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  this);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  this);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  var,  this);	  NodeTraversal.traverse(compiler,    rValue,    this);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
276	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  this,  name);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  this,  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  this,  name);	  NodeTraversal.traverse(compiler,    rValue,    this);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
277	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  rValue,  this);  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  rValue,  this);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  jsScope,  rValue,  this);	  NodeTraversal.traverse(compiler,    rValue,    this);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
278	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getLocalName());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getLocalName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getLocalName());	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getLocalName());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
279	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  var: "  +  var.getLocalName());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unexpected  var: "  +  var.getLocalName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unexpected  var: "  +  var.getLocalName());	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getLocalName());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
280	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Unexpected  scope: "  +  var.getLocalName());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  IllegalArgumentException( "Unexpected  scope: "  +  var.getLocalName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  IllegalArgumentException( "Unexpected  scope: "  +  var.getLocalName());	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getLocalName());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
281	[BUG]  [BUGGY]  Throwables.warning( "Unexpected  scope: "  +  var.getLocalName());  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.warning( "Unexpected  scope: "  +  var.getLocalName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.warning( "Unexpected  scope: "  +  var.getLocalName());	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getLocalName());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
282	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError(name  + "Unknown  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError(name  + "Unknown  scope: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError(name  + "Unknown  scope: "  +  var.getName());	  throw    new    AssertionFailedError(name    +   "Unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
283	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + "  cannot  be  null. "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name  + "  cannot  be  null. "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + "  cannot  be  null. "  +  var.getName());	  throw    new    AssertionFailedError(name    +   "Unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
284	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  rValue,  def);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  rValue,  def);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  node,  rValue,  def);	  NodeTraversal.traverse(compiler,    rValue,    var,    def);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
285	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  var,  def);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  var,  def);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  node,  var,  def);	  NodeTraversal.traverse(compiler,    rValue,    var,    def);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
286	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  var,  name);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  var,  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  var,  name);	  NodeTraversal.traverse(compiler,    rValue,    var,    def);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
287	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  rValue,  var,  def);  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  rValue,  var,  def);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  node,  rValue,  var,  def);	  NodeTraversal.traverse(compiler,    rValue,    var,    def);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
288	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  var,  definition);  [CE]  illegal  start  of  expression  [FE]                                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  var,  definition);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  var,  definition);	  NodeTraversal.traverse(compiler,    rValue,    var,    def);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
289	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  var,  def,  name);  [CE]  illegal  start  of  expression  [FE]                                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  var,  def,  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  var,  def,  name);	  NodeTraversal.traverse(compiler,    rValue,    var,    def);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
290	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  var,  name,  def);  [CE]  illegal  start  of  expression  [FE]                                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  var,  name,  def);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  var,  name,  def);	  NodeTraversal.traverse(compiler,    rValue,    var,    def);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
291	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.toString());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.toString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.toString());	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.toString());    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
292	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  name.toString());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  name.toString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unexpected  scope: "  +  name.toString());	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.toString());    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
293	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  name,  var.toString());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  name,  var.toString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unexpected  scope: "  +  name,  var.toString());	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.toString());    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
294	[BUG]  [BUGGY]  AssertionFailedError(name,   "Unexpected  scope: "  +  var.toString());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,   "Unexpected  scope: "  +  var.toString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,   "Unexpected  scope: "  +  var.toString());	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.toString());    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
295	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unknown  var: "  +  var.name);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unknown  var: "  +  var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Unknown  var: "  +  var.name);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    var.name);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
296	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  var.name,  name);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  var.name,  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  var: "  +  var.name,  name);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    var.name);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
297	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Unknown  var: "  +  var.name);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  IllegalArgumentException( "Unknown  var: "  +  var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  IllegalArgumentException( "Unknown  var: "  +  var.name);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    var.name);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
298	[BUG]  [BUGGY]  Throwables.warning( "Unknown  var: "  +  var.name);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.warning( "Unknown  var: "  +  var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.warning( "Unknown  var: "  +  var.name);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    var.name);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
299	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Unknown  var: "  +  var.name);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  IllegalStateException( "Unknown  var: "  +  var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  IllegalStateException( "Unknown  var: "  +  var.name);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    var.name);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
300	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name,    var);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
301	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.getName());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.getName());	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name,    var);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
302	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.toString());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.toString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.toString());	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name,    var);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
303	[BUG]  [BUGGY]  Definition  def  =  jsScope.getDefinitionsInExpression(name);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  jsScope.getDefinitionsInExpression(name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  jsScope.getDefinitionsInExpression(name);	  Definition    def    =    jsScope.getDefinitionsInExpression(rValue);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
304	[BUG]  [BUGGY]  Definition  def  =  rValue.getDefinitionsInExpression(jsScope);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  rValue.getDefinitionsInExpression(jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  rValue.getDefinitionsInExpression(jsScope);	  Definition    def    =    jsScope.getDefinitionsInExpression(rValue);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
305	[BUG]  [BUGGY]  Definition  def  =  jsScope.getDefinitionsInExpression(var);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  jsScope.getDefinitionsInExpression(var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  jsScope.getDefinitionsInExpression(var);	  Definition    def    =    jsScope.getDefinitionsInExpression(rValue);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
306	[BUG]  [BUGGY]  Definition  def  =  var.getDefinitionsInExpression(rValue);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  var.getDefinitionsInExpression(rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  var.getDefinitionsInExpression(rValue);	  Definition    def    =    jsScope.getDefinitionsInExpression(rValue);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
307	[BUG]  [BUGGY]  Definition  def  =  jsScope.getDefinitionsInExpression(var,  rValue);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  jsScope.getDefinitionsInExpression(var,  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  jsScope.getDefinitionsInExpression(var,  rValue);	  Definition    def    =    jsScope.getDefinitionsInExpression(rValue);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
308	[BUG]  [BUGGY]  Definition  def  =  jsScope.getDefinitionsInExpression(rValue,  name);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  jsScope.getDefinitionsInExpression(rValue,  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  jsScope.getDefinitionsInExpression(rValue,  name);	  Definition    def    =    jsScope.getDefinitionsInExpression(rValue);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
309	[BUG]  [BUGGY]  Definition  def  =  jsScope.getDefinitionsInExpression(varValue);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  jsScope.getDefinitionsInExpression(varValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  jsScope.getDefinitionsInExpression(varValue);	  Definition    def    =    jsScope.getDefinitionsInExpression(rValue);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
310	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  UnsupportedOperationException( " "));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  UnsupportedOperationException( " "));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  node,  new  UnsupportedOperationException( " "));	  NodeTraversal.traverse(compiler,    rValue,    new    UnsupportedOperationException(   "   "));    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
311	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  UnsupportedOperationException(name));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  UnsupportedOperationException(name));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  new  UnsupportedOperationException(name));	  NodeTraversal.traverse(compiler,    rValue,    new    UnsupportedOperationException(   "   "));    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
312	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  UnsupportedOperationException( " "));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  UnsupportedOperationException( " "));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  var,  new  UnsupportedOperationException( " "));	  NodeTraversal.traverse(compiler,    rValue,    new    UnsupportedOperationException(   "   "));    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
313	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  def,  new  UnsupportedOperationException( " "));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  def,  new  UnsupportedOperationException( " "));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  def,  new  UnsupportedOperationException( " "));	  NodeTraversal.traverse(compiler,    rValue,    new    UnsupportedOperationException(   "   "));    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
314	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  name,  new  UnsupportedOperationException( " "));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  name,  new  UnsupportedOperationException( " "));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  name,  new  UnsupportedOperationException( " "));	  NodeTraversal.traverse(compiler,    rValue,    new    UnsupportedOperationException(   "   "));    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
315	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  this,  new  UnsupportedOperationException( " "));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  this,  new  UnsupportedOperationException( " "));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  this,  new  UnsupportedOperationException( " "));	  NodeTraversal.traverse(compiler,    rValue,    new    UnsupportedOperationException(   "   "));    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
316	[BUG]  [BUGGY]  Throwables.throw  new  JsScopeException( " ",  rValue);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  JsScopeException( " ",  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  JsScopeException( " ",  rValue);	  Throwables.throw    new    JsScopeException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
317	[BUG]  [BUGGY]  Throwables.throw  new  JsScopeException( " "  +  name);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  JsScopeException( " "  +  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  JsScopeException( " "  +  name);	  Throwables.throw    new    JsScopeException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
318	[BUG]  [BUGGY]  Throwables.throw  new  JsScopeException( ", ");  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  JsScopeException( ", ");  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  JsScopeException( ", ");	  Throwables.throw    new    JsScopeException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
319	[BUG]  [BUGGY]  Throwables.throw  new  JsScopeException( "Unknown  scope: "  +  rValue);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  JsScopeException( "Unknown  scope: "  +  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  JsScopeException( "Unknown  scope: "  +  rValue);	  Throwables.throw    new    JsScopeException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
320	[BUG]  [BUGGY]  Throwables.throw  new  JsScopeException( " ",  rValue,  var.scope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  JsScopeException( " ",  rValue,  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  JsScopeException( " ",  rValue,  var.scope);	  Throwables.throw    new    JsScopeException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
321	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  JsScope());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  JsScope());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  node,  new  JsScope());	  NodeTraversal.traverse(compiler,    rValue,    new    JsScope());    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
322	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  def,  new  JsScope());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  def,  new  JsScope());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  def,  new  JsScope());	  NodeTraversal.traverse(compiler,    rValue,    new    JsScope());    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
323	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  JsScope());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  JsScope());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  var,  new  JsScope());	  NodeTraversal.traverse(compiler,    rValue,    new    JsScope());    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
324	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  JsScope(),  def);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  JsScope(),  def);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  new  JsScope(),  def);	  NodeTraversal.traverse(compiler,    rValue,    new    JsScope());    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
325	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  jsScope);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  jsScope);	  NodeTraversal.traverse(compiler,    rValue,    new    JsScope());    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
326	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  var.scope,  new  JsScope());  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  var.scope,  new  JsScope());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  var.scope,  new  JsScope());	  NodeTraversal.traverse(compiler,    rValue,    new    JsScope());    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
327	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  target,  new  JsScope());  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  target,  new  JsScope());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  target,  new  JsScope());	  NodeTraversal.traverse(compiler,    rValue,    new    JsScope());    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
328	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  rValue,  def);  continue;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  rValue,  def);  continue;  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  node,  rValue,  def);  continue;	  NodeTraversal.traverse(compiler,    rValue,    def);    continue;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
329	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  var.scope);  continue;  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  var.scope);  continue;  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  var.scope);  continue;	  NodeTraversal.traverse(compiler,    rValue,    def);    continue;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
330	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  def);  continue;  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  def);  continue;  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  var,  def);  continue;	  NodeTraversal.traverse(compiler,    rValue,    def);    continue;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
331	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  def);  continue;  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  def);  continue;  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  node,  def);  continue;	  NodeTraversal.traverse(compiler,    rValue,    def);    continue;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
332	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  def,  escaped);  continue;  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  def,  escaped);  continue;  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  def,  escaped);  continue;	  NodeTraversal.traverse(compiler,    rValue,    def);    continue;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
333	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  def,  var.scope);  continue;  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  def,  var.scope);  continue;  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  def,  var.scope);  continue;	  NodeTraversal.traverse(compiler,    rValue,    def);    continue;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
334	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  def,  name);  continue;  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  def,  name);  continue;  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  def,  name);  continue;	  NodeTraversal.traverse(compiler,    rValue,    def);    continue;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
335	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  IllegalArgumentException( " "  +  var.getName());	  throw    new    IllegalArgumentException(   "   "    +    var.getString());    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
336	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  name  + "  var.getString());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  name  + "  var.getString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  IllegalArgumentException( " "  +  name  + "  var.getString());	  throw    new    IllegalArgumentException(   "   "    +    var.getString());    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
337	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  var.getLocalName());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  var.getLocalName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  IllegalArgumentException( " "  +  var.getLocalName());	  throw    new    IllegalArgumentException(   "   "    +    var.getString());    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
338	[BUG]  [BUGGY]  Throwables.weirdString( "   "  +  var.getString());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.weirdString( "   "  +  var.getString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.weirdString( "   "  +  var.getString());	  throw    new    IllegalArgumentException(   "   "    +    var.getString());    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
339	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  var.getQualifiedName());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  var.getQualifiedName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  IllegalArgumentException( " "  +  var.getQualifiedName());	  throw    new    IllegalArgumentException(   "   "    +    var.getString());    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
340	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  name.equals(var.getString()));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  name.equals(var.getString()));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalArgumentException( " "  +  name.equals(var.getString()));	  Throwables.throw    new    IllegalArgumentException(   "   ".equals(var.getString()));    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
341	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalArgumentException( " "  +  var.getName());	  Throwables.throw    new    IllegalArgumentException(   "   ".equals(var.getString()));    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
342	[BUG]  [BUGGY]  AssertionFailedError(name,   "Unknown  scope: "  +  var.name());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,   "Unknown  scope: "  +  var.name());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,   "Unknown  scope: "  +  var.name());	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.name());    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
343	[BUG]  [BUGGY]  Throwables.warning( "Unknown  scope: "  +  var.name());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.warning( "Unknown  scope: "  +  var.name());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.warning( "Unknown  scope: "  +  var.name());	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.name());    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
344	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Unknown  scope: "  +  var.name());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  IllegalStateException( "Unknown  scope: "  +  var.name());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  IllegalStateException( "Unknown  scope: "  +  var.name());	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.name());    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
345	[BUG]  [BUGGY]  return  new  AssertionFailedError(name,   "Unknown  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  return  new  AssertionFailedError(name,   "Unknown  scope: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	return  new  AssertionFailedError(name,   "Unknown  scope: "  +  var.getName());	  return    new    AssertionFailedError(   "Unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
346	[BUG]  [BUGGY]  return  new  AssertionFailedError( "Unknown  scope: "  +  var.getName(),  name);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  return  new  AssertionFailedError( "Unknown  scope: "  +  var.getName(),  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	return  new  AssertionFailedError( "Unknown  scope: "  +  var.getName(),  name);	  return    new    AssertionFailedError(   "Unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
347	[BUG]  [BUGGY]  return  new  AssertionFailedError(name  + "  unknown  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  return  new  AssertionFailedError(name  + "  unknown  scope: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	return  new  AssertionFailedError(name  + "  unknown  scope: "  +  var.getName());	  return    new    AssertionFailedError(   "Unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
348	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Missing  var: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Missing  var: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Missing  var: "  +  var.getName());	  throw    new    AssertionFailedError(   "Missing    var:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
349	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  var.name());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  var.name());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Missing  var: "  +  var.name());	  throw    new    AssertionFailedError(   "Missing    var:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
350	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  var.toString());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  var.toString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Missing  var: "  +  var.toString());	  throw    new    AssertionFailedError(   "Missing    var:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
351	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  var.getLocalName());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  var.getLocalName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Missing  var: "  +  var.getLocalName());	  throw    new    AssertionFailedError(   "Missing    var:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
352	[BUG]  [BUGGY]  Throwables.warning( "Missing  var: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.warning( "Missing  var: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.warning( "Missing  var: "  +  var.getName());	  throw    new    AssertionFailedError(   "Missing    var:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
353	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  var,  this);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  var,  this);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  node,  var,  this);	  NodeTraversal.traverse(compiler,    rValue,    var,    this);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
354	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  rValue,  var,  this);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  rValue,  var,  this);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  node,  rValue,  var,  this);	  NodeTraversal.traverse(compiler,    rValue,    var,    this);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
355	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  var,  this,  def);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  var,  this,  def);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  var,  this,  def);	  NodeTraversal.traverse(compiler,    rValue,    var,    this);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
356	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  var,  this,  name);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  var,  this,  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  var,  this,  name);	  NodeTraversal.traverse(compiler,    rValue,    var,    this);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
357	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  def,  this);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  def,  this);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  def,  this);	  NodeTraversal.traverse(compiler,    rValue,    var,    this);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
358	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  name,  rValue);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  name,  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unexpected  scope: "  +  name,  rValue);	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
359	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.name);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.name);	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
360	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unexpected  scope: "  +  name);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unexpected  scope: "  +  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Unexpected  scope: "  +  name);	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
361	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  name,  jsScope);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  name,  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unexpected  scope: "  +  name,  jsScope);	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
362	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.scope);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.scope);	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
363	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  rValue,  var);  continue;  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  rValue,  var);  continue;  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  node,  rValue,  var);  continue;	  NodeTraversal.traverse(compiler,    rValue,    var);    continue;    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
364	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  rValue);  continue;  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  rValue);  continue;  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  var,  rValue);  continue;	  NodeTraversal.traverse(compiler,    rValue,    var);    continue;    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
365	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  var,  def);  continue;  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  var,  def);  continue;  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  var,  def);  continue;	  NodeTraversal.traverse(compiler,    rValue,    var);    continue;    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
366	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  var,  rValue);  continue;  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  var,  rValue);  continue;  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  node,  var,  rValue);  continue;	  NodeTraversal.traverse(compiler,    rValue,    var);    continue;    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
367	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  var);  continue;  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  var);  continue;  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  node,  var);  continue;	  NodeTraversal.traverse(compiler,    rValue,    var);    continue;    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
368	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  rValue);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  var,  rValue);	  NodeTraversal.traverse(compiler,    rValue,    var);    continue;    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
369	[BUG]  [BUGGY]  AssertionFailedError(name,   "Unexpected  scope: "  +  var.getName(),  rValue);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,   "Unexpected  scope: "  +  var.getName(),  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,   "Unexpected  scope: "  +  var.getName(),  rValue);	  AssertionFailedError(name,       "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
370	[BUG]  [BUGGY]  AssertionFailedError(name,  jsScope, "Unexpected  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,  jsScope, "Unexpected  scope: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,  jsScope, "Unexpected  scope: "  +  var.getName());	  AssertionFailedError(name,       "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
371	[BUG]  [BUGGY]  AssertionFailedError(name,  jsScope.getName(),   "Unexpected  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,  jsScope.getName(),   "Unexpected  scope: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,  jsScope.getName(),   "Unexpected  scope: "  +  var.getName());	  AssertionFailedError(name,       "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
372	[BUG]  [BUGGY]  AssertionFailedError(name,  var.name,   "Unexpected  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,  var.name,   "Unexpected  scope: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,  var.name,   "Unexpected  scope: "  +  var.getName());	  AssertionFailedError(name,       "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
373	[BUG]  [BUGGY]  Throwables.throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.getName());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.getName());	  throw    new    JsScopeException(   "Unknown    scope:   "    +    jsScope.getName());    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
374	[BUG]  [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.getName(),  name);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.getName(),  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.getName(),  name);	  throw    new    JsScopeException(   "Unknown    scope:   "    +    jsScope.getName());    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
375	[BUG]  [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.name());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.name());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.name());	  throw    new    JsScopeException(   "Unknown    scope:   "    +    jsScope.getName());    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
376	[BUG]  [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  rValue,  jsScope.getName());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  rValue,  jsScope.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  JsScopeException( "Unknown  scope: "  +  rValue,  jsScope.getName());	  throw    new    JsScopeException(   "Unknown    scope:   "    +    jsScope.getName());    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
377	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName(),  name);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName(),  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName(),  name);	  Throwables.throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
378	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unexpected  var: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unexpected  var: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Unexpected  var: "  +  var.getName());	  Throwables.throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
379	[BUG]  [BUGGY]  String  name  =  jsScope.getVar(rValue);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  String  name  =  jsScope.getVar(rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	String  name  =  jsScope.getVar(rValue);	  String    name    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
380	[BUG]  [BUGGY]  String  name  =  jsScope.getVar(name,  var.scope);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  String  name  =  jsScope.getVar(name,  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	String  name  =  jsScope.getVar(name,  var.scope);	  String    name    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
381	[BUG]  [BUGGY]  String  name  =  jsScope.getNameNode(rValue);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  String  name  =  jsScope.getNameNode(rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	String  name  =  jsScope.getNameNode(rValue);	  String    name    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
382	[BUG]  [BUGGY]  String  name  =  var.getVar(name);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  String  name  =  var.getVar(name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	String  name  =  var.getVar(name);	  String    name    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
383	[BUG]  [BUGGY]  String  name  =  jsScope.getVar(var.name);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  String  name  =  jsScope.getVar(var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	String  name  =  jsScope.getVar(var.name);	  String    name    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
384	[BUG]  [BUGGY]  String  name  =  jsScope.getNamespaceURI(rValue);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  String  name  =  jsScope.getNamespaceURI(rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	String  name  =  jsScope.getNamespaceURI(rValue);	  String    name    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
385	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Missing  var: "  +  name,  var);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Missing  var: "  +  name,  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Missing  var: "  +  name,  var);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name,    var);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
386	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  var,  rValue);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  var,  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Missing  var: "  +  name,  var,  rValue);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name,    var);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
387	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Unknown  scope: "  +  var.name);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  IllegalStateException( "Unknown  scope: "  +  var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  IllegalStateException( "Unknown  scope: "  +  var.name);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.name);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
388	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Unknown  scope: "  +  var.name);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  IllegalArgumentException( "Unknown  scope: "  +  var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  IllegalArgumentException( "Unknown  scope: "  +  var.name);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.name);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
389	[BUG]  [BUGGY]  new  AssertionFailedError( "Unknown  var: "  +  name,  var.scope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError( "Unknown  var: "  +  name,  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError( "Unknown  var: "  +  name,  var.scope);	  new    AssertionFailedError(   "Unknown    var:   "    +    name,    rValue);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
390	[BUG]  [BUGGY]  new  AssertionFailedError(name,   "Unknown  var: "  +  var,  rValue);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError(name,   "Unknown  var: "  +  var,  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError(name,   "Unknown  var: "  +  var,  rValue);	  new    AssertionFailedError(   "Unknown    var:   "    +    name,    rValue);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
391	[BUG]  [BUGGY]  new  AssertionFailedError( "Unknown  var: "  +  name,  var);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError( "Unknown  var: "  +  name,  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError( "Unknown  var: "  +  name,  var);	  new    AssertionFailedError(   "Unknown    var:   "    +    name,    rValue);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
392	[BUG]  [BUGGY]  new  AssertionFailedError( "Unknown  var: "  +  name,  var.node,  rValue);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError( "Unknown  var: "  +  name,  var.node,  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError( "Unknown  var: "  +  name,  var.node,  rValue);	  new    AssertionFailedError(   "Unknown    var:   "    +    name,    rValue);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
393	[BUG]  [BUGGY]  new  AssertionFailedError( "Unknown  var: "  +  name,  var.toString());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError( "Unknown  var: "  +  name,  var.toString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError( "Unknown  var: "  +  name,  var.toString());	  new    AssertionFailedError(   "Unknown    var:   "    +    name,    rValue);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
394	[BUG]  [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  name.toString());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  name.toString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  JsScopeException( "Unknown  scope: "  +  name.toString());	  throw    new    JsScopeException(   "Unknown    scope:   "    +    rValue.toString());    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
395	[BUG]  [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  var.toString());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  var.toString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  JsScopeException( "Unknown  scope: "  +  var.toString());	  throw    new    JsScopeException(   "Unknown    scope:   "    +    rValue.toString());    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
396	[BUG]  [BUGGY]  Throwables.throw  new  JsScopeException( "Unknown  scope: "  +  rValue.toString());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  JsScopeException( "Unknown  scope: "  +  rValue.toString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  JsScopeException( "Unknown  scope: "  +  rValue.toString());	  throw    new    JsScopeException(   "Unknown    scope:   "    +    rValue.toString());    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
397	[BUG]  [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  name,  rValue.toString());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  name,  rValue.toString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  JsScopeException( "Unknown  scope: "  +  name,  rValue.toString());	  throw    new    JsScopeException(   "Unknown    scope:   "    +    rValue.toString());    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
398	[BUG]  [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.toString());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.toString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.toString());	  throw    new    JsScopeException(   "Unknown    scope:   "    +    rValue.toString());    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
399	[BUG]  [BUGGY]  Throwables.weirdString( "Unknown  scope: "  +  rValue.toString());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.weirdString( "Unknown  scope: "  +  rValue.toString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.weirdString( "Unknown  scope: "  +  rValue.toString());	  throw    new    JsScopeException(   "Unknown    scope:   "    +    rValue.toString());    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
400	[BUG]  [BUGGY]  AssertionFailedError(name,  jsScope, "Unknown  scope: "  +  var.scope);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,  jsScope, "Unknown  scope: "  +  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,  jsScope, "Unknown  scope: "  +  var.scope);	  AssertionFailedError(name,       "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
401	[BUG]  [BUGGY]  AssertionFailedError(name,  var.name,   "Unknown  scope: "  +  var.scope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,  var.name,   "Unknown  scope: "  +  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,  var.name,   "Unknown  scope: "  +  var.scope);	  AssertionFailedError(name,       "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
402	[BUG]  [BUGGY]  AssertionFailedError(name,  var.name,  var.scope);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,  var.name,  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,  var.name,  var.scope);	  AssertionFailedError(name,       "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
403	[BUG]  [BUGGY]  AssertionFailedError(name,  var.scope, "Unknown  scope: "  +  var.scope);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,  var.scope, "Unknown  scope: "  +  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,  var.scope, "Unknown  scope: "  +  var.scope);	  AssertionFailedError(name,       "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
404	[BUG]  [BUGGY]  AssertionFailedError(name,  jsScope.getName(),  var.scope);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,  jsScope.getName(),  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,  jsScope.getName(),  var.scope);	  AssertionFailedError(name,       "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
405	[BUG]  [BUGGY]  AssertionFailedError(name,  node,   "Unknown  scope: "  +  var.scope);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,  node,   "Unknown  scope: "  +  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,  node,   "Unknown  scope: "  +  var.scope);	  AssertionFailedError(name,       "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
406	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.name,  rValue);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.name,  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.name,  rValue);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name,    var.name);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
407	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.name);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.name);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name,    var.name);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
408	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.name,  def);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.name,  def);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.name,  def);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name,    var.name);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
409	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  jsScope,  var.name);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  jsScope,  var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Missing  var: "  +  name,  jsScope,  var.name);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name,    var.name);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
410	[BUG]  [BUGGY]  Throwables.warning( "Missing  var: "  +  name,  var.name);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.warning( "Missing  var: "  +  name,  var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.warning( "Missing  var: "  +  name,  var.name);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name,    var.name);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
411	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.name,  jsScope);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.name,  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.name,  jsScope);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name,    var.name);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
412	[BUG]  [BUGGY]  AssertionFailedError(name,  jsScope, "Unknown  var: "  +  var);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,  jsScope, "Unknown  var: "  +  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,  jsScope, "Unknown  var: "  +  var);	  AssertionFailedError(name,       "Unknown    var:   "    +    var);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
413	[BUG]  [BUGGY]  AssertionFailedError(name,  rValue, "Unknown  var: "  +  var);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,  rValue, "Unknown  var: "  +  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,  rValue, "Unknown  var: "  +  var);	  AssertionFailedError(name,       "Unknown    var:   "    +    var);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
414	[BUG]  [BUGGY]  AssertionFailedError(name,   "Unknown  var: "  +  var.name);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,   "Unknown  var: "  +  var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,   "Unknown  var: "  +  var.name);	  AssertionFailedError(name,       "Unknown    var:   "    +    var);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
415	[BUG]  [BUGGY]  AssertionFailedError(name,   "Unknown  var: "  +  var.toString());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,   "Unknown  var: "  +  var.toString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,   "Unknown  var: "  +  var.toString());	  AssertionFailedError(name,       "Unknown    var:   "    +    var);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
416	[BUG]  [BUGGY]  AssertionFailedError(name,  node,   "Unknown  var: "  +  var);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,  node,   "Unknown  var: "  +  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,  node,   "Unknown  var: "  +  var);	  AssertionFailedError(name,       "Unknown    var:   "    +    var);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
417	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  name  + "  var.getString());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  name  + "  var.getString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalArgumentException( " "  +  name  + "  var.getString());	  Throwables.throw    new    IllegalArgumentException(   "   "    +    var.getString());    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
418	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  var.getLocalName());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  var.getLocalName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalArgumentException( " "  +  var.getLocalName());	  Throwables.throw    new    IllegalArgumentException(   "   "    +    var.getString());    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
419	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  var.getQualifiedName());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  var.getQualifiedName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalArgumentException( " "  +  var.getQualifiedName());	  Throwables.throw    new    IllegalArgumentException(   "   "    +    var.getString());    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
420	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  name  + ",  var.getString());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  name  + ",  var.getString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalArgumentException( " "  +  name  + ",  var.getString());	  Throwables.throw    new    IllegalArgumentException(   "   "    +    var.getString());    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
421	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  name  + ".getString());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  name  + ".getString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalArgumentException( " "  +  name  + ".getString());	  Throwables.throw    new    IllegalArgumentException(   "   "    +    var.getString());    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
422	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.scope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.scope);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name,    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
423	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.scope,  rValue);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.scope,  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.scope,  rValue);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name,    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
424	[BUG]  [BUGGY]  Throwables.warning( "Missing  var: "  +  name,  var.scope);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.warning( "Missing  var: "  +  name,  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.warning( "Missing  var: "  +  name,  var.scope);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name,    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
425	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.jsScope);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.jsScope);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name,    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
426	[BUG]  [BUGGY]  Definition  def  =  jsScope.getDefinition(var.name);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  jsScope.getDefinition(var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  jsScope.getDefinition(var.name);	  Definition    def    =    jsScope.getDefinition(name);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
427	[BUG]  [BUGGY]  Definition  def  =  jsScope.getDefinition(name,  var.scope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  jsScope.getDefinition(name,  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  jsScope.getDefinition(name,  var.scope);	  Definition    def    =    jsScope.getDefinition(name);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
428	[BUG]  [BUGGY]  Definition  def  =  var.getDefinition(name);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  var.getDefinition(name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  var.getDefinition(name);	  Definition    def    =    jsScope.getDefinition(name);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
429	[BUG]  [BUGGY]  Definition  def  =  jsScope.getDefinition(name,  var);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  jsScope.getDefinition(name,  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  jsScope.getDefinition(name,  var);	  Definition    def    =    jsScope.getDefinition(name);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
430	[BUG]  [BUGGY]  Definition  def  =  rValue.getDefinition(jsScope);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  rValue.getDefinition(jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  rValue.getDefinition(jsScope);	  Definition    def    =    jsScope.getDefinition(name);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
431	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unknown  var: "  +  name,  jsScope);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unknown  var: "  +  name,  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Unknown  var: "  +  name,  jsScope);	  Throwables.throw    new    AssertionFailedError(   "Unknown    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
432	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Missing  var: "  +  var.name);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Missing  var: "  +  var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Missing  var: "  +  var.name);	  Throwables.throw    new    AssertionFailedError(   "Missing    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
433	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Missing  var:n "  +  name);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Missing  var:n "  +  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Missing  var:n "  +  name);	  Throwables.throw    new    AssertionFailedError(   "Missing    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
434	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  var.name,  name);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  var.name,  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Missing  var: "  +  var.name,  name);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    var.name);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
435	[BUG]  [BUGGY]  Throwables.warning( "Missing  var: "  +  var.name);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.warning( "Missing  var: "  +  var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.warning( "Missing  var: "  +  var.name);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    var.name);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
436	[BUG]  [BUGGY]  Throwables.weirdString( "Missing  var: "  +  var.name);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.weirdString( "Missing  var: "  +  var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.weirdString( "Missing  var: "  +  var.name);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    var.name);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
437	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  MockImpl());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  MockImpl());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  var,  new  MockImpl());	  NodeTraversal.traverse(compiler,    rValue,    new    MockImpl());    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
438	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  def,  new  MockImpl());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  def,  new  MockImpl());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  def,  new  MockImpl());	  NodeTraversal.traverse(compiler,    rValue,    new    MockImpl());    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
439	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  MockImpl());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  MockImpl());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  node,  new  MockImpl());	  NodeTraversal.traverse(compiler,    rValue,    new    MockImpl());    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
440	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  MockImpl(),  def);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  MockImpl(),  def);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  new  MockImpl(),  def);	  NodeTraversal.traverse(compiler,    rValue,    new    MockImpl());    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
441	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  target,  new  MockImpl());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  target,  new  MockImpl());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  target,  new  MockImpl());	  NodeTraversal.traverse(compiler,    rValue,    new    MockImpl());    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
442	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  MockImpl(name));  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  MockImpl(name));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  new  MockImpl(name));	  NodeTraversal.traverse(compiler,    rValue,    new    MockImpl());    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
443	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  def,  new  MockitoReachingDef());  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  def,  new  MockitoReachingDef());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  def,  new  MockitoReachingDef());	  NodeTraversal.traverse(compiler,    rValue,    new    MockitoReachingDef());    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
444	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  MockitoReachingDef());  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  MockitoReachingDef());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  node,  new  MockitoReachingDef());	  NodeTraversal.traverse(compiler,    rValue,    new    MockitoReachingDef());    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
445	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  MockitoReachingDef());  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  new  MockitoReachingDef());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  var,  new  MockitoReachingDef());	  NodeTraversal.traverse(compiler,    rValue,    new    MockitoReachingDef());    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
446	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  MockitoReachingDef(),  def);  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  MockitoReachingDef(),  def);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  new  MockitoReachingDef(),  def);	  NodeTraversal.traverse(compiler,    rValue,    new    MockitoReachingDef());    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
447	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  MockitoReachingDef(name));  [CE]  illegal  start  of  expression  [FE]                                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  MockitoReachingDef(name));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  new  MockitoReachingDef(name));	  NodeTraversal.traverse(compiler,    rValue,    new    MockitoReachingDef());    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
448	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  MockitoReachingDef(var.scope));  [CE]  illegal  start  of  expression  [FE]                                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  MockitoReachingDef(var.scope));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  new  MockitoReachingDef(var.scope));	  NodeTraversal.traverse(compiler,    rValue,    new    MockitoReachingDef());    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
449	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  var.getName(),  name,  rValue);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  var.getName(),  name,  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  scope: "  +  var.getName(),  name,  rValue);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.getName(),    name);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
450	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  var.getName(),  name,  jsScope);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  var.getName(),  name,  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  scope: "  +  var.getName(),  name,  jsScope);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.getName(),    name);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
451	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  name.getName(),  var);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  name.getName(),  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  scope: "  +  name.getName(),  var);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.getName(),    name);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
452	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  var.getName(),  name,  def);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  var.getName(),  name,  def);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  scope: "  +  var.getName(),  name,  def);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.getName(),    name);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
453	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  var.getName(),  name,  cfgNode);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  var.getName(),  name,  cfgNode);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  scope: "  +  var.getName(),  name,  cfgNode);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.getName(),    name);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
454	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  name.toString(),  var);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  name.toString(),  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  scope: "  +  name.toString(),  var);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.getName(),    name);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
455	[BUG]  [BUGGY]  escaped.add(rValue);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  escaped.add(rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	escaped.add(rValue);	  escaped.add(var);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
456	[BUG]  [BUGGY]  escaped.add(jsScope);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  escaped.add(jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	escaped.add(jsScope);	  escaped.add(var);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
457	[BUG]  [BUGGY]  escaped.add(rValue,  var);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  escaped.add(rValue,  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	escaped.add(rValue,  var);	  escaped.add(var);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
458	[BUG]  [BUGGY]  escaped.add(var,  name);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  escaped.add(var,  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	escaped.add(var,  name);	  escaped.add(var);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
459	[BUG]  [BUGGY]  escaped.add(var,  rValue);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  escaped.add(var,  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	escaped.add(var,  rValue);	  escaped.add(var);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
460	[BUG]  [BUGGY]  escaped.add(var,  def);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  escaped.add(var,  def);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	escaped.add(var,  def);	  escaped.add(var);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
461	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  name,  rValue);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  name,  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  scope: "  +  name,  rValue);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
462	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  name,  jsScope);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  name,  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  scope: "  +  name,  jsScope);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
463	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Unknown  scope: "  +  name);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  IllegalStateException( "Unknown  scope: "  +  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  IllegalStateException( "Unknown  scope: "  +  name);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
464	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Unknown  scope: "  +  name);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  IllegalArgumentException( "Unknown  scope: "  +  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  IllegalArgumentException( "Unknown  scope: "  +  name);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
465	[BUG]  [BUGGY]  Definition  def  =  jsScope.getDefinition(var);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  jsScope.getDefinition(var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  jsScope.getDefinition(var);	  Definition    def    =    jsScope.getDefinition(rValue);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
466	[BUG]  [BUGGY]  Definition  def  =  var.getDefinition(rValue);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  var.getDefinition(rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  var.getDefinition(rValue);	  Definition    def    =    jsScope.getDefinition(rValue);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
467	[BUG]  [BUGGY]  Definition  def  =  jsScope.getDefinition(name,  rValue);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  jsScope.getDefinition(name,  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  jsScope.getDefinition(name,  rValue);	  Definition    def    =    jsScope.getDefinition(rValue);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
468	[BUG]  [BUGGY]  Definition  def  =  jsScope.getDefinition(var,  rValue);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  jsScope.getDefinition(var,  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  jsScope.getDefinition(var,  rValue);	  Definition    def    =    jsScope.getDefinition(rValue);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
469	[BUG]  [BUGGY]  return  new  AssertionFailedError( "Unknown  scope: "  +  var.name);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  return  new  AssertionFailedError( "Unknown  scope: "  +  var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	return  new  AssertionFailedError( "Unknown  scope: "  +  var.name);	  return    new    AssertionFailedError(   "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
470	[BUG]  [BUGGY]  return  new  AssertionFailedError(name,   "Unknown  scope: "  +  var.scope);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  return  new  AssertionFailedError(name,   "Unknown  scope: "  +  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	return  new  AssertionFailedError(name,   "Unknown  scope: "  +  var.scope);	  return    new    AssertionFailedError(   "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
471	[BUG]  [BUGGY]  return  new  AssertionFailedError( "Unknown  scope: "  +  var.scope,  name);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  return  new  AssertionFailedError( "Unknown  scope: "  +  var.scope,  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	return  new  AssertionFailedError( "Unknown  scope: "  +  var.scope,  name);	  return    new    AssertionFailedError(   "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
472	[BUG]  [BUGGY]  return  new  AssertionFailedError(name  + "  unknown  scope: "  +  var.scope);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  return  new  AssertionFailedError(name  + "  unknown  scope: "  +  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	return  new  AssertionFailedError(name  + "  unknown  scope: "  +  var.scope);	  return    new    AssertionFailedError(   "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
473	[BUG]  [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  rValue,  name);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  rValue,  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  JsScopeException( "Unknown  scope: "  +  rValue,  name);	  throw    new    JsScopeException(   "Unknown    scope:   "    +    rValue);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
474	[BUG]  [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  var);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  JsScopeException( "Unknown  scope: "  +  var);	  throw    new    JsScopeException(   "Unknown    scope:   "    +    rValue);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
475	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName(),  name,  rValue);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName(),  name,  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName(),  name,  rValue);	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getName(),    name);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
476	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName(),  name,  jsScope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName(),  name,  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName(),  name,  jsScope);	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getName(),    name);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
477	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName(),  name,  def);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName(),  name,  def);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName(),  name,  def);	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getName(),    name);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
478	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName(),  name,  cfgNode);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName(),  name,  cfgNode);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName(),  name,  cfgNode);	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getName(),    name);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
479	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  name.getName(),  var);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  name.getName(),  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unexpected  scope: "  +  name.getName(),  var);	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getName(),    name);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
480	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  jsScope,  rValue);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  jsScope,  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  var: "  +  name,  jsScope,  rValue);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
481	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  jsScope,  def);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  jsScope,  def);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  var: "  +  name,  jsScope,  def);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
482	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  scope);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  var: "  +  name,  scope);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
483	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  jsScope.getVar(name));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  var: "  +  name,  jsScope.getVar(name));	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
484	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  jsScope.getName());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  jsScope.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  var: "  +  name,  jsScope.getName());	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
485	[BUG]  [BUGGY]  Node  rValue  =  jsScope.getVar(name,  var.scope);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Node  rValue  =  jsScope.getVar(name,  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Node  rValue  =  jsScope.getVar(name,  var.scope);	  Node    rValue    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
486	[BUG]  [BUGGY]  Node  rValue  =  jsScope.getVar(name,  def);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Node  rValue  =  jsScope.getVar(name,  def);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Node  rValue  =  jsScope.getVar(name,  def);	  Node    rValue    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
487	[BUG]  [BUGGY]  Node  rValue  =  jsScope.getVar(name,  var.node);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Node  rValue  =  jsScope.getVar(name,  var.node);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Node  rValue  =  jsScope.getVar(name,  var.node);	  Node    rValue    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
488	[BUG]  [BUGGY]  Node  rValue  =  jsScope.getVar(name,  var.type);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Node  rValue  =  jsScope.getVar(name,  var.type);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Node  rValue  =  jsScope.getVar(name,  var.type);	  Node    rValue    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
489	[BUG]  [BUGGY]  Node  rValue  =  jsScope.getVar(name  +  1);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Node  rValue  =  jsScope.getVar(name  +  1);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Node  rValue  =  jsScope.getVar(name  +  1);	  Node    rValue    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
490	[BUG]  [BUGGY]  Node  rValue  =  jsScope.getVar(name)+  1;  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Node  rValue  =  jsScope.getVar(name)+  1;  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Node  rValue  =  jsScope.getVar(name)+  1;	  Node    rValue    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
491	[BUG]  [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  jsScope,  name);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  jsScope,  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  JsScopeException( "Unknown  scope: "  +  jsScope,  name);	  throw    new    JsScopeException(   "Unknown    scope:   "    +    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
492	[BUG]  [BUGGY]  Throwables.throw  new  JsScopeException( "Unknown  scope: "  +  jsScope);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  JsScopeException( "Unknown  scope: "  +  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  JsScopeException( "Unknown  scope: "  +  jsScope);	  throw    new    JsScopeException(   "Unknown    scope:   "    +    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
493	[BUG]  [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.name);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.name);	  throw    new    JsScopeException(   "Unknown    scope:   "    +    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
494	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name  + ",  scope: "  +  jsScope);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name  + ",  scope: "  +  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  var: "  +  name  + ",  scope: "  +  jsScope);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name    +   "    for    scope:   "    +    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
495	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unknown  var: "  +  name  + "  for  scope: "  +  jsScope);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unknown  var: "  +  name  + "  for  scope: "  +  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Unknown  var: "  +  name  + "  for  scope: "  +  jsScope);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name    +   "    for    scope:   "    +    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
496	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name  + "  for  scope: "  +  jsScope,  rValue);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name  + "  for  scope: "  +  jsScope,  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  var: "  +  name  + "  for  scope: "  +  jsScope,  rValue);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name    +   "    for    scope:   "    +    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
497	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name  + ",  for  scope: "  +  jsScope);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name  + ",  for  scope: "  +  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  var: "  +  name  + ",  for  scope: "  +  jsScope);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name    +   "    for    scope:   "    +    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
498	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name  + "  for  scope: "  +  jsScope.getName());  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name  + "  for  scope: "  +  jsScope.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  var: "  +  name  + "  for  scope: "  +  jsScope.getName());	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name    +   "    for    scope:   "    +    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
499	[BUG]  [BUGGY]  Throwables.warning( "Unknown  var: "  +  name  + "  for  scope: "  +  jsScope);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.warning( "Unknown  var: "  +  name  + "  for  scope: "  +  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.warning( "Unknown  var: "  +  name  + "  for  scope: "  +  jsScope);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name    +   "    for    scope:   "    +    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
500	[BUG]  [BUGGY]  JsScopeException  t  =  new  JsScopeException( "Unknown  scope: "  +  rValue);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  JsScopeException  t  =  new  JsScopeException( "Unknown  scope: "  +  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	JsScopeException  t  =  new  JsScopeException( "Unknown  scope: "  +  rValue);	  JsScopeException    t    =    new    JsScopeException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
501	[BUG]  [BUGGY]  JsScopeException  t  =  new  JsScopeException(rValue, "Unknown  scope: "  +  var.scope);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  JsScopeException  t  =  new  JsScopeException(rValue, "Unknown  scope: "  +  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	JsScopeException  t  =  new  JsScopeException(rValue, "Unknown  scope: "  +  var.scope);	  JsScopeException    t    =    new    JsScopeException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
502	[BUG]  [BUGGY]  JsScopeException  t  =  new  JsScopeException( "Unknown  scope: ");  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  JsScopeException  t  =  new  JsScopeException( "Unknown  scope: ");  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	JsScopeException  t  =  new  JsScopeException( "Unknown  scope: ");	  JsScopeException    t    =    new    JsScopeException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
503	[BUG]  [BUGGY]  JsScopeException  t  =  new  JsScopeException( "JsScope  exception: "  +  name);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  JsScopeException  t  =  new  JsScopeException( "JsScope  exception: "  +  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	JsScopeException  t  =  new  JsScopeException( "JsScope  exception: "  +  name);	  JsScopeException    t    =    new    JsScopeException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
504	[BUG]  [BUGGY]  JsScopeException  t  =  new  JsScopeException(rValue,  name);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  JsScopeException  t  =  new  JsScopeException(rValue,  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	JsScopeException  t  =  new  JsScopeException(rValue,  name);	  JsScopeException    t    =    new    JsScopeException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
505	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  var.scope);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  var.scope);	  NodeTraversal.traverse(compiler,    rValue,    def);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
506	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  def);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  def);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  var,  def);	  NodeTraversal.traverse(compiler,    rValue,    def);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
507	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  def,  cfgNode);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  def,  cfgNode);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  def,  cfgNode);	  NodeTraversal.traverse(compiler,    rValue,    def);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
508	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  def);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  def);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  node,  def);	  NodeTraversal.traverse(compiler,    rValue,    def);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
509	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  def,  name);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  def,  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  def,  name);	  NodeTraversal.traverse(compiler,    rValue,    def);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
510	[BUG]  [BUGGY]  jsScope.reachingDef.put(name,  def);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  jsScope.reachingDef.put(name,  def);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	jsScope.reachingDef.put(name,  def);	  jsScope.reachingDef.put(rValue,    def);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
511	[BUG]  [BUGGY]  jsScope.reachingDef.put(var,  def);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  jsScope.reachingDef.put(var,  def);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	jsScope.reachingDef.put(var,  def);	  jsScope.reachingDef.put(rValue,    def);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
512	[BUG]  [BUGGY]  jsScope.reachingDef.put(node,  def);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  jsScope.reachingDef.put(node,  def);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	jsScope.reachingDef.put(node,  def);	  jsScope.reachingDef.put(rValue,    def);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
513	[BUG]  [BUGGY]  jsScope.reachingDef.put(rValue,  var);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  jsScope.reachingDef.put(rValue,  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	jsScope.reachingDef.put(rValue,  var);	  jsScope.reachingDef.put(rValue,    def);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
514	[BUG]  [BUGGY]  Throwables.warning( "Missing  var: "  +  name,  var);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.warning( "Missing  var: "  +  name,  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.warning( "Missing  var: "  +  name,  var);	  Throwables.warning(   "Missing    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
515	[BUG]  [BUGGY]  escaped.add(var,  definition);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  escaped.add(var,  definition);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	escaped.add(var,  definition);	  escaped.add(definition);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
516	[BUG]  [BUGGY]  escaped.put(name,  var);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  escaped.put(name,  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	escaped.put(name,  var);	  escaped.add(definition);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
517	[BUG]  [BUGGY]  escaped.add(var.scope);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  escaped.add(var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	escaped.add(var.scope);	  escaped.add(definition);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
518	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  name.equals(rValue.getString()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  name.equals(rValue.getString()));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  IllegalArgumentException( " "  +  name.equals(rValue.getString()));	  throw    new    IllegalArgumentException(   "   "    +    name.equals(var.getString()));    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
519	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  name.equals(var.getString()),  rValue);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  name.equals(var.getString()),  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  IllegalArgumentException( " "  +  name.equals(var.getString()),  rValue);	  throw    new    IllegalArgumentException(   "   "    +    name.equals(var.getString()));    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
520	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  var.name.equals(name));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  var.name.equals(name));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  IllegalArgumentException( " "  +  var.name.equals(name));	  throw    new    IllegalArgumentException(   "   "    +    name.equals(var.getString()));    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
521	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  name.equals(var.getName()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  name.equals(var.getName()));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  IllegalArgumentException( " "  +  name.equals(var.getName()));	  throw    new    IllegalArgumentException(   "   "    +    name.equals(var.getString()));    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
522	[BUG]  [BUGGY]  Throwables.wrap( "   "  +  name.equals(var.getString()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.wrap( "   "  +  name.equals(var.getString()));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.wrap( "   "  +  name.equals(var.getString()));	  throw    new    IllegalArgumentException(   "   "    +    name.equals(var.getString()));    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
523	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unknown  scope: "  +  jsScope);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unknown  scope: "  +  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Unknown  scope: "  +  jsScope);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
524	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  jsScope,  name);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  jsScope,  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  scope: "  +  jsScope,  name);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
525	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  jsScope.getName());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  jsScope.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  scope: "  +  jsScope.getName());	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
526	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  jsScope.name);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  jsScope.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  scope: "  +  jsScope.name);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
527	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  rValue,  var);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  rValue,  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  node,  rValue,  var);	  NodeTraversal.traverse(compiler,    rValue,    var);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
528	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  var);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  node,  var);	  NodeTraversal.traverse(compiler,    rValue,    var);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
529	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  target);  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  target);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  target);	  NodeTraversal.traverse(compiler,    rValue,    var);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
530	[BUG]  [BUGGY]  new  AssertionFailedError(name  + "  unknown  scope: "  +  var.scope);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError(name  + "  unknown  scope: "  +  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError(name  + "  unknown  scope: "  +  var.scope);	  throw    new    AssertionFailedError(name    +   "    unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
531	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + "  may  have  side  effects  and  can't  be  removed "  +  var.scope);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name  + "  may  have  side  effects  and  can't  be  removed "  +  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + "  may  have  side  effects  and  can't  be  removed "  +  var.scope);	  throw    new    AssertionFailedError(name    +   "    unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
532	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name,  var.name,   "Unexpected  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name,  var.name,   "Unexpected  scope: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name,  var.name,   "Unexpected  scope: "  +  var.getName());	  throw    new    AssertionFailedError(name,       "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
533	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name,  var.name,  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name,  var.name,  scope: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name,  var.name,  scope: "  +  var.getName());	  throw    new    AssertionFailedError(name,       "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
534	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name,  var.getName());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name,  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name,  var.getName());	  throw    new    AssertionFailedError(name,       "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
535	[BUG]  [BUGGY]  new  AssertionFailedError( "Unknown  var: "  +  var.name);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError( "Unknown  var: "  +  var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError( "Unknown  var: "  +  var.name);	  new    AssertionFailedError(   "Unknown    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
536	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError(name  +  var.getName());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError(name  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError(name  +  var.getName());	  Throwables.throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
537	[BUG]  [BUGGY]  Node  rValue  =  var.reachingDef.getLastChild();  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Node  rValue  =  var.reachingDef.getLastChild();  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Node  rValue  =  var.reachingDef.getLastChild();	  Node    rValue    =    var.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
538	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  definition);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  definition);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  definition);	  NodeTraversal.traverse(compiler,    rValue,    var);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
539	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  this,  var);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  this,  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  this,  var);	  NodeTraversal.traverse(compiler,    rValue,    var);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
540	[BUG]  [BUGGY]  Definition  def  =  var.reachingDef.getDefinitions();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  var.reachingDef.getDefinitions();  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  var.reachingDef.getDefinitions();	  Definition    def    =    def.getDefinitions();    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
541	[BUG]  [BUGGY]  Definition  def  =  vn.getDefinitions();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  vn.getDefinitions();  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  vn.getDefinitions();	  Definition    def    =    def.getDefinitions();    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
542	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName(),  rValue);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName(),  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName(),  rValue);	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getName(),    name);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
543	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName(),  cfgNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName(),  cfgNode);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName(),  cfgNode);	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getName(),    name);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
544	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName(),  jsScope);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName(),  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName(),  jsScope);	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getName(),    name);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
545	[BUG]  [BUGGY]  String  name  =  var.scope.getName();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  String  name  =  var.scope.getName();  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	String  name  =  var.scope.getName();	  String    name    =    jsScope.getName();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
546	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  this,  new  MockImpl());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  this,  new  MockImpl());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  this,  new  MockImpl());	  NodeTraversal.traverse(compiler,    rValue,    new    MockImpl());    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
547	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  MockReachingDef());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  MockReachingDef());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  new  MockReachingDef());	  NodeTraversal.traverse(compiler,    rValue,    new    MockImpl());    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
548	[BUG]  [BUGGY]  AssertionFailedError(name,  var.getName(),   "Unknown  var: "  +  var);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,  var.getName(),   "Unknown  var: "  +  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,  var.getName(),   "Unknown  var: "  +  var);	  AssertionFailedError(name,       "Unknown    var:   "    +    var);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
549	[BUG]  [BUGGY]  AssertionFailedError(name,   "Unknown  var: "  +  var.scope);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,   "Unknown  var: "  +  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,   "Unknown  var: "  +  var.scope);	  AssertionFailedError(name,       "Unknown    var:   "    +    var);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
550	[BUG]  [BUGGY]  AssertionFailedError(name,  var.name(),   "Unknown  var: "  +  var);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,  var.name(),   "Unknown  var: "  +  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,  var.name(),   "Unknown  var: "  +  var);	  AssertionFailedError(name,       "Unknown    var:   "    +    var);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
551	[BUG]  [BUGGY]  new  AssertionFailedError( "Unexpected  scope: "  +  var.toString());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError( "Unexpected  scope: "  +  var.toString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError( "Unexpected  scope: "  +  var.toString());	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.toString());    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
552	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.scope,  var.name);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.scope,  var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.scope,  var.name);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name,    var.name);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
553	[BUG]  [BUGGY]  new  AssertionFailedError( "Unknown  var: "  +  name,  var.name,  rValue);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError( "Unknown  var: "  +  name,  var.name,  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError( "Unknown  var: "  +  name,  var.name,  rValue);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name,    var.name);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
554	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  varValue,  new  RuntimeException( " "));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  varValue,  new  RuntimeException( " "));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  varValue,  new  RuntimeException( " "));	  NodeTraversal.traverse(compiler,    rValue,    new    RuntimeException(   "   "));    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
555	[BUG]  [BUGGY]  DefinitionDef  def  =  jsScope.getDefinitionDef(var.scope);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  DefinitionDef  def  =  jsScope.getDefinitionDef(var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	DefinitionDef  def  =  jsScope.getDefinitionDef(var.scope);	  DefinitionDef    def    =    jsScope.getDefinitionDef(name);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
556	[BUG]  [BUGGY]  AssertionFailedError(name,  var.name,  scope:   "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,  var.name,  scope:   "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,  var.name,  scope:   "  +  var.getName());	  AssertionFailedError(name,       "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
557	[BUG]  [BUGGY]  AssertionFailedError(name,   "Unexpected  scope: "  +  var.getName(),  jsScope);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,   "Unexpected  scope: "  +  var.getName(),  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,   "Unexpected  scope: "  +  var.getName(),  jsScope);	  AssertionFailedError(name,       "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
558	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name  + "  in  scope: "  +  jsScope,  var.scope);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name  + "  in  scope: "  +  jsScope,  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  var: "  +  name  + "  in  scope: "  +  jsScope,  var.scope);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name    +   "    in    scope:   "    +    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
559	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  def,  escaped);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  def,  escaped);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  def,  escaped);	  NodeTraversal.traverse(compiler,    rValue,    def);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
560	[BUG]  [BUGGY]  Definition  def  =  def.reachingDef.get(var);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  def.reachingDef.get(var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  def.reachingDef.get(var);	  Definition    def    =    def.reachingDef.get(rValue);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
561	[BUG]  [BUGGY]  Definition  def  =  def.reachingDef.get(var,  rValue);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  def.reachingDef.get(var,  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  def.reachingDef.get(var,  rValue);	  Definition    def    =    def.reachingDef.get(rValue);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
562	[BUG]  [BUGGY]  Definition  def  =  jsScope.getDefiningDef().get(rValue);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  jsScope.getDefiningDef().get(rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  jsScope.getDefiningDef().get(rValue);	  Definition    def    =    def.reachingDef.get(rValue);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
563	[BUG]  [BUGGY]  AssertionFailedError(name,  var.name,  scope:   "  +  var.scope);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,  var.name,  scope:   "  +  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,  var.name,  scope:   "  +  var.scope);	  AssertionFailedError(name,       "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
564	[BUG]  [BUGGY]  AssertionFailedError(name,  var.nameNode,   "Unknown  scope: "  +  var.scope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,  var.nameNode,   "Unknown  scope: "  +  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,  var.nameNode,   "Unknown  scope: "  +  var.scope);	  AssertionFailedError(name,       "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
565	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  varValue,  new  IllegalStateException( " "));  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  varValue,  new  IllegalStateException( " "));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  varValue,  new  IllegalStateException( " "));	  NodeTraversal.traverse(compiler,    rValue,    new    IllegalStateException(   "   "));    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
566	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  def,  target);  continue;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  def,  target);  continue;  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  def,  target);  continue;	  NodeTraversal.traverse(compiler,    rValue,    def);    continue;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
567	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  this,  def);  continue;  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  this,  def);  continue;  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  this,  def);  continue;	  NodeTraversal.traverse(compiler,    rValue,    def);    continue;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
568	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  definition);  continue;  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  definition);  continue;  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  definition);  continue;	  NodeTraversal.traverse(compiler,    rValue,    def);    continue;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
569	[BUG]  [BUGGY]  return  new  AssertionFailedError(name  + "Unknown  scope: "  +  var.scope);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  return  new  AssertionFailedError(name  + "Unknown  scope: "  +  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	return  new  AssertionFailedError(name  + "Unknown  scope: "  +  var.scope);	  return    new    AssertionFailedError(   "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
570	[BUG]  [BUGGY]  Node  rValue  =  var.scope.getVar(name);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Node  rValue  =  var.scope.getVar(name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Node  rValue  =  var.scope.getVar(name);	  Node    rValue    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
571	[BUG]  [BUGGY]  Node  rValue  =  var.getVar(name);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Node  rValue  =  var.getVar(name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Node  rValue  =  var.getVar(name);	  Node    rValue    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
572	[BUG]  [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  var.scope.getVar(name));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  var.scope.getVar(name));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  JsScopeException( "Unknown  scope: "  +  var.scope.getVar(name));	  throw    new    JsScopeException(   "Unknown    scope:   "    +    jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
573	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  this,  var);  continue;  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  this,  var);  continue;  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  this,  var);  continue;	  NodeTraversal.traverse(compiler,    rValue,    var);    continue;    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
574	[BUG]  [BUGGY]  Definition  def  =  jsScope.getDefinitions(var.scope);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  jsScope.getDefinitions(var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  jsScope.getDefinitions(var.scope);	  Definition    def    =    jsScope.getDefinitions();    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
575	[BUG]  [BUGGY]  Definition  def  =  var.scope.getDefinitions();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  var.scope.getDefinitions();  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  var.scope.getDefinitions();	  Definition    def    =    jsScope.getDefinitions();    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
576	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name  + "  for  scope: "  +  jsScope,  var.scope);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name  + "  for  scope: "  +  jsScope,  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  var: "  +  name  + "  for  scope: "  +  jsScope,  var.scope);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name    +   "    for    scope:   "    +    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
577	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name  + "  for  scope: "  +  jsScope.scope);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name  + "  for  scope: "  +  jsScope.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  var: "  +  name  + "  for  scope: "  +  jsScope.scope);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name    +   "    for    scope:   "    +    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
578	[BUG]  [BUGGY]  Definition  def  =  jsScope.getDefinition(var.scope);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  jsScope.getDefinition(var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  jsScope.getDefinition(var.scope);	  Definition    def    =    jsScope.getDefinition(name);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
579	[BUG]  [BUGGY]  Definition  def  =  jsScope.getDefinition(var,  name);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  jsScope.getDefinition(var,  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  jsScope.getDefinition(var,  name);	  Definition    def    =    jsScope.getDefinition(name);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
580	[BUG]  [BUGGY]  JsScopeException  t  =  new  JsScopeException( "Unknown  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  JsScopeException  t  =  new  JsScopeException( "Unknown  scope: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	JsScopeException  t  =  new  JsScopeException( "Unknown  scope: "  +  var.getName());	  throw    new    JsScopeException(   "Unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
581	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  this,  new  MockitoReachingDef());  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  this,  new  MockitoReachingDef());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  this,  new  MockitoReachingDef());	  NodeTraversal.traverse(compiler,    rValue,    new    MockitoReachingDef());    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
582	[BUG]  [BUGGY]  Definition  def  =  jsScope.getDefinitions(var,  name);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  jsScope.getDefinitions(var,  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  jsScope.getDefinitions(var,  name);	  Definition    def    =    jsScope.getDefinitions(name);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
583	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( ", ");  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( ", ");  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalStateException( ", ");	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
584	[BUG]  [BUGGY]  return  new  AssertionFailedError(name  +  var.getName());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  return  new  AssertionFailedError(name  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	return  new  AssertionFailedError(name  +  var.getName());	  return    new    AssertionFailedError(   "Unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
585	[BUG]  [BUGGY]  return  new  AssertionFailedError( "Unknown  var: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  return  new  AssertionFailedError( "Unknown  var: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	return  new  AssertionFailedError( "Unknown  var: "  +  var.getName());	  return    new    AssertionFailedError(   "Unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
586	[BUG]  [BUGGY]  return  new  AssertionFailedError( "Unknown  scope: "  +  var.toString());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  return  new  AssertionFailedError( "Unknown  scope: "  +  var.toString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	return  new  AssertionFailedError( "Unknown  scope: "  +  var.toString());	  return    new    AssertionFailedError(   "Unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
587	[BUG]  [BUGGY]  new  AssertionFailedError(name  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError(name  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError(name  +  var.getName());	  new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
588	[BUG]  [BUGGY]  Definition  rValue  =  var.getVar(name);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  rValue  =  var.getVar(name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  rValue  =  var.getVar(name);	  Definition    rValue    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
589	[BUG]  [BUGGY]  Definition  rValue  =  jsScope.getVar(var.name);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  rValue  =  jsScope.getVar(var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  rValue  =  jsScope.getVar(var.name);	  Definition    rValue    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
590	[BUG]  [BUGGY]  Definition  rValue  =  var.scope.getVar(name);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  rValue  =  var.scope.getVar(name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  rValue  =  var.scope.getVar(name);	  Definition    rValue    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
591	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  varValue,  new  UnsupportedOperationException( " "));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  varValue,  new  UnsupportedOperationException( " "));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  varValue,  new  UnsupportedOperationException( " "));	  NodeTraversal.traverse(compiler,    rValue,    new    UnsupportedOperationException(   "   "));    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
592	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  UnsupportedOperationException( " "));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  UnsupportedOperationException( " "));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  n,  new  UnsupportedOperationException( " "));	  NodeTraversal.traverse(compiler,    rValue,    new    UnsupportedOperationException(   "   "));    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
593	[BUG]  [BUGGY]  new  AssertionFailedError( "Missing  var: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError( "Missing  var: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError( "Missing  var: "  +  var.getName());	  throw    new    AssertionFailedError(   "Missing    var:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
594	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  var.getName(),  name);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  var.getName(),  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Missing  var: "  +  var.getName(),  name);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
595	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.getClass());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.getClass());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.getClass());	  throw    new    AssertionFailedError(name    +   "Unexpected    scope:   "    +    var.getType());    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
596	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + ".  Unexpected  scope: "  +  var.getType());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name  + ".  Unexpected  scope: "  +  var.getType());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + ".  Unexpected  scope: "  +  var.getType());	  throw    new    AssertionFailedError(name    +   "Unexpected    scope:   "    +    var.getType());    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
597	[BUG]  [BUGGY]  new  AssertionFailedError( "Unknown  scope: "  +  var.name());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError( "Unknown  scope: "  +  var.name());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError( "Unknown  scope: "  +  var.name());	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.name());    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
598	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  var.name(),  name);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  var.name(),  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  scope: "  +  var.name(),  name);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.name());    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
599	[BUG]  [BUGGY]  Throwables.weirdString( "Unknown  scope: "  +  var.name());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.weirdString( "Unknown  scope: "  +  var.name());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.weirdString( "Unknown  scope: "  +  var.name());	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.name());    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
600	[BUG]  [BUGGY]  Throwables.throw(new  IllegalArgumentException( "Unexpected  scope: "  +  var.getName()));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw(new  IllegalArgumentException( "Unexpected  scope: "  +  var.getName()));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw(new  IllegalArgumentException( "Unexpected  scope: "  +  var.getName()));	  throw    new    IllegalArgumentException(   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
601	[BUG]  [BUGGY]  new  IllegalArgumentException( "Unexpected  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  IllegalArgumentException( "Unexpected  scope: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  IllegalArgumentException( "Unexpected  scope: "  +  var.getName());	  throw    new    IllegalArgumentException(   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
602	[BUG]  [BUGGY]  JsScopeException  t  =  new  JsScopeException( "Unknown  scope: "  +  jsScope.getName());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  JsScopeException  t  =  new  JsScopeException( "Unknown  scope: "  +  jsScope.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	JsScopeException  t  =  new  JsScopeException( "Unknown  scope: "  +  jsScope.getName());	  throw    new    JsScopeException(   "Unknown    scope:   "    +    jsScope.getName());    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
603	[BUG]  [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  var.scope.getName());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  var.scope.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  JsScopeException( "Unknown  scope: "  +  var.scope.getName());	  throw    new    JsScopeException(   "Unknown    scope:   "    +    jsScope.getName());    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
604	[BUG]  [BUGGY]  throw  new  JsScopeException( "JsScope  exception: "  +  var.scope);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  JsScopeException( "JsScope  exception: "  +  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  JsScopeException( "JsScope  exception: "  +  var.scope);	  throw    new    JsScopeException(   "JsScope    exception:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
605	[BUG]  [BUGGY]  new  AssertionFailedError( "Missing  var: "  +  name,  var.scope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError( "Missing  var: "  +  name,  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError( "Missing  var: "  +  name,  var.scope);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name,    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
606	[BUG]  [BUGGY]  new  AssertionFailedError( "Missing  var: "  +  name,  jsScope);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError( "Missing  var: "  +  name,  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError( "Missing  var: "  +  name,  jsScope);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name,    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
607	[BUG]  [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError( "Missing  var: "  +  var.name);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError( "Missing  var: "  +  var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError  t  =  new  AssertionFailedError( "Missing  var: "  +  var.name);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    var.name);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
608	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  var.name,  rValue);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  var.name,  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Missing  var: "  +  var.name,  rValue);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    var.name);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
609	[BUG]  [BUGGY]  new  AssertionFailedError( "Unknown  scope: "  +  var.name,  name);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError( "Unknown  scope: "  +  var.name,  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError( "Unknown  scope: "  +  var.name,  name);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.name);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
610	[BUG]  [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(name  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(name  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError  t  =  new  AssertionFailedError(name  +  var.getName());	  AssertionFailedError    t    =    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
611	[BUG]  [BUGGY]  Throwables.weirdString( "Unknown  var: "  +  var.name);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.weirdString( "Unknown  var: "  +  var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.weirdString( "Unknown  var: "  +  var.name);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    var.name);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
612	[BUG]  [BUGGY]  new  AssertionFailedError( "Unknown  var: "  +  var.name,  name);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError( "Unknown  var: "  +  var.name,  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError( "Unknown  var: "  +  var.name,  name);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    var.name);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
613	[BUG]  [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  var.scope,  rValue);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  var.scope,  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  JsScopeException( "Unknown  scope: "  +  var.scope,  rValue);	  throw    new    JsScopeException(   "Unknown    scope:   "    +    rValue);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
614	[BUG]  [BUGGY]  new  AssertionFailedError( "Unexpected  scope: "  +  var.name());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError( "Unexpected  scope: "  +  var.name());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError( "Unexpected  scope: "  +  var.name());	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.name());    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
615	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.name(),  name);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.name(),  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.name(),  name);	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.name());    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
616	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  var: "  +  var.name());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unexpected  var: "  +  var.name());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unexpected  var: "  +  var.name());	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.name());    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
617	[BUG]  [BUGGY]  Definition  def  =  jsScope.getDefinitionsInExpression(var.scope);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  jsScope.getDefinitionsInExpression(var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  jsScope.getDefinitionsInExpression(var.scope);	  Definition    def    =    jsScope.getDefinitionsInExpression(rValue);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
618	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(var.toString());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(var.toString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalArgumentException( " ").equals(var.toString());	  Throwables.throw    new    IllegalArgumentException(   "   ").equals(var.getString());    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
619	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").define(var.getString());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").define(var.getString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalArgumentException( " ").define(var.getString());	  Throwables.throw    new    IllegalArgumentException(   "   ").equals(var.getString());    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
620	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").printStackTrace(var.getString());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").printStackTrace(var.getString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalArgumentException( " ").printStackTrace(var.getString());	  Throwables.throw    new    IllegalArgumentException(   "   ").equals(var.getString());    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
621	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.toString());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.toString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.toString());	  throw    new    AssertionFailedError(name    +   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
622	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + ".  Unexpected  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name  + ".  Unexpected  scope: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + ".  Unexpected  scope: "  +  var.getName());	  throw    new    AssertionFailedError(name    +   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
623	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.scope.getName());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.scope.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.scope.getName());	  throw    new    AssertionFailedError(name    +   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
624	[BUG]  [BUGGY]  Definition  <  Object>  def  =  jsScope.getDefinitionDefinition(rValue);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  <  Object>  def  =  jsScope.getDefinitionDefinition(rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  <  Object>  def  =  jsScope.getDefinitionDefinition(rValue);	  Definition    <    Object>    def    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
625	[BUG]  [BUGGY]  Definition  <  Object>  def  =  jsScope.getDefinitions(rValue,  var.scope);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  <  Object>  def  =  jsScope.getDefinitions(rValue,  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  <  Object>  def  =  jsScope.getDefinitions(rValue,  var.scope);	  Definition    <    Object>    def    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
626	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + "Unknown  scope: "  +  var.scope,  rValue);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name  + "Unknown  scope: "  +  var.scope,  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + "Unknown  scope: "  +  var.scope,  rValue);	  throw    new    AssertionFailedError(name    +   "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
627	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + "Unknown  scope: "  +  jsScope);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name  + "Unknown  scope: "  +  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + "Unknown  scope: "  +  jsScope);	  throw    new    AssertionFailedError(name    +   "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
628	[BUG]  [BUGGY]  Throwables.throw  new  JsScopeException( " ",  jsScope);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  JsScopeException( " ",  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  JsScopeException( " ",  jsScope);	  Throwables.throw    new    JsScopeException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
629	[BUG]  [BUGGY]  Throwables.throw  new  JsScopeException( " "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  JsScopeException( " "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  JsScopeException( " "  +  var.getName());	  Throwables.throw    new    JsScopeException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
630	[BUG]  [BUGGY]  Throwables.throw  new  JsScopeException( " "  +  var.toString());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  JsScopeException( " "  +  var.toString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  JsScopeException( " "  +  var.toString());	  Throwables.throw    new    JsScopeException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
631	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  var.toString());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  var.toString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalArgumentException( " "  +  var.toString());	  Throwables.throw    new    IllegalArgumentException(   "   "    +    var.getString());    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
632	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  name  + "  in  scope: "  +  var.getString());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  name  + "  in  scope: "  +  var.getString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalArgumentException( " "  +  name  + "  in  scope: "  +  var.getString());	  Throwables.throw    new    IllegalArgumentException(   "   "    +    var.getString());    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
633	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  name  + "  var: "  +  var.getString());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  name  + "  var: "  +  var.getString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalArgumentException( " "  +  name  + "  var: "  +  var.getString());	  Throwables.throw    new    IllegalArgumentException(   "   "    +    var.getString());    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
634	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ",  var.scope);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ",  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalArgumentException( " ",  var.scope);	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
635	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  var.toString());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  var.toString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  var: "  +  var.toString());	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.toString());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
636	[BUG]  [BUGGY]  new  AssertionFailedError( "Unknown  scope: "  +  var.toString());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError( "Unknown  scope: "  +  var.toString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError( "Unknown  scope: "  +  var.toString());	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.toString());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
637	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  JsScope(name));  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  JsScope(name));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  new  JsScope(name));	  NodeTraversal.traverse(compiler,    rValue,    new    JsScope());    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
638	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  this,  new  JsScope());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  this,  new  JsScope());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  this,  new  JsScope());	  NodeTraversal.traverse(compiler,    rValue,    new    JsScope());    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
639	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  varValue,  new  IllegalArgumentException( " "));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  varValue,  new  IllegalArgumentException( " "));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  varValue,  new  IllegalArgumentException( " "));	  NodeTraversal.traverse(compiler,    rValue,    new    IllegalArgumentException(   "   "));    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
640	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  IllegalArgumentException( "));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  IllegalArgumentException( "));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  new  IllegalArgumentException( "));	  NodeTraversal.traverse(compiler,    rValue,    new    IllegalArgumentException(   "   "));    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
641	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  var.toString());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  var.toString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  IllegalArgumentException( " "  +  var.toString());	  throw    new    IllegalArgumentException(   "   "    +    var.getString());    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
642	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  var.getLineno());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  var.getLineno());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  IllegalArgumentException( " "  +  var.getLineno());	  throw    new    IllegalArgumentException(   "   "    +    var.getString());    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
643	[BUG]  [BUGGY]  new  IllegalArgumentException( " "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  IllegalArgumentException( " "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  IllegalArgumentException( " "  +  var.getName());	  throw    new    IllegalArgumentException(   "   "    +    var.getString());    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
644	[BUG]  [BUGGY]  escaped.add(jsScope.getVar(name,  var));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  escaped.add(jsScope.getVar(name,  var));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	escaped.add(jsScope.getVar(name,  var));	  escaped.add(var);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
645	[BUG]  [BUGGY]  escaped.add(jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  escaped.add(jsScope.getVar(name));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	escaped.add(jsScope.getVar(name));	  escaped.add(var);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
646	[BUG]  [BUGGY]  escaped.add(var,  jsScope);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  escaped.add(var,  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	escaped.add(var,  jsScope);	  escaped.add(var);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
647	[BUG]  [BUGGY]  escaped.add(jsScope.getVar(name),  var);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  escaped.add(jsScope.getVar(name),  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	escaped.add(jsScope.getVar(name),  var);	  escaped.add(var);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
648	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  ReachingDefinition());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  new  ReachingDefinition());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  new  ReachingDefinition());	  NodeTraversal.traverse(compiler,    rValue,    new    Reporter());    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
649	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(var.toString()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(var.toString()));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalArgumentException( " ").equals(var.toString()));	  Throwables.throw    new    IllegalArgumentException(   "   ").equals(var.getString()));    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
650	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").printStackTrace(var.getString()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").printStackTrace(var.getString()));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalArgumentException( " ").printStackTrace(var.getString()));	  Throwables.throw    new    IllegalArgumentException(   "   ").equals(var.getString()));    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
651	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").define(var.getString()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").define(var.getString()));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalArgumentException( " ").define(var.getString()));	  Throwables.throw    new    IllegalArgumentException(   "   ").equals(var.getString()));    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
652	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  var.name,  jsScope);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  var.name,  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Missing  var: "  +  var.name,  jsScope);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
653	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  jsScope.getVar(name));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Missing  var: "  +  name,  jsScope.getVar(name));	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
654	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  jsScope,  var.scope);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  jsScope,  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Missing  var: "  +  name,  jsScope,  var.scope);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
655	[BUG]  [BUGGY]  return  new  AssertionFailedError( "Unknown  var: "  +  name,  var.scope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  return  new  AssertionFailedError( "Unknown  var: "  +  name,  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	return  new  AssertionFailedError( "Unknown  var: "  +  name,  var.scope);	  return    new    AssertionFailedError(   "Unknown    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
656	[BUG]  [BUGGY]  return  new  AssertionFailedError(name  + "Unknown  var: "  +  var);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  return  new  AssertionFailedError(name  + "Unknown  var: "  +  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	return  new  AssertionFailedError(name  + "Unknown  var: "  +  var);	  return    new    AssertionFailedError(   "Unknown    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
657	[BUG]  [BUGGY]  escaped.addAll(var);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  escaped.addAll(var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	escaped.addAll(var);	  escaped.add(definition);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
658	[BUG]  [BUGGY]  escaped.put(name,  def);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  escaped.put(name,  def);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	escaped.put(name,  def);	  escaped.add(definition);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
659	[BUG]  [BUGGY]  String  name  =  var.scope.getVar(name);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  String  name  =  var.scope.getVar(name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	String  name  =  var.scope.getVar(name);	  String    name    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
660	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + "  unknown  scope: "  +  var.getName(),  jsScope);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name  + "  unknown  scope: "  +  var.getName(),  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + "  unknown  scope: "  +  var.getName(),  jsScope);	  throw    new    AssertionFailedError(name    +   "    unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
661	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Missing  var: "  +  var);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Missing  var: "  +  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Missing  var: "  +  var);	  Throwables.throw    new    AssertionFailedError(   "Missing    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
662	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Missing  var: "  +  var.scope);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Missing  var: "  +  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Missing  var: "  +  var.scope);	  Throwables.throw    new    AssertionFailedError(   "Missing    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
663	[BUG]  [BUGGY]  JsScopeException  t  =  new  JsScopeException( "Unknown  scope: "  +  rValue.toString());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  JsScopeException  t  =  new  JsScopeException( "Unknown  scope: "  +  rValue.toString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	JsScopeException  t  =  new  JsScopeException( "Unknown  scope: "  +  rValue.toString());	  throw    new    JsScopeException(   "Unknown    scope:   "    +    rValue.toString());    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
664	[BUG]  [BUGGY]  new  JsScopeException( "Unknown  scope: "  +  var.toString());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  JsScopeException( "Unknown  scope: "  +  var.toString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  JsScopeException( "Unknown  scope: "  +  var.toString());	  throw    new    JsScopeException(   "Unknown    scope:   "    +    rValue.toString());    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
665	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + "Unknown  scope: "  +  var.toString());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name  + "Unknown  scope: "  +  var.toString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + "Unknown  scope: "  +  var.toString());	  throw    new    AssertionFailedError(name    +   "Unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
666	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + ".Unknown  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name  + ".Unknown  scope: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + ".Unknown  scope: "  +  var.getName());	  throw    new    AssertionFailedError(name    +   "Unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
667	[BUG]  [BUGGY]  new  AssertionFailedError(name,  var.scope,  rValue);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError(name,  var.scope,  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError(name,  var.scope,  rValue);	  new    AssertionFailedError(   "Unknown    var:   "    +    name,    rValue);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
668	[BUG]  [BUGGY]  new  AssertionFailedError( "Unknown  var: "  +  name,  var.sourceName,  rValue);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError( "Unknown  var: "  +  name,  var.sourceName,  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError( "Unknown  var: "  +  name,  var.sourceName,  rValue);	  new    AssertionFailedError(   "Unknown    var:   "    +    name,    rValue);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
669	[BUG]  [BUGGY]  AssertionFailedError(name,  var.getName(),  var);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,  var.getName(),  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,  var.getName(),  var);	  AssertionFailedError(name,       "Missing    var:   "    +    var);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
670	[BUG]  [BUGGY]  AssertionFailedError(name,  var.getName(),   "Missing  var: "  +  var);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,  var.getName(),   "Missing  var: "  +  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,  var.getName(),   "Missing  var: "  +  var);	  AssertionFailedError(name,       "Missing    var:   "    +    var);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
671	[BUG]  [BUGGY]  AssertionFailedError(name,  var.toString()  + ": "  +  var);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,  var.toString()  + ": "  +  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,  var.toString()  + ": "  +  var);	  AssertionFailedError(name,       "Missing    var:   "    +    var);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
672	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  type: "  +  var.getString());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unexpected  type: "  +  var.getString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unexpected  type: "  +  var.getString());	  throw    new    AssertionFailedError(   "Unexpected    type:   "    +    var.getType());    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
673	[BUG]  [BUGGY]  return  new  AssertionFailedError( "Unexpected  scope: "  +  var.toString());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  return  new  AssertionFailedError( "Unexpected  scope: "  +  var.toString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	return  new  AssertionFailedError( "Unexpected  scope: "  +  var.toString());	  return    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
674	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  var.getName(),  rValue);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  var.getName(),  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  scope: "  +  var.getName(),  rValue);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.getName(),    name);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
675	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  var.getName(),  cfgNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  var.getName(),  cfgNode);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  scope: "  +  var.getName(),  cfgNode);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.getName(),    name);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
676	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  var.getName(),  jsScope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  var.getName(),  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  scope: "  +  var.getName(),  jsScope);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.getName(),    name);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
677	[BUG]  [BUGGY]  Definition  def  =  jsScope.getDefinition(node,  rValue);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  jsScope.getDefinition(node,  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  jsScope.getDefinition(node,  rValue);	  Definition    def    =    jsScope.getDefinition(rValue);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
678	[BUG]  [BUGGY]  Definition  def  =  jsScope.getDefinition(node);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  jsScope.getDefinition(node);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  jsScope.getDefinition(node);	  Definition    def    =    jsScope.getDefinition(rValue);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
679	[BUG]  [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError( "Unknown  var: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError( "Unknown  var: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError  t  =  new  AssertionFailedError( "Unknown  var: "  +  var.getName());	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
680	[BUG]  [BUGGY]  new  AssertionFailedError( "Unknown  var: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError( "Unknown  var: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError( "Unknown  var: "  +  var.getName());	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
681	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  name.toLowerCase()  +  var.getString());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  name.toLowerCase()  +  var.getString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  IllegalArgumentException( " "  +  name.toLowerCase()  +  var.getString());	  throw    new    IllegalArgumentException(   "   "    +    name.equals(var.getString()));    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
682	[BUG]  [BUGGY]  Throwables.warning( "Missing  var: "  +  var.scope);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.warning( "Missing  var: "  +  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.warning( "Missing  var: "  +  var.scope);	  Throwables.warning(   "Missing    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
683	[BUG]  [BUGGY]  Throwables.warning( "Missing  var: "  +  var.toString());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.warning( "Missing  var: "  +  var.toString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.warning( "Missing  var: "  +  var.toString());	  Throwables.warning(   "Missing    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
684	[BUG]  [BUGGY]  Throwables.warning( "Missing  var: "  +  var);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.warning( "Missing  var: "  +  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.warning( "Missing  var: "  +  var);	  Throwables.warning(   "Missing    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
685	[BUG]  [BUGGY]  DefinitionDefinition  def  =  var.reachingDef.getDefinitions();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  DefinitionDefinition  def  =  var.reachingDef.getDefinitions();  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	DefinitionDefinition  def  =  var.reachingDef.getDefinitions();	  DefinitionDefinition    def    =    def.getDefinitions();    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
686	[BUG]  [BUGGY]  DefinitionDefinition  def  =  vn.getDefinitions();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  DefinitionDefinition  def  =  vn.getDefinitions();  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	DefinitionDefinition  def  =  vn.getDefinitions();	  DefinitionDefinition    def    =    def.getDefinitions();    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
687	[BUG]  [BUGGY]  JsScopeException  t  =  new  JsScopeException( "Unknown  scope: "  +  jsScope);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  JsScopeException  t  =  new  JsScopeException( "Unknown  scope: "  +  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	JsScopeException  t  =  new  JsScopeException( "Unknown  scope: "  +  jsScope);	  throw    new    JsScopeException(   "Unknown    scope:   "    +    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
688	[BUG]  [BUGGY]  new  AssertionFailedError( "Missing  var: "  +  name,  var.name,  rValue);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError( "Missing  var: "  +  name,  var.name,  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError( "Missing  var: "  +  name,  var.name,  rValue);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name,    var.name);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
689	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  def.scope);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  def.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  var: "  +  name,  def.scope);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name,    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
690	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  rValue,  this);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  rValue,  this);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  var,  rValue,  this);	  NodeTraversal.traverse(compiler,    rValue,    var,    this);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
691	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  definition,  this);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  definition,  this);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  definition,  this);	  NodeTraversal.traverse(compiler,    rValue,    var,    this);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
692	[BUG]  [BUGGY]  Throwables.throw  new  UnsupportedOperationException(name);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  UnsupportedOperationException(name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  UnsupportedOperationException(name);	  Throwables.throw    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
693	[BUG]  [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " "  +  name);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " "  +  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  UnsupportedOperationException( " "  +  name);	  Throwables.throw    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
694	[BUG]  [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " ").printStackTrace();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " ").printStackTrace();  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  UnsupportedOperationException( " ").printStackTrace();	  Throwables.throw    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
695	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  def,  var);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  def,  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  def,  var);	  NodeTraversal.traverse(compiler,    rValue,    var,    def);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
696	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  rValue,  def);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  rValue,  def);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  var,  rValue,  def);	  NodeTraversal.traverse(compiler,    rValue,    var,    def);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
697	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  definition,  def);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  definition,  def);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  definition,  def);	  NodeTraversal.traverse(compiler,    rValue,    var,    def);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
698	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  var.scope,  name,  def);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  var.scope,  name,  def);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  scope: "  +  var.scope,  name,  def);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.scope,    name);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
699	[BUG]  [BUGGY]  new  AssertionFailedError( "Unexpected  scope: "  +  var.getClass());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError( "Unexpected  scope: "  +  var.getClass());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError( "Unexpected  scope: "  +  var.getClass());	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getClass());    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
700	[BUG]  [BUGGY]  JsScopeException  t  =  new  JsScopeException(name);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  JsScopeException  t  =  new  JsScopeException(name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	JsScopeException  t  =  new  JsScopeException(name);	  JsScopeException    t    =    new    JsScopeException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
701	[BUG]  [BUGGY]  JsScopeException  t  =  new  JsScopeException( "Unable  to  find  var: "  +  name);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  JsScopeException  t  =  new  JsScopeException( "Unable  to  find  var: "  +  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	JsScopeException  t  =  new  JsScopeException( "Unable  to  find  var: "  +  name);	  JsScopeException    t    =    new    JsScopeException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
702	[BUG]  [BUGGY]  JsScopeException  t  =  new  JsScopeException( "JsScopeException.missing.var ");  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  JsScopeException  t  =  new  JsScopeException( "JsScopeException.missing.var ");  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	JsScopeException  t  =  new  JsScopeException( "JsScopeException.missing.var ");	  JsScopeException    t    =    new    JsScopeException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
703	[BUG]  [BUGGY]  JsScopeException  t  =  new  JsScopeException( "JsScope  exception: "  +  rValue);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  JsScopeException  t  =  new  JsScopeException( "JsScope  exception: "  +  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	JsScopeException  t  =  new  JsScopeException( "JsScope  exception: "  +  rValue);	  JsScopeException    t    =    new    JsScopeException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
704	[BUG]  [BUGGY]  AssertionFailedError(name,  var.name,   "Unexpected  scope: "  +  var.getType());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,  var.name,   "Unexpected  scope: "  +  var.getType());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,  var.name,   "Unexpected  scope: "  +  var.getType());	  AssertionFailedError(name,       "Unexpected    scope:   "    +    var.getType());    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
705	[BUG]  [BUGGY]  AssertionFailedError(name,  var.name,  scope:   "  +  var.getType());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,  var.name,  scope:   "  +  var.getType());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,  var.name,  scope:   "  +  var.getType());	  AssertionFailedError(name,       "Unexpected    scope:   "    +    var.getType());    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
706	[BUG]  [BUGGY]  AssertionFailedError(name,  var.getName(),   "Unexpected  scope: "  +  var.getType());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,  var.getName(),   "Unexpected  scope: "  +  var.getType());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,  var.getName(),   "Unexpected  scope: "  +  var.getType());	  AssertionFailedError(name,       "Unexpected    scope:   "    +    var.getType());    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
707	[BUG]  [BUGGY]  AssertionFailedError(name,  var.nameNode,   "Unexpected  scope: "  +  var.getType());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,  var.nameNode,   "Unexpected  scope: "  +  var.getType());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,  var.nameNode,   "Unexpected  scope: "  +  var.getType());	  AssertionFailedError(name,       "Unexpected    scope:   "    +    var.getType());    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
708	[BUG]  [BUGGY]  new  AssertionFailedError( "Missing  var: "  +  var.name,  rValue);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError( "Missing  var: "  +  var.name,  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError( "Missing  var: "  +  var.name,  rValue);	  new    AssertionFailedError(   "Missing    var:   "    +    var.name);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
709	[BUG]  [BUGGY]  new  AssertionFailedError( "Missing  var: "  +  var.name,  def);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError( "Missing  var: "  +  var.name,  def);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError( "Missing  var: "  +  var.name,  def);	  new    AssertionFailedError(   "Missing    var:   "    +    var.name);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
710	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  IllegalStateException( " "));  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  IllegalStateException( " "));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  n,  new  IllegalStateException( " "));	  NodeTraversal.traverse(compiler,    rValue,    new    IllegalStateException(   "   "));    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
711	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  new  IllegalStateException( " "));  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  new  IllegalStateException( " "));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  jsScope,  new  IllegalStateException( " "));	  NodeTraversal.traverse(compiler,    rValue,    new    IllegalStateException(   "   "));    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
712	[BUG]  [BUGGY]  new  AssertionFailedError( "Missing  var: "  +  var.name,  jsScope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError( "Missing  var: "  +  var.name,  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError( "Missing  var: "  +  var.name,  jsScope);	  new    AssertionFailedError(   "Missing    var:   "    +    var.name);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
713	[BUG]  [BUGGY]  new  AssertionFailedError(name  + ":  missing  var: "  +  var.name);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError(name  + ":  missing  var: "  +  var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError(name  + ":  missing  var: "  +  var.name);	  new    AssertionFailedError(   "Missing    var:   "    +    var.name);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
714	[BUG]  [BUGGY]  String  name  =  jsScope.getName(name);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  String  name  =  jsScope.getName(name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	String  name  =  jsScope.getName(name);	  String    name    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
715	[BUG]  [BUGGY]  String  name  =  jsScope.getString(rValue);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  String  name  =  jsScope.getString(rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	String  name  =  jsScope.getString(rValue);	  String    name    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
716	[BUG]  [BUGGY]  String  name  =  jsScope.getName(rValue);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  String  name  =  jsScope.getName(rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	String  name  =  jsScope.getName(rValue);	  String    name    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
717	[BUG]  [BUGGY]  String  name  =  jsScope.getVar(name,  var.node);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  String  name  =  jsScope.getVar(name,  var.node);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	String  name  =  jsScope.getVar(name,  var.node);	  String    name    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
718	[BUG]  [BUGGY]  AssertionFailedError  e  =  new  AssertionFailedError( "Unknown  var: "  +  name,  var.scope);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError  e  =  new  AssertionFailedError( "Unknown  var: "  +  name,  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError  e  =  new  AssertionFailedError( "Unknown  var: "  +  name,  var.scope);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name,    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
719	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.scope,  rValue);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.scope,  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.scope,  rValue);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name,    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
720	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.scope,  jsScope);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.scope,  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.scope,  jsScope);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name,    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
721	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + "  unknown  scope: "  +  var.name);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name  + "  unknown  scope: "  +  var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + "  unknown  scope: "  +  var.name);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.name);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
722	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + "Unknown  scope: "  +  var.name);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name  + "Unknown  scope: "  +  var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + "Unknown  scope: "  +  var.name);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.name);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
723	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  new  JsScope());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  new  JsScope());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  jsScope,  new  JsScope());	  NodeTraversal.traverse(compiler,    rValue,    new    JsScope());    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
724	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  varValue,  new  JsScope());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  varValue,  new  JsScope());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  varValue,  new  JsScope());	  NodeTraversal.traverse(compiler,    rValue,    new    JsScope());    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
725	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.toString(),  name);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.toString(),  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.toString(),  name);	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.toString());    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
726	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  name,  def);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  name,  def);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  var,  name,  def);	  NodeTraversal.traverse(compiler,    rValue,    var,    def);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
727	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  def,  rValue);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  def,  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  var,  def,  rValue);	  NodeTraversal.traverse(compiler,    rValue,    var,    def);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
728	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  var,  def);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  var,  def);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  n,  var,  def);	  NodeTraversal.traverse(compiler,    rValue,    var,    def);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
729	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.scope,  var.name);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.scope,  var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.scope,  var.name);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name,    var.name);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
730	[BUG]  [BUGGY]  AssertionFailedError  e  =  new  AssertionFailedError( "Unknown  var: "  +  var.name);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError  e  =  new  AssertionFailedError( "Unknown  var: "  +  var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError  e  =  new  AssertionFailedError( "Unknown  var: "  +  var.name);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    var.name);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
731	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + "  Unknown  var: "  +  var.name);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name  + "  Unknown  var: "  +  var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + "  Unknown  var: "  +  var.name);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    var.name);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
732	[BUG]  [BUGGY]  Definition  def  =  jsScope.getDefinition(varValue);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  jsScope.getDefinition(varValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  jsScope.getDefinition(varValue);	  Definition    def    =    jsScope.getDefinition(rValue);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
733	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + ":  missing  var: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name  + ":  missing  var: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + ":  missing  var: "  +  var.getName());	  throw    new    AssertionFailedError(   "Missing    var:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
734	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name,   "Unexpected  scope: "  +  var.getName(),  jsScope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name,   "Unexpected  scope: "  +  var.getName(),  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name,   "Unexpected  scope: "  +  var.getName(),  jsScope);	  throw    new    AssertionFailedError(name,       "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
735	[BUG]  [BUGGY]  AssertionFailedError(name,   "Unknown  scope: "  +  var.scope,  jsScope);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,   "Unknown  scope: "  +  var.scope,  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,   "Unknown  scope: "  +  var.scope,  jsScope);	  AssertionFailedError(name,       "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
736	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  new  UnsupportedOperationException( " "));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  new  UnsupportedOperationException( " "));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  jsScope,  new  UnsupportedOperationException( " "));	  NodeTraversal.traverse(compiler,    rValue,    new    UnsupportedOperationException(   "   "));    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
737	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.sourceName);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.sourceName);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.sourceName);	  Throwables.throw    new    AssertionFailedError(   "Missing    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
738	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( " "  +  var.getString());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throw  new  IllegalArgumentException( " "  +  var.getString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throw  new  IllegalArgumentException( " "  +  var.getString());	  throw    new    IllegalArgumentException(   "   "    +    var.getString());    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
739	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  var.getPrettyPrinter());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  var.getPrettyPrinter());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  IllegalArgumentException( " "  +  var.getPrettyPrinter());	  throw    new    IllegalArgumentException(   "   "    +    var.getString());    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
740	[BUG]  [BUGGY]  AssertionFailedError(name,  var,   "Unknown  var: "  +  var);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,  var,   "Unknown  var: "  +  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,  var,   "Unknown  var: "  +  var);	  AssertionFailedError(name,       "Unknown    var:   "    +    var);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
741	[BUG]  [BUGGY]  AssertionFailedError(name,  var.name()  + "  unknown  var: "  +  var);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,  var.name()  + "  unknown  var: "  +  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,  var.name()  + "  unknown  var: "  +  var);	  AssertionFailedError(name,       "Unknown    var:   "    +    var);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
742	[BUG]  [BUGGY]  AssertionFailedError(name,  var.getName()  + ",  unknown  var: "  +  var);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,  var.getName()  + ",  unknown  var: "  +  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,  var.getName()  + ",  unknown  var: "  +  var);	  AssertionFailedError(name,       "Unknown    var:   "    +    var);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
743	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + "  cannot  access  var: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name  + "  cannot  access  var: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + "  cannot  access  var: "  +  var.getName());	  throw    new    AssertionFailedError(name    +   "    unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
744	[BUG]  [BUGGY]  Throw  new  JsScopeException( "Unknown  scope: "  +  var.scope);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throw  new  JsScopeException( "Unknown  scope: "  +  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throw  new  JsScopeException( "Unknown  scope: "  +  var.scope);	  throw    new    JsScopeException(   "Unknown    scope:   "    +    rValue);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
745	[BUG]  [BUGGY]  JsScope.reachingDef.put(name,  def);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  JsScope.reachingDef.put(name,  def);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	JsScope.reachingDef.put(name,  def);	  jsScope.reachingDef.put(rValue,    def);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
746	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  jsScope.getClass());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  jsScope.getClass());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unexpected  scope: "  +  jsScope.getClass());	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getClass());    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
747	[BUG]  [BUGGY]  return  new  AssertionFailedError( "Unexpected  scope: "  +  var.getClass());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  return  new  AssertionFailedError( "Unexpected  scope: "  +  var.getClass());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	return  new  AssertionFailedError( "Unexpected  scope: "  +  var.getClass());	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getClass());    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
748	[BUG]  [BUGGY]  Definition  def  =  jsScope.getDefiningDef(var);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  jsScope.getDefiningDef(var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  jsScope.getDefiningDef(var);	  Definition    def    =    def.reachingDef.get(rValue);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
749	[BUG]  [BUGGY]  return  new  AssertionFailedError( "Unknown  scope: "  +  jsScope);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  return  new  AssertionFailedError( "Unknown  scope: "  +  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	return  new  AssertionFailedError( "Unknown  scope: "  +  jsScope);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
750	[BUG]  [BUGGY]  Node  rValue  =  var.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Node  rValue  =  var.removeFirstChild();  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Node  rValue  =  var.removeFirstChild();	  Node    rValue    =    var.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
751	[BUG]  [BUGGY]  Node  rValue  =  var.cloneTree();  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Node  rValue  =  var.cloneTree();  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Node  rValue  =  var.cloneTree();	  Node    rValue    =    var.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
752	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  var.getPrettyPrinter());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  var.getPrettyPrinter());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalArgumentException( " "  +  var.getPrettyPrinter());	  Throwables.throw    new    IllegalArgumentException(   "   "    +    var.getString());    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
753	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  var.getMessage());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  var.getMessage());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalArgumentException( " "  +  var.getMessage());	  Throwables.throw    new    IllegalArgumentException(   "   "    +    var.getString());    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
754	[BUG]  [BUGGY]  AssertionFailedError(name,   "Unknown  scope: "  +  var.getName(),  jsScope);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,   "Unknown  scope: "  +  var.getName(),  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,   "Unknown  scope: "  +  var.getName(),  jsScope);	  AssertionFailedError(name,       "Unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
755	[BUG]  [BUGGY]  AssertionFailedError(name,  var.name,  var.scope:   "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,  var.name,  var.scope:   "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,  var.name,  var.scope:   "  +  var.getName());	  AssertionFailedError(name,       "Unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
756	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(name));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(name));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalStateException( " ".equals(name));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
757	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ")  :  jsScope.getVar(name);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ")  :  jsScope.getVar(name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalStateException( " ")  :  jsScope.getVar(name);	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
758	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalStateException( " ");  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.wrap(new  IllegalStateException( " ");  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.wrap(new  IllegalStateException( " ");	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
759	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  varValue,  new  MockImpl());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  varValue,  new  MockImpl());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  varValue,  new  MockImpl());	  NodeTraversal.traverse(compiler,    rValue,    new    MockImpl());    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
760	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  new  MockImpl());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  new  MockImpl());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  jsScope,  new  MockImpl());	  NodeTraversal.traverse(compiler,    rValue,    new    MockImpl());    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
761	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  new  MockImpl());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  def,  new  MockImpl());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  def,  new  MockImpl());	  NodeTraversal.traverse(compiler,    rValue,    new    MockImpl());    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
762	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + "Unknown  scope: "  +  var.getName(),  jsScope);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name  + "Unknown  scope: "  +  var.getName(),  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + "Unknown  scope: "  +  var.getName(),  jsScope);	  throw    new    AssertionFailedError(name    +   "Unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
763	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(var.getLocalName()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(var.getLocalName()));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalArgumentException( " ").equals(var.getLocalName()));	  Throwables.throw    new    IllegalArgumentException(   "   ").equals(var.getString()));    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
764	[BUG]  [BUGGY]  Throw  new  JsScopeException( "Unknown  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throw  new  JsScopeException( "Unknown  scope: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throw  new  JsScopeException( "Unknown  scope: "  +  var.getName());	  throw    new    JsScopeException(   "Unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
765	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( " "));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( " "));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( " "));	  NodeTraversal.traverse(compiler,    rValue,    new    RuntimeException(   "   "));    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
766	[BUG]  [BUGGY]  DefinitionDef  def  =  jsScope.getDefinitionDef(name,  var);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  DefinitionDef  def  =  jsScope.getDefinitionDef(name,  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	DefinitionDef  def  =  jsScope.getDefinitionDef(name,  var);	  DefinitionDef    def    =    jsScope.getDefinitionDef(name);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
767	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  def,  var.scope);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rValue,  def,  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  rValue,  def,  var.scope);	  NodeTraversal.traverse(compiler,    rValue,    def);    continue;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
768	[BUG]  [BUGGY]  Throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.getName());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.getName());	  throw    new    JsScopeException(   "Unknown    scope:   "    +    jsScope.getName());    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
769	[BUG]  [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.getNamespaceURI());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.getNamespaceURI());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.getNamespaceURI());	  throw    new    JsScopeException(   "Unknown    scope:   "    +    jsScope.getName());    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
770	[BUG]  [BUGGY]  AssertionFailedError(name,  var.getName(),  var.scope);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,  var.getName(),  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,  var.getName(),  var.scope);	  AssertionFailedError(name,       "Missing    var:   "    +    var);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
771	[BUG]  [BUGGY]  AssertionFailedError(name,  var.name()  + ": "  +  var);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError(name,  var.name()  + ": "  +  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError(name,  var.name()  + ": "  +  var);	  AssertionFailedError(name,       "Missing    var:   "    +    var);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
772	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.name());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.name());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.name());	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.name());    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
773	[BUG]  [BUGGY]  return  new  AssertionFailedError( "Unexpected  scope: "  +  var.name());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  return  new  AssertionFailedError( "Unexpected  scope: "  +  var.name());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	return  new  AssertionFailedError( "Unexpected  scope: "  +  var.name());	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.name());    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
774	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name,   "Unexpected  scope: "  +  var.name());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name,   "Unexpected  scope: "  +  var.name());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name,   "Unexpected  scope: "  +  var.name());	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.name());    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
775	[BUG]  [BUGGY]  return  JsScopeException.from(jsScope, "Unknown  scope: "  +  var.scope);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  return  JsScopeException.from(jsScope, "Unknown  scope: "  +  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	return  JsScopeException.from(jsScope, "Unknown  scope: "  +  var.scope);	  throw    new    JsScopeException(   "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
776	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.scope,  jsScope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.scope,  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.scope,  jsScope);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name,    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
777	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.sourceName,  var.scope);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.sourceName,  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.sourceName,  var.scope);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name,    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
778	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.scope,  def);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.scope,  def);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Missing  var: "  +  name,  var.scope,  def);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name,    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
779	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.sourceName);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.sourceName);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.sourceName);	  Throwables.throw    new    AssertionFailedError(   "Unknown    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
780	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.type);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.type);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.type);	  Throwables.throw    new    AssertionFailedError(   "Unknown    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
781	[BUG]  [BUGGY]  escape(definition,  var.scope);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  escape(definition,  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	escape(definition,  var.scope);	  escaped.add(definition);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
782	[BUG]  [BUGGY]  escaped.add(definition,  var.scope);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  escaped.add(definition,  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	escaped.add(definition,  var.scope);	  escaped.add(definition);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
783	[BUG]  [BUGGY]  escape(rValue,  var.scope);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  escape(rValue,  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	escape(rValue,  var.scope);	  escaped.add(definition);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
784	[BUG]  [BUGGY]  escaped.add(definition,  var);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  escaped.add(definition,  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	escaped.add(definition,  var);	  escaped.add(definition);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
785	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException(name.equals(var.getString()));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException(name.equals(var.getString()));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalArgumentException(name.equals(var.getString()));	  Throwables.throw    new    IllegalArgumentException(   "   ".equals(var.getString()));    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
786	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + "Unknown  scope: "  +  var.scope,  jsScope);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name  + "Unknown  scope: "  +  var.scope,  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + "Unknown  scope: "  +  var.scope,  jsScope);	  throw    new    AssertionFailedError(name    +   "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
787	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + ".  Unknown  scope: "  +  var.scope);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name  + ".  Unknown  scope: "  +  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + ".  Unknown  scope: "  +  var.scope);	  throw    new    AssertionFailedError(name    +   "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
788	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.getLocalName());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.getLocalName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.getLocalName());	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getLocalName());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
789	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name,   "Unexpected  scope: "  +  var.getLocalName());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name,   "Unexpected  scope: "  +  var.getLocalName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name,   "Unexpected  scope: "  +  var.getLocalName());	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getLocalName());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
790	[BUG]  [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError  t  =  new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.getName());	  AssertionFailedError    t    =    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
791	[BUG]  [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(name  + "  expected  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(name  + "  expected  scope: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError  t  =  new  AssertionFailedError(name  + "  expected  scope: "  +  var.getName());	  AssertionFailedError    t    =    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
792	[BUG]  [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(name  + "  declared  in  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(name  + "  declared  in  scope: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError  t  =  new  AssertionFailedError(name  + "  declared  in  scope: "  +  var.getName());	  AssertionFailedError    t    =    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
793	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.sourceName,  rValue);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.sourceName,  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.sourceName,  rValue);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name,    rValue);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
794	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  cfgNode,  rValue);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  cfgNode,  rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Missing  var: "  +  name,  cfgNode,  rValue);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name,    rValue);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
795	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.getName(),  jsScope);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.getName(),  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.getName(),  jsScope);	  throw    new    AssertionFailedError(name    +   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
796	[BUG]  [BUGGY]  return  new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  return  new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	return  new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.getName());	  throw    new    AssertionFailedError(name    +   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
797	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  varValue,  this);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  varValue,  this);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  varValue,  this);	  NodeTraversal.traverse(compiler,    rValue,    this);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
798	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  n,  this);	  NodeTraversal.traverse(compiler,    rValue,    this);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
799	[BUG]  [BUGGY]  new  AssertionFailedError( "Unknown  var: "  +  name,  var.getName());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError( "Unknown  var: "  +  name,  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError( "Unknown  var: "  +  name,  var.getName());	  new    AssertionFailedError(   "Unknown    var:   "    +    name,    rValue);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
800	[BUG]  [BUGGY]  return  new  AssertionFailedError( "Unexpected  type: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  return  new  AssertionFailedError( "Unexpected  type: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	return  new  AssertionFailedError( "Unexpected  type: "  +  var.getName());	  throw    new    AssertionFailedError(   "Unexpected    type:   "    +    var.getType());    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
801	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  type: "  +  var.getClass());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unexpected  type: "  +  var.getClass());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unexpected  type: "  +  var.getClass());	  throw    new    AssertionFailedError(   "Unexpected    type:   "    +    var.getType());    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
802	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + "Unexpected  type: "  +  var.getType());  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name  + "Unexpected  type: "  +  var.getType());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + "Unexpected  type: "  +  var.getType());	  throw    new    AssertionFailedError(   "Unexpected    type:   "    +    var.getType());    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
803	[BUG]  [BUGGY]  throw  new  JsScopeException( "JsScope  exception: "  +  name,  var);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  JsScopeException( "JsScope  exception: "  +  name,  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  JsScopeException( "JsScope  exception: "  +  name,  var);	  throw    new    JsScopeException(   "JsScope    exception:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
804	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  name: "  +  name  + "  for  scope: "  +  jsScope);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  name: "  +  name  + "  for  scope: "  +  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  name: "  +  name  + "  for  scope: "  +  jsScope);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name    +   "    for    scope:   "    +    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
805	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  jsScope,  var.scope);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  jsScope,  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  var: "  +  name,  jsScope,  var.scope);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
806	[BUG]  [BUGGY]  return  new  AssertionFailedError( "Unknown  var: "  +  name,  jsScope);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  return  new  AssertionFailedError( "Unknown  var: "  +  name,  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	return  new  AssertionFailedError( "Unknown  var: "  +  name,  jsScope);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
807	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  name,  this);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  name,  this);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  var,  name,  this);	  NodeTraversal.traverse(compiler,    rValue,    var,    this);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
808	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  def,  this);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  var,  def,  this);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  var,  def,  this);	  NodeTraversal.traverse(compiler,    rValue,    var,    this);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
809	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  var);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  n,  var);	  NodeTraversal.traverse(compiler,    rValue,    var);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
810	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  var);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  jsScope,  var);	  NodeTraversal.traverse(compiler,    rValue,    var);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
811	[BUG]  [BUGGY]  JsScopeException  t  =  new  JsScopeException( "JsScope  exception: ");  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  JsScopeException  t  =  new  JsScopeException( "JsScope  exception: ");  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	JsScopeException  t  =  new  JsScopeException( "JsScope  exception: ");	  JsScopeException    t    =    new    JsScopeException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
812	[BUG]  [BUGGY]  JsScopeException  t  =  new  JsScopeException( "Unable  to  find  a  var: "  +  name);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  JsScopeException  t  =  new  JsScopeException( "Unable  to  find  a  var: "  +  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	JsScopeException  t  =  new  JsScopeException( "Unable  to  find  a  var: "  +  name);	  JsScopeException    t    =    new    JsScopeException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
813	[BUG]  [BUGGY]  JsScopeException  t  =  new  JsScopeException( "Unable  to  parse  var: ");  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  JsScopeException  t  =  new  JsScopeException( "Unable  to  parse  var: ");  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	JsScopeException  t  =  new  JsScopeException( "Unable  to  parse  var: ");	  JsScopeException    t    =    new    JsScopeException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
814	[BUG]  [BUGGY]  Throwables.throw  new  UnsupportedOperationException( "The  ' "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  UnsupportedOperationException( "The  ' "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  UnsupportedOperationException( "The  ' "  +  var.getName());	  Throwables.throw    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
815	[BUG]  [BUGGY]  Throw  new  JsScopeException( "Unknown  scope: "  +  var.toString());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throw  new  JsScopeException( "Unknown  scope: "  +  var.toString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throw  new  JsScopeException( "Unknown  scope: "  +  var.toString());	  throw    new    JsScopeException(   "Unknown    scope:   "    +    rValue.toString());    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
816	[BUG]  [BUGGY]  new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError(name  + "Unexpected  scope: "  +  var.getName());	  new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
817	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  +  var.getType(),   "Unexpected  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name  +  var.getType(),   "Unexpected  scope: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  +  var.getType(),   "Unexpected  scope: "  +  var.getName());	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getType(),    name);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
818	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getType(),  name,  cfgNode);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getType(),  name,  cfgNode);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unexpected  scope: "  +  var.getType(),  name,  cfgNode);	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getType(),    name);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
819	[BUG]  [BUGGY]  new  AssertionFailedError( "Unknown  var: "  +  name,  var.sourceName);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError( "Unknown  var: "  +  name,  var.sourceName);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError( "Unknown  var: "  +  name,  var.sourceName);	  new    AssertionFailedError(   "Unknown    var:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
820	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  IllegalArgumentException( " "));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  IllegalArgumentException( " "));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  n,  new  IllegalArgumentException( " "));	  NodeTraversal.traverse(compiler,    rValue,    new    IllegalArgumentException(   "   "));    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
821	[BUG]  [BUGGY]  Throwables.throw  new  JsScopeException( "Unknown  scope: ");  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  JsScopeException( "Unknown  scope: ");  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  JsScopeException( "Unknown  scope: ");	  Throwables.throw    new    JsScopeException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
822	[BUG]  [BUGGY]  Definition  <  Object>  def  =  jsScope.getVar(name,  var.node);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  <  Object>  def  =  jsScope.getVar(name,  var.node);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  <  Object>  def  =  jsScope.getVar(name,  var.node);	  Definition    <    Object>    def    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
823	[BUG]  [BUGGY]  Definition  <  Object>  def  =  jsScope.getDefinitionsReferencedDefinition(rValue);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  <  Object>  def  =  jsScope.getDefinitionsReferencedDefinition(rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  <  Object>  def  =  jsScope.getDefinitionsReferencedDefinition(rValue);	  Definition    <    Object>    def    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
824	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + "  unknown  scope: "  +  var.name());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name  + "  unknown  scope: "  +  var.name());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + "  unknown  scope: "  +  var.name());	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.name());    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
825	[BUG]  [BUGGY]  return  new  AssertionFailedError( "Unknown  scope: "  +  var.name());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  return  new  AssertionFailedError( "Unknown  scope: "  +  var.name());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	return  new  AssertionFailedError( "Unknown  scope: "  +  var.name());	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.name());    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
826	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + "Unknown  scope: "  +  var.name());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name  + "Unknown  scope: "  +  var.name());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + "Unknown  scope: "  +  var.name());	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.name());    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
827	[BUG]  [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.getVar(name),  var.scope);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.getVar(name),  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.getVar(name),  var.scope);	  throw    new    JsScopeException(   "Unknown    scope:   "    +    jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
828	[BUG]  [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.getVar(name).toString());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.getVar(name).toString());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.getVar(name).toString());	  throw    new    JsScopeException(   "Unknown    scope:   "    +    jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
829	[BUG]  [BUGGY]  Throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.getVar(name));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.getVar(name));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throw  new  JsScopeException( "Unknown  scope: "  +  jsScope.getVar(name));	  throw    new    JsScopeException(   "Unknown    scope:   "    +    jsScope.getVar(name));    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
830	[BUG]  [BUGGY]  DefinitionDefinition  def  =  jsScope.getDefinitions(name);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  DefinitionDefinition  def  =  jsScope.getDefinitions(name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	DefinitionDefinition  def  =  jsScope.getDefinitions(name);	  DefinitionDefinition    def    =    def.getDefinitions();    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
831	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  jsScope,  cfgNode);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  jsScope,  cfgNode);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Missing  var: "  +  name,  jsScope,  cfgNode);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
832	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  jsScope,  var.sourceName);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Missing  var: "  +  name,  jsScope,  var.sourceName);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Missing  var: "  +  name,  jsScope,  var.sourceName);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    name,    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
833	[BUG]  [BUGGY]  Definition  def  =  vs.getDefinitions();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  vs.getDefinitions();  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  vs.getDefinitions();	  Definition    def    =    def.getDefinitions();    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
834	[BUG]  [BUGGY]  return  new  AssertionFailedError(name  + "Unknown  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  return  new  AssertionFailedError(name  + "Unknown  scope: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	return  new  AssertionFailedError(name  + "Unknown  scope: "  +  var.getName());	  return    new    AssertionFailedError(   "Unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
835	[BUG]  [BUGGY]  return  new  AssertionFailedError(name);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  return  new  AssertionFailedError(name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	return  new  AssertionFailedError(name);	  return    new    AssertionFailedError(   "Unknown    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
836	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(name));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(name));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(name));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
837	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.name,  def);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.name,  def);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  var: "  +  name,  var.name,  def);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name,    var.name);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
838	[BUG]  [BUGGY]  AssertionFailedError  e  =  new  AssertionFailedError( "Unknown  var: "  +  name,  var.name);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  AssertionFailedError  e  =  new  AssertionFailedError( "Unknown  var: "  +  name,  var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	AssertionFailedError  e  =  new  AssertionFailedError( "Unknown  var: "  +  name,  var.name);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name,    var.name);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
839	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  rValue,  def);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  rValue,  def);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  jsScope,  rValue,  def);	  NodeTraversal.traverse(compiler,    rValue,    def);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
840	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(var.getLocalName());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(var.getLocalName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throwables.throw  new  IllegalArgumentException( " ").equals(var.getLocalName());	  Throwables.throw    new    IllegalArgumentException(   "   ").equals(var.getString());    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
841	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  name: "  +  name  + "  in  scope: "  +  jsScope);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  name: "  +  name  + "  in  scope: "  +  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  name: "  +  name  + "  in  scope: "  +  jsScope);	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    name    +   "    in    scope:   "    +    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
842	[BUG]  [BUGGY]  Throw  new  JsScopeException( "Unknown  scope: "  +  jsScope);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throw  new  JsScopeException( "Unknown  scope: "  +  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throw  new  JsScopeException( "Unknown  scope: "  +  jsScope);	  throw    new    JsScopeException(   "Unknown    scope:   "    +    jsScope);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
843	[BUG]  [BUGGY]  Definition  rValue  =  jsScope.getVar(name).toString();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  rValue  =  jsScope.getVar(name).toString();  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  rValue  =  jsScope.getVar(name).toString();	  Definition    rValue    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
844	[BUG]  [BUGGY]  Definition  rValue  =  jsScope.getVar(name,  var.sourceName);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  rValue  =  jsScope.getVar(name,  var.sourceName);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  rValue  =  jsScope.getVar(name,  var.sourceName);	  Definition    rValue    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
845	[BUG]  [BUGGY]  return  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName(),  jsScope);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  return  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName(),  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	return  new  AssertionFailedError( "Unexpected  scope: "  +  var.getName(),  jsScope);	  return    new    AssertionFailedError(   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
846	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Unexpected  scope: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Throw  new  IllegalArgumentException( "Unexpected  scope: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Throw  new  IllegalArgumentException( "Unexpected  scope: "  +  var.getName());	  throw    new    IllegalArgumentException(   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
847	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Unexpected  scope: "  +  var.scope.getName());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  IllegalArgumentException( "Unexpected  scope: "  +  var.scope.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  IllegalArgumentException( "Unexpected  scope: "  +  var.scope.getName());	  throw    new    IllegalArgumentException(   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
848	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Unexpected  scope: "  +  var.name);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  IllegalArgumentException( "Unexpected  scope: "  +  var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  IllegalArgumentException( "Unexpected  scope: "  +  var.name);	  throw    new    IllegalArgumentException(   "Unexpected    scope:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
849	[BUG]  [BUGGY]  new  AssertionFailedError(name  + "Unknown  scope: "  +  var.scope);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError(name  + "Unknown  scope: "  +  var.scope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError(name  + "Unknown  scope: "  +  var.scope);	  new    AssertionFailedError(   "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
850	[BUG]  [BUGGY]  new  AssertionFailedError(name);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  new  AssertionFailedError(name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	new  AssertionFailedError(name);	  new    AssertionFailedError(   "Unknown    scope:   "    +    var.scope);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
851	[BUG]  [BUGGY]  Definition  def  =  jsScope.getDefinitions(varName);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  jsScope.getDefinitions(varName);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  jsScope.getDefinitions(varName);	  Definition    def    =    jsScope.getDefinitions(name);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
852	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  var.name,  jsScope);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  var.name,  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  scope: "  +  var.name,  jsScope);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.scope,    name);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
853	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  var.scope,  name,  jsScope);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unknown  scope: "  +  var.scope,  name,  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unknown  scope: "  +  var.scope,  name,  jsScope);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.scope,    name);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
854	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + "Unknown  scope: "  +  var.scope,  name);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name  + "Unknown  scope: "  +  var.scope,  name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + "Unknown  scope: "  +  var.scope,  name);	  throw    new    AssertionFailedError(   "Unknown    scope:   "    +    var.scope,    name);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
855	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  jsScope);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError( "Unexpected  scope: "  +  jsScope);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError( "Unexpected  scope: "  +  jsScope);	  throw    new    AssertionFailedError(   "Unexpected    scope:   "    +    name);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
856	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  varValue,  new  Reporter());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  varValue,  new  Reporter());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  varValue,  new  Reporter());	  NodeTraversal.traverse(compiler,    rValue,    new    Reporter());    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
857	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  new  Reporter());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  jsScope,  new  Reporter());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  jsScope,  new  Reporter());	  NodeTraversal.traverse(compiler,    rValue,    new    Reporter());    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
858	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  name.trim().equals(var.getString()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  name.trim().equals(var.getString()));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  IllegalArgumentException( " "  +  name.trim().equals(var.getString()));	  throw    new    IllegalArgumentException(   "   "    +    name.equals(var.getString()));    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
859	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  name.substring(var.getString()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  name.substring(var.getString()));  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  IllegalArgumentException( " "  +  name.substring(var.getString()));	  throw    new    IllegalArgumentException(   "   "    +    name.equals(var.getString()));    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
860	[BUG]  [BUGGY]  Node  rValue  =  jsScope.getVar(name).toString();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Node  rValue  =  jsScope.getVar(name).toString();  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Node  rValue  =  jsScope.getVar(name).toString();	  Node    rValue    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
861	[BUG]  [BUGGY]  Node  rValue  =  jsScope.getOwnScopeName(name);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Node  rValue  =  jsScope.getOwnScopeName(name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Node  rValue  =  jsScope.getOwnScopeName(name);	  Node    rValue    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
862	[BUG]  [BUGGY]  Node  rValue  =  jsScope.getVar(name,  var);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Node  rValue  =  jsScope.getVar(name,  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Node  rValue  =  jsScope.getVar(name,  var);	  Node    rValue    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
863	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + "  Unknown  var: "  +  var.getName());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name  + "  Unknown  var: "  +  var.getName());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + "  Unknown  var: "  +  var.getName());	  throw    new    AssertionFailedError(   "Unknown    var:   "    +    var.getName());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
864	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  varValue,  new  MockitoReachingDef());  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  varValue,  new  MockitoReachingDef());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  varValue,  new  MockitoReachingDef());	  NodeTraversal.traverse(compiler,    rValue,    new    MockitoReachingDef());    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
865	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  new  MockitoReachingDef());  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  NodeTraversal.traverse(compiler,  def,  new  MockitoReachingDef());  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	NodeTraversal.traverse(compiler,  def,  new  MockitoReachingDef());	  NodeTraversal.traverse(compiler,    rValue,    new    MockitoReachingDef());    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
866	[BUG]  [BUGGY]  Definition  def  =  jsScope.getVar(name,  var);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  jsScope.getVar(name,  var);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  jsScope.getVar(name,  var);	  Definition    def    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
867	[BUG]  [BUGGY]  Definition  def  =  jsScope.getDeclaration(rValue);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  jsScope.getDeclaration(rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  jsScope.getDeclaration(rValue);	  Definition    def    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
868	[BUG]  [BUGGY]  Definition  def  =  jsScope.getDeclaringClass(rValue);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  Definition  def  =  jsScope.getDeclaringClass(rValue);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	Definition  def  =  jsScope.getDeclaringClass(rValue);	  Definition    def    =    jsScope.getVar(name);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
869	[BUG]  [BUGGY]  throw  new  AssertionFailedError(name  + ":  missing  var: "  +  var.name);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      @Nullable  Node  rValue,  MustDef  def)  {  Var  var  =  jsScope.getVar(name);    if  (var  ==  null  ||  var.scope  !=  jsScope)  {      [BUGGY]  throw  new  AssertionFailedError(name  + ":  missing  var: "  +  var.name);  [BUGGY]      }  for  (Var  other  :  def.reachingDef.keySet())  {  Definition  otherDef  =  def.reachingDef.get(other);  if  (otherDef  ==  null)  {  continue;  }  if  (otherDef.depends.contains(var))  {  def.reachingDef.put(other,  null);  }  [CLASS]  MustBeReachingVariableDef  Definition  MustDef  MustDefJoin  1  [METHOD]  addToDefIfLocal  [RETURN_TYPE]  void  String  name  Node  node  Node  rValue  MustDef  def  [VARIABLES]  AbstractCompiler  compiler  Set  depends  escaped  boolean  Scope  jsScope  Var  other  var  Node  aNode  c  cfgNode  lhs  n  name  node  obj  rValue  rhs  target  Definition  definition  otherDef  String  name  Map  reachingDef  resultMap  MustDef  def  	projects/Closure30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java	0.2581988897471611	333	333	3	replace	throw  new  AssertionFailedError(name  + ":  missing  var: "  +  var.name);	  throw    new    AssertionFailedError(   "Missing    var:   "    +    var.name);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
