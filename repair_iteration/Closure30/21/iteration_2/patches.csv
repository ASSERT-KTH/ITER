bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()	  NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
2	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()	  NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
3	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()	  NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
4	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  c.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  c.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()	  NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
5	[BUG]  [BUGGY]  AssertionFailedError.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  AssertionFailedError.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	AssertionFailedError.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()	  NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
6	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getNext());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getNext());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot().getNext());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()	  NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
7	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  cfg.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  cfg.getFirstChild());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  cfg.getFirstChild());	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot(),    c.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
8	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  cfg.getLastChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  cfg.getLastChild());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  cfg.getLastChild());	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot(),    c.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
9	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot(),  t.getLastChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot(),  t.getLastChild());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot(),  t.getLastChild());	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot(),    c.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
10	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(cfg.getScopeRoot(),  c.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(cfg.getScopeRoot(),  c.getFirstChild());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(cfg.getScopeRoot(),  c.getFirstChild());	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot(),    c.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
11	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot(),  t.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot(),  t.getFirstChild());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot(),  t.getFirstChild());	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot(),    c.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
12	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot(),    c.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
13	[BUG]  [BUGGY]  overcomingUses.addChildToFront(c);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  overcomingUses.addChildToFront(c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	overcomingUses.addChildToFront(c);	  if(c.canInline())    {    for(Candidate    c    :    candidates)    {    reachingUses.addChildToFront(c);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
14	[BUG]  [BUGGY]  battlingUses.addChildToFront(c);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  battlingUses.addChildToFront(c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	battlingUses.addChildToFront(c);	  if(c.canInline())    {    for(Candidate    c    :    candidates)    {    reachingUses.addChildToFront(c);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
15	[BUG]  [BUGGY]  vingUses.addChildToFront(c);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  vingUses.addChildToFront(c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	vingUses.addChildToFront(c);	  if(c.canInline())    {    for(Candidate    c    :    candidates)    {    reachingUses.addChildToFront(c);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
16	[BUG]  [BUGGY]  ingUses.addChildToFront(c);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  ingUses.addChildToFront(c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	ingUses.addChildToFront(c);	  if(c.canInline())    {    for(Candidate    c    :    candidates)    {    reachingUses.addChildToFront(c);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
17	[BUG]  [BUGGY]  ttingUses.addChildToFront(c);  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  ttingUses.addChildToFront(c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	ttingUses.addChildToFront(c);	  if(c.canInline())    {    for(Candidate    c    :    candidates)    {    reachingUses.addChildToFront(c);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
18	[BUG]  [BUGGY]  Context.checkState(c.canInline());  [CE]  illegal  start  of  expression  [FE]                                            AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  Context.checkState(c.canInline());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	Context.checkState(c.canInline());	  if(c.canInline())    {    for(Candidate    c    :    candidates)    {    reachingUses.addChildToFront(c);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
19	[BUG]  [BUGGY]  Context.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                                              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  Context.reportCodeChange();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	Context.reportCodeChange();	  if(c.canInline())    {    for(Candidate    c    :    candidates)    {    reachingUses.addChildToFront(c);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
20	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.addAll(c);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.addAll(c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.addAll(c);	  final    NodeTraversal.traverse(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses.addAll(c);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
21	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  reachingUses.addAll(c);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  reachingUses.addAll(c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  reachingUses.addAll(c);	  final    NodeTraversal.traverse(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses.addAll(c);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
22	[BUG]  [BUGGY]  reachingUses.addAll(t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  reachingUses.addAll(t.getScopeRoot().getLastChild());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	reachingUses.addAll(t.getScopeRoot().getLastChild());	  final    NodeTraversal.traverse(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses.addAll(c);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
23	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  c).traverse(t.getScopeRoot().getLastChild());  reachingUses.addAll(c);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  final  NodeTraversal.traverse(compiler,  c).traverse(t.getScopeRoot().getLastChild());  reachingUses.addAll(c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	final  NodeTraversal.traverse(compiler,  c).traverse(t.getScopeRoot().getLastChild());  reachingUses.addAll(c);	  final    NodeTraversal.traverse(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses.addAll(c);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
24	[BUG]  [BUGGY]  FindingUses.traverse(t.getScopeRoot().getLastChild());  reachingUses.addAll(c);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  FindingUses.traverse(t.getScopeRoot().getLastChild());  reachingUses.addAll(c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	FindingUses.traverse(t.getScopeRoot().getLastChild());  reachingUses.addAll(c);	  final    NodeTraversal.traverse(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses.addAll(c);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
25	[BUG]  [BUGGY]  Context.checkState(c.canInline()  ||  c.canInline())  {  for(Candidate  c  :  c.getCurrentScopes())  {  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  Context.checkState(c.canInline()  ||  c.canInline())  {  for(Candidate  c  :  c.getCurrentScopes())  {  reachingUses.analyze();  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	Context.checkState(c.canInline()  ||  c.canInline())  {  for(Candidate  c  :  c.getCurrentScopes())  {  reachingUses.analyze();  }	  if(c.canInline())    {    for(Candidate    c    :    c.getCurrentScopes())    {    reachingUses.analyze();    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
26	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.getScopes())  {  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.getScopes())  {  reachingUses.analyze();  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  c.getScopes())  {  reachingUses.analyze();  }	  if(c.canInline())    {    for(Candidate    c    :    c.getCurrentScopes())    {    reachingUses.analyze();    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
27	[BUG]  [BUGGY]  Context.checkState(c.canInline())  {  for(Candidate  c  :  c.getCurrentScopes())  {  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  Context.checkState(c.canInline())  {  for(Candidate  c  :  c.getCurrentScopes())  {  reachingUses.analyze();  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	Context.checkState(c.canInline())  {  for(Candidate  c  :  c.getCurrentScopes())  {  reachingUses.analyze();  }	  if(c.canInline())    {    for(Candidate    c    :    c.getCurrentScopes())    {    reachingUses.analyze();    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
28	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  cfg.getCurrentScopes())  {  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  cfg.getCurrentScopes())  {  reachingUses.analyze();  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  cfg.getCurrentScopes())  {  reachingUses.analyze();  }	  if(c.canInline())    {    for(Candidate    c    :    c.getCurrentScopes())    {    reachingUses.analyze();    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
29	[BUG]  [BUGGY]  if(c.canInline())  {  For(Candidate  c  :  c.getCurrentScopes())  {  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  For(Candidate  c  :  c.getCurrentScopes())  {  reachingUses.analyze();  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  For(Candidate  c  :  c.getCurrentScopes())  {  reachingUses.analyze();  }	  if(c.canInline())    {    for(Candidate    c    :    c.getCurrentScopes())    {    reachingUses.analyze();    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
30	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.getCurrentScopes())  {  reachUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.getCurrentScopes())  {  reachUses.analyze();  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  c.getCurrentScopes())  {  reachUses.analyze();  }	  if(c.canInline())    {    for(Candidate    c    :    c.getCurrentScopes())    {    reachingUses.analyze();    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
31	[BUG]  [BUGGY]  reachingUses.removeAll(c);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  reachingUses.removeAll(c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	reachingUses.removeAll(c);	  new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses.removeAll(c);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
32	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.removeAll(c);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.removeAll(c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.removeAll(c);	  new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses.removeAll(c);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
33	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  reachingUses.removeAll(c);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  reachingUses.removeAll(c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  reachingUses.removeAll(c);	  new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses.removeAll(c);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
34	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getLastChild());  reachingUses.removeAll(c);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getLastChild());  reachingUses.removeAll(c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getLastChild());  reachingUses.removeAll(c);	  new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses.removeAll(c);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
35	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getNext());  reachingUses.removeAll(c);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getNext());  reachingUses.removeAll(c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getNext());  reachingUses.removeAll(c);	  new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses.removeAll(c);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
36	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope	  new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
37	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope	  new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
38	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope	  new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
39	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getNext());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getNext());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getNext());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope	  new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
40	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope	  new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
41	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope	  new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
42	[BUG]  [BUGGY]  overcomingUses.add(c.getVarName());  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  overcomingUses.add(c.getVarName());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	overcomingUses.add(c.getVarName());	  if(c.canInline())    {    for(Candidate    c    :    c.getVars())    {    reachingUses.add(c.getVarName());    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
43	[BUG]  [BUGGY]  vingUses.add(c.getVarName());  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  vingUses.add(c.getVarName());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	vingUses.add(c.getVarName());	  if(c.canInline())    {    for(Candidate    c    :    c.getVars())    {    reachingUses.add(c.getVarName());    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
44	[BUG]  [BUGGY]  ajungiUses.add(c.getVarName());  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  ajungiUses.add(c.getVarName());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	ajungiUses.add(c.getVarName());	  if(c.canInline())    {    for(Candidate    c    :    c.getVars())    {    reachingUses.add(c.getVarName());    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
45	[BUG]  [BUGGY]  ingUses.add(c.getVarName());  [CE]  illegal  start  of  expression  [FE]                                            AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  ingUses.add(c.getVarName());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	ingUses.add(c.getVarName());	  if(c.canInline())    {    for(Candidate    c    :    c.getVars())    {    reachingUses.add(c.getVarName());    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
46	[BUG]  [BUGGY]  battlingUses.add(c.getVarName());  [CE]  illegal  start  of  expression  [FE]                                              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  battlingUses.add(c.getVarName());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	battlingUses.add(c.getVarName());	  if(c.canInline())    {    for(Candidate    c    :    c.getVars())    {    reachingUses.add(c.getVarName());    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
47	[BUG]  [BUGGY]  vantUses.add(c.getVarName());  [CE]  illegal  start  of  expression  [FE]                                                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  vantUses.add(c.getVarName());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	vantUses.add(c.getVarName());	  if(c.canInline())    {    for(Candidate    c    :    c.getVars())    {    reachingUses.add(c.getVarName());    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
48	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.analyze();	  final    NodeTraversal.traverse(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
49	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  reachingUses.analyze();	  final    NodeTraversal.traverse(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
50	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  reachingUses.analyze();	  final    NodeTraversal.traverse(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
51	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.analyze();	  final    NodeTraversal.traverse(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
52	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();	  final    NodeTraversal.traverse(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
53	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  reachingUses).traverse(c.getScopeRoot().getLastChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  final  NodeTraversal.traverse(compiler,  reachingUses).traverse(c.getScopeRoot().getLastChild());  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	final  NodeTraversal.traverse(compiler,  reachingUses).traverse(c.getScopeRoot().getLastChild());  reachingUses.analyze();	  final    NodeTraversal.traverse(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
54	[BUG]  [BUGGY]  if(c.canInline())  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  reachingUses.analyze();  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  reachingUses.analyze();  }	  if(c.canInline())    {    new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(    t.getScopeRoot().getLastChild());    reachingUses.analyze();    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
55	[BUG]  [BUGGY]  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	reachingUses.analyze();	  final    NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
56	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getFirstChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getFirstChild());  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getFirstChild());  reachingUses.analyze();	  final    NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
57	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  final  NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild());  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	final  NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild());  reachingUses.analyze();	  final    NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
58	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild(),  reachingUses);  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild(),  reachingUses);  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild(),  reachingUses);  reachingUses.analyze();	  final    NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
59	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild(),  reachingUses);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild(),  reachingUses);	  final    NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
60	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getNext());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getNext());  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getNext());  reachingUses.analyze();	  final    NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
61	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild(),  reachingUses);  reachingUses.addAll(c);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild(),  reachingUses);  reachingUses.addAll(c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild(),  reachingUses);  reachingUses.addAll(c);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getFirstChild());    reachingUses.addAll(c);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
62	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses.traverse(t.getScopeRoot().getLastChild()));  reachingUses.addAll(c);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses.traverse(t.getScopeRoot().getLastChild()));  reachingUses.addAll(c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses.traverse(t.getScopeRoot().getLastChild()));  reachingUses.addAll(c);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getFirstChild());    reachingUses.addAll(c);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
63	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getLastChild(),  c);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getLastChild(),  c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getLastChild(),  c);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot(),    c.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
64	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getChildCount());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getChildCount());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getChildCount());	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot(),    c.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
65	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.	  if(    reachingUses!=    null)    {    new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
66	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.	  if(    reachingUses!=    null)    {    new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
67	[BUG]  [BUGGY]  vingUses  =  new  MaybeReachingVariableUse(cfg,  t.  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  vingUses  =  new  MaybeReachingVariableUse(cfg,  t.  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	vingUses  =  new  MaybeReachingVariableUse(cfg,  t.	  if(    reachingUses!=    null)    {    new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
68	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t	  if(    reachingUses!=    null)    {    new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
69	[BUG]  [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	ingUses  =  new  MaybeReachingVariableUse(cfg,  t.	  if(    reachingUses!=    null)    {    new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
70	[BUG]  [BUGGY]  if(c.canInline())  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(c.getScopeRoot().getFirstChild());  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(c.getScopeRoot().getFirstChild());  reachingUses.analyze();  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(c.getScopeRoot().getFirstChild());  reachingUses.analyze();  }	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(    c.getScopeRoot().getFirstChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
71	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg.getScopeRoot().getFirstChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg.getScopeRoot().getFirstChild());  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg.getScopeRoot().getFirstChild());  reachingUses.analyze();	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(    c.getScopeRoot().getFirstChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
72	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(c.getScopeRoot().getFirstChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(c.getScopeRoot().getFirstChild());  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(c.getScopeRoot().getFirstChild());  reachingUses.analyze();	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(    c.getScopeRoot().getFirstChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
73	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  reachingDef);  reachingUses.addAll(c);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  reachingDef);  reachingUses.addAll(c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  reachingDef);  reachingUses.addAll(c);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild(),    reachingUses);    reachingUses.addAll(c);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
74	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t	  new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
75	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t	  new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
76	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getNext());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getNext());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getNext());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t	  new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
77	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t	  new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
78	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
79	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  compiler);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  compiler);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  compiler);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
80	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  parser);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  parser);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  parser);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
81	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
82	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
83	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
84	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defCfgNode);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defCfgNode);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defCfgNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
85	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  c.getLastChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  c.getLastChild());  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  c.getLastChild());  reachingUses.analyze();	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(    t.getScopeRoot().getFirstChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
86	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  reachingUses.analyze();	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(    t.getScopeRoot().getFirstChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
87	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getNext(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getNext(),  reachingUses);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getNext(),  reachingUses);	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
88	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(s.getScopeRoot().getLastChild(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(s.getScopeRoot().getLastChild(),  reachingUses);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(s.getScopeRoot().getLastChild(),  reachingUses);	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
89	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  cfg).traverse(t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  cfg).traverse(t.getScopeRoot().getFirstChild());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  cfg).traverse(t.getScopeRoot().getFirstChild());	  new    NodeTraversal(compiler,    cfg).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
90	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  cfg).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  cfg).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  cfg).traverse(t.getScopeRoot().getLastChild(),  reachingUses);	  new    NodeTraversal(compiler,    cfg).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
91	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  compiler).traverse(  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  compiler).traverse(  t.getScopeRoot().getLastChild());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  compiler).traverse(  t.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    cfg).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
92	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getFirstChild(),  t);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getFirstChild(),  t);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getFirstChild(),  t);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getFirstChild(),    c);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
93	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild(),  cfg);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild(),  cfg);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild(),  cfg);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getFirstChild(),    c);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
94	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getLastChild(),  t);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getLastChild(),  t);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getLastChild(),  t);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getFirstChild(),    c);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
95	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getLastChild());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
96	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
97	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  reachingUses.analyze();	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
98	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getFirstChild());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
99	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  numUseWithinUseCfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  numUseWithinUseCfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  numUseWithinUseCfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
100	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.analyze();	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
101	[BUG]  [BUGGY]  AssertionFailedError.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  AssertionFailedError.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	AssertionFailedError.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
102	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()	  new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getFirstChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
103	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()	  new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getFirstChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
104	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getFirstChild(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getFirstChild(),  reachingUses);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getFirstChild(),  reachingUses);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getFirstChild(),    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
105	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses.traverse(t.getScopeRoot().getLastChild(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses.traverse(t.getScopeRoot().getLastChild(),  reachingUses);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses.traverse(t.getScopeRoot().getLastChild(),  reachingUses);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getFirstChild(),    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
106	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.	  new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
107	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.	  new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
108	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getNext());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getNext());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getNext());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.	  new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
109	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.	  new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
110	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.	  new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
111	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);	  final    NodeTraversal.traverse(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
112	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),	  final    NodeTraversal.traverse(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
113	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);	  final    NodeTraversal.traverse(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
114	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);	  final    NodeTraversal.traverse(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
115	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);	  final    NodeTraversal.traverse(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
116	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getfirstChild(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getfirstChild(),  reachingUses);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getfirstChild(),  reachingUses);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getfirstChild(),    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
117	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild(),  reachingUses,  c);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild(),  reachingUses,  c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild(),  reachingUses,  c);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getfirstChild(),    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
118	[BUG]  [BUGGY]  if(c.canInline())  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg.getScopeRoot().getLastChild());  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg.getScopeRoot().getLastChild());  reachingUses.analyze();  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg.getScopeRoot().getLastChild());  reachingUses.analyze();  }	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(    cfg.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
119	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(cfg.getScopeRoot().getLastChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(cfg.getScopeRoot().getLastChild());  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(cfg.getScopeRoot().getLastChild());  reachingUses.analyze();	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(    cfg.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
120	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  numUseWithinUseCfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  numUseWithinUseCfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  numUseWithinUseCfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
121	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
122	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
123	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  reachingUses);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
124	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses),  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses),  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses),  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
125	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  reachingUses,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
126	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);	  final    NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
127	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  final  NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	final  NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);	  final    NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
128	[BUG]  [BUGGY]  overcomingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  overcomingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	overcomingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);	  final    NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
129	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getFirstChild());  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  compiler);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getFirstChild());  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  compiler);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getFirstChild());  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  compiler);	  final    NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
130	[BUG]  [BUGGY]  ajungiUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  ajungiUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	ajungiUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);	  final    NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
131	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),	  final    NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
132	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);	  new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getFirstChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
133	[BUG]  [BUGGY]  if(c.canInline())  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()	  new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getFirstChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
134	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild(),  reachingUses);  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild(),  reachingUses);  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild(),  reachingUses);  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);	  new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getFirstChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
135	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(cfg.getScopeRoot().getFirstChild(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(cfg.getScopeRoot().getFirstChild(),  reachingUses);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(cfg.getScopeRoot().getFirstChild(),  reachingUses);	  new    NodeTraversal(compiler,    reachingUses).traverse(cfg.getScopeRoot().getLastChild(),    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
136	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses()).traverse(c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses()).traverse(c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses()).traverse(c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()	  new    NodeTraversal(compiler,    reachingUses()).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
137	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses()).traverse(t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses()).traverse(t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses()).traverse(t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()	  new    NodeTraversal(compiler,    reachingUses()).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
138	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses()).traverse(t.getScopeRoot(),  c.getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses()).traverse(t.getScopeRoot(),  c.getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses()).traverse(t.getScopeRoot(),  c.getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()	  new    NodeTraversal(compiler,    reachingUses()).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
139	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses()).traverse(c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses()).traverse(c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses()).traverse(c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope	  new    NodeTraversal(compiler,    reachingUses()).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
140	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses()).traverse(t.getScopeRoot().getNext());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses()).traverse(t.getScopeRoot().getNext());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses()).traverse(t.getScopeRoot().getNext());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()	  new    NodeTraversal(compiler,    reachingUses()).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
141	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses()).traverse(c.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses()).traverse(c.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses()).traverse(c.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()	  new    NodeTraversal(compiler,    reachingUses()).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
142	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses()).traverse(t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses()).traverse(t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses()).traverse(t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope	  new    NodeTraversal(compiler,    reachingUses()).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
143	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  ReachCandiates()).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  new  ReachCandiates()).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  ReachCandiates()).traverse(t.getScopeRoot().getLastChild(),  reachingUses);	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot().getFirstChild(),    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
144	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses,  cfg);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses,  cfg);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  reachingUses,  cfg);	  NodeTraversal.traverse(compiler,    cfg,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
145	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses,  c);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses,  c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  reachingUses,  c);	  NodeTraversal.traverse(compiler,    cfg,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
146	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  reachingDef);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses,  reachingDef);	  NodeTraversal.traverse(compiler,    cfg,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
147	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  null);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  null);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses,  null);	  NodeTraversal.traverse(compiler,    cfg,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
148	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  t,  reachingUses);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  t,  reachingUses);	  NodeTraversal.traverse(compiler,    cfg,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
149	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  startingDef);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  startingDef);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses,  startingDef);	  NodeTraversal.traverse(compiler,    cfg,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
150	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  true);  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  true);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses,  true);	  NodeTraversal.traverse(compiler,    cfg,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
151	[BUG]  [BUGGY]  overcomingUses.add(c);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  overcomingUses.add(c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	overcomingUses.add(c);	  if(c.canInline())    {    for(Candidate    c    :    c.getCurrentScopes())    {    reachingUses.add(c);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
152	[BUG]  [BUGGY]  StartingScope  c  =  c.getCurrentScope();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  StartingScope  c  =  c.getCurrentScope();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	StartingScope  c  =  c.getCurrentScope();	  if(c.canInline())    {    for(Candidate    c    :    c.getCurrentScopes())    {    reachingUses.add(c);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
153	[BUG]  [BUGGY]  vingUses.add(c);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  vingUses.add(c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	vingUses.add(c);	  if(c.canInline())    {    for(Candidate    c    :    c.getCurrentScopes())    {    reachingUses.add(c);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
154	[BUG]  [BUGGY]  reachingUses.add(c);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  reachingUses.add(c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	reachingUses.add(c);	  if(c.canInline())    {    for(Candidate    c    :    c.getCurrentScopes())    {    reachingUses.add(c);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
155	[BUG]  [BUGGY]  ingUses.add(c);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  ingUses.add(c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	ingUses.add(c);	  if(c.canInline())    {    for(Candidate    c    :    c.getCurrentScopes())    {    reachingUses.add(c);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
156	[BUG]  [BUGGY]  ajungiUses.add(c);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  ajungiUses.add(c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	ajungiUses.add(c);	  if(c.canInline())    {    for(Candidate    c    :    c.getCurrentScopes())    {    reachingUses.add(c);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
157	[BUG]  [BUGGY]  StartingScope  c  =  c.getCurrentScopes();  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  StartingScope  c  =  c.getCurrentScopes();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	StartingScope  c  =  c.getCurrentScopes();	  if(c.canInline())    {    for(Candidate    c    :    c.getCurrentScopes())    {    reachingUses.add(c);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
158	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getNext(),  c);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getNext(),  c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getNext(),  c);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild(),    c);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
159	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  cfg);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  cfg);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  cfg);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild(),    c);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
160	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  c,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  c,  reachingUses);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  c,  reachingUses);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild(),    c);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
161	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getNext(),  reachingUses,  c);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getNext(),  reachingUses,  c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getNext(),  reachingUses,  c);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getNext(),    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
162	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getParent(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getParent(),  reachingUses);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getParent(),  reachingUses);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getNext(),    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
163	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getNumberOfChildren(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getNumberOfChildren(),  reachingUses);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getNumberOfChildren(),  reachingUses);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getNext(),    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
164	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getNext(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getNext(),  reachingUses);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getNext(),  reachingUses);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getNext(),    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
165	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(cfg.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(cfg.getScopeRoot().getFirstChild());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(cfg.getScopeRoot().getFirstChild());	  new    NodeTraversal(compiler,    reachingUses).traverse(cfg.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
166	[BUG]  [BUGGY]  ingUses!=  null)  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  ingUses!=  null)  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	ingUses!=  null)  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  }	  if(    reachingUses!=    null)    {    new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses.analyze();    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
167	[BUG]  [BUGGY]  ingUses!=  null)  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  ingUses!=  null)  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.analyze();  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	ingUses!=  null)  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.analyze();  }	  if(    reachingUses!=    null)    {    new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses.analyze();    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
168	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());	  if(    reachingUses!=    null)    {    new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses.analyze();    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
169	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  c);  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  c);  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  c);  reachingUses.analyze();	  if(    reachingUses!=    null)    {    new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses.analyze();    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
170	[BUG]  [BUGGY]  ajungiUses.addChildToFront(c);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  ajungiUses.addChildToFront(c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	ajungiUses.addChildToFront(c);	  if(c.canInline())    {    for(Candidate    c    :    c.getCurrentScopes())    {    reachingUses.addChildToFront(c);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
171	[BUG]  [BUGGY]  reachingUses.addChildToFront(c);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  reachingUses.addChildToFront(c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	reachingUses.addChildToFront(c);	  if(c.canInline())    {    for(Candidate    c    :    c.getCurrentScopes())    {    reachingUses.addChildToFront(c);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
172	[BUG]  [BUGGY]  if(c.canInline())  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.analyze();  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.analyze();  }	  new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getFirstChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
173	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild(),  reachingUses);  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild(),  reachingUses);  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild(),  reachingUses);  reachingUses.analyze();	  new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getFirstChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
174	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getFirstChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getFirstChild());  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getFirstChild());  reachingUses.analyze();	  new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getFirstChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
175	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getLastChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getLastChild());  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getLastChild());  reachingUses.analyze();	  new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getFirstChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
176	[BUG]  [BUGGY]  ajungiUses  =  new  MaybeReachingVariableUse(cfg,  t.  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  ajungiUses  =  new  MaybeReachingVariableUse(cfg,  t.  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	ajungiUses  =  new  MaybeReachingVariableUse(cfg,  t.	  if(c.canInline())    {    new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
177	[BUG]  [BUGGY]  overcomingUses  =  new  MaybeReachingVariableUse(cfg,  t.  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  overcomingUses  =  new  MaybeReachingVariableUse(cfg,  t.  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	overcomingUses  =  new  MaybeReachingVariableUse(cfg,  t.	  if(c.canInline())    {    new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
178	[BUG]  [BUGGY]  ttingUses  =  new  MaybeReachingVariableUse(cfg,  t.  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  ttingUses  =  new  MaybeReachingVariableUse(cfg,  t.  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	ttingUses  =  new  MaybeReachingVariableUse(cfg,  t.	  if(c.canInline())    {    new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
179	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t	  if(c.canInline())    {    new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
180	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.addAll(c);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.addAll(c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.addAll(c);	  if(    reachingUses!=    null)    {    new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses.addAll(c);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
181	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild());  reachingUses.addAll(c);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild());  reachingUses.addAll(c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild());  reachingUses.addAll(c);	  if(    reachingUses!=    null)    {    new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses.addAll(c);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
182	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses.addAll(c);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses.addAll(c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses.addAll(c);	  if(    reachingUses!=    null)    {    new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses.addAll(c);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
183	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  c);  reachingUses.addAll(c);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  c);  reachingUses.addAll(c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  c);  reachingUses.addAll(c);	  if(    reachingUses!=    null)    {    new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses.addAll(c);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
184	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(cfg,  t.getScopeRoot().getFirstChild(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(cfg,  t.getScopeRoot().getFirstChild(),  reachingUses);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(cfg,  t.getScopeRoot().getFirstChild(),  reachingUses);	  new    NodeTraversal(compiler,    reachingUses).traverse(cfg,    t.getScopeRoot().getLastChild(),    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
185	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(cfg,  t.getScopeRoot().getNext(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(cfg,  t.getScopeRoot().getNext(),  reachingUses);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(cfg,  t.getScopeRoot().getNext(),  reachingUses);	  new    NodeTraversal(compiler,    reachingUses).traverse(cfg,    t.getScopeRoot().getLastChild(),    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
186	[BUG]  [BUGGY]  if(c.canInline())  {  final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  }	  final    NodeTraversal.traverse(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
187	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  reachingUses);	  final    NodeTraversal.traverse(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
188	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();	  final    NodeTraversal.traverse(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
189	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
190	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
191	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  c.getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  c.getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  c.getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
192	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
193	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
194	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(c.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(c.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(c.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
195	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
196	[BUG]  [BUGGY]  Context.checkState(c.canInline()  ||  c.canInline())  {  for(Candidate  c  :  candidates)  {  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  Context.checkState(c.canInline()  ||  c.canInline())  {  for(Candidate  c  :  candidates)  {  reachingUses.analyze();  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	Context.checkState(c.canInline()  ||  c.canInline())  {  for(Candidate  c  :  candidates)  {  reachingUses.analyze();  }	  if(c.canInline())    {    for(Candidate    c    :    candidates)    {    reachingUses.analyze();    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
197	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.canInline())  {  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.canInline())  {  reachingUses.analyze();  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  c.canInline())  {  reachingUses.analyze();  }	  if(c.canInline())    {    for(Candidate    c    :    candidates)    {    reachingUses.analyze();    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
198	[BUG]  [BUGGY]  AssertionError.make(t,  numUseWithinUseCfgNode,  reachingUses.size()  -  1))  {  for(Candidate  c  :  candidates)  {  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  AssertionError.make(t,  numUseWithinUseCfgNode,  reachingUses.size()  -  1))  {  for(Candidate  c  :  candidates)  {  reachingUses.analyze();  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	AssertionError.make(t,  numUseWithinUseCfgNode,  reachingUses.size()  -  1))  {  for(Candidate  c  :  candidates)  {  reachingUses.analyze();  }	  if(c.canInline())    {    for(Candidate    c    :    candidates)    {    reachingUses.analyze();    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
199	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.inlineVariable())  {  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.inlineVariable())  {  reachingUses.analyze();  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  c.inlineVariable())  {  reachingUses.analyze();  }	  if(c.canInline())    {    for(Candidate    c    :    candidates)    {    reachingUses.analyze();    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
200	[BUG]  [BUGGY]  AssertionError.make(t,  numUseWithinUseCfgNode,  reachingUses.size()  -  1);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  AssertionError.make(t,  numUseWithinUseCfgNode,  reachingUses.size()  -  1);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	AssertionError.make(t,  numUseWithinUseCfgNode,  reachingUses.size()  -  1);	  if(c.canInline())    {    for(Candidate    c    :    candidates)    {    reachingUses.analyze();    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
201	[BUG]  [BUGGY]  AssertionError.make(t,  numUseWithinUseCfgNode,  reachingUses.size()));  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  AssertionError.make(t,  numUseWithinUseCfgNode,  reachingUses.size()));  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	AssertionError.make(t,  numUseWithinUseCfgNode,  reachingUses.size()));	  if(c.canInline())    {    for(Candidate    c    :    candidates)    {    reachingUses.analyze();    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
202	[BUG]  [BUGGY]  reachingUses.addAll(cfg);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  reachingUses.addAll(cfg);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	reachingUses.addAll(cfg);	  reachingUses.addAll(c);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
203	[BUG]  [BUGGY]  reachingUses.addAll(cfg,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  reachingUses.addAll(cfg,  reachingUses);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	reachingUses.addAll(cfg,  reachingUses);	  reachingUses.addAll(c);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
204	[BUG]  [BUGGY]  reachingUses.addAll(cfg,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  reachingUses.addAll(cfg,  reachingDef);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	reachingUses.addAll(cfg,  reachingDef);	  reachingUses.addAll(c);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
205	[BUG]  [BUGGY]  reachingUses.addAll(c,  cfg);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  reachingUses.addAll(c,  cfg);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	reachingUses.addAll(c,  cfg);	  reachingUses.addAll(c);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
206	[BUG]  [BUGGY]  reachingUses.addAll(c,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  reachingUses.addAll(c,  reachingDef);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	reachingUses.addAll(c,  reachingDef);	  reachingUses.addAll(c);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
207	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  ReachCandiates()).traverse(c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  new  ReachCandiates()).traverse(c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  ReachCandiates()).traverse(c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()	  new    NodeTraversal(compiler,    new    ReachCandiates()).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
208	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  ReachCandiates()).traverse(t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  new  ReachCandiates()).traverse(t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  ReachCandiates()).traverse(t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()	  new    NodeTraversal(compiler,    new    ReachCandiates()).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
209	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  ReachCandiates()).traverse(t.getScopeRoot(),  c.getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  new  ReachCandiates()).traverse(t.getScopeRoot(),  c.getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  ReachCandiates()).traverse(t.getScopeRoot(),  c.getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()	  new    NodeTraversal(compiler,    new    ReachCandiates()).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
210	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  ReachCandiates()).traverse(c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  new  ReachCandiates()).traverse(c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  ReachCandiates()).traverse(c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope	  new    NodeTraversal(compiler,    new    ReachCandiates()).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
211	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  ReachCandiates()).traverse(c.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  new  ReachCandiates()).traverse(c.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  ReachCandiates()).traverse(c.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()	  new    NodeTraversal(compiler,    new    ReachCandiates()).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
212	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  new  ReachCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  final  NodeTraversal.traverse(compiler,  new  ReachCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	final  NodeTraversal.traverse(compiler,  new  ReachCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()	  new    NodeTraversal(compiler,    new    ReachCandiates()).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
213	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  ReachCandiates()).traverse(t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  new  ReachCandiates()).traverse(t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  new  ReachCandiates()).traverse(t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()	  new    NodeTraversal(compiler,    new    ReachCandiates()).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
214	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild()));  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild()));  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild()));  reachingUses.analyze();	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(    t.getScopeRoot().getLastChild()));    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
215	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(c.getScopeRoot().getLastChild()));  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(c.getScopeRoot().getLastChild()));  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(c.getScopeRoot().getLastChild()));  reachingUses.analyze();	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(    t.getScopeRoot().getLastChild()));    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
216	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  c.getLastChild()));  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  c.getLastChild()));  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  c.getLastChild()));  reachingUses.analyze();	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(    t.getScopeRoot().getLastChild()));    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
217	[BUG]  [BUGGY]  if(c.canInline())  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild()));  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild()));  reachingUses.analyze();  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild()));  reachingUses.analyze();  }	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(    t.getScopeRoot().getLastChild()));    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
218	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getNext()));  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getNext()));  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getNext()));  reachingUses.analyze();	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(    t.getScopeRoot().getLastChild()));    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
219	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild()));  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild()));  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild()));  reachingUses.analyze();	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(    t.getScopeRoot().getLastChild()));    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
220	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  reachingUses));  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  reachingUses));  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  reachingUses));	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(    t.getScopeRoot().getLastChild()));    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
221	[BUG]  [BUGGY]  if(c.canInline())  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  reachingUses.analyze();  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  reachingUses.analyze();  }	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild(),    reachingUses);    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
222	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getLastChild(),  reachingUses);  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getLastChild(),  reachingUses);  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getLastChild(),  reachingUses);  reachingUses.analyze();	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild(),    reachingUses);    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
223	[BUG]  [BUGGY]  overcomingUses.add(c.inlineVariable());  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  overcomingUses.add(c.inlineVariable());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	overcomingUses.add(c.inlineVariable());	  if(c.canInline())    {    for(Candidate    c    :    candidates)    {    reachingUses.add(c.inlineVariable());    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
224	[BUG]  [BUGGY]  vingUses.add(c.inlineVariable());  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  vingUses.add(c.inlineVariable());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	vingUses.add(c.inlineVariable());	  if(c.canInline())    {    for(Candidate    c    :    candidates)    {    reachingUses.add(c.inlineVariable());    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
225	[BUG]  [BUGGY]  battlingUses.add(c.inlineVariable());  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  battlingUses.add(c.inlineVariable());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	battlingUses.add(c.inlineVariable());	  if(c.canInline())    {    for(Candidate    c    :    candidates)    {    reachingUses.add(c.inlineVariable());    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
226	[BUG]  [BUGGY]  ingUses.add(c.inlineVariable());  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  ingUses.add(c.inlineVariable());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	ingUses.add(c.inlineVariable());	  if(c.canInline())    {    for(Candidate    c    :    candidates)    {    reachingUses.add(c.inlineVariable());    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
227	[BUG]  [BUGGY]  ttingUses.add(c.inlineVariable());  [CE]  illegal  start  of  expression  [FE]                                            AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  ttingUses.add(c.inlineVariable());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	ttingUses.add(c.inlineVariable());	  if(c.canInline())    {    for(Candidate    c    :    candidates)    {    reachingUses.add(c.inlineVariable());    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
228	[BUG]  [BUGGY]  ajungiUses.add(c.inlineVariable());  [CE]  illegal  start  of  expression  [FE]                                              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  ajungiUses.add(c.inlineVariable());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	ajungiUses.add(c.inlineVariable());	  if(c.canInline())    {    for(Candidate    c    :    candidates)    {    reachingUses.add(c.inlineVariable());    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
229	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getFirstChild(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getFirstChild(),  reachingUses);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getFirstChild(),  reachingUses);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot(),    c.getLastChild(),    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
230	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  cfg.getLastChild(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  cfg.getLastChild(),  reachingUses);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  cfg.getLastChild(),  reachingUses);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot(),    c.getLastChild(),    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
231	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getChildCount(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getChildCount(),  reachingUses);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getChildCount(),  reachingUses);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot(),    c.getLastChild(),    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
232	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot(),  t.getLastChild(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot(),  t.getLastChild(),  reachingUses);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot(),  t.getLastChild(),  reachingUses);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot(),    c.getLastChild(),    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
233	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getNext(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getNext(),  reachingUses);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getNext(),  reachingUses);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot(),    c.getLastChild(),    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
234	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getCurrentChild(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getCurrentChild(),  reachingUses);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getCurrentChild(),  reachingUses);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot(),    c.getLastChild(),    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
235	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.canInline())  {  reachingUses.add(c.inlineVariable());  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.canInline())  {  reachingUses.add(c.inlineVariable());  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  c.canInline())  {  reachingUses.add(c.inlineVariable());  }	  if(c.canInline())    {    for(Candidate    c    :    candidates)    {    reachingUses.add(c.inlineVariable());    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
236	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.inlineCfgNode)  {  reachingUses.add(c.inlineVariable());  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.inlineCfgNode)  {  reachingUses.add(c.inlineVariable());  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  c.inlineCfgNode)  {  reachingUses.add(c.inlineVariable());  }	  if(c.canInline())    {    for(Candidate    c    :    candidates)    {    reachingUses.add(c.inlineVariable());    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
237	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  this.candidates)  {  reachingUses.add(c.inlineVariable());  }  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  this.candidates)  {  reachingUses.add(c.inlineVariable());  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  this.candidates)  {  reachingUses.add(c.inlineVariable());  }	  if(c.canInline())    {    for(Candidate    c    :    candidates)    {    reachingUses.add(c.inlineVariable());    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
238	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  candidates)  {  reachingUses.add(c.inlineCfgNode());  }  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  candidates)  {  reachingUses.add(c.inlineCfgNode());  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  candidates)  {  reachingUses.add(c.inlineCfgNode());  }	  if(c.canInline())    {    for(Candidate    c    :    candidates)    {    reachingUses.add(c.inlineVariable());    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
239	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild(),  reachingDef);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild(),  reachingDef);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild(),  reachingDef);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getfirstChild(),    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
240	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  cfg).traverse(n.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  cfg).traverse(n.getScopeRoot().getLastChild());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  cfg).traverse(n.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    cfg).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
241	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  cfg).traverse(s.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  cfg).traverse(s.getScopeRoot().getLastChild());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  cfg).traverse(s.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    cfg).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
242	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot(),  c.getLastChild(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot(),  c.getLastChild(),  reachingUses);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot(),  c.getLastChild(),  reachingUses);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot(),    c.getLastChild(),    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
243	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(c.getScopeRoot().getFirstChild()));  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(c.getScopeRoot().getFirstChild()));  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(c.getScopeRoot().getFirstChild()));  reachingUses.analyze();	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(    t.getScopeRoot().getLastChild()));    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
244	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  c.getFirstChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  c.getFirstChild());  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  c.getFirstChild());  reachingUses.analyze();	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(    t.getScopeRoot().getFirstChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
245	[BUG]  [BUGGY]  if(c.canInline())  {  final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses.analyze();  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses.analyze();  }	  final    NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
246	[BUG]  [BUGGY]  if(c.canInline())  {  final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses.analyze();  }  else  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses.analyze();  }  else  {  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses.analyze();  }  else  {	  final    NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
247	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  cfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  cfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
248	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(n.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(n.getScopeRoot().getLastChild());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(n.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
249	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  def,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  def,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
250	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses()).traverse(c.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses()).traverse(c.getScopeRoot().getLastChild());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses()).traverse(c.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    reachingUses()).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
251	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses()).traverse(t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses()).traverse(t.getScopeRoot().getFirstChild());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses()).traverse(t.getScopeRoot().getFirstChild());	  new    NodeTraversal(compiler,    reachingUses()).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
252	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses()).traverse(t.getScopeRoot(),  c.getLastChild());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses()).traverse(t.getScopeRoot(),  c.getLastChild());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses()).traverse(t.getScopeRoot(),  c.getLastChild());	  new    NodeTraversal(compiler,    reachingUses()).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
253	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getFirstChild());  reachingUses.addAll(c);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getFirstChild());  reachingUses.addAll(c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getFirstChild());  reachingUses.addAll(c);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getFirstChild());    reachingUses.addAll(c);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
254	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  numUseWithinUseCfgNode);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses,  numUseWithinUseCfgNode);	  NodeTraversal.traverse(compiler,    cfg,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
255	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  reachingUses);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  cfa,  reachingUses);	  NodeTraversal.traverse(compiler,    cfg,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
256	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  def);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  def);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses,  def);	  NodeTraversal.traverse(compiler,    cfg,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
257	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  this);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  this);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses,  this);	  NodeTraversal.traverse(compiler,    cfg,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
258	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  n);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  n);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses,  n);	  NodeTraversal.traverse(compiler,    cfg,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
259	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  startingCfgNode);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  startingCfgNode);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses,  startingCfgNode);	  NodeTraversal.traverse(compiler,    cfg,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
260	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.getScopes())  {  reachingUses.add(c);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.getScopes())  {  reachingUses.add(c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  c.getScopes())  {  reachingUses.add(c);  }	  if(c.canInline())    {    for(Candidate    c    :    c.getCurrentScopes())    {    reachingUses.add(c);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
261	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  cfg.getCurrentScopes())  {  reachingUses.add(c);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  cfg.getCurrentScopes())  {  reachingUses.add(c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  cfg.getCurrentScopes())  {  reachingUses.add(c);  }	  if(c.canInline())    {    for(Candidate    c    :    c.getCurrentScopes())    {    reachingUses.add(c);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
262	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInline())  {  for(Candidate  c  :  c.getCurrentScopes())  {  reachingUses.add(c);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline()  ||  c.canInline())  {  for(Candidate  c  :  c.getCurrentScopes())  {  reachingUses.add(c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline()  ||  c.canInline())  {  for(Candidate  c  :  c.getCurrentScopes())  {  reachingUses.add(c);  }	  if(c.canInline())    {    for(Candidate    c    :    c.getCurrentScopes())    {    reachingUses.add(c);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
263	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.getCurrentScopes())  {  reachingUses.remove(c);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.getCurrentScopes())  {  reachingUses.remove(c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  c.getCurrentScopes())  {  reachingUses.remove(c);  }	  if(c.canInline())    {    for(Candidate    c    :    c.getCurrentScopes())    {    reachingUses.add(c);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
264	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.getConstructors())  {  reachingUses.add(c);  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.getConstructors())  {  reachingUses.add(c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  c.getConstructors())  {  reachingUses.add(c);  }	  if(c.canInline())    {    for(Candidate    c    :    c.getCurrentScopes())    {    reachingUses.add(c);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
265	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.nextScope())  {  reachingUses.add(c);  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.nextScope())  {  reachingUses.add(c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  c.nextScope())  {  reachingUses.add(c);  }	  if(c.canInline())    {    for(Candidate    c    :    c.getCurrentScopes())    {    reachingUses.add(c);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
266	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild());  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope()  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild());  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope()  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild());  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope()	  NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
267	[BUG]  [BUGGY]  TokenTraversal.traverse(compiler,  c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  TokenTraversal.traverse(compiler,  c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	TokenTraversal.traverse(compiler,  c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()	  NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
268	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  c.getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  c.getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()	  NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
269	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  c.getFirstChild(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  c.getFirstChild(),  reachingUses);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  c.getFirstChild(),  reachingUses);	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot().getFirstChild(),    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
270	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getFirstChild(),  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getFirstChild(),  t.getScopeRoot());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getFirstChild(),  t.getScopeRoot());	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getFirstChild(),    c);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
271	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild());  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild());  reachingUses.analyze();	  if(c.canInline())    {    new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(    t.getScopeRoot().getLastChild());    reachingUses.analyze();    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
272	[BUG]  [BUGGY]  if(c.canInline())  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  reachingUses.analyze();  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  reachingUses.analyze();  }	  if(c.canInline())    {    new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(    t.getScopeRoot().getLastChild());    reachingUses.analyze();    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
273	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  cfgNode.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  cfgNode.getFirstChild());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  cfgNode.getFirstChild());	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot(),    c.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
274	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg.getScopeRoot(),  c.getLastChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg.getScopeRoot(),  c.getLastChild());  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg.getScopeRoot(),  c.getLastChild());  reachingUses.analyze();	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(    cfg.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
275	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg.getScopeRoot().getFirstChild());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg.getScopeRoot().getFirstChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(    cfg.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
276	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg.getScopeRoot().getLastChild(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg.getScopeRoot().getLastChild(),  reachingUses);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg.getScopeRoot().getLastChild(),  reachingUses);	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(    cfg.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
277	[BUG]  [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);	  final    NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
278	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild());  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  compiler);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  final  NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild());  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  compiler);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	final  NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild());  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  compiler);	  final    NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
279	[BUG]  [BUGGY]  if(c.canInline())  {  final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(  c.getScopeRoot().getLastChild());  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(  c.getScopeRoot().getLastChild());  reachingUses.analyze();  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(  c.getScopeRoot().getLastChild());  reachingUses.analyze();  }	  final    NodeTraversal.traverse(compiler,    new    GatherCandiates()).traverse(c.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
280	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(  t.getScopeRoot().getLastChild(),  reachingDef);  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(  t.getScopeRoot().getLastChild(),  reachingDef);  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(  t.getScopeRoot().getLastChild(),  reachingDef);  reachingUses.analyze();	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild(),    reachingUses);    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
281	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  reachingUses);	  final    NodeTraversal.traverse(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses.addAll(c);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
282	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  cfgNode).traverse(t.getScopeRoot().getLastChild());  reachingUses.addAll(c);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  final  NodeTraversal.traverse(compiler,  cfgNode).traverse(t.getScopeRoot().getLastChild());  reachingUses.addAll(c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	final  NodeTraversal.traverse(compiler,  cfgNode).traverse(t.getScopeRoot().getLastChild());  reachingUses.addAll(c);	  final    NodeTraversal.traverse(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses.addAll(c);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
283	[BUG]  [BUGGY]  if(c.canInline())  {  final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t	  final    NodeTraversal.traverse(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
284	[BUG]  [BUGGY]  if(c.canInline())  {  final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.	  final    NodeTraversal.traverse(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
285	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.canInline())  {  reachingUses.addChildToFront(c);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.canInline())  {  reachingUses.addChildToFront(c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  c.canInline())  {  reachingUses.addChildToFront(c);  }	  if(c.canInline())    {    for(Candidate    c    :    candidates)    {    reachingUses.addChildToFront(c);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
286	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.canInlineVariable())  {  reachingUses.addChildToFront(c);  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.canInlineVariable())  {  reachingUses.addChildToFront(c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  c.canInlineVariable())  {  reachingUses.addChildToFront(c);  }	  if(c.canInline())    {    for(Candidate    c    :    candidates)    {    reachingUses.addChildToFront(c);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
287	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  candidates)  {  reachingUses.removeChildToFront(c);  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  candidates)  {  reachingUses.removeChildToFront(c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  candidates)  {  reachingUses.removeChildToFront(c);  }	  if(c.canInline())    {    for(Candidate    c    :    candidates)    {    reachingUses.addChildToFront(c);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
288	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.canInlineCfgNode)  {  reachingUses.addChildToFront(c);  }  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.canInlineCfgNode)  {  reachingUses.addChildToFront(c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  c.canInlineCfgNode)  {  reachingUses.addChildToFront(c);  }	  if(c.canInline())    {    for(Candidate    c    :    candidates)    {    reachingUses.addChildToFront(c);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
289	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  candidates)  {  reachingUses.addChildIntoFront(c);  }  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  candidates)  {  reachingUses.addChildIntoFront(c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  candidates)  {  reachingUses.addChildIntoFront(c);  }	  if(c.canInline())    {    for(Candidate    c    :    candidates)    {    reachingUses.addChildToFront(c);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
290	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.canInlineVariable())  {  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.canInlineVariable())  {  reachingUses.analyze();  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  c.canInlineVariable())  {  reachingUses.analyze();  }	  if(c.canInline())    {    for(Candidate    c    :    candidates)    {    reachingUses.analyze();    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
291	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  cfg)  {  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  cfg)  {  reachingUses.analyze();  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  cfg)  {  reachingUses.analyze();  }	  if(c.canInline())    {    for(Candidate    c    :    candidates)    {    reachingUses.analyze();    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
292	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.inlinePath)  {  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.inlinePath)  {  reachingUses.analyze();  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  c.inlinePath)  {  reachingUses.analyze();  }	  if(c.canInline())    {    for(Candidate    c    :    candidates)    {    reachingUses.analyze();    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
293	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.inlinePrettyPrinter)  {  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.inlinePrettyPrinter)  {  reachingUses.analyze();  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  c.inlinePrettyPrinter)  {  reachingUses.analyze();  }	  if(c.canInline())    {    for(Candidate    c    :    candidates)    {    reachingUses.analyze();    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
294	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getNext());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getNext());  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getNext());  reachingUses.analyze();	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
295	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getFirstChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getFirstChild());  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getFirstChild());  reachingUses.analyze();	  new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getFirstChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
296	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getNext(),  reachingDef);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getNext(),  reachingDef);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getNext(),  reachingDef);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getNext(),    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
297	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  cfg.getVars())  {  reachingUses.add(c.getVarName());  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  cfg.getVars())  {  reachingUses.add(c.getVarName());  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  cfg.getVars())  {  reachingUses.add(c.getVarName());  }	  if(c.canInline())    {    for(Candidate    c    :    c.getVars())    {    reachingUses.add(c.getVarName());    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
298	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.getVars())  {  reachingUses.add(c.getName());  }  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.getVars())  {  reachingUses.add(c.getName());  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  c.getVars())  {  reachingUses.add(c.getName());  }	  if(c.canInline())    {    for(Candidate    c    :    c.getVars())    {    reachingUses.add(c.getVarName());    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
299	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.getChildren())  {  reachingUses.add(c.getVarName());  }  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.getChildren())  {  reachingUses.add(c.getVarName());  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  c.getChildren())  {  reachingUses.add(c.getVarName());  }	  if(c.canInline())    {    for(Candidate    c    :    c.getVars())    {    reachingUses.add(c.getVarName());    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
300	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.getScopeRoot())  {  reachingUses.add(c.getVarName());  }  [CE]  illegal  start  of  expression  [FE]                                            AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.getScopeRoot())  {  reachingUses.add(c.getVarName());  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  c.getScopeRoot())  {  reachingUses.add(c.getVarName());  }	  if(c.canInline())    {    for(Candidate    c    :    c.getVars())    {    reachingUses.add(c.getVarName());    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
301	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.getCurrentVars())  {  reachingUses.add(c.getVarName());  }  [CE]  illegal  start  of  expression  [FE]                                              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.getCurrentVars())  {  reachingUses.add(c.getVarName());  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  c.getCurrentVars())  {  reachingUses.add(c.getVarName());  }	  if(c.canInline())    {    for(Candidate    c    :    c.getVars())    {    reachingUses.add(c.getVarName());    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
302	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  cfg.getCurrentScopes())  {  reachingUses.addChildToFront(c);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  cfg.getCurrentScopes())  {  reachingUses.addChildToFront(c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  cfg.getCurrentScopes())  {  reachingUses.addChildToFront(c);  }	  if(c.canInline())    {    for(Candidate    c    :    c.getCurrentScopes())    {    reachingUses.addChildToFront(c);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
303	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.getScopes())  {  reachingUses.addChildToFront(c);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.getScopes())  {  reachingUses.addChildToFront(c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  c.getScopes())  {  reachingUses.addChildToFront(c);  }	  if(c.canInline())    {    for(Candidate    c    :    c.getCurrentScopes())    {    reachingUses.addChildToFront(c);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
304	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.getCurrentScopes())  {  reachingUses.removeChildToFront(c);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.getCurrentScopes())  {  reachingUses.removeChildToFront(c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  c.getCurrentScopes())  {  reachingUses.removeChildToFront(c);  }	  if(c.canInline())    {    for(Candidate    c    :    c.getCurrentScopes())    {    reachingUses.addChildToFront(c);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
305	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.getScopeRoot())  {  reachingUses.addChildToFront(c);  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.getScopeRoot())  {  reachingUses.addChildToFront(c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  c.getScopeRoot())  {  reachingUses.addChildToFront(c);  }	  if(c.canInline())    {    for(Candidate    c    :    c.getCurrentScopes())    {    reachingUses.addChildToFront(c);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
306	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.getCurrentScopes())  {  reachingUses.addChildIntoFront(c);  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.getCurrentScopes())  {  reachingUses.addChildIntoFront(c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  c.getCurrentScopes())  {  reachingUses.addChildIntoFront(c);  }	  if(c.canInline())    {    for(Candidate    c    :    c.getCurrentScopes())    {    reachingUses.addChildToFront(c);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
307	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot(),  c.getLastChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot(),  c.getLastChild());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot(),  c.getLastChild());	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot(),    c.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
308	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(cfg.getScopeRoot(),  c.getLastChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(cfg.getScopeRoot(),  c.getLastChild());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(cfg.getScopeRoot(),  c.getLastChild());	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot(),    c.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
309	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
310	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  compiler);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  compiler);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  compiler);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
311	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  c,  compiler);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  c,  compiler);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  c,  compiler);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
312	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  startingDef);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  startingDef);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  startingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
313	[BUG]  [BUGGY]  if(c.canInline())  {  if(  reachingUses!=  null)  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  if(  reachingUses!=  null)  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  if(  reachingUses!=  null)  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  }	  if(    reachingUses!=    null)    {    new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses.analyze();    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
314	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses.analyze();	  if(    reachingUses!=    null)    {    new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses.analyze();    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
315	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());	  if(    reachingUses!=    null)    {    new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses.analyze();    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
316	[BUG]  [BUGGY]  if(  reachingUses!=  null)  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(  reachingUses!=  null)  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.analyze();  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(  reachingUses!=  null)  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.analyze();  }	  if(    reachingUses!=    null)    {    new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses.analyze();    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
317	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.	  if(    reachingUses!=    null)    {    new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
318	[BUG]  [BUGGY]  if(  reachingUses!=  null)  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(  reachingUses!=  null)  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(  reachingUses!=  null)  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t	  if(    reachingUses!=    null)    {    new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
319	[BUG]  [BUGGY]  if(  reachingUses!=  null)  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(  reachingUses!=  null)  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(  reachingUses!=  null)  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.	  if(    reachingUses!=    null)    {    new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
320	[BUG]  [BUGGY]  reachingUses.addAll(c.canInline());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  reachingUses.addAll(c.canInline());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	reachingUses.addAll(c.canInline());	  reachingUses.addAll(c);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
321	[BUG]  [BUGGY]  reachingUses.addAll(c.getScope());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  reachingUses.addAll(c.getScope());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	reachingUses.addAll(c.getScope());	  reachingUses.addAll(c);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
322	[BUG]  [BUGGY]  reachingUses.addAll(c.inlineVariable());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  reachingUses.addAll(c.inlineVariable());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	reachingUses.addAll(c.inlineVariable());	  reachingUses.addAll(c);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
323	[BUG]  [BUGGY]  if(  reachingUses!=  null)  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.addAll(c);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(  reachingUses!=  null)  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.addAll(c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(  reachingUses!=  null)  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.addAll(c);  }	  if(    reachingUses!=    null)    {    new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses.addAll(c);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
324	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);	  new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getFirstChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
325	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  c.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  c.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);	  new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getFirstChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
326	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  c.getFirstChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  c.getFirstChild());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  c.getFirstChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
327	[BUG]  [BUGGY]  if(c.canInline())  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
328	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScop  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScop  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScop	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
329	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.nextScope())  {  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.nextScope())  {  reachingUses.analyze();  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  c.nextScope())  {  reachingUses.analyze();  }	  if(c.canInline())    {    for(Candidate    c    :    c.getCurrentScopes())    {    reachingUses.analyze();    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
330	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.currentScopes())  {  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.currentScopes())  {  reachingUses.analyze();  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  c.currentScopes())  {  reachingUses.analyze();  }	  if(c.canInline())    {    for(Candidate    c    :    c.getCurrentScopes())    {    reachingUses.analyze();    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
331	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.getConstructors())  {  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.getConstructors())  {  reachingUses.analyze();  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  c.getConstructors())  {  reachingUses.analyze();  }	  if(c.canInline())    {    for(Candidate    c    :    c.getCurrentScopes())    {    reachingUses.analyze();    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
332	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.getFullScopes())  {  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.getFullScopes())  {  reachingUses.analyze();  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  c.getFullScopes())  {  reachingUses.analyze();  }	  if(c.canInline())    {    for(Candidate    c    :    c.getCurrentScopes())    {    reachingUses.analyze();    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
333	[BUG]  [BUGGY]  if(c.canInline())  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t	  if(c.canInline())    {    new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
334	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t	  if(c.canInline())    {    new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
335	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.	  if(c.canInline())    {    new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
336	[BUG]  [BUGGY]  if(c.canInline())  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,	  if(c.canInline())    {    new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
337	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(cfgNode,  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(cfgNode,  t.getScopeRoot().getFirstChild());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(cfgNode,  t.getScopeRoot().getFirstChild());	  new    NodeTraversal(compiler,    reachingUses).traverse(cfg,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
338	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  ReachCandiates()).traverse(c.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  new  ReachCandiates()).traverse(c.getScopeRoot().getLastChild());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  ReachCandiates()).traverse(c.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    new    ReachCandiates()).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
339	[BUG]  [BUGGY]  if(c.canInline())  {  new  NodeTraversal(compiler,  new  ReachCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  new  NodeTraversal(compiler,  new  ReachCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  new  NodeTraversal(compiler,  new  ReachCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t	  new    NodeTraversal(compiler,    new    ReachCandiates()).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
340	[BUG]  [BUGGY]  if(c.canInline())  {  final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  }	  final    NodeTraversal.traverse(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
341	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  c).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  final  NodeTraversal.traverse(compiler,  c).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	final  NodeTraversal.traverse(compiler,  c).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();	  final    NodeTraversal.traverse(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
342	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  c.traverse(t.getScopeRoot().getLastChild()));  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  final  NodeTraversal.traverse(compiler,  c.traverse(t.getScopeRoot().getLastChild()));  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	final  NodeTraversal.traverse(compiler,  c.traverse(t.getScopeRoot().getLastChild()));  reachingUses.analyze();	  final    NodeTraversal.traverse(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
343	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getChildCount());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getChildCount());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getChildCount());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t	  new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
344	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(cfg.getScopeRoot().getFirstChild(),  t);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(cfg.getScopeRoot().getFirstChild(),  t);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(cfg.getScopeRoot().getFirstChild(),  t);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getFirstChild(),    c);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
345	[BUG]  [BUGGY]  if(  reachingUses!=  null)  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(  reachingUses!=  null)  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(  reachingUses!=  null)  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()	  new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getFirstChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
346	[BUG]  [BUGGY]  if(  reachingUses!=  null)  {  final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(  reachingUses!=  null)  {  final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(  reachingUses!=  null)  {  final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.	  final    NodeTraversal.traverse(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
347	[BUG]  [BUGGY]  if(  reachingUses!=  null)  {  final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(  reachingUses!=  null)  {  final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(  reachingUses!=  null)  {  final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t	  final    NodeTraversal.traverse(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
348	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope	  new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getFirstChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
349	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()	  new    NodeTraversal(compiler,    reachingUses()).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
350	[BUG]  [BUGGY]  if(  reachingUses!=  null)  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  reachingUses.addAll(c);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(  reachingUses!=  null)  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  reachingUses.addAll(c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(  reachingUses!=  null)  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  reachingUses.addAll(c);  }	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild(),    reachingUses);    reachingUses.addAll(c);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
351	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg.getScopeRoot().getFirstChild(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg.getScopeRoot().getFirstChild(),  reachingUses);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg.getScopeRoot().getFirstChild(),  reachingUses);	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot().getFirstChild(),    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
352	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(pt.getScopeRoot().getFirstChild(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(pt.getScopeRoot().getFirstChild(),  reachingUses);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(pt.getScopeRoot().getFirstChild(),  reachingUses);	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot().getFirstChild(),    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
353	[BUG]  [BUGGY]  AnnotationTraversal.traverse(compiler,  c.getScopeRoot().getLastChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  AnnotationTraversal.traverse(compiler,  c.getScopeRoot().getLastChild());  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	AnnotationTraversal.traverse(compiler,  c.getScopeRoot().getLastChild());  reachingUses.analyze();	  if(c.canInline())    {    new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(    t.getScopeRoot().getLastChild());    reachingUses.analyze();    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
354	[BUG]  [BUGGY]  Pentru(Candidate  c  :  candidates)  {  reachingUses.add(c.inlineVariable());  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  Pentru(Candidate  c  :  candidates)  {  reachingUses.add(c.inlineVariable());  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	Pentru(Candidate  c  :  candidates)  {  reachingUses.add(c.inlineVariable());  }	  if(c.canInline())    {    for(Candidate    c    :    candidates)    {    reachingUses.add(c.inlineVariable());    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
355	[BUG]  [BUGGY]  leadingUses.add(c.inlineVariable());  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  leadingUses.add(c.inlineVariable());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	leadingUses.add(c.inlineVariable());	  if(c.canInline())    {    for(Candidate    c    :    candidates)    {    reachingUses.add(c.inlineVariable());    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
356	[BUG]  [BUGGY]  catchingUses.add(c.inlineVariable());  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  catchingUses.add(c.inlineVariable());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	catchingUses.add(c.inlineVariable());	  if(c.canInline())    {    for(Candidate    c    :    candidates)    {    reachingUses.add(c.inlineVariable());    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
357	[BUG]  [BUGGY]  leadingUses.add(c);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  leadingUses.add(c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	leadingUses.add(c);	  if(c.canInline())    {    for(Candidate    c    :    c.getCurrentScopes())    {    reachingUses.add(c);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
358	[BUG]  [BUGGY]  rmândrmând(c,  t.getScopeRoot())  {  reachingUses.add(c);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  rmândrmând(c,  t.getScopeRoot())  {  reachingUses.add(c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	rmândrmând(c,  t.getScopeRoot())  {  reachingUses.add(c);  }	  if(c.canInline())    {    for(Candidate    c    :    c.getCurrentScopes())    {    reachingUses.add(c);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
359	[BUG]  [BUGGY]  rmândrmând(c,  t.getScopeRoot().getLastChild())  {  reachingUses.add(c);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  rmândrmând(c,  t.getScopeRoot().getLastChild())  {  reachingUses.add(c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	rmândrmând(c,  t.getScopeRoot().getLastChild())  {  reachingUses.add(c);  }	  if(c.canInline())    {    for(Candidate    c    :    c.getCurrentScopes())    {    reachingUses.add(c);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
360	[BUG]  [BUGGY]  StartingUses.analyze(cfg,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  StartingUses.analyze(cfg,  t.getScopeRoot().getLastChild());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	StartingUses.analyze(cfg,  t.getScopeRoot().getLastChild());	  if(c.canInline())    {    for(Candidate    c    :    c.getCurrentScopes())    {    reachingUses.add(c);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
361	[BUG]  [BUGGY]  ARRAY  =  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  ARRAY  =  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	ARRAY  =  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();	  if(    reachingUses!=    null)    {    new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses.analyze();    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
362	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses,  t.getScopeRoot().getLastChild());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  reachingUses,  t.getScopeRoot().getLastChild());	  if(    reachingUses!=    null)    {    new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses.analyze();    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
363	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  cfg.getLastChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  cfg.getLastChild());  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  cfg.getLastChild());  reachingUses.analyze();	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(    cfg.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
364	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  c.getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  c.getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  c.getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
365	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(pt.getScopeRoot().getLastChild(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(pt.getScopeRoot().getLastChild(),  reachingUses);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(pt.getScopeRoot().getLastChild(),  reachingUses);	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
366	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getChildCount()));  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getChildCount()));  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getChildCount()));  reachingUses.analyze();	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(    t.getScopeRoot().getLastChild()));    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
367	[BUG]  [BUGGY]  reachingUses.push(c);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  reachingUses.push(c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	reachingUses.push(c);	  reachingUses.addAll(c);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
368	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(cfg.getScopeRoot().getLastChild(),  t);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(cfg.getScopeRoot().getLastChild(),  t);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(cfg.getScopeRoot().getLastChild(),  t);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild(),    c);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
369	[BUG]  [BUGGY]  if(t.getScopeRoot()!=  null)  {  final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(t.getScopeRoot()!=  null)  {  final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses.analyze();  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(t.getScopeRoot()!=  null)  {  final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses.analyze();  }	  final    NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
370	[BUG]  [BUGGY]  leadingUses.addChildToFront(c);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  leadingUses.addChildToFront(c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	leadingUses.addChildToFront(c);	  if(c.canInline())    {    for(Candidate    c    :    c.getCurrentScopes())    {    reachingUses.addChildToFront(c);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
371	[BUG]  [BUGGY]  catchingUses.addChildToFront(c);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  catchingUses.addChildToFront(c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	catchingUses.addChildToFront(c);	  if(c.canInline())    {    for(Candidate    c    :    c.getCurrentScopes())    {    reachingUses.addChildToFront(c);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
372	[BUG]  [BUGGY]  AnnotationTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  AnnotationTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	AnnotationTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();	  if(c.canInline())    {    new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses.analyze();    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
373	[BUG]  [BUGGY]  Pentru(Candidate  c  :  c.getCurrentScopes())  {  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  Pentru(Candidate  c  :  c.getCurrentScopes())  {  reachingUses.analyze();  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	Pentru(Candidate  c  :  c.getCurrentScopes())  {  reachingUses.analyze();  }	  if(c.canInline())    {    for(Candidate    c    :    c.getCurrentScopes())    {    reachingUses.analyze();    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
374	[BUG]  [BUGGY]  Pentru(Candidate  c  :  cfg.getCurrentScopes())  {  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  Pentru(Candidate  c  :  cfg.getCurrentScopes())  {  reachingUses.analyze();  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	Pentru(Candidate  c  :  cfg.getCurrentScopes())  {  reachingUses.analyze();  }	  if(c.canInline())    {    for(Candidate    c    :    c.getCurrentScopes())    {    reachingUses.analyze();    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
375	[BUG]  [BUGGY]  Pentru(Candidate  c  :  c.getScopes())  {  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  Pentru(Candidate  c  :  c.getScopes())  {  reachingUses.analyze();  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	Pentru(Candidate  c  :  c.getScopes())  {  reachingUses.analyze();  }	  if(c.canInline())    {    for(Candidate    c    :    c.getCurrentScopes())    {    reachingUses.analyze();    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
376	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.getScopeRoot())  {  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.getScopeRoot())  {  reachingUses.analyze();  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  c.getScopeRoot())  {  reachingUses.analyze();  }	  if(c.canInline())    {    for(Candidate    c    :    c.getCurrentScopes())    {    reachingUses.analyze();    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
377	[BUG]  [BUGGY]  if(c.canInline())  {  final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()	  final    NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
378	[BUG]  [BUGGY]  if(c.canInline())  {  final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope	  final    NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
379	[BUG]  [BUGGY]  StartingTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  StartingTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	StartingTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.	  if(    reachingUses!=    null)    {    new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
380	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  cfg.getLastChild());  reachingUses.removeAll(c);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  cfg.getLastChild());  reachingUses.removeAll(c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  cfg.getLastChild());  reachingUses.removeAll(c);	  new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses.removeAll(c);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
381	[BUG]  [BUGGY]  Pentru(Candidate  c  :  candidates)  {  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  Pentru(Candidate  c  :  candidates)  {  reachingUses.analyze();  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	Pentru(Candidate  c  :  candidates)  {  reachingUses.analyze();  }	  if(c.canInline())    {    for(Candidate    c    :    candidates)    {    reachingUses.analyze();    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
382	[BUG]  [BUGGY]  Pentru(Candidate  c  :  candidates)  {  if(c.canInline())  {  c.inlineVariable();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  Pentru(Candidate  c  :  candidates)  {  if(c.canInline())  {  c.inlineVariable();  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	Pentru(Candidate  c  :  candidates)  {  if(c.canInline())  {  c.inlineVariable();  }	  if(c.canInline())    {    for(Candidate    c    :    candidates)    {    reachingUses.analyze();    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
383	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.inlineChildren())  {  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.inlineChildren())  {  reachingUses.analyze();  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  c.inlineChildren())  {  reachingUses.analyze();  }	  if(c.canInline())    {    for(Candidate    c    :    candidates)    {    reachingUses.analyze();    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
384	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.removeChildren())  {  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.removeChildren())  {  reachingUses.analyze();  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  c.removeChildren())  {  reachingUses.analyze();  }	  if(c.canInline())    {    for(Candidate    c    :    candidates)    {    reachingUses.analyze();    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
385	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.inlineFunctions)  {  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.inlineFunctions)  {  reachingUses.analyze();  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  c.inlineFunctions)  {  reachingUses.analyze();  }	  if(c.canInline())    {    for(Candidate    c    :    candidates)    {    reachingUses.analyze();    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
386	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  ReachCandiates()).traverse(t.getScopeRoot(),  c.getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  new  ReachCandiates()).traverse(t.getScopeRoot(),  c.getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  ReachCandiates()).traverse(t.getScopeRoot(),  c.getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope	  new    NodeTraversal(compiler,    new    ReachCandiates()).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
387	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(cfg.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(cfg.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(cfg.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope	  new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
388	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.canInlineChildren())  {  reachingUses.addChildToFront(c);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.canInlineChildren())  {  reachingUses.addChildToFront(c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  c.canInlineChildren())  {  reachingUses.addChildToFront(c);  }	  if(c.canInline())    {    for(Candidate    c    :    candidates)    {    reachingUses.addChildToFront(c);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
389	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.canInlinePath())  {  reachingUses.addChildToFront(c);  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.canInlinePath())  {  reachingUses.addChildToFront(c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  c.canInlinePath())  {  reachingUses.addChildToFront(c);  }	  if(c.canInline())    {    for(Candidate    c    :    candidates)    {    reachingUses.addChildToFront(c);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
390	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  cfg.getCurrentScope())  {  reachingUses.addChildToFront(c);  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  cfg.getCurrentScope())  {  reachingUses.addChildToFront(c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  cfg.getCurrentScope())  {  reachingUses.addChildToFront(c);  }	  if(c.canInline())    {    for(Candidate    c    :    candidates)    {    reachingUses.addChildToFront(c);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
391	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.canInlinePrettyPrinter())  {  reachingUses.addChildToFront(c);  }  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.canInlinePrettyPrinter())  {  reachingUses.addChildToFront(c);  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  c.canInlinePrettyPrinter())  {  reachingUses.addChildToFront(c);  }	  if(c.canInline())    {    for(Candidate    c    :    candidates)    {    reachingUses.addChildToFront(c);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
392	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  c);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  c);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
393	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()	  new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getFirstChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
394	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getCurrentNode().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  t.getCurrentNode().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  t.getCurrentNode().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()	  NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
395	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  n.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  n.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()	  NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
396	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  arrivingUses).traverse(t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  arrivingUses).traverse(t.getScopeRoot().getLastChild());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  cfg,  arrivingUses).traverse(t.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
397	[BUG]  [BUGGY]  StartingTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses.addAll(c);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  StartingTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses.addAll(c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	StartingTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses.addAll(c);	  if(    reachingUses!=    null)    {    new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses.addAll(c);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
398	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses,  t.getScopeRoot().getLastChild());  reachingUses.addAll(c);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses,  t.getScopeRoot().getLastChild());  reachingUses.addAll(c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  reachingUses,  t.getScopeRoot().getLastChild());  reachingUses.addAll(c);	  if(    reachingUses!=    null)    {    new    NodeTraversal(compiler,    reachingUses).traverse(    t.getScopeRoot().getLastChild());    reachingUses.addAll(c);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
399	[BUG]  [BUGGY]  leadingUses.add(c.getVarName());  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  leadingUses.add(c.getVarName());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	leadingUses.add(c.getVarName());	  if(c.canInline())    {    for(Candidate    c    :    c.getVars())    {    reachingUses.add(c.getVarName());    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
400	[BUG]  [BUGGY]  catchingUses.add(c.getVarName());  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  catchingUses.add(c.getVarName());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	catchingUses.add(c.getVarName());	  if(c.canInline())    {    for(Candidate    c    :    c.getVars())    {    reachingUses.add(c.getVarName());    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
401	[BUG]  [BUGGY]  reachingUses.add(c.getVarName());  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  reachingUses.add(c.getVarName());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	reachingUses.add(c.getVarName());	  if(c.canInline())    {    for(Candidate    c    :    c.getVars())    {    reachingUses.add(c.getVarName());    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
402	[BUG]  [BUGGY]  rmândrmând(c,  t.getScopeRoot())  {  reachingUses.add(c.getVarName());  }  [CE]  illegal  start  of  expression  [FE]                                            AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  rmândrmând(c,  t.getScopeRoot())  {  reachingUses.add(c.getVarName());  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	rmândrmând(c,  t.getScopeRoot())  {  reachingUses.add(c.getVarName());  }	  if(c.canInline())    {    for(Candidate    c    :    c.getVars())    {    reachingUses.add(c.getVarName());    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
403	[BUG]  [BUGGY]  rmândrmând(c,  t.getScopeRoot().getLastChild())  {  reachingUses.add(c.getVarName());  }  [CE]  illegal  start  of  expression  [FE]                                              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  rmândrmând(c,  t.getScopeRoot().getLastChild())  {  reachingUses.add(c.getVarName());  }  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	rmândrmând(c,  t.getScopeRoot().getLastChild())  {  reachingUses.add(c.getVarName());  }	  if(c.canInline())    {    for(Candidate    c    :    c.getVars())    {    reachingUses.add(c.getVarName());    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
404	[BUG]  [BUGGY]  reachingUses.addAll(t.getScopeRoot()).traverse(  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  reachingUses.addAll(t.getScopeRoot()).traverse(  t.getScopeRoot().getLastChild());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	reachingUses.addAll(t.getScopeRoot()).traverse(  t.getScopeRoot().getLastChild());	  final    NodeTraversal.traverse(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses.addAll(c);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
405	[BUG]  [BUGGY]  reachingUses.addAll(t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  reachingUses.addAll(t.getScopeRoot());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	reachingUses.addAll(t.getScopeRoot());	  final    NodeTraversal.traverse(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses.addAll(c);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
406	[BUG]  [BUGGY]  overcomingUses.addAll(c);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  overcomingUses.addAll(c);  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	overcomingUses.addAll(c);	  final    NodeTraversal.traverse(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses.addAll(c);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
407	[BUG]  [BUGGY]  reachingUses.addAll(t.getScopeRoot(),  t.getLastChild());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  reachingUses.addAll(t.getScopeRoot(),  t.getLastChild());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	reachingUses.addAll(t.getScopeRoot(),  t.getLastChild());	  final    NodeTraversal.traverse(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses.addAll(c);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
408	[BUG]  [BUGGY]  reachingUses.addAll(compiler,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }      [BUGGY]  reachingUses.addAll(compiler,  t.getScopeRoot().getLastChild());  [BUGGY]      }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	reachingUses.addAll(compiler,  t.getScopeRoot().getLastChild());	  final    NodeTraversal.traverse(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses.addAll(c);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
