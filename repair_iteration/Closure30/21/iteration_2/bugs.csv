bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  reachingUses.addAll(c);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  reachingUses.addAll(c);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	reachingUses.addAll(c);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses.addAll(c);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
2	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.addAll(c);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.addAll(c);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.addAll(c);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses.addAll(c);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
3	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  reachingUses.addAll(c);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  reachingUses.addAll(c);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  reachingUses.addAll(c);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses.addAll(c);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
4	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.addAll(c);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.addAll(c);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.addAll(c);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses.addAll(c);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
5	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  c);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  c);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  c);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
6	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(cfg,  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(cfg,  t.getScopeRoot().getFirstChild());  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(cfg,  t.getScopeRoot().getFirstChild());	  new    NodeTraversal(compiler,    reachingUses).traverse(cfg,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
7	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(cfg,  t.getScopeRoot().getLastChild(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(cfg,  t.getScopeRoot().getLastChild(),  reachingUses);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(cfg,  t.getScopeRoot().getLastChild(),  reachingUses);	  new    NodeTraversal(compiler,    reachingUses).traverse(cfg,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
8	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getFirstChild());  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getFirstChild());	  new    NodeTraversal(compiler,    reachingUses).traverse(c.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
9	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getLastChild(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getLastChild(),  reachingUses);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(c.getScopeRoot().getLastChild(),  reachingUses);	  new    NodeTraversal(compiler,    reachingUses).traverse(c.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
10	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  reachingUses);	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(c.getScopeRoot().getLastChild(),    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
11	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(c.getScopeRoot().getFirstChild(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(c.getScopeRoot().getFirstChild(),  reachingUses);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(c.getScopeRoot().getFirstChild(),  reachingUses);	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(c.getScopeRoot().getLastChild(),    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
12	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild(),  reachingUses);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild(),  reachingUses);	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(c.getScopeRoot().getLastChild(),    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
13	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(  t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(  t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(  t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
14	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  new  NodeTraversal(compiler,  reachingUses()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
15	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(c.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(c.getScopeRoot().getFirstChild());  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(c.getScopeRoot().getFirstChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(c.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
16	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(c.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
17	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(  t.getScopeRoot().getFirstChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(  t.getScopeRoot().getFirstChild());  reachingUses.analyze();  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(  t.getScopeRoot().getFirstChild());  reachingUses.analyze();	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
18	[BUG]  [BUGGY]  if(c.canInline())  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  if(c.canInline())  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  }	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
19	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
20	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  reachingUses.analyze();  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  reachingUses.analyze();	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
21	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  candidates)  {  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  candidates)  {  reachingUses.analyze();  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  candidates)  {  reachingUses.analyze();  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
22	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.getCurrentScopes())  {  reachingUses.add(c);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.getCurrentScopes())  {  reachingUses.add(c);  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  c.getCurrentScopes())  {  reachingUses.add(c);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
23	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.getCurrentScopes())  {  reachingUses.addChildToFront(c);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.getCurrentScopes())  {  reachingUses.addChildToFront(c);  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  c.getCurrentScopes())  {  reachingUses.addChildToFront(c);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
24	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.getCurrentScopes())  {  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.getCurrentScopes())  {  reachingUses.analyze();  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  c.getCurrentScopes())  {  reachingUses.analyze();  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
25	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  candidates)  {  reachingUses.addChildToFront(c);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  candidates)  {  reachingUses.addChildToFront(c);  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  candidates)  {  reachingUses.addChildToFront(c);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
26	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  candidates)  {  reachingUses.add(c.inlineVariable());  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  candidates)  {  reachingUses.add(c.inlineVariable());  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  candidates)  {  reachingUses.add(c.inlineVariable());  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
27	[BUG]  [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.getVars())  {  reachingUses.add(c.getVarName());  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  if(c.canInline())  {  for(Candidate  c  :  c.getVars())  {  reachingUses.add(c.getVarName());  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  for(Candidate  c  :  c.getVars())  {  reachingUses.add(c.getVarName());  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
28	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
29	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(  t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(  t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(  t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
30	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	final  NodeTraversal.traverse(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
31	[BUG]  [BUGGY]  if(c.canInline())  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  c.getScopeRoot().getLastChild());  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  if(c.canInline())  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  c.getScopeRoot().getLastChild());  reachingUses.analyze();  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  c.getScopeRoot().getLastChild());  reachingUses.analyze();  }	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(c.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
32	[BUG]  [BUGGY]  if(c.canInline())  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  if(c.canInline())  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses.analyze();  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses.analyze();  }	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(c.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
33	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getFirstChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getFirstChild());  reachingUses.analyze();  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getFirstChild());  reachingUses.analyze();	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(c.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
34	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(c.getScopeRoot().getLastChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(c.getScopeRoot().getLastChild());  reachingUses.analyze();  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(c.getScopeRoot().getLastChild());  reachingUses.analyze();	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(c.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
35	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
36	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild(),  reachingUses);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild(),  reachingUses);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild(),    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
37	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getNext(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getNext(),  reachingUses);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getNext(),  reachingUses);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild(),    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
38	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getfirstChild(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getfirstChild(),  reachingUses);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getfirstChild(),  reachingUses);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild(),    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
39	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getLastChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getLastChild());  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getLastChild());	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
40	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  ReachCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  new  NodeTraversal(compiler,  new  ReachCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  ReachCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
41	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
42	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
43	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope()	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
44	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses.analyze();  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses.analyze();	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
45	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getFirstChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getFirstChild());  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getFirstChild());	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
46	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild(),  c);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild(),  c);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getFirstChild(),  c);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
47	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  c.getScopeRoot().getFirstChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  c.getScopeRoot().getFirstChild());  reachingUses.analyze();  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  c.getScopeRoot().getFirstChild());  reachingUses.analyze();	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(c.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
48	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  cfg.getScopeRoot().getLastChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  cfg.getScopeRoot().getLastChild());  reachingUses.analyze();  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  cfg.getScopeRoot().getLastChild());  reachingUses.analyze();	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(c.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
49	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getLastChild(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getLastChild(),  reachingUses);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot(),  c.getLastChild(),  reachingUses);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild(),    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
50	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	final  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
51	[BUG]  [BUGGY]  if(c.canInline())  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  if(c.canInline())  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(c.canInline())  {  new  NodeTraversal(compiler,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
52	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
53	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.analyze();	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
54	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
55	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  cfg).traverse(t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  new  NodeTraversal(compiler,  cfg).traverse(t.getScopeRoot().getLastChild());  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  cfg).traverse(t.getScopeRoot().getLastChild());	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
56	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(  t.getScopeRoot().getLastChild());  reachingUses.removeAll(c);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(  t.getScopeRoot().getLastChild());  reachingUses.removeAll(c);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(  t.getScopeRoot().getLastChild());  reachingUses.removeAll(c);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses.addAll(c);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
57	[BUG]  [BUGGY]  if(  reachingUses!=  null)  {  new  NodeTraversal(compiler,  reachingUses).traverse(  t.getScopeRoot().getLastChild());  reachingUses.addAll(c);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  if(  reachingUses!=  null)  {  new  NodeTraversal(compiler,  reachingUses).traverse(  t.getScopeRoot().getLastChild());  reachingUses.addAll(c);  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(  reachingUses!=  null)  {  new  NodeTraversal(compiler,  reachingUses).traverse(  t.getScopeRoot().getLastChild());  reachingUses.addAll(c);  }	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses.addAll(c);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
58	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(cfg.getScopeRoot().getLastChild(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(cfg.getScopeRoot().getLastChild(),  reachingUses);  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(cfg.getScopeRoot().getLastChild(),  reachingUses);	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild(),    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
59	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(  t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(  t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(  t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
60	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
61	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope()    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
62	[BUG]  [BUGGY]  if(  reachingUses!=  null)  {  new  NodeTraversal(compiler,  reachingUses).traverse(  t.getScopeRoot().getLastChild());  reachingUses.analyze();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  if(  reachingUses!=  null)  {  new  NodeTraversal(compiler,  reachingUses).traverse(  t.getScopeRoot().getLastChild());  reachingUses.analyze();  }  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(  reachingUses!=  null)  {  new  NodeTraversal(compiler,  reachingUses).traverse(  t.getScopeRoot().getLastChild());  reachingUses.analyze();  }	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
63	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild()));  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild()));  reachingUses.analyze();  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild()));  reachingUses.analyze();	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.analyze();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
64	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(cfg.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  new  NodeTraversal(compiler,  reachingUses).traverse(cfg.getScopeRoot().getLastChild());  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	new  NodeTraversal(compiler,  reachingUses).traverse(cfg.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    reachingUses).traverse(c.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
65	[BUG]  [BUGGY]  if(  reachingUses!=  null)  {  new  NodeTraversal(compiler,  reachingUses).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();  }    [BUGGY]  if(  reachingUses!=  null)  {  new  NodeTraversal(compiler,  reachingUses).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.  [BUGGY]    }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  NodeTraversal  t  Node  c  def  defCfgNode  n  use  useCfgNode  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23791547571544325	149	149	3	replace	if(  reachingUses!=  null)  {  new  NodeTraversal(compiler,  reachingUses).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.	  new    NodeTraversal(compiler,    reachingUses).traverse(t.getScopeRoot().getLastChild());    reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
