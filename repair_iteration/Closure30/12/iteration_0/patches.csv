bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  true;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  [BUGGY]  return  true;  [BUGGY]  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	490	490	3	replace	return  true;	return  false;  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
2	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  [BUGGY]  if(cur.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	490	490	3	replace	if(cur.getType()  ==  Token.FUNCTION)  {  return  false;  }	return  false;  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
3	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.NAME)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  [BUGGY]  if(cur.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	490	490	3	replace	if(cur.getType()  ==  Token.NAME)  {  return  false;  }	return  false;  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
4	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  [BUGGY]  if(p.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	490	490	3	replace	if(p.getType()  ==  Token.FUNCTION)  {  return  false;  }	return  false;  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
5	[BUG]  [BUGGY]  if(p.getType()  ==  Token.NAME)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  [BUGGY]  if(p.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	490	490	3	replace	if(p.getType()  ==  Token.NAME)  {  return  false;  }	return  false;  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
6	[BUG]  [BUGGY]  if(cur.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError  [CONTEXT]  private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  [BUGGY]  if(cur.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	490	490	3	replace	if(cur.getType()  ==  Token.VAR)  {  return  false;  }	return  false;  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
7	[BUG]  [BUGGY]  else  if(cur.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError  [CONTEXT]  private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  [BUGGY]  else  if(cur.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	490	490	3	replace	else  if(cur.getType()  ==  Token.FUNCTION)  {  return  false;  }	return  false;  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
8	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError  [CONTEXT]  private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  [BUGGY]    [BUGGY]  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	490	490	3	replace	  	return  false;  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
9	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.GETPROP)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.GETPROP)  {  return  false;  }  [BUGGY]  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	490	490	3	replace	if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.GETPROP)  {  return  false;  }	return  false;  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
10	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.NAME)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.NAME)  {  return  false;  }  [BUGGY]  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	490	490	3	replace	if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.NAME)  {  return  false;  }	return  false;  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
11	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	490	490	3	replace	if(p.getType()  ==  Token.FUNCTION  ||  p.getType()  ==  Token.GETPROP)  {  return  false;  }	return  false;  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
12	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.VAR)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	490	490	3	replace	if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.VAR)  {  return  false;  }	return  false;  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
13	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.BLOCK)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.BLOCK)  {  return  false;  }  [BUGGY]  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	490	490	3	replace	if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.BLOCK)  {  return  false;  }	return  false;  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
14	[BUG]  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.NEW)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError  [CONTEXT]  private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  [BUGGY]  if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.NEW)  {  return  false;  }  [BUGGY]  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	490	490	3	replace	if(p.getType()  ==  Token.FUNCTION  ||  p.getType()!=  Token.NEW)  {  return  false;  }	return  false;  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
15	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	490	490	3	replace	return(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);	return  false;  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
16	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	490	490	3	replace	return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	return  false;  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
17	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	490	490	3	replace	return(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	return  false;  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
18	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);  [BUGGY]  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	490	490	3	replace	return(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);	return  false;  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
19	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	490	490	3	replace	return(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);	return  false;  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
20	[BUG]  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError  [CONTEXT]  private  static  boolean  checkLeftOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n.getParent();  p  !=  expressionRoot;  p  =  p.getParent())  {  for  (Node  cur  =  p.getParent().getFirstChild();  cur  !=  p;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  [BUGGY]  return(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [BUGGY]  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkLeftOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defCfgNode  defNode  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2705008904002297	490	490	3	replace	return(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);	return  false;  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
